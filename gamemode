////////////////////GAMEMODE ROLEPLAY////////////////////
#include <a_samp>
#include <sscanf2>
#include <core>
#include <float>
#include <time>
#include <file>
#include <Dini>
#include <streamer>
#include <a_mysql>
#include <Foreach>
#include <zcmd>
#include <audio>
#include <mSelection>
#include <YSI\y_ini>





#if defined IBPs

/* 
#define GAMEMODE	"Roleplay 0.1a"
#define GAMEMODE_USE_VERSION	"No"
#define SERVER_NAME	"West Side Roleplay [Update]"
#define WEBSITE	"Under Development"
*//*
#define MAP_NAME	"Los Santos"
#define PASSWORD	"1234"
*//*
#define HOST_ADDR   "127.0.0.1"
#define HOST_USER   "root"
#define HOST_DATA   "genrorp"
#define HOST_PASS   ""
*//*
#else

#define GAMEMODE	"Roleplay 0.1a"
#define GAMEMODE_USE_VERSION	"No"
#define SERVER_NAME	"West Side Roleplay"
#define WEBSITE	"Under Development"

#define MAP_NAME	"Los Santos"
#define PASSWORD	"" 
*/



#endif



// COLORS INCLUDE
/* Defines */
#define ERRORMESSAGE_COLOR 0xCECECEFF
#define COLOR_Arrested 0x2641FEAA
#define COLOR_LSPD 0x63AFF00A
#define COLOR_GOVERNMENT 0x8A2BE2AA
#define COLOR_CIVILIAN 0xFFFFFFFF
#define COLOR_BALLA 0x5F56F8AA
#define COLOR_ORANGE 0xFF8C00AA
#define COLOR_GROVE 0x33AA33AA
#define COLOR_BIKER 0xAA3333AA
#define COLOR_LOCALMSG 0xEC5413AA
#define COLOR_ADMINCMD 0xFFFFFFAA
#define COLOR_ADMINDUTY 0x990000
#define COLOR_TESTERDUTY 0x33AA33AA
#define COLOR_NOTLOGGED 0x00000000
#define COLOR_BLACK 0x212121AA
#define COLOR_WHITE 0xFFFFFFAA
#define WHITE 0xFFFFFFAA
#define COLOR_GREY 0xBFC0C2FF
#define COLOR_PURPLE 0xC2A2DAAA
#define GREEN 0x21DD00FF
#define RED 0xE60000FF
#define ADMIN_RED 0xFB0000FF
#define YELLOW 0xFFFF00FF
#define ORANGE 0xF97804FF
#define LIGHTRED 0xFF8080FF
#define LIGHTBLUE 0x00C2ECFF
#define PURPLE 0xB360FDFF
#define PLAYER_COLOR 0xFFFFFFFF
#define BLUE 0x1229FAFF
#define LIGHTGREEN 0x38FF06FF
#define DARKPINK 0xE100E1FF
#define DARKGREEN 0x008040FF
#define ANNOUNCEMENT 0x6AF7E1FF
#define COLOR_SYSTEM 0xEFEFF7AA
#define GRAY 0xCECECEFF
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_RED 0xA10000AA
#define COLOR_GRAD 0xB4B5B7FF
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_DARKRED 0x9D000096
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_SYSTEM 0xEFEFF7AA
#define COLOR_DARKBLUE 0x0000FFAA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_MEDIC 0x33FF33AA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_DRUG 0xC41E3AAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_NEWS 0x00DE00AA
#define COLOR_NEWOOC 0x804000FF
#define COLOR_BROWN 0xB36C42FF
#define COLOR_MIC 0x8BE668AA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_RADIO 0xFDE39DAA
#define COLOR_STATS1 0xFFFF00AA
#define COLOR_STATS2 0xFFFF00AA
#define COLOR_PMOUT 0xF6EA51AA
#define COLOR_PMIN 0xF6D600AA
#define COLOR_OOCNEW 0xB1C8FBAA
#define COLOR_LSPDNEW 0x9189EFFF
#define COLOR_ADGREEN 0x00E100FF
#define COLOR_INFO 0xffec8baa

// Other Defines
#define INV_DIALOG_ID 13337
#define MAX_ITEMS 10
#define MAX_ITEM_STACK 99
#define MAX_ITEM_NAME 128
#define PICKUP_RANGE 5
#define MAX_S_PICKUPS 400
#define MAX_ZONE_NAME 28
#define MAX_SPAWN_ATTEMPTS 4
#define IBPCARS 190
#define MAX_HOUSES 400
#define MAX_GARAGES 50
#define SMS_PRICE 2
#define PRODUCT_PRICE 9
#define MAT_PRICE 1
#define HITMAN 10
#define MAXLEN 80
#define MPH 0.61
#define MAX_RANK_NAME 24
#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))
#define SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define IsNull(%1) \
((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))
#define AGEMENU 1338
#define SEXMENU 1337
#define RACEMENU 1336
#define LOCATIONMENU 1335
#define Loop(%0,%1) \
        for(new %0; %0 != %1; %0++)
#define GEAR_KEY KEY_SUBMISSION // You can change this to what you want.

#define MAX_BODY_PARTS
#define MAX_WEAPONS

// ADMINISTRATION LEVELS
#define ADMINLEVEL_MODERATOR 1
#define ADMINLEVEL_ADMIN 2
#define ADMINLEVEL_LEAD 3
#define ADMINLEVEL_HEAD 4

//VEHICLE DATA INCLUDES

/*

Mexicanu's Work 2015

*/
#if defined _M_VEHDATA_INC
	#endinput
#endif
#define _M_VEHDATA_INC

#define CARPART_PANELS 				(0)
#define CARPART_DOORS 				(1)
#define CARPART_LIGHTS 				(2)
#define CARPART_TIRES 				(3)

#define PANEL_FRONTLEFT				(0)
#define PANEL_FRONTRIGHT			(1)
#define PANEL_REARLEFT				(2)
#define PANEL_REARRIGHT				(3)
#define PANEL_WINDSHIELD			(4)
#define PANEL_FRONT_BUMPER			(5)
#define PANEL_REAR_BUMPER			(6)
#define PANEL_STATUS_FINE			(0)
#define PANEL_STATUS_DAMAGED		(1)
#define PANEL_STATUS_HANGING		(2)
#define PANEL_STATUS_NONE			(3)

#define DOOR_BONNET					(0)
#define DOOR_TRUNK					(1)
#define DOOR_DRIVER					(2)
#define DOOR_PASSENGER				(3)
#define DOOR_STATUS_FINE 			(0)
#define DOOR_STATUS_OPEN 			(1)
#define DOOR_STATUS_DAMAGED 		(2)
#define DOOR_STATUS_OPEN_DAMAGED 	(3)
#define DOOR_STATUS_NONE			(4)

#define LIGHT_REARRIGHT				(0)
#define LIGHT_FRONTRIGHT			(1)
#define LIGHT_REARLEFT				(2)
#define LIGHT_FRONTLEFT				(3)

#define TIRE_REARRIGHT				(0)
#define TIRE_FRONTRIGHT				(1)
#define TIRE_REARLEFT				(2)
#define TIRE_FRONTLEFT				(3)
#define TIRE_BIKE_REAR				(0)
#define TIRE_BIKE_FRONT				(1)
#define TIRE_STATUS_FINE			(0)
#define TIRE_STATUS_FLAT			(1)

#define LIGHT_1						(0)
#define LIGHT_2						(1)
#define LIGHT_3						(2)
#define LIGHT_4						(3)
#define LIGHT_STATUS_FINE			(0)
#define LIGHT_STATUS_NONE			(1)
/*********************************
 * GetPanelStatus
 * Params: vehicleid, panelid
 * Return: Status of panel specified.
*********************************/
stock GetPanelStatus(vehicleid,panelid)
	return (_M_VEHDATA_GVFD(vehicleid,CARPART_PANELS) >> panelid * 4) & 0xf;
/*********************************
 * GetDoorStatus
 * Params: vehicleid, doorid
 * Return: Status of door specified.
*********************************/
stock GetDoorStatus(vehicleid,doorid)
	return (_M_VEHDATA_GVFD(vehicleid,CARPART_DOORS) >> doorid * 8) & 0xf;
/*********************************
 * IsDoorOpen
 * Params: vehicleid, doorid
 * Return: 1 if the door is hanging, 0 if it's not. Also returns 0 if the door fell off.
*********************************/
stock IsDoorOpen(vehicleid,doorid)
	return (_M_VEHDATA_GVFD(vehicleid,CARPART_DOORS) >> doorid * 8) & 1;
/*********************************
 * IsDoorDamaged
 * Params: vehicleid, doorid
 * Return: 1 if the door is smashed/wrecked, 0 if it's not. Also returns 0 if the door fell off.
*********************************/
stock IsDoorDamaged(vehicleid,doorid)
	return (_M_VEHDATA_GVFD(vehicleid,CARPART_DOORS) >> doorid * 8 + 1) & 1;
/*********************************
 * IsDoorAttached
 * Params: vehicleid, doorid
 * Return: Returns 1 if the door is still on the vehicle, 0 if it fell off.
*********************************/
stock IsDoorAttached(vehicleid,doorid)
	return !(_M_VEHDATA_GVFD(vehicleid,CARPART_DOORS) >> doorid * 8 + 2) & 1;
/*********************************
 * GetTireStatus
 * Params: vehicleid, tireid
 * Return: 1 if the tire's flat, 0 if it's okay.
*********************************/
stock GetTireStatus(vehicleid,tireid)
	return (_M_VEHDATA_GVFD(vehicleid,CARPART_TIRES) >> tireid) & 1;
/*********************************
 * GetLightStatus
 * Params: vehicleid, lightid
 * Return: 0 if the light is able to shine (not damaged), 1 if not.
*********************************/
stock GetLightStatus(vehicleid,lightid)
	return (_M_VEHDATA_GVFD(vehicleid,CARPART_LIGHTS) >> lightid) & 1;
/*********************************
 * HasFlatTire
 * Params: vehicleid
 * Return: 1 if vehicle has one or more flat tires, 0 if any.
*********************************/
stock HasFlatTire(vehicleid)
	return _M_VEHDATA_GVFD(vehicleid,CARPART_TIRES) ? 1 : 0;
/*********************************
 * _M_VEHDATA_GVFD
 * Params: vehicleid, carpart
 * Return: Inner function for returning raw status values.
*********************************/
stock _M_VEHDATA_GVFD(vehicleid,carpart)
{
	new cardata[4];
	GetVehicleDamageStatus(vehicleid,cardata[0],cardata[1],cardata[2],cardata[3]);
	return cardata[carpart];
}
///////////////////////////////

main()
{
	print("Mapped & developed by Mexicanu");
	return 1;
}

//////////////////////////////
// VEHICLE DATA INCLUDES

enum pInfo
{
	pKey[128],
	pDatabaseID,
	pLevel,
	pBan,
	pAdministrator,
	pTut,
	pSex,
	pLocation[128],
	pAge,
	pExp,
	pCoins,
	pCash,
	pBank,
	pMoneyconvert,
	pSavings,
	pSkin,
	pCarKey,
	pCarKey2,
	pDupeKey,
	pDemerits,
	pCrimes,
	pDeaths,
	pArrested,
	pOOC[128],
	pMetagame[128],
	pRevenge[128],
	pRoleplay[128],
	pPowergame[128],
	pQuest1[128],
	pQuest2[128],
	pQuest3[128],
	pQuest4[128],
	pQuest5[128],
	pSeeds,
	pWeed,
	pBMX,
	pMaterials,
	pConvertMats,
	pProducts,
	pJob,
	pDragged,
 	pDraggedBy,
 	pDragTimer,
	pRace[128],
	pCanJob,
	pFuel,
	pParkpass,
	pPickupTime,
	pFish,
	pToolkit,
	pHeroin,
	pCrashed,
	pContractTime,
	pPlayingHours,
	pPayCheck,
	pCarCredit,
	pFaction,
	pRank,
	pHouseKey,
	pGarageKey,
	pBizKey,
	pApartmentKey,
	pBvision,
	pWorkOn,
	pSpawnPoint,
	pCarLic,
	pFlyLic,
	pWepLic,
	pLifeLic,
	pPhoneNumber,
	pListNumber,
	pInCall,
	pDonator,
	pTester,
	pDeveloper,
	pJailed,
	pCell,
	pJailTime,
	pHeadValue,
	pHospital,
	pGunPD,
	pRequestingBackup,
	pRoadblock,
	pRoadblock2,
	pRoadblock3,
	pRoadblock4,
	pRoadblock5,
	pRoadblock6,
	pRoadblock7,
	pRoadblock8,
	pMask,
	pMaskuse,
	pMaskID,
	pConName1[64],
	pConNum1,
	pConName2[64],
	pConNum2,
	// Notes
	pNote1[128],
	pNote1s,
	pNote2[128],
	pNote2s,
	pNote3[128],
	pNote3s,
	pNote4[128],
	pNote4s,
	pNote5[128],
	pNote5s,
	Float:pLoadPosX,
	Float:pLoadPosY,
	Float:pLoadPosZ,
	Float:TruckDelivX,
	Float:TruckDelivY,
	Float:TruckDelivZ,
	Float:MusicX,
	Float:MusicY,
	Float:MusicZ,
	pRadio,
	Checkpoint,
	pLoadPosInt,
	pLoadPosW,
	pLoadPos,
	pLighter,
	pCigarettes,
	pSpeaker,
	pBadgeNumber,
	pRfreq,
	pWalk,
	pTalk,
	pFight,
	pSocial,
	p9mm,
	pSpas12,
	pMolotov,
	pGrenade,
	pEagle,
	pSilenced,
	pKnife,
	pStick,
	pSpray,
	pShotgun,
	pMP5,
	pAK,
	pTec9,
	pUzi,
	Float:pArmour,
	pGotArmour,
	pRPG,
	pHRPG,
	pMinigun,
	pRifle,
	pShovel,
	pCane,
	pBaseball,
	pM4,
	pCountryRifle,
	pSniper,
 	pParachute,
 	pWanted[128],
 	pCamera,
	pCartela,
	pFunie,
	pBLS,
	pSawn,
	pFlame,
	pFairMoney,
	pGun1,
	pGun2,
	pGun3,
	pGun4,
	pGun5,
	pGun6,
	pGun7,
	pGun8,
	pGun9,
	pGun10,
	pGun11,
	pGun12,
	pAmmo1,
	pAmmo2,
	pAmmo3,
	pAmmo4,
	pAmmo5,
	pAmmo6,
	pAmmo7,
	pAmmo8,
	pAmmo9,
	pAmmo10,
	pAmmo11,
	pAmmo12,
	pAmmo[13],
	pWeapons[13],
	pHackWarns,
	pPermissionGundeal,
	pRefueling,
	pPainting,
	pDeath,
    pJacking,
    pJackingtrunk,
    pJackingtrunkID,
    pJackingDoor,
    pJackingDoorID,
	// Drug thingies underneath this
	pSick,
	pNeedle,
	pAmphetamine,
	pCocaine,
	pPill,
	pEcstasy,
	Float:pWeedX,
	Float:pWeedY,
	Float:pWeedZ,
	pWeedTimer,
    pPlant,
    pPaydayTime,
	StonedEffect,
    // Package
    pPack1,
    pPack1a,
    pPack2,
    pPack2a,
    pPack3,
    pPack3a,
	pPack4,
	pPack4a,
	pPack5,
	pPack5a,
	// GReet
	PendingHandshake,
	PendingHandshakeStyle,
	// clip
	pMainClips,
	// Casino
	pCasino,
	pTurn1,
	pTurn2,
	pTurn3,
	// lol
	pLastEquipped,
	pReload,
	// LOL
	pSunglass,
	pBandana,
	pItem,
	// Gear system
	PowerGear,
	Gear,
	// Mail
	CarBill,
	HouseBill,
	BusinessBill,
	NormalMail,
	pReport, // Has the player reported anything
	pQuestion, // Has the player asked anything
	pRadioHandle, // Radio handle
	pNameLocked,
	pForumName[256],
	pBoombox,
	pWatch,
	pGuitar,
	pHouseLights,
	pHelmet,
	pHat,
	pMaskobject,
	pGlasses,
	pHeadphone,
	pLaser,
	pImprumut,
	pHair,
	pAccent[128],
};
new PlayerInfo[MAX_PLAYERS][pInfo];



enum GarageSystem
{
	Owner[MAX_PLAYER_NAME],
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	EnterWorld,
	EnterInterior,
	Float:EnterAngle,
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	ExitInterior,
	Float:ExitAngle,
	Owned,
	Dynamic,
	Price,
	Locked,
};
new Garages[50][GarageSystem];

enum pVeh
{
	pVeh1[512],
	pVeh2[512],
	pVeh3[512],
	pVeh4[512],
	pVeh5[512],
}
new PlayerVehicle[MAX_PLAYERS][pVeh];



#define MAX_SPIKESTRIPS 200

enum sInfo
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new SpikeInfo[MAX_SPIKESTRIPS][sInfo];

enum vInfo
{
	vModel,
	Float:vX,
	Float:vY,
	Float:vZ,
	Float:vAngle,
	vColorOne,
	vColorTwo,
	vOwner[MAX_PLAYER_NAME],
	vDescription[128],
	vMySQLID,
	vOwned,
	vLock,
	vLockBuyed,
	vAlarm,
	vImmob,
	vGPS,
	vComponent0,
	vComponent1,
	vComponent2,
	vComponent3,
	vComponent4,
	vComponent5,
	vComponent6,
	vComponent7,
	vComponent8,
	vComponent9,
	vComponent10,
	vComponent11,
	vComponent12,
	vComponent13,
	vPaintJob,
	vKey,
	vInsurances,
	vMaxInsurances,
	vDestroys,
	vPlate[128],
	vTrunk1,
	vTrunka1,
	vTrunk2,
	vTrunka2,
	vTrunk3,
	vTrunka3,
	vTrunk4,
	vTrunka4,
	// Packages
	vPackage1,
	vPackage1a,
	vPackage2,
	vPackage2a,
	vPackage3,
	vPackage3a,
	vPackage4,
	vPackage4a,
	vPackage5,
	vPackage5a,
	vPackage6,
	vPackage6a,
	vPackage7,
	vPackage7a,
	vPackage8,
	vPackage8a,
	vPackage9,
	vPackage9a,
	vPackage10,
	vPackage10a,
	// Credit
	vCredit,
	// Ticket
	vTicket,
	// Lock
	vTrunkLock,
	//Float:Speed,
	vNeon,
	vNeon2,
	vGear,
	vSiren,
	vBalot1,
	vBalot2,
	vHealth,
	vWorld,
	vPanels,
	vDoors,
	vLights,
	vTires,
	vImpound,
	vKilometri,
	vSasiu,
	vSasiu2,
	vVerify,
	vVer1,
	vVer2,
	vVer3,
	vRadiom,
	vEngineLife,
	vVerifyBy,
	vGeam,
	vSirenOn
};
new VehicleInfo[MAX_VEHICLES][vInfo];

enum baInfo
{
	bPin,
	bCard,
	bCreat,
	bAccount,
	bFreezed,
	bPayCheck,
};
new BancaInfo[MAX_PLAYERS][baInfo];

enum druggy
{
	Ammount,
};

enum vehicleRadio
{
	vChannel[64],
	vVolume,
}

new vRadio[MAX_VEHICLES][vehicleRadio];

new DrugFarm[druggy];

enum Farm
{
	Ammount,
};
new FlintFarm[Farm];


enum Cars
{
	CarModel,
	Float:CarX,
	Float:CarY,
	Float:CarZ,
	Float:CarAngle,
	CarColor1,
	CarColor2,
	FactionCar,
	CarType,
	cDescription[128],
	Insurances,
	cSQLId,
};
new DynamicCars[IBPCARS+1][Cars]; // +1 does so it wont bug :) keep it there.

enum Factions
{
	fName[50],
	Float:fX,
	Float:fY,
	Float:fZ,
	fBank,
	fRank1[35],
	fRank2[35],
	fRank3[35],
	fRank4[35],
	fRank5[35],
	fRank6[35],
	fRank7[35],
	fRank8[35],
	fRank9[35],
	fRank10[35],
	fRank11[35],
	fRank12[35],
	fRank13[35],
	fRank14[35],
	fRank15[35],
	fRank16[35],
	fRank17[35],
	fRank18[35],
	fRank19[35],
	fRank20[35],
	fJoinRank,
	fType,
	fRankAmount,
	fChatON,
	fMotd,
};
new DynamicFactions[13][Factions];

enum Badges
{
	DriveFast,
	FirstCar,
	JoinOfficialFaction,
	FirstHouse,
	FirstSmoke,
	GreetJohn,
	DieOneTime,
	DieTwentyTimes,
};
new PlayerBadges[MAX_PLAYERS][Badges];

enum FactionMaterials
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
	PickupID,
};
new FactionMaterialsStorage[FactionMaterials];

enum FactionDrugs
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
	PickupID,
};
new FactionDrugsStorage[FactionDrugs];

enum DrivingTestLocation
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
	PickupID,
};
new DrivingTestPosition[DrivingTestLocation];

enum BankLocation
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
	PickupID,
};
new BankPosition[BankLocation];

enum ProductsSellerJobInfo
{
	Float:TakeJobX,
	Float:TakeJobY,
	Float:TakeJobZ,
	TakeJobWorld,
	TakeJobInterior,
	Float:TakeJobAngle,
	TakeJobPickupID,
 	Float:BuyProductsX,
	Float:BuyProductsY,
	Float:BuyProductsZ,
	BuyProductsWorld,
	BuyProductsInterior,
	Float:BuyProductsAngle,
	BuyProductsPickupID,
};
new ProductsSellerJob[ProductsSellerJobInfo];

enum DrugJobInfo
{
	Float:TakeJobX,
	Float:TakeJobY,
	Float:TakeJobZ,
	TakeJobWorld,
	TakeJobInterior,
	Float:TakeJobAngle,
	TakeJobPickupID,
 	Float:BuyDrugsX,
	Float:BuyDrugsY,
	Float:BuyDrugsZ,
	BuyDrugsWorld,
	BuyDrugsInterior,
	Float:BuyDrugsAngle,
	BuyDrugsPickupID,
  	Float:DeliverX,
	Float:DeliverY,
	Float:DeliverZ,
	DeliverWorld,
	DeliverInterior,
	Float:DeliverAngle,
	DeliverPickupID,
};
new DrugJob[DrugJobInfo];

enum PoliceArrestLocation
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
};
new PoliceArrestPosition[PoliceArrestLocation];

enum GovernmentArrestLocation
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
};
new GovernmentArrestPosition[GovernmentArrestLocation];

enum PoliceDutyLocation
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
};
new PoliceDutyPosition[PoliceDutyLocation];

enum MedicDutyLocation
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
};
new MedicDutyPosition[MedicDutyLocation];

enum GuardDutyLocation
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
};
new GuardDutyPosition[GuardDutyLocation];

enum ArmsDealerJobLocation
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
	PickupID,
};
new ArmsDealerJob[ArmsDealerJobLocation];

enum PrisonJobLocation
{
	Float:X,
	Float:Y,
	Float:Z,
	World,
	Interior,
	Float:Angle,
	PickupID,
};
new PrisonJobPosition[PrisonJobLocation];

enum BuildingSystem
{
	BuildingName[128],
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	EnterWorld,
	EnterInterior,
	Float:EnterAngle,
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	ExitInterior,
	Float:ExitAngle,
	Locked,
	PickupID,
	Custom,
};
new Building[15][BuildingSystem];

enum ApartmentSystem
{
	ApartmentName[128],
    Owner[MAX_PLAYER_NAME],
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	Rentfee,
	EnterWorld,
	EnterInterior,
	Float:EnterAngle,
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	ExitInterior,
	Float:ExitAngle,
	Owned,
	Price,
	PickupID,
};
new Apartment[2][ApartmentSystem];


enum StoreSystem
{
	StoreName[128],
    Owner[MAX_PLAYER_NAME],
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	EnterWorld,
	EnterInterior,
	Float:EnterAngle,
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	ExitInterior,
	Float:ExitAngle,
	Owned,
	Products,
	Till,
	Locked,
	Price,
	PickupID,
};
new FactionStore[2][StoreSystem];

enum BusinessSystem
{
	BusinessName[128],
	Owner[MAX_PLAYER_NAME],
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	EnterWorld,
	EnterInterior,
	Float:EnterAngle,
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	ExitInterior,
	Float:ExitAngle,
	Owned,
	Enterable,
	BizPrice,
	EntranceCost,
	Till,
	Locked,
	BizType,
	Products,
	PickupID,
	Custom,
}
new Businesses[50][BusinessSystem];

enum GunSystem
{
	SmuggleGun1,
	SmuggleGun1a,
	SmuggleGun2,
	SmuggleGun2a,
	SmuggleGun3,
	SmuggleGun3a,
	SmuggleGun4,
	SmuggleGun4a,
	SmuggleGun5,
	SmuggleGun5a,
};
new Gunsystemer[GunSystem];

enum HouseSystem
{
	Owner[MAX_PLAYER_NAME],
	Float:EnterX,
	Float:EnterY,
	Float:EnterZ,
	EnterWorld,
	EnterInterior,
	Float:EnterAngle,
	Float:ExitX,
	Float:ExitY,
	Float:ExitZ,
	ExitInterior,
	Float:ExitAngle,
	Owned,
	Rentable,
	RentCost,
	HousePrice,
	Materials,
	Drugs,
	Money,
	Locked,
	hBox,
	hAlarm,
	hRadio,
	hCloset,
	hClosetSkin,
	hFridge,
	hGun1,
	hGunAmmo1,
	hGun2,
	hGunAmmo2,
	hGun3,
	hGunAmmo3,
	hAmphetamine,
	hSpeed,
	hWeed,
	hCocaine,
	hEsctasy,
	PickupID,
	Float:RadioX,
	Float:RadioY,
	Float:RadioZ,
	StashCode,
	StashLock,
	HouseWarns,
	Dynamic,
        Lumina
};
new Houses[400][HouseSystem];

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hTaken6,
	hTaken7,
	hTaken8,
	hTaken9,
	hTaken10,
	hTaken11,
	hTaken12,
	hTaken13,
	hTaken14,
	hTaken15,
	hTaken16,
	hTaken17,
	hTaken18,
	hTaken19,
	hTaken20,
	hTaken21,
	hAdd1[128],
	hAdd2[128],
	hAdd3[128],
	hAdd4[128],
	hAdd5[128],
	hAdd6[128],
	hAdd7[128],
	hAdd8[128],
	hAdd9[128],
	hAdd10[128],
	hAdd11[128],
	hAdd12[128],
	hAdd13[128],
	hAdd14[128],
	hAdd15[128],
	hAdd16[128],
	hAdd17[128],
	hAdd18[128],
	hAdd19[128],
	hAdd20[128],
	hAdd21[128],
	hContact1[128],
	hContact2[128],
	hContact3[128],
	hContact4[128],
	hContact5[128],
	hContact6[128],
	hContact7[128],
	hContact8[128],
	hContact9[128],
	hContact10[128],
	hContact11[128],
	hContact12[128],
	hContact13[128],
	hContact14[128],
	hContact15[128],
	hContact16[128],
	hContact17[128],
	hContact18[128],
	hContact19[128],
	hContact20[128],
	hContact21[128],
};
new News[hNews];

enum pickupINFO
{
	pickupCreated,
	pickupVisible,
	pickupID,
	pickupRange,
	Float:pickupX,
	Float:pickupY,
	Float:pickupZ,
 	pickupType,
	pickupModel
}
new Pickup[MAX_S_PICKUPS+1][pickupINFO];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];

new VehicleNames[212][] = {
   "Landstalker",  "Bravura",  "Buffalo", "Linerunner", "Perennial", "Sentinel",
   "Dumper",  "Firetruck" ,  "Trashmaster" ,  "Stretch",  "Manana",  "Infernus",
   "Voodoo", "Pony",  "Mule", "Cheetah", "Ambulance",  "Leviathan",  "Moonbeam",
   "Esperanto", "Taxi",  "Washington",  "Bobcat",  "Mr Whoopee", "BF Injection",
   "Hunter", "Premier",  "Enforcer",  "Securicar", "Banshee", "Predator", "Bus",
   "Rhino",  "Barracks",  "Hotknife",  "Trailer",  "Previon", "Coach", "Cabbie",
   "Stallion", "Rumpo", "RC Bandit",  "Romero", "Packer", "Monster",  "Admiral",
   "Squalo", "Seasparrow", "Pizza Scooter", "Tram", "Trailer",  "Turismo", "Speeder",
   "Reefer", "Tropic", "Flatbed","Yankee", "Caddy", "Solair","Berkley's RC Van",
   "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron","RC Raider","Glendale",
   "Oceanic", "Sanchez", "Sparrow",  "Patriot", "Quad",  "Coastguard", "Dinghy",
   "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",  "Regina",  "Comet", "BMX",
   "Burrito", "Camper", "Marquis", "Baggage", "Dozer","Maverick","News Chopper",
   "Rancher", "FBI Rancher", "Virgo", "Greenwood","Jetmax","Hotring","Sandking",
   "Blista Compact", "Police Maverick", "Boxville", "Benson","Mesa","RC Goblin",
   "Hotring Racer", "Hotring Racer", "Bloodring Banger", "Rancher",  "Super GT",
   "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropdust", "Stunt",
   "Tanker", "RoadTrain", "Nebula", "Majestic", "Buccaneer", "Shamal",  "Hydra",
   "FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck","Fortune","Cadrona",
   "FBI Truck", "Willard", "Forklift","Tractor","Combine","Feltzer","Remington",
   "Slamvan", "Blade", "Freight", "Streak","Vortex","Vincent","Bullet","Clover",
   "Sadler",  "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob",  "Tampa",
   "Sunrise", "Merit",  "Utility Truck",  "Nevada", "Yosemite", "Windsor",  "Monster",
   "Monster","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RCTiger",
   "Flash","Tahoma","Savanna", "Bandito", "Freight", "Trailer", "Kart", "Mower",
   "Dune", "Sweeper", "Broadway", "Tornado", "AT-400",  "DFT-30", "Huntley",
   "Stafford", "BF-400", "Newsvan","Tug","Trailer","Emperor","Wayfarer","Euros",
   "Hotdog", "Club", "Trailer", "Trailer","Andromada","Dodo","RC Cam", "Launch",
   "Cruiser", "Cruiser","Cruiser","Police Ranger",
   "Picador",   "S.W.A.T. Van",  "Alpha",   "Phoenix",   "Glendale",   "Sadler",
   "Luggage Trailer","Luggage Trailer","Stair Trailer", "Boxville", "Farm Plow",
   "Utility Trailer"
};





new Damage[MAX_PLAYERS][MAX_WEAPONS][MAX_BODY_PARTS];


// News

new VCP[MAX_PLAYERS];
new pColor[MAX_PLAYERS];
new Jackpot[MAX_PLAYERS];
new pColorS[MAX_PLAYERS];
new pColor2S[MAX_PLAYERS];
new pCar[MAX_PLAYERS];
new pToAccept[MAX_PLAYERS];
new vToAccept[MAX_PLAYERS];
new prToAccept[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new BlockingPM[MAX_PLAYERS];
new Wounded[MAX_PLAYERS];
new DeathWorld[MAX_PLAYERS];
new Float:DeathDest[MAX_PLAYERS][3];// Seatbelt andmask
new DeathInterior[MAX_PLAYERS];
new FakeMask[MAX_PLAYERS];
new Seatbelt[MAX_PLAYERS];
new IsJacking[MAX_PLAYERS];
new Hide[MAX_PLAYERS];
new ExplosionRadius = 15;
new C4[MAX_PLAYERS];
new Bomb[MAX_PLAYERS];
new Planted[MAX_PLAYERS];
new Text:Meter1[MAX_PLAYERS];
new Text:Meter2[MAX_PLAYERS];
new FarmerPickup[MAX_PLAYERS][2];
new TruckerPickup[MAX_PLAYERS][2];
new FarmerVar[MAX_PLAYERS];
new TruckDelivering[MAX_PLAYERS];
new JustStarted[MAX_PLAYERS];
new Text:Meter3[MAX_PLAYERS];
new UpdateMeterTimer[MAX_PLAYERS];
new Text:CarInfo[MAX_PLAYERS];
new ShowHud[MAX_PLAYERS];
new ShowJailTimer[MAX_PLAYERS];
new Ready[MAX_PLAYERS];
new Float: WeedX[MAX_PLAYERS], Float: WeedY[MAX_PLAYERS], Float: WeedZ[MAX_PLAYERS];
new wplant[MAX_PLAYERS];
new InAndrom[MAX_PLAYERS];
new InShamal[MAX_PLAYERS];
new Float:ShamalPos[MAX_VEHICLES][120];
new sExplode[MAX_VEHICLES];
new tCount[MAX_VEHICLES];
new JoinCounter;
new gPlayerLogged[MAX_PLAYERS];
new TutorialStage[MAX_PLAYERS];
new realchat = 1;
new ghour = 0;
new shifthour;
new timeshift = 0;
new realtime = 1;
new intrate = 1;
new RegistrationStep[MAX_PLAYERS];
new TakingDrivingTest[MAX_PLAYERS];
new DrivingTestStep[MAX_PLAYERS];
new DrugRunning[MAX_PLAYERS];
new DrugStep[MAX_PLAYERS];
new SpawnAttempts[MAX_PLAYERS];
new FactionRequest[MAX_PLAYERS];
new BizRequest[MAX_PLAYERS];
new bool: VehicleLightsOn[MAX_VEHICLES];
new Float:Fuel[MAX_VEHICLES];
new EngineStatus[MAX_VEHICLES];
new ShowFuel[MAX_PLAYERS];
new ReduceTime[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
new OrderReady[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new PlacedNews[MAX_PLAYERS];
new MapIconsShown[MAX_PLAYERS];
new SafeWeapon[MAX_PLAYERS];
new Weather = 0;
new Tax = 0;
new OnlinePlayers = 0;
new EMSblood = 0;
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new KnockedDown[MAX_PLAYERS];
new RoadBlock1[MAX_PLAYERS];
new RoadBlock2[MAX_PLAYERS];
new RadioStatus[MAX_PLAYERS];
new RoadBlock3[MAX_PLAYERS];
new RoadBlock4[MAX_PLAYERS];
new RoadBlock5[MAX_PLAYERS];
new RoadBlock6[MAX_PLAYERS];
new RoadBlock7[MAX_PLAYERS];
new RoadBlock8[MAX_PLAYERS];
new Float:TelePos[MAX_PLAYERS][6];
new IsReadyToPickup[MAX_PLAYERS];
new TesterActivated[MAX_PLAYERS];
new NewsActivated[MAX_PLAYERS];
new JustFished[MAX_PLAYERS];
new DrugTimer[MAX_PLAYERS];
new JustUsedDrug[MAX_PLAYERS];
new JustCasinoed[MAX_PLAYERS];
new ImAabusingNoob[MAX_PLAYERS];
new JustKnocked[MAX_PLAYERS];
new JustTazed[MAX_PLAYERS];
new TazerActive[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new Refueling[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new Muted[MAX_PLAYERS];
new AirTicket[MAX_PLAYERS];
new ZborSF[MAX_PLAYERS];
new ZborLV[MAX_PLAYERS];
new RepCar[MAX_PLAYERS];
new StartedCall[MAX_PLAYERS];
new adds = 1;
new addtimer = 60000;
new authorizeswat;
new OOCStatus = 0;
new Dice[MAX_PLAYERS];
new AdminDuty[MAX_PLAYERS];
new TesterDuty[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new PMsEnabled[MAX_PLAYERS];
new Benabled[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new CarID[MAX_PLAYERS];
new OwnableCarOffer[MAX_PLAYERS];
new OwnableCarID[MAX_PLAYERS];
new OwnableCarPrice[MAX_PLAYERS];
new BegOffer[MAX_PLAYERS];
new BegPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new PlayerSmoking[MAX_PLAYERS];
new Blindfold[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new crimestore[128];
new WantedPoints[MAX_PLAYERS];
new WantedLevel[MAX_PLAYERS];
new CopOnDuty[MAX_PLAYERS];
new FbiOnDuty[MAX_PLAYERS];
new LsfdOnDuty[MAX_PLAYERS];
new LsasOnDuty[MAX_PLAYERS];
new LsvrOnDuty[MAX_PLAYERS];
new UsingSmokeAnim[MAX_PLAYERS];
new IsSmoking[MAX_PLAYERS];
new IsUsingAnim[MAX_PLAYERS];
new UsingPayphone[MAX_PLAYERS];
new SwatOnDuty[MAX_PLAYERS];
new MedicOnDuty[MAX_PLAYERS];
new GuardOnDuty[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new PlayerTazed[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new PlayerCrimeLocation[MAX_PLAYERS];
new PlayerCrimeReport[MAX_PLAYERS];
new PingCheck[MAX_PLAYERS];
new Float:PlayerPos[MAX_PLAYERS][6];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new DrugsHolding[MAX_PLAYERS];
new DrugsIntake[MAX_PLAYERS];
new GreetOffer[MAX_PLAYERS];
new GreetStyle[MAX_PLAYERS];
new ProductsOffer[MAX_PLAYERS];
new ProductsAmount[MAX_PLAYERS];
new ProductsCost[MAX_PLAYERS];
new gLOoc[MAX_PLAYERS];
new gOoc[MAX_PLAYERS];
new fChat[MAX_PLAYERS];
new VehColor1[MAX_PLAYERS];
new VehColor2[MAX_PLAYERS];
new Text3D:housetext[MAX_HOUSES];
new Text3D:housetext2[MAX_HOUSES];
new Text3D:garagetext[MAX_GARAGES];
new ActiveCP[MAX_PLAYERS];
new
    Float:g_fSpeedCap[MAX_PLAYERS] = { 0.0, ... }
;

new totalbuildings=0;
new totalbusinesses=0;
new totalstores=0;
new totalfactions=0;



new Text:InfoBoxer[MAX_PLAYERS];
new Text:InfoBox[MAX_PLAYERS];




new Timer;
#define TOLERANCE 10 											    //Area 10X10
#define OPENSPEED 2
#define CLOSESPEED 2
#define TIMERSPEED 1500
const GateNum = 6;
const MiscObjNum = 3;
new GateObject[GateNum];
new MiscObject[MiscObjNum];
#define SETY_DE 5.87
#define SETZ_DE 0.75
new gate;
new pdjail;
new locote;
new whmont;
new FIREFIGHTER;
new Paypark;
new pdmain;
new sanroof2;
new sanroof = 0;
new elevator;
new elevatorfloor = 0;
new SnowOn = 0;
new tugate;
new gate1;
new gate2;
new EntranceGate[MAX_PLAYERS];
new CellGate[MAX_PLAYERS];
new CellGateCancel;
new MainGate;
new HireCar[MAX_PLAYERS];
new SnowObject[MAX_PLAYERS];
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new gPlayerAnimLibsPreloaded[MAX_PLAYERS];
new engine,lights,alarm,doors,bonnet,boot,objective;
#define maxobj 50 // Limit
new Float:ObjCoords[maxobj][3];
new object[maxobj];
new Dropped[maxobj];
new VirtualWorld[maxobj];
new ObjectID[maxobj][2];
new BlockPMPerson[MAX_PLAYERS][MAX_PLAYERS];
new specplayerid;
new gSpectateID[MAX_PLAYERS];
new gSpectateType[MAX_PLAYERS];
new Float:SpecDest[MAX_PLAYERS][3];
new Spectating[MAX_PLAYERS];

// Spectating shizzle
#define ADMIN_SPEC_TYPE_NONE 0
#define ADMIN_SPEC_TYPE_PLAYER 1
#define ADMIN_SPEC_TYPE_VEHICLE 2
#pragma dynamic 20000
#define RunOutTime 25000
#define PlayerLoop(%1) for(new %1=0;%1<MAX_PLAYERS,IsPlayerConnected(%1);%1++)
#define UpdateTime 500
#define _MOVE_SPEED     2.0
#define _MENU_ITEMS     4
#define ResetMoneyBar ResetPlayerMoney
#define UpdateMoneyBar GivePlayerMoney
#define GasMax 100
#define dcmd(%1,%2,%3) if (!strcmp((%3)[1], #%1, true, (%2)) && ((((%3)[(%2) + 1] == '\0') && (dcmd_%1(playerid, ""))) || (((%3)[(%2) + 1] == ' ') && (dcmd_%1(playerid, (%3)[(%2) + 2]))))) return 1
#define SendMsg(%0,%1,%2) SendClientMessage(%0,%1,%2)
#define SendMsgAll(%0,%1) SendClientMessageToAll(%0,%1)

#define SendFormat(%0,%1,%2,%3) do{new _str[128];format(_str,128,%2,%3);SendClientMessage(%0,%1,_str);}while(FALSE)
#define SendFormatToAll(%1,%2,%3) do{new _str[128];format(_str,128,%2,%3);SendClientMessageToAll(%1,_str);}while(FALSE)

#define STATUSDIALOG 500


// Attached
#define GLASSES 0
#define HELMET 1
#define WATCH 2
#define SNOW 3
#define HAND 4
#define RIGHTHAND 6
// -----------------------------------------------------------------------------

// /V mod defines
#define Vmod 6200
#define Vmod2 6300
#define Vmod3 6400
#define Vmod4 6500
#define Vmod5 6600
#define Vmod6 6700
#define Vmod7 6400
#define Vmod8 6440 // Uranus
#define Vmod9 6441 // Sultan
#define Vmod10 6442 // Jester
#define Vmod11 6443 // Elegy
// House Drugs
#define HouseDialog 4219
#define HouseWeed1 4220
#define HouseWeed2 4221
#define HouseWeed3 4223
#define HouseEcstasy1 4224
#define HouseEcstasy2 4225
#define HouseEcstasy3 4226
#define HouseCocaine1 4227
#define HouseCocaine2 4228
#define HouseCocaine3 4229
// Car Dialogs
#define CAR_DIALOG 5437
#define CAR_DIALOG_CASH 437
#define ILLEGAL_JOB_DIALOG 47999
// Others
#define BUSINESS_TYPES "1: Restaurant - 2: Casino - 3: 24-7 - 4: Ammunation - 5: Advertising - 6: Clothes Store - 7. Bar/Club"
#define BUSINESS_TYPES2 "8: Rental - 9: Electronice - 10: Tuning - 11: Fuel - 12: Licenses 13: Dealership - 14: Farm -"


//

// CCTV

#define MAX_CCTVS 100
#define MAX_CCTVMENUS 10


// Weapon Damage
#define SDPistolDMG 5.4
#define DeagleDMG 12.3
#define ShotgunDMG 8.5
#define UziDMG 4.5
#define AK47DMG 7.2
#define M4A1DMG 7.5
#define Tec9DMG 4.6
#define CountryRifleDMG 21.9

// Factions
#define LSPD 1
#define EMS 2
#define SASD 3
#define SAN 4
#define GOV 5
#define LSVR 6
#define LSFD 7

/*
// ======== Map Revealing ========
#define     MAX_GRID        (100)   	// dont change
#define     UNLOCK_TIME     (150)   	// in seconds
*/


//=========ROPE=========//
#define MAX_ROPES 700

// =========== POLICE CAMERA ==============

#define SCM SendClientMessage
#define COL_ORANGE "{FF9900}"
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_REDEMS 0xFF6347AA
#define COL_WHITE "{FFFFFF}"

/// ========= FPS =====
#define INVALID_DATA -1.11

// Dialogs
#define LSPD_MDC_DIALOG 1000
#define LSPD_MDC_SEARCH 1001
#define LSPD_MDC_SEARCH_RESULT 1002
#define LSPD_MDC_ADD_RECORD_1 1003
#define LSPD_MDC_ADD_RECORD_2 1004

#define RADIO_DIALOG 1100
#define RADIO_DIALOG_STATION 1101
#define RADIO_DIALOG_VOLUME 1102
#define VALUE_MOTOR 350.0

//DAMAGE SYSTEM
#define Format:%0(%1) format(%0, sizeof(%0), %1)



#define D_DAMAGES 41879654

#define BODY_PART_TORSO 3
#define BODY_PART_GROIN 4
#define BODY_PART_RIGHT_ARM 5
#define BODY_PART_LEFT_ARM 6
#define BODY_PART_RIGHT_LEG 7
#define BODY_PART_LEFT_LEG 8
#define BODY_PART_HEAD 9

//DIALOGURI RP-QUIZ
#define DIALOG_QUIZ 5550
#define DIALOG_QUIZ1 5551
#define DIALOG_QUIZ2 5552
#define DIALOG_QUIZ3 5553
#define DIALOG_QUIZ4 5554




#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1)) *%3*1.6)

#pragma tabsize 0
#pragma unused elevator
#pragma unused elevatorfloor


//=============================================================NEW====================================================//


// ======== SS =======
new Text:ssroleplay;

// ======== SERVER LOGO ====

new Text:logo;
/*
// ========= SPEEDOMETER =======
new Text:bg;
new Text:barsus;
new Text:viteza;
new Text:vitezakm;
new Text:tipmasina;
*/
// ======= Rope =========
new rope[MAX_ROPES];

// ========== CCTV ===============
new TotalCCTVS;
new CameraName[MAX_CCTVS][32];
new Float:CCTVLA[MAX_PLAYERS][3];  //CCTV LookAt
new Float:CCTVLAO[MAX_CCTVS][3];
new Float:CCTVRadius[MAX_PLAYERS]; //CCTV Radius
new Float:CCTVDegree[MAX_PLAYERS] = 0.0;
new Float:CCTVCP[MAX_CCTVS][4]; //CCTV CameraPos
new CurrentCCTV[MAX_PLAYERS] = -1;

new Text:TD;
new Text:cctv0;
new Text:cctv1;
new Text:cctv2;
new Text:cctv3;


new Menu:CCTVMenu[MAX_CCTVMENUS];
new MenuType[MAX_CCTVMENUS];
new TotalMenus;
new PlayerMenu[MAX_PLAYERS];

enum LP
{
        Float:LX,
        Float:LY,
        Float:LZ,
        Float:LA,
        LInterior
}
new Spawned[MAX_PLAYERS];
new LastPos[MAX_PLAYERS][LP];

new KeyTimer[MAX_PLAYERS];




// ==== DJ ====
new dj;
// ==== CALLSIGN ======
new Text3D:vehicle_callsign[MAX_VEHICLES];
new veicolo_callsign_status[MAX_VEHICLES];

// =========== EMS ====
new HospitalDoor1;
new HospitalDoor2;
new HospitalDoor1Sate;
new HospitalDoor2Sate;
// ====================

// =====================================

new objectids[MAX_VEHICLES];
new Text:crosshair[MAX_PLAYERS];
new playervehi[MAX_PLAYERS];
forward CAMERAON( playerid, veh );
forward CAMERAOFF(playerid);

// FORWARDS BY INCLUDE
forward MainGateClose(gateid);
forward GateClose(playerid);
forward GateCloseEMS(playerid);
forward GateClose1(playerid);
forward LocoteClose(playerid);
forward FDClose(playerid);
forward LSPfrontClose(playerid);
forward PayparkClose(playerid);
forward PdClose(playerid);
forward GateClose2(playerid);
forward GateClose4();
forward OnPlayerUpdate(playerid);
forward SetPlayerSpawn(playerid);
forward GameModeRestart();
forward GameModeRehash();
forward GameModeRestartFunction();
forward ProxDie(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward GetClosestPlayer(p1);
forward ClearMechanicCheckpointsForPlay(playerid);
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward FixHour(hour);
forward UpdateScore();
forward Update();
forward CrashPlayer(playerid);
forward UnsetCrash(playerid);
forward Update_casa(i);
forward DrugsEffect(playerid);
forward Fillup();
forward RingTonerRev();
forward RingToner();
forward AddsOn();
forward StripNewLine(string[]);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward splitter(const strsrc[], strdest[][], delimiter);
forward AdministratorMessage(color,const string[],level);
forward TesterMessage(color,const string[]);
forward TesterMessager(color,const string[]);
forward BanPlayer(playerid,bannedby[MAX_PLAYER_NAME],reason[]);
forward KickPlayer(playerid,kickedby[MAX_PLAYER_NAME],reason[]);
forward StopAnim(playerid);
forward StopTalking(playerid);
forward ClearKnock(playerid);
forward Animusereset(playerid);
forward OnApptUpdate();
forward FishReset(playerid);
forward TazeReset(playerid);
forward CasinoReset(playerid);
forward FairMoneyReset(playerid);
forward PleaseDontDetectMe(playerid);
forward KnockReset(playerid);
forward AfterSpray1(playerid);
forward AfterSpray2(playerid);
forward AfterSpray3(playerid);
forward AfterSpray4(playerid);
forward BanLog(string[]);
forward WeaponLog(string[]);
forward BanLog(string[]);
forward KickLog(string[]);
forward ArrestLog(string[]);
forward SuspectLog(string[]);
forward AjailLog(string[]);
forward PayLog(string[]);
forward CommandLog(string[]);
forward HackLog(string[]);
forward AbuseLog(string[]);
forward LoginLog(string[]);
forward DonatorLog(string[]);
forward PMLog(string[]);
forward ScrapLog(string[]);
forward ReportLog(string[]);
forward OOCLog(string[]);
forward FactionChatLog(string[]);
forward Float:Distance(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2);
forward ShowStats(playerid,targetid);
forward ShowAStats(playerid,targetid);
forward SendFactionMessage(faction, color, string[]);
forward SendJobMessage(job, color, string[]);
forward SendTaxiMessage(color, string[]);
forward SetPlayerToTeamColor(playerid);
forward PlayerActionMessage(playerid,Float:radius,message[]);
forward PlayerActionnMessage(playerid,Float:radius,message[]);
forward PlayerPlayerActionMessage(playerid,targetid,Float:radius,message[]);
forward SetPlayerCriminal(playerid,declare,reason[]);
forward SetPlayerCriminalEx(playerid,declare,reason[]);
forward SendRadioMessage(playerid,freq, color, string[]);
forward SendProxRadioMessage(playerid, string[]);
forward ClearCrime(playerid);
forward IsAtPaintShop(playerid);
forward IsAtImpound(playerid);
forward IsATowTruck(vehicleid);
forward DoDeath(playerid);
forward DoDeath2(playerid);
forward LogTimer(playerid);
forward IsATaxi(vehicleid);
forward IsALawEnforcementVehicle(vehicleid);
forward IsAdonatebike(vehicleid);
forward IsASavanna(vehicleid);
forward IsASultan(vehicleid);
forward IsAHelicopter(vehicleid);
forward IsABike(vehicleid);
forward IsABoat(vehicleid);
forward IsAtGasStation(playerid);
forward isatphone(playerid);
forward IsAtFishPlace(playerid);
forward IsAtATM(playerid);
forward IsVehicleOccupied(vehicleid);
forward RemoveDriverFromVehicle(playerid);
forward Unfreezeren(playerid);
forward ReduceTimer(playerid);
forward IdleKick();
forward OneSecTimers();
forward KiloSecTimers();
forward IsASASDskin(skinid);
forward vgetreset(playerid);
forward SearchingHit(playerid);
forward SetPlayerWeapons(playerid);
forward SafeGivePlayerWeapon(playerid, weaponid, ammo);
forward SafeResetPlayerWeapons(playerid);
forward SetPlayerWantedLevelEx(playerid,level);
forward GetPlayerWantedLevelEx(playerid);
forward ResetPlayerWantedLevelEx(playerid);
forward IsAtBar(playerid);
forward ReleaseFromHospital(playerid);
forward DoHospital(playerid);
forward DrugEffect(playerid);
forward UndrugEffect(playerid);
forward PlantedWeed(playerid);
forward WeedDestroy(playerid);
forward LadHamWeed(playerid);
forward BlindfoldTimer(playerid);
forward OOCNews(color,const string[]);
forward BackupClear(playerid, calledbytimer);
forward RemoveRoadblock(playerid);
forward CheckKeyPress(playerid);
forward CellGateClose(gateid);
forward Explode(playerid);
forward UpdateMeter(playerid);
forward ExplodeShamal(vehicleid);
forward OOCOff(color,const string[]);
forward BunnyOff(color,const string[]);
forward PlayerPlayMusic(playerid);
forward StopMusic();
//==============================================================================
forward CreateStreamPickup(model,type,Float:x,Float:y,Float:z,range);
forward StreamPickups();
forward Pickup_AnyPlayerToPoint(Float:radi, Float:x, Float:y, Float:z);
forward DestroyStreamPickup(ID);
forward CountStreamPickups();
forward ChangeStreamPickupModel(ID,newmodel);
forward ChangeStreamPickupType(ID,newtype);
forward MoveStreamPickup(ID,Float:x,Float:y,Float:z);
//==============================================================================

// ======= CEVA CHESTIE =======
enum EMERGANCY_INFO
{
	callType[64],
	callCaller,
	callSituation[128],
	callLocation[64],
	callTrace[64],
	callDate[64],
	callID,
	callTaken
}
new CallInfo[10][EMERGANCY_INFO];

stock SetLastCaller(playerid)
{
	for(new i = 0; i < sizeof(CallInfo); i++)
	{
		if(CallInfo[i][callTaken] == 0)
		{
			format(CallInfo[i][callType], 64, "%s", GetStringVar(playerid, "callType"));
			format(CallInfo[i][callSituation], 64, "%s", GetStringVar(playerid, "callSituation"));
			format(CallInfo[i][callLocation], 64, "%s", GetStringVar(playerid, "callLocation"));
			format(CallInfo[i][callTrace], 64, "%s", GetStringVar(playerid, "callTrace"));
			format(CallInfo[i][callDate], 64, "%s", GetFullDate());
			CallInfo[i][callID] = randomEx(1234, 9788);
			CallInfo[i][callCaller] = playerid;
			CallInfo[i][callTaken] = 1;
			return 1;
		}
	}
//======= CEVA CHESTIE TERMINATA =======

//======= PRETURI DEALERSHIP SI CRED CA SI STOCK-URI =======
// DEALER SHIP ////
new CarsPrices[212] =
{
    75000, //400 Landstalker
	50000, // 401 Bravura
	100000, // 402 Buffalo
	75000, // 403 Linerunner
	30000, // 404 Perenniel
	50000, // 405 Sentinel
	0, // 406 Dumper
	0, // 407 Fire truck
	0, // 408 Trash Master
	300000, // Stretch
	20000, // 410 Manana
	0, // 411 Infernus
	32000, // 412 Voodoo
	52000, // 413 Pony
	79000, // 414 Mule
	700000, // 415 Cheetah
	0, // 416 Ambulance
	0,
	50000, // 418 Moonbeam
	50000, // 419 Esperanto
	65000, // Taxi 420
	70000, // Washington
	50000, // Bob cat
	25000, // Mr. Whoopee
	90000,//BF Injection
	0,
	70000, // Premier
	0,
	0,
	1000000, // 429 Banshee
	0, //430
	150000, // Bus 431
	0, // 432
	0, // 433
	150000, // 434 Hotknife
	0, // 435
	10000, // 436 Previon
	0, // 437
	60000, // Cabbie
	40000, //Stallion
	0,//440
	0,
	0,
	0,
	0,
	45000, // Admiral
	85000, // Squallo
	0,  // 447
	0,  // 448
	0, // 449
	0, //450
	0, // Turismo
	0,
	0,
	0, // Tropic
	0,
	0,
	0,
	50000, // 458 solair
	0,
	0,//460
	70000, // PCJ
	7000, // Faggio
	42000, // Freeway
	0, // 464
	0, // 465
	30000, // Glendale
	25000, // Oceanic
	68000, // Sanchez
	1000000, //469 Sparrow
	0, //470
	20000, // 471 Quad
	0, // 472
	1000000, // Dinghy
	65000, // Hermes 474
	58000, // Sabre 475
	0, // 476
	350000, // Zr-350
	25000, // 478 Walton
	15000, // 479 Regina
	100000, //480 COMET
	5000, // BMX
	30000, // Burrito
	30000, //Camper 483
	0,
	0,
	0,
	1200000, // Maverick
	0, // San new helicoptor
	100000, // Rancher
	0, //490
	61000, // Virgo
	40000, // Greenwood
	0,
	0,
	0,
	58000, // Blista compact
	0,
	70000, // 498 Boxville
	0,
	65000, //500 = Mesa
	0,
	0,
	0,
	0,
	0,
	800000, // 506 Super GT
	50000, // Elegant
	70000, // 508 Journey
	0,
	6500,//510 Mountain bike
	500000,//511 Beagle
	0,//512
	0,//513
	500000,//Petrol Tanker 514
	0, // 515
	0, // 516
	45000, // 517 majestic
	34000, // Buccaneer
	0,
	0, //520
	0, // FCR 900
	0, // 522
	0, // 523
	0, // 524
	0, // Towtruck
	55000, //Fortune
	12000, // Cadrona
	0,
	36000, // Williard
	0, //530
	18000, // 531 Tractor
	100000, // Combine Harvester 532
	25000, // Feltzer // 533
	50000, // Remington // 534
	75000, // 535 Slamvan
	30000, //Blade // 536
	0, // 537
	0, // 538
	0, // 539
	30000, //540 vincent
	900000, // Bullet
	35000, // Clover
	28000, //Sadler
	0,
	50000, // Hustler
	0,
	0,
	0,
	25000, // Tampa
	25000,//550 Sunrise
	40000, // Merit 551
	0, // 552
	0, // 553
	45000, // Yosemite
	20000, // 555 windsor
	0,
	0,
	175000, // 558 Uranus
	200000, // Jester
	400000, // Sultan 560
	100000, // 561 Stratum
	250000, // Elegy
	0,
	0,
	100000, // Flash
	35000, // Tahoma
	50000, // Savanna
	0,
	0,
	0, //570
	0, // 571
	0, // 572
	0, // Dinghy
	20000, // 574 Sweeper
	80000, // Broadway
	75000, // 576 Tornado
	0, // 577
	70000, // 578 DTF-50
	200000, // Huntley
	80000, //580 Stafford
	0, // 581
	0, // 582
	0, // 583
	0, // 584
	16000, // Emperor
	25000, // Wayfarer
	55000, // Euros 587
	0,
	30000, // Club
	0, // 590
	0, // 591
	0, // 592
	500000,// Dodo 593
	0,//594
	0,//595
	0, // LSPD Cruiser 596
	0,//597
	0,// 598
	0,// 599
	25000,//600 Picador
	0,
	30000, // Alpha
	70000, // Phoenix
	0,
	0,
	0,
	0,
	0,
	0,
	50000, //Tractor
};

new InsurancePrices[212] =
{
    270, //400 Landstalker
	100, // 401 Bravura
	250, // 402 Buffalo
	260, // 403 Linerunner
	100, // 404 Perenniel
	230, // 405 Sentinel
	0, // 406 Dumper
	0, // 407 Fire truck
	0, // 408 Trash Master
	290, // Stretch
	100, // 410 Manana
	0, // 411 Infernus
	225, // 412 Voodoo
	120, // 413 Pony
	120, // 414 Mule
	350, // 415 Cheetah
	0, // 416 Ambulance
	0,
	160, // 418 moonbeam
	150, // 419 Esperanto
	190, //420 Taxi
	130, // Washington
	105, // Bob cat
	140, // Mr. Whoopee
	250,
	0,
	170, // Premier
	0,
	0,
	425, //  429 Banshee
	0, //430
	460, // Bus 431
	0,
	0,
	250, // Hotknife
	0,
	100,
	0,
	180, // Cabbie 338
	165, //Stallion 339
	0,//440
	0,
	0,
	0,
	0,
	160, // Admiral
	180, // Squallo
	0,  // 447
	0,  // 448
	0, // 449
	0, //450
	0, // Turismo
	0,
	0,
	0, // Tropic
	0,
	0,
	0,
	160,
	0,
	0,//460
	260,
	40, // Faggio
	56, // Freeway
	0, // 464
	0, // 465
	120, // Glendale
	120, // Oceanic
	75, // Sanchez
	300,
	0, //470
	100, // 471
	0, // 472
	65, // Dinghy
	97, // 474
	98, // 475
	0, // 476
	250, // Zr-350
	115, // 478
	70, // Regina 479
	170, // Comet 480
	20, // BMX
	120, // Burrito
	200,
	0,
	0,
	0,
	1200, // Maverick
	0, // San new helicoptor
	110, // Rancher
	0, //490
	97, // Virgo
	99, // Greenwood
	0,
	0,
	0,
	115, // Blista compact
	0,
	150,
	0,
	105, //500 = Mesa
	0,
	0,
	0,
	0,
	0,
	300,
	120, // Elegant
	200,
	0,
	35,//510
	200,//511
	0,//512
	0,//513
	135,//Petrol Tanker
	0,
	0,
	180, // 517 majestic
	159, // Buccaneer
	0,
	0, //520
	0, // FCR 900
	0, // 522
	0, // 523
	0, // 524
	0, // Towtruck 525
	100,
	100,
	0,
	100,
	0, //530
	100, // 531
	65, // Combine Harvester 532
	95, // Feltzer
	98, // Remington
	86, // Slamvan 435
	140, //Blade
	0, // 437
	0, // 538
	0, // 539
	75, //540 vincent
	585, // Bullet
	120, // Clover
	100,
	0,
	98, // Hustler
	0,
	0,
	0,
	95, // Tampa
	80,//550
	100, // 551
	0, // 552
	0, // 553
	115, // Yosemite
	105, // Windsor 555
	0,
	0,
	79, // 558 Uranus
	135, // Jester
	325, // Sultan 560
	120, // Stratum 561
	118, // Elegy
	0,
	0,
	98, // Flash
	95, // Tahoma
	119, // Savanna
	0,
	0,
	0, //570
	0, // 571
	0, // 572
	0, // Dinghy
	100, // 574
	98, // Broadway
	100, // 576
	0, // 577
	130, // 578
	115, // Huntley
	93, //580
	0, // 581
	0, // 582
	0, // 583
	0, // 584
	95, // Emperor
	73, // Wayfarer
	154,
	0,
	103, // Club
	0, //590
	0, //591
	0, //592
	395, // Dodo
	0,
	0,
	0, // LSPD Cruiser
	0,
	0,
	0,
	47,//600
	0,
	120, // Alpha
	145, // Phoenix
	0,
	0,
	0,
	0,
	0,
	0,
	100,
};

new GunNames[48][] = {
	"Nothing",
	"Brass Knuckles",
	"Golf Club",
	"Nitestick",
	"Knife",
	"Baseball Bat",
	"Showel",
	"Pool Cue",
	"Katana",
	"Chainsaw",
	"Purple Dildo",
	"Small White Dildo",
	"Long White Dildo",
	"Vibrator",
	"Flowers",
	"Cane",
	"Grenade",
	"Tear Gas",
	"Molotov",
	"Vehicle Missile",
	"Hydra Flare",
	"Jetpack",
	"Glock",
	"Silenced Colt",
	"Desert Eagle",
	"Shotgun",
	"Sawn Off",
	"Combat Shotgun",
	"UZI",
	"MP5",
	"AK47",
	"M4",
	"Tec9",
	"Rifle",
	"Sniper Rifle",
	"Rocket Launcher",
	"HS Rocket Launcher",
	"Flamethrower",
	"Minigun",
	"Satchel Charge",
	"Detonator",
	"Spraycan",
	"Fire Extinguisher",
	"Camera",
	"Nightvision",
	"Infrared Vision",
	"Parachute",
	"Fake Pistol"
};

new Float:HelmetPos[][6] =
{
    {0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}, //skin 0
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 1
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 2
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 3
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 4
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 5
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 6
        {0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 7
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 8
        {0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 9
        {0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 10
        {0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 11
        {0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 12
        {0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}, //skin 13
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 14
        {0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 15
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 16
        {0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 17
        {0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 18
        {0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 19
        {0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 20
        {0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 21
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 22
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 23
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 24
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 25
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 26
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 27
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 28
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 29
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 30
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 31
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 32
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 33
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 34
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 35
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 36
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 37
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 38
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 39
        {0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 40
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 41
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 42
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 43
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 44
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 45
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 46
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 47
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 48
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 49
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 50
        {0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 51
        {0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 52
        {0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 53
        {0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 54
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 55
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 56
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 57
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 58
        {0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 59
        {0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 60
        {0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 61
        {0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 62
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 63
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 64
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 66
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 67
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 68
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 69
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 70
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 71
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 72
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 73
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 75
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 76
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 78
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 79
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 80
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 81
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 82
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 83
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 84
        {0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 85
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 86
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 87
        {0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 88
        {0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 89
        {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 90
        {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 91
        {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 92
        {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 93
        {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 94
        {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 95
        {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 96
        {0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 97
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 98
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 99
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 100
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 101
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 102
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 103
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 104
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 105
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 106
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 107
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 108
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 109
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 110
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 111
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 112
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 113
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 114
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 115
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 116
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 117
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 118
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 119
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 120
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 121
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 122
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 123
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 124
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 125
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 126
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 127
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 128
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 129
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 130
        {0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 131
        {0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 132
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 133
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 134
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 135
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 136
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 137
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 138
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 139
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 140
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 141
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 142
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 143
        {0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 144
        {0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 145
        {0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 146
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 147
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 148
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 150
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 151
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 152
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 153
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 154
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 155
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 156
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 157
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 158
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 159
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 160
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 161
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 162
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 163
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 164
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 165
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 166
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 167
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 168
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 169
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 170
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 171
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 172
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 173
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 174
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 175
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 176
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 177
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 178
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 179
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 180
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 181
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 182
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 183
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 184
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 185
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 186
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 187
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 188
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 189
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 190
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 191
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 192
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 193
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 194
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 195
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 196
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 197
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 198
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 199
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 200
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 201
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 202
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 203
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 204
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 205
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 206
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 207
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 209
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 210
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 211
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 212
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 213
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 214
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 215
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 216
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 217
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 218
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 219
        {0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 220
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 221
        {0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 222
        {0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 223
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 224
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 225
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 226
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 227
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 228
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 229
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 230
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 231
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 232
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 233
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 234
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 235
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 236
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 237
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 238
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 239
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 240
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 241
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 242
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 243
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 244
        {0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 245
        {0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 246
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 247
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 248
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 249
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 250
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 251
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 252
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 253
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 254
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 255
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 256
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 257
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 258
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 259
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 260
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 261
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 262
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 263
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 264
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 265
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 266
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 267
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 268
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 269
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 270
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 271
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 272
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 274
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 275
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 276
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 277
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 278
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 279
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 280
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 281
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 282
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 283
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 284
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 285
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 286
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 287
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 288
        {0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}, //skin 289
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 290
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 291
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 292
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 293
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 294
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 295
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 296
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 297
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}, //skin 298
        {0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000} //skin 299
};

// -----------------------------------------------------------------------------
new GunObjects[47][0] = { // (c) gimini
	{0},// Emty
	{331},// Brass Knuckles
	{333},// Golf Club
	{334},// Nitestick
	{335},// Knife
	{336},// Baseball Bat
	{337},// Showel
	{338},// Pool Cue
	{339},// Katana
	{341},// Chainsaw
	{321},// Purple Dildo
	{322},// Small White Dildo
	{323},// Long White Dildo
	{324},// Vibrator
	{325},// Flowers
	{326},// Cane
	{342},// Grenade
	{343},// Tear Gas
	{344},// Molotov
	{0},
	{0},
	{0},
	{346},// Glock
	{347},// Silenced Colt
	{348},// Desert Eagle
	{349},// Shotgun
	{350},// Sawn Off
	{351},// Combat Shotgun
	{352},// Micro UZI
	{353},// MP5
	{355},// AK47
	{356},// M4
	{372},// Tec9
	{357},// Rifle
	{358},// Sniper Rifle
	{359},// Rocket Launcher
	{360},// HS Rocket Launcher
	{361},// Flamethrower
	{362},// Minigun
	{363},// Detonator
	{364},// Detonator Button
	{365},// Spraycan
	{366},// Fire Extinguisher
	{367},// Camera
	{368},// Nightvision
	{368},// Infrared Vision
	{371}// Parachute
};
//======= PRETURI DEALERSHIP SI CRED CA SI STOCK-URI =======





new grafftext[MAX_PLAYERS][256];
new grafffont[MAX_PLAYERS][256];
new graffity[MAX_PLAYERS] = 0;

new CPSweep[MAX_PLAYERS];
new Sweep[MAX_PLAYERS] = 0;
new SweepTura[MAX_PLAYERS] = 0;
new CPMobilier[MAX_PLAYERS];
new Mobilier[MAX_PLAYERS] = 0;
new CPCutter[MAX_PLAYERS];
new Cutter[MAX_PLAYERS] = 0;
new CPBoy[MAX_PLAYERS];
new Boy[MAX_PLAYERS] = 0;
new ScrapCP[MAX_PLAYERS] = 0;
new Hidden[MAX_PLAYERS] = 0;
new servicepeconord;
forward servicepeconordclose();
new servicepecosud;
forward servicepecosudclose();
new timergate[MAX_PLAYERS];
new helmet[MAX_PLAYERS] = 0;
new rconbad[MAX_PLAYERS] = 0;
new watch[MAX_PLAYERS] = 0;
new radar[MAX_PLAYERS] = 0;
new cradio[MAX_PLAYERS] = 0;
new dropedcar[MAX_PLAYERS] = 0;
new arecallsign[MAX_VEHICLES];
new BeanBag[MAX_PLAYERS] = 0;
new AscultaPM[MAX_PLAYERS] = 0;
new emergencycall[MAX_PLAYERS] = 0;
new nonemergencycall[MAX_PLAYERS] = 0;
new prisondoor1;
new prisondoor2;
new prisondoor3;
new prisongate1;
new lsvrdoor;
new poarta1lsfd;
new poarta2lsfd;
new poarta3lsfd;
new lsvrgarage;
new taxibarrier;



new MatarMotor[MAX_PLAYERS];
static Float:VidaMotor[MAX_VEHICLES];
new servicefortcarson;
forward servicefortcarsonclose();

new Text:servername;

new lsfdgatestatus1 = 0;
new lsfdgatestatus2 = 0;
new lsfdgatestatus3 = 0;

new whmontstatus = 0;
new statususa = 0;
new BStatus = 0;
new pddoor;
new ssstatus = 0;
new pddoorstatus = 0;
new FurnitureMapper[MAX_PLAYERS] = 0;
new Tchat = 0;
new Achat = 0;
new CPPizza[MAX_PLAYERS];
new Pizza[MAX_PLAYERS] = 0;
new impoundgate;
new impoundgate2;
new lsasimpoundstatus = 0;
new randpizza[MAX_PLAYERS];
new CPlocation[MAX_PLAYERS] = 0;
new hammer[MAX_PLAYERS] = 0;
new flash[MAX_PLAYERS] = 0;
new briefcase[MAX_PLAYERS] = 0;
new backpack[MAX_PLAYERS] = 0;
new CPHay[MAX_PLAYERS];
new Hay[MAX_PLAYERS] = 0;
new Text3D:Numar[MAX_VEHICLES];
new Text3D:ShowMasca[MAX_PLAYERS];
new Text3D:DamageShot[MAX_PLAYERS];
new Text3D:CelulaNumber[MAX_PLAYERS];
new ValidNumar[MAX_VEHICLES] = 0;
new APB1[128];
new APB2[128];
new APB3[128];
new APB4[128];
new APB5[128];
new apbstatus1 = 0;
new apbstatus2 = 0;
new apbstatus3 = 0;
new apbstatus4 = 0;
new apbstatus5 = 0;
new newsgate;
new newsgatestatus = 0;
new kevlar[MAX_PLAYERS] = 0;
new trafficvest[MAX_PLAYERS] = 0;
new policecap[MAX_PLAYERS] = 0;
new kevlarems[MAX_PLAYERS] = 0;
new shelmet[MAX_PLAYERS] = 0;
new carslist = mS_INVALID_LISTID;
new bikelist = mS_INVALID_LISTID;
new bicicletelist = mS_INVALID_LISTID;
new planelist = mS_INVALID_LISTID;
new helilist = mS_INVALID_LISTID;
new boatlist = mS_INVALID_LISTID;
new masklist = mS_INVALID_LISTID;
new hatlist = mS_INVALID_LISTID;
new glasseslist = mS_INVALID_LISTID;
new guitarlist = mS_INVALID_LISTID;
new headphonelist = mS_INVALID_LISTID;
new watchlist = mS_INVALID_LISTID;
new helmetlist = mS_INVALID_LISTID;
new skinlist = mS_INVALID_LISTID;
new hairlist = mS_INVALID_LISTID;
forward barieraLSclose();
forward barieraLSclose2();
forward barieraLVclose();
forward barieraLVclose2();
forward barieraSFclose();
new barieraLS;
new barieraLS2;
new barieraLV;
new barieraLV2;
new barieraSF;
new barieraSF2;
new barieraSF3;
new barieraSF4;
new barieraSF5;
new barieraSF6;
forward barieraSFclose2();
forward barieraSFclose3();
forward barieraSFclose4();
forward barieraSFclose5();
forward barieraSFclose6();
new barierablocata = 0;
new takegun = 0;

new fplant[MAX_PLAYERS] = 0;
new carsds[MAX_PLAYERS] = 0;
new DMVTest[MAX_PLAYERS] = 0;

//--------------BOOMBOX
new boomboxmusic[MAX_PLAYERS];
new boombox = 1;
enum bInfo
{
    Float: bPosx,
    Float: bPosy,
    Float: bPosz,
    Float: bPosAngle,
    bOwned,
    bObject,
};
new BoomBox[3000][bInfo];
//---------------LUMINI CASA
//---------------FURNITURE
new furnitureid = 1;
new furnitureedit[MAX_PLAYERS] = 0;
enum furnitureInfo
{
    Float: furnitureX,
    Float: furnitureZ,
    Float: furnitureY,
    Float: furnitureRX,
    Float: furnitureRY,
    Float: furnitureRZ,
    furnitureHouse,
    furnitureModel,
    furnitureInterior,
    furnitureObject,
    furnitureObject2,
}
new Furniture[5000][furnitureInfo];
//-----------------HANDBRAKE
enum handbrakeinfo
{
    hActiv = 0,
    Float: hX,
    Float: hY,
    Float: hZ,
    Float: hRZ,
}
new HandBrake[MAX_VEHICLES][handbrakeinfo];
//-----------------Tattoo
enum tInfo
{
    tID = 0,
    tBratStang[128],
    tBratDrept[128],
    tPiept[128],
    tSpate[128],
    tPiciorStang[128],
    tPiciorDrept[128],
}
new Tattoo[MAX_PLAYERS][tInfo];
//----------------STOCURI
new Stocuri[611];
new SpawnedCar[MAX_PLAYERS][2];
//----------------ARME ATACHATE
new armapusa[MAX_PLAYERS][10];


stock GetWeaponModel(weaponid)
{
        switch(weaponid)
        {
            case 1:
                return 331;

                case 2..8:
                    return weaponid+331;

                case 9:
                    return 341;

                case 10..15:
                        return weaponid+311;

                case 16..18:
                    return weaponid+326;

                case 22..29:
                    return weaponid+324;

                case 30,31:
                    return weaponid+325;

                case 32:
                    return 372;

                case 33..45:
                    return weaponid+324;

                case 46:
                    return 371;
        }
        return 0;
}
//==============LOVITURI ARMA
new gloanteshot[MAX_PLAYERS][4][34];

new vehlist[MAX_PLAYERS][5];
//====================================================================================================================//

function Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
    return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

//========================================FURNITURE==========================================================//
#define COLOR_BLUE              0x0259EAAA

new Object;
new oModel;
#define OBJECT_FILE_NAME        "DObjects.txt"

stock AddObjectFromFile(DFileName[])
{
    if(!fexist(DFileName)) return 0;

    new File:ObjectFile, Float:OX, Float:OY, Float:OZ, Float:ORX, Float:ORY, Float:ORZ, OVW, OINT, oTotal, Line[128];

    ObjectFile = fopen(DFileName, io_read);
    while(fread(ObjectFile, Line))
    {
        if(Line[0] == '/' || isnull(Line)) continue;
        unformat(Line, "ffffffiii", OX, OY, OZ, ORX, ORY, ORZ, OVW, OINT, oModel);
        CreateDynamicObject(oModel, Float:OX, Float:OY, Float:OZ, Float:ORX, Float:ORY, Float:ORZ, OVW, OINT, -1, 200.0);
        oTotal++;
    }
    fclose(ObjectFile);
    return oTotal;
}

stock AddObjectToFile(DFileName[], Float:OX, Float:OY, Float:OZ, Float:ORX, Float:ORY, Float:ORZ, OVW, OINT)
{
    new File:ObjectFile, Line[128];

    format(Line, sizeof(Line), "%f %f %f %f %f %f %i %i %i\r\n", OX, OY, OZ, ORX, ORY, ORZ, OVW, OINT, oModel);
    ObjectFile = fopen(DFileName, io_append);
    fwrite(ObjectFile, Line);
    fclose(ObjectFile);
    return 1;
}


forward CheckKeyPress(playerid);
public CheckKeyPress(playerid)
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
        if(CurrentCCTV[playerid] > -1 && PlayerMenu[playerid] == -1)
        {
            if(leftright == KEY_RIGHT)
                {
                    if(keys == KEY_SPRINT)
                        {
                        CCTVDegree[playerid] = (CCTVDegree[playerid] - 2.0);
                        }
                        else
                        {
                            CCTVDegree[playerid] = (CCTVDegree[playerid] - 0.5);
                        }
                    if(CCTVDegree[playerid] < 0)
                    {
                        CCTVDegree[playerid] = 359;
                        }
                    MovePlayerCCTV(playerid);

                }
            if(leftright == KEY_LEFT)
            {
                if(keys == KEY_SPRINT)
                        {
                        CCTVDegree[playerid] = (CCTVDegree[playerid] + 2.0);
                        }
                        else
                        {
                            CCTVDegree[playerid] = (CCTVDegree[playerid] + 0.5);
                        }
                        if(CCTVDegree[playerid] >= 360)
                    {
                        CCTVDegree[playerid] = 0;
                        }
                MovePlayerCCTV(playerid);

            }
            if(updown == KEY_UP)
            {
                if(CCTVRadius[playerid] < 25)
                {
                        if(keys == KEY_SPRINT)
                                {
                                    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.5);
                                MovePlayerCCTV(playerid);
                                }
                                else
                                {
                                    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.1);
                                MovePlayerCCTV(playerid);
                                }
                        }
                }
                if(updown == KEY_DOWN)
            {
                        if(keys == KEY_SPRINT)
                        {
                            if(CCTVRadius[playerid] >= 0.6)
                        {
                                    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.5);
                                MovePlayerCCTV(playerid);
                                }
                        }
                        else
                        {
                            if(CCTVRadius[playerid] >= 0.2)
                        {
                                    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.1);
                                MovePlayerCCTV(playerid);
                                }
                        }
                }
                if(keys == KEY_CROUCH)
                {
                    OnPlayerCommandText(playerid, "/cctvoff");
                }
        }
        MovePlayerCCTV(playerid);
}

public OnPlayerUpdate(playerid)
{
    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        new Float:vec[3];
        GetPlayerCameraFrontVector(playerid, vec[0], vec[1], vec[2]);
        for (new i = 0; i < sizeof(vec); i++)
            if (floatabs(vec[i]) > 10.0)
                return 0;
    }

    return 1;
}



public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
    if (fplant[playerid] == 1)
    {
        new Float:oldX, Float:oldY, Float:oldZ,
            Float:oldRotX, Float:oldRotY, Float:oldRotZ;
        GetObjectPos(objectid, oldX, oldY, oldZ);
        GetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
        new Float:OX, Float:OY, Float:OZ, Float:ORX, Float:ORY, Float:ORZ, OVW, OINT;
        if(!playerobject) // If this is a global object, move it for other players
        {
            MoveObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
        }

        if(response == EDIT_RESPONSE_FINAL)
        {
            new string[254];
            OVW = GetPlayerVirtualWorld(playerid);
            OINT = GetPlayerInterior(playerid);
            GetObjectPos(objectid, OX, OY, OZ);
            GetObjectRot(objectid, ORX, ORY, ORZ);
            AddObjectToFile(OBJECT_FILE_NAME, OX, OY, OZ, ORX, ORY, ORZ, OVW, OINT);
            SendClientMessage(playerid, COLOR_BLUE, "Object Saved, Please add more if you wish");
            format(string, sizeof(string), "Object model %i spawned at %f, %f, %f, with rotation %f, %f, %f,", oModel, OX, OY, OZ, ORX, ORY, ORZ);
            SendClientMessage(playerid, 0xD8D8D8FF, string);
            format(string, sizeof(string), "Object world %i interior id %i", OVW, OINT);
            SendClientMessage(playerid, 0xD8D8D8FF, string);
            CreateDynamicObject(oModel, Float:OX, Float:OY, Float:OZ, Float:ORX, Float:ORY, Float:ORZ, OVW, OINT, -1, 200.0);
            DestroyObject(Object);
            fplant[playerid] = 0;
        }

        if(response == EDIT_RESPONSE_CANCEL)
        {
            //The player cancelled, so put the object back to it's old position
            if(!playerobject) //Object is not a playerobject
            {
                SetObjectPos(objectid, oldX, oldY, oldZ);
                SetObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
            }
            else
            {
                SetPlayerObjectPos(playerid, objectid, oldX, oldY, oldZ);
                SetPlayerObjectRot(playerid, objectid, oldRotX, oldRotY, oldRotZ);
            }
        }
    }
    if(furnitureedit[playerid]!=0)
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            Furniture[furnitureedit[playerid]][furnitureX]=fX;
            Furniture[furnitureedit[playerid]][furnitureY]=fY;
            Furniture[furnitureedit[playerid]][furnitureZ]=fZ;
            Furniture[furnitureedit[playerid]][furnitureRX]=fRotX;
            Furniture[furnitureedit[playerid]][furnitureRY]=fRotY;
            Furniture[furnitureedit[playerid]][furnitureRZ]=fRotZ;
            DestroyObject(Furniture[furnitureedit[playerid]][furnitureObject]);
            new id=furnitureedit[playerid];
            Furniture[id][furnitureObject2]=CreateDynamicObject(Furniture[id][furnitureModel], Furniture[id][furnitureX], Furniture[id][furnitureY], Furniture[id][furnitureZ], Furniture[id][furnitureRX], Furniture[id][furnitureRY], Furniture[id][furnitureRZ], Furniture[id][furnitureHouse],Furniture[id][furnitureInterior]);
            SaveFurniture(furnitureedit[playerid]);
            furnitureedit[playerid]=0;
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            DestroyObject(Furniture[furnitureedit[playerid]][furnitureObject]);
            new query[1024];
            format(query, sizeof(query), "DELETE FROM furniture WHERE ID=%d",furnitureedit[playerid]);
            mysql_query(query);
            Furniture[furnitureedit[playerid]][furnitureX]=0;
            Furniture[furnitureedit[playerid]][furnitureY]=0;
            Furniture[furnitureedit[playerid]][furnitureZ]=0;
            furnitureedit[playerid]=0;
        }
    }
    if (graffity[playerid] == 1)
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            SetObjectPos(objectid, fX, fY, fZ);
            SetObjectRot(objectid, fRotX, fRotY, fRotZ);
            graffity[playerid] = 0;
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            DestroyObject(objectid);
            graffity[playerid] = 0;
        }
    }
    return 1;
}

forward NewLoginScreen(playerid);
public NewLoginScreen(playerid)
{
TogglePlayerSpectating(playerid, 1);
InterpolateCameraPos(playerid, 2356.6528, -1742.2469, 142.7728, 1174.76, -1377.98, 150.88, 50000, CAMERA_MOVE);
InterpolateCameraLookAt(playerid, 1513.8353, -1655.7241, 58.0422, 1513.8353, -1655.7241, 58.0422, 50000, CAMERA_MOVE);
}

forward IsAWindowCar(playerid);
public IsAWindowCar(playerid)
{
	if(IsPlayerConnected(playerid)) {
		new pveh = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(pveh >= 400 && pveh <= 423 || pveh >= 425 && pveh <= 429 || pveh >= 431 && pveh <= 434 || pveh >= 436 && pveh <= 438) {
			return 1;
		}
		else if(pveh >= 440 && pveh <= 445 || pveh == 451 || pveh >= 455 && pveh <= 456 || pveh >= 458 && pveh <= 459) {
			return 1;
		}
		else if(pveh >= 466 && pveh <= 467 || pveh >= 469 && pveh <= 470 || pveh >= 474 && pveh <= 475 || pveh >= 477 && pveh <= 479) {
			return 1;
		}
		else if(pveh >= 482 && pveh <= 483 || pveh >= 487 && pveh <= 492 || pveh >= 494 && pveh <= 508 || pveh >= 514 && pveh <= 520) {
			return 1;
		}
		else if(pveh >= 524 && pveh <= 529 || pveh >= 534 && pveh <= 538 || pveh >= 540 && pveh <= 566 || pveh >= 576 && pveh <= 580) {
			return 1;
		}
		else if(pveh == 585 || pveh >= 587 && pveh <= 589 || pveh >= 596 && pveh <= 605) {
			return 1;
		}
	}
	return 0;
}

//////////////////////////////////////////////=======MYSQL DATABASE LOADING=======//////////////////////////////////////
// Mysql Load Stuff

forward LoadGarages();
public LoadGarages()
{
    new arrCoords[15][64];
    new sql[80], row[512];
    format(sql, sizeof(sql), "SELECT COUNT(*) FROM Garages");
    mysql_query(sql);
    mysql_store_result();
    mysql_fetch_row(row);
    mysql_free_result();
    for (new idx=0; idx<MAX_GARAGES; idx++) {
        format(sql, sizeof(sql), "SELECT * FROM Garages WHERE GarageID=%d", idx);
        mysql_query(sql);
        mysql_store_result();
        if (mysql_num_rows() > 0) {
            mysql_fetch_row(row);
            split(row, arrCoords, '|');
            mysql_free_result();
            Garages[idx][EnterX] = floatstr(arrCoords[1]);
            Garages[idx][EnterY] = floatstr(arrCoords[2]);
            Garages[idx][EnterZ] = floatstr(arrCoords[3]);
            Garages[idx][ExitX] = floatstr(arrCoords[4]);
            Garages[idx][ExitY] = floatstr(arrCoords[5]);
            Garages[idx][ExitZ] = floatstr(arrCoords[6]);
            Garages[idx][EnterAngle] = floatstr(arrCoords[7]);
            Garages[idx][ExitAngle] = floatstr(arrCoords[8]);
            Garages[idx][Owned] = strval(arrCoords[9]);
            strmid(Garages[idx][Owner], arrCoords[10], 0, strlen(arrCoords[10]), 255);
            Garages[idx][Price] = strval(arrCoords[11]);
            Garages[idx][ExitInterior] = strval(arrCoords[12]);
            Garages[idx][Dynamic] = strval(arrCoords[13]);
            Garages[idx][Locked] = strval(arrCoords[14]);

            new string[128];
            if(Garages[idx][Owned] == 0)
			{
                new garagelocation[MAX_ZONE_NAME];
                GetCoords2DZone(Garages[idx][EnterX],Garages[idx][EnterY], garagelocation, MAX_ZONE_NAME);
                format(string, sizeof(string), "[Garage for Sale!]\nAdresa: %d %s\nPret: $%d",idx,garagelocation,Garages[idx][Price]);
                garagetext[idx] = Create3DTextLabel(string,0xbec339ff,Garages[idx][EnterX],Garages[idx][EnterY],Garages[idx][EnterZ],5.0,0, 0);
            } else {
                new garagelocation[MAX_ZONE_NAME];
                GetCoords2DZone(Garages[idx][EnterX],Garages[idx][EnterY], garagelocation, MAX_ZONE_NAME);
                format(string, sizeof(string), "[Garage]\nAdresa: %d %s\nOwner: %s",idx,garagelocation,Garages[idx][Owner]);
                garagetext[idx] = Create3DTextLabel(string,0xbec339ff,Garages[idx][EnterX],Garages[idx][EnterY],Garages[idx][EnterZ],5.0,0, 0);
            }
        }
    }
    mysql_free_result();
    printf("%d Garage incarcate din baza de date", MAX_GARAGES);
    return true;
}

forward SaveGarages(busid);
public SaveGarages(busid)
{
	new query[1024];
	format(query, sizeof(query), "UPDATE Garages SET EnterX=%f,EnterY=%f,EnterZ=%f,ExitX=%f,ExitY=%f,ExitZ=%f,EnterAngle=%f,ExitAngle=%f WHERE GarageID=%d",
	Garages[busid][EnterX],
	Garages[busid][EnterY],
	Garages[busid][EnterZ],
	Garages[busid][ExitX],
	Garages[busid][ExitY],
	Garages[busid][ExitZ],
	Garages[busid][EnterAngle],
	Garages[busid][ExitAngle],
	busid);
	mysql_query(query);
	//printf("Query : %s",query);

	format(query, sizeof(query), "UPDATE Garages SET Owned=%d,Owner='%s',Price=%d,Interior=%d,Dynamic=%d,Open=%d WHERE GarageID=%d",
	Garages[busid][Owned],
	Garages[busid][Owner],
	Garages[busid][Price],
	Garages[busid][ExitInterior],
	Garages[busid][Dynamic],
	Garages[busid][Locked],
	busid);
	mysql_query(query);
	//printf("Query : %s",query);
}

forward SaveFurniture(busid);
public SaveFurniture(busid)
{
	new query[1024];
	format(query, sizeof(query), "UPDATE furniture SET X=%f,Y=%f,Z=%f WHERE ID=%d",
	Furniture[busid][furnitureX],
	Furniture[busid][furnitureY],
	Furniture[busid][furnitureZ],
	busid);
	mysql_query(query);

	format(query, sizeof(query), "UPDATE furniture SET RX=%f,RY=%f,RZ=%f WHERE ID=%d",
	Furniture[busid][furnitureRX],
	Furniture[busid][furnitureRY],
	Furniture[busid][furnitureRZ],
	busid);
	mysql_query(query);
}

forward LoadFurniture();
public LoadFurniture()
{
	new arrCoords[28][64];
    new sql[80], row[512];
    format(sql, sizeof(sql), "SELECT COUNT(*) FROM furniture");
    mysql_query(sql);
    mysql_store_result();
    mysql_fetch_row(row);
    mysql_free_result();
	for (new idx=0; idx<5000; idx++)
	{
		format(sql, sizeof(sql), "SELECT * FROM furniture WHERE ID=%d", idx);
        mysql_query(sql);
        mysql_store_result();
		if (mysql_num_rows() > 0)
		{
            mysql_fetch_row(row);
            split(row, arrCoords, '|');
            mysql_free_result();
            Furniture[idx][furnitureHouse] = strval(arrCoords[1]);
            Furniture[idx][furnitureModel] = strval(arrCoords[2]);
            Furniture[idx][furnitureX] = floatstr(arrCoords[3]);
            Furniture[idx][furnitureY] = floatstr(arrCoords[4]);
            Furniture[idx][furnitureZ] = floatstr(arrCoords[5]);
            Furniture[idx][furnitureRX] = floatstr(arrCoords[6]);
            Furniture[idx][furnitureRY] = floatstr(arrCoords[7]);
			Furniture[idx][furnitureRZ] = floatstr(arrCoords[8]);
			Furniture[idx][furnitureInterior] = strval(arrCoords[9]);
			if (Furniture[idx][furnitureModel]!=0)
			{
				new query[1024];
				format(query, sizeof(query), "UPDATE furniture SET ID=%d WHERE ID=%d",furnitureid,idx);
				mysql_query(query);
				Furniture[furnitureid][furnitureHouse] = Furniture[idx][furnitureHouse];
				Furniture[furnitureid][furnitureModel] = Furniture[idx][furnitureModel];
				Furniture[furnitureid][furnitureX] = Furniture[idx][furnitureX];
				Furniture[furnitureid][furnitureY] = Furniture[idx][furnitureY];
				Furniture[furnitureid][furnitureZ] = Furniture[idx][furnitureZ];
				Furniture[furnitureid][furnitureRX] = Furniture[idx][furnitureRX];
				Furniture[furnitureid][furnitureRY] = Furniture[idx][furnitureRY];
				Furniture[furnitureid][furnitureRZ] = Furniture[idx][furnitureRZ];
				Furniture[furnitureid][furnitureInterior] = Furniture[idx][furnitureInterior];
				Furniture[idx][furnitureX] = 0;
				Furniture[idx][furnitureY] = 0;
				Furniture[idx][furnitureZ] = 0;
				Furniture[furnitureid][furnitureObject2]=CreateDynamicObject(Furniture[furnitureid][furnitureModel], Furniture[furnitureid][furnitureX], Furniture[furnitureid][furnitureY], Furniture[furnitureid][furnitureZ], Furniture[furnitureid][furnitureRX], Furniture[furnitureid][furnitureRY], Furniture[furnitureid][furnitureRZ], Furniture[furnitureid][furnitureHouse],Furniture[furnitureid][furnitureInterior]);
				furnitureid++;
			}
		}
	}
	mysql_free_result();
    return true;
}

forward SaveStocuri(busid);
public SaveStocuri(busid)
{
	new query[1024];
	format(query, sizeof(query), "UPDATE stocurimasini SET Stocuri=%d WHERE ID=%d",Stocuri[busid],busid);
	mysql_query(query);
}

forward LoadStocuri();
public LoadStocuri()
{
	new arrCoords[28][64];
    new sql[80], row[512];
    format(sql, sizeof(sql), "SELECT COUNT(*) FROM Houses");
    mysql_query(sql);
    mysql_store_result();
    mysql_fetch_row(row);
    mysql_free_result();
    for (new idx=400; idx<611; idx++)
	{
        format(sql, sizeof(sql), "SELECT * FROM stocurimasini WHERE ID=%d", idx);
        mysql_query(sql);
        mysql_store_result();
        if (mysql_num_rows() > 0)
		{
            mysql_fetch_row(row);
            split(row, arrCoords, '|');
            mysql_free_result();
			Stocuri[idx] = strval(arrCoords[1]);
        }
    }
    mysql_free_result();
    return true;
}

forward LoadHouses();
public LoadHouses()
{
    new arrCoords[28][64];
    new sql[80], row[512];
    format(sql, sizeof(sql), "SELECT COUNT(*) FROM Houses");
    mysql_query(sql);
    mysql_store_result();
    mysql_fetch_row(row);
    mysql_free_result();
    for (new idx=0; idx<MAX_HOUSES; idx++)
	{
        format(sql, sizeof(sql), "SELECT * FROM Houses WHERE HouseID=%d", idx);
        mysql_query(sql);
        mysql_store_result();
        if (mysql_num_rows() > 0)
		{
            mysql_fetch_row(row);
            split(row, arrCoords, '|');
            mysql_free_result();
            Houses[idx][EnterX] = floatstr(arrCoords[1]);
            Houses[idx][EnterY] = floatstr(arrCoords[2]);
            Houses[idx][EnterZ] = floatstr(arrCoords[3]);
            Houses[idx][EnterAngle] = floatstr(arrCoords[4]);
            Houses[idx][ExitX] = floatstr(arrCoords[5]);
            Houses[idx][ExitY] = floatstr(arrCoords[6]);
            Houses[idx][ExitZ] = floatstr(arrCoords[7]);
            strmid(Houses[idx][Owner], arrCoords[8], 0, strlen(arrCoords[8]), 255);
            Houses[idx][Owned] = strval(arrCoords[9]);
            Houses[idx][HousePrice] = strval(arrCoords[10]);
            Houses[idx][ExitInterior] = strval(arrCoords[11]);
            Houses[idx][hGun1] = strval(arrCoords[12]);
            Houses[idx][hGunAmmo1] = strval(arrCoords[13]);
            Houses[idx][hGun2] = strval(arrCoords[14]);
            Houses[idx][hGunAmmo2] = strval(arrCoords[15]);
            Houses[idx][hGun3] = strval(arrCoords[16]);
            Houses[idx][hGunAmmo3] = strval(arrCoords[17]);
            Houses[idx][Money] = strval(arrCoords[18]);
            Houses[idx][Rentable] = strval(arrCoords[19]);
            Houses[idx][RentCost] = strval(arrCoords[20]);
            Houses[idx][PickupID] = strval(arrCoords[21]);
            Houses[idx][hFridge] = strval(arrCoords[22]);
            Houses[idx][hBox] = strval(arrCoords[23]);
            Houses[idx][Drugs] = strval(arrCoords[24]);
            Houses[idx][Dynamic] = strval(arrCoords[25]);
            Houses[idx][Materials] = strval(arrCoords[26]);
            Houses[idx][Locked] = strval(arrCoords[27]);
            //Houses[idx][PickupID] = CreateDynamicCP(Houses[idx][EnterX], Houses[idx][EnterY], Houses[idx][EnterZ], 2.5, -1, -1, -1, 1.2);
            new string[128];
            if(Houses[idx][Owned] == 0)
			{
                new houselocation[MAX_ZONE_NAME];
                GetCoords2DZone(Houses[idx][EnterX],Houses[idx][EnterY], houselocation, MAX_ZONE_NAME);
                format(string, sizeof(string), "[Casa de vanzare]\nAdresa: %d %s\nPret: %d$",idx,houselocation,Houses[idx][HousePrice]);
                housetext2[idx] = Create3DTextLabel(string,COLOR_BLACK,Houses[idx][EnterX],Houses[idx][EnterY],Houses[idx][EnterZ],5.0,0, 0);
                format(string, sizeof(string), "[Casa de vanzare]\nAdresa: %d %s\nPret: %d$",idx,houselocation,Houses[idx][HousePrice]);
                housetext[idx] = Create3DTextLabel(string,0xbec339ff,Houses[idx][EnterX],Houses[idx][EnterY],Houses[idx][EnterZ],5.0,0, 0);
            }
        }
    }
    mysql_free_result();
    printf("%d Case incarcate din baza de date", MAX_HOUSES);
    return true;
}

forward SaveHouses(busid);
public SaveHouses(busid)
{
	new query[1024];
	format(query, sizeof(query), "UPDATE Houses SET EnterX=%f,EnterY=%f,EnterZ=%f,ExitX=%f,ExitY=%f,ExitZ=%f,EnterAngle=%f,Owned=%d,Owner='%s',Price=%d,Interior=%d WHERE HouseID=%d",
	Houses[busid][EnterX],
	Houses[busid][EnterY],
	Houses[busid][EnterZ],
	Houses[busid][ExitX],
	Houses[busid][ExitY],
	Houses[busid][ExitZ],
	Houses[busid][EnterAngle],
	Houses[busid][Owned],
	Houses[busid][Owner],
	Houses[busid][HousePrice],
	Houses[busid][ExitInterior],
	busid);
	mysql_query(query);

	format(query, sizeof(query), "UPDATE Houses SET Gun1=%d,Gun1a=%d,Gun2=%d,Gun2a=%d,Gun3=%d,Gun3a=%d,Money=%d,Rentable=%d,RentCost=%d,PickupID=%d,Seeds=%d,Dynamic=%d,Mats=%d WHERE HouseID=%d",
	Houses[busid][hGun1],
	Houses[busid][hGunAmmo1],
	Houses[busid][hGun2],
	Houses[busid][hGunAmmo2],
	Houses[busid][hGun3],
	Houses[busid][hGunAmmo3],
	Houses[busid][Money],
	Houses[busid][Rentable],
	Houses[busid][RentCost],
	Houses[busid][PickupID],
	Houses[busid][Drugs],
	Houses[busid][Dynamic],
	Houses[busid][Materials],
	busid);
	mysql_query(query);

	format(query, sizeof(query), "UPDATE Houses SET Fridge=%d,Stash=%d,Open=%d WHERE HouseID=%d",
	Houses[busid][hFridge],
	Houses[busid][hBox],
	Houses[busid][Locked],
	busid);
	mysql_query(query);
}

forward LoadBuilding();
public LoadBuilding()
{
	new arrCoords[10][64];
	new sql[80], row[512];
	format(sql, sizeof(sql), "SELECT COUNT(*) FROM Buildings");
	mysql_query(sql);
	mysql_store_result();
	mysql_fetch_row(row);
	totalbuildings = 13;
	mysql_free_result();

	for (new idx=0; idx<totalbuildings; idx++)
	{
	    format(sql, sizeof(sql), "SELECT * FROM Buildings WHERE BuildingID=%d", idx);
	    mysql_query(sql);
	    mysql_store_result();
	    if (mysql_num_rows() > 0)
		{
	        mysql_fetch_row(row);
			split(row, arrCoords, '|');
			mysql_free_result();
			Building[idx][EnterX] = floatstr(arrCoords[1]);
			Building[idx][EnterY] = floatstr(arrCoords[2]);
			Building[idx][EnterZ] = floatstr(arrCoords[3]);
			Building[idx][ExitX] = floatstr(arrCoords[4]);
			Building[idx][ExitY] = floatstr(arrCoords[5]);
			Building[idx][ExitZ] = floatstr(arrCoords[6]);
			strmid(Building[idx][BuildingName], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			Building[idx][ExitInterior] = strval(arrCoords[8]);
			Building[idx][Custom] = strval(arrCoords[9]);

			//Building[idx][PickupID] = CreateStreamPickup(1239, 1, Building[idx][EnterX], Building[idx][EnterY], Building[idx][EnterZ],15);
			CreateDynamicPickup(1239, 1, Building[idx][EnterX], Building[idx][EnterY], Building[idx][EnterZ], -1, -1, -1, 40.0);
		}
	}
	mysql_free_result();
	printf("%d Cladiri incarcate din baza de date", totalbuildings);
	return true;
}

forward SaveBuilding(busid);
public SaveBuilding(busid)
{
	new query[1024];
	format(query, sizeof(query), "UPDATE Buildings SET EnterX=%f,EnterY=%f,EnterZ=%f,ExitX=%f,ExitY=%f,ExitZ=%f,Name='%s',Interior=%d,Custom=%d WHERE BuildingID=%d",
	Building[busid][EnterX],
	Building[busid][EnterY],
	Building[busid][EnterZ],
	Building[busid][ExitX],
	Building[busid][ExitY],
	Building[busid][ExitZ],
	Building[busid][BuildingName],
	Building[busid][ExitInterior],
	Building[busid][Custom],
	busid);
	//printf(" SQL: %s",query);
	mysql_query(query);
}

forward LoadBusiness();
public LoadBusiness()
{
	new arrCoords[19][64];
	new sql[80], row[512];
	format(sql, sizeof(sql), "SELECT COUNT(*) FROM Businesses");
	mysql_query(sql);
	mysql_store_result();
	mysql_fetch_row(row);
	totalbusinesses = 250;
	mysql_free_result();

	for (new idx=0; idx<totalbusinesses; idx++)
	{
	    format(sql, sizeof(sql), "SELECT * FROM Businesses WHERE BusinessID=%d", idx);
	    mysql_query(sql);
	    mysql_store_result();
	    if (mysql_num_rows() > 0)
		{
	        mysql_fetch_row(row);
			split(row, arrCoords, '|');
			mysql_free_result();
			Businesses[idx][EnterX] = floatstr(arrCoords[1]);
			Businesses[idx][EnterY] = floatstr(arrCoords[2]);
			Businesses[idx][EnterZ] = floatstr(arrCoords[3]);
			Businesses[idx][PickupID] = strval(arrCoords[4]);
			Businesses[idx][ExitX] = floatstr(arrCoords[5]);
			Businesses[idx][ExitY] = floatstr(arrCoords[6]);
			Businesses[idx][ExitZ] = floatstr(arrCoords[7]);
			strmid(Businesses[idx][Owner], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			Businesses[idx][ExitInterior] = strval(arrCoords[9]);
			Businesses[idx][Custom] = strval(arrCoords[10]);
			Businesses[idx][BizPrice] = strval(arrCoords[11]);
			Businesses[idx][Owned] = strval(arrCoords[12]);
			strmid(Businesses[idx][BusinessName], arrCoords[13], 0, strlen(arrCoords[13]), 255);
			Businesses[idx][BizType] = strval(arrCoords[14]);
			Businesses[idx][Products] = strval(arrCoords[15]);
			Businesses[idx][Till] = strval(arrCoords[16]);
			Businesses[idx][EntranceCost] = strval(arrCoords[17]);
			Businesses[idx][Locked] = strval(arrCoords[18]);

			if(Businesses[idx][BizPrice] != 0)
			{
				if(Businesses[idx][Owned] == 0)
				{ Businesses[idx][PickupID] = CreateDynamicPickup(1274, 1, Businesses[idx][EnterX], Businesses[idx][EnterY], Businesses[idx][EnterZ], -1, -1, -1, 35.0); }
				else if(Businesses[idx][Owned] == 1)
				{ Businesses[idx][PickupID] = CreateDynamicPickup(1274, 1, Businesses[idx][EnterX], Businesses[idx][EnterY], Businesses[idx][EnterZ], -1, -1, -1, 35.0); }
			}
		}
	}
 	mysql_free_result();
	printf("%d Afaceri incarcate din baza de date", totalbusinesses);
	return true;
}

forward SaveBusinesses(busid);
public SaveBusinesses(busid)
{
	new query[1024];
	format(query, sizeof(query), "UPDATE Businesses SET EnterX=%f,EnterY=%f,EnterZ=%f,ExitX=%f,ExitY=%f,ExitZ=%f,Owner='%s',Interior=%d,Custom=%d,Price=%d,BizName='%s',BizType=%d,Products=%d,Till=%d,EntPrice=%d,Locked=%d WHERE BusinessID=%d",
	Businesses[busid][EnterX],
	Businesses[busid][EnterY],
	Businesses[busid][EnterZ],
	Businesses[busid][ExitX],
	Businesses[busid][ExitY],
	Businesses[busid][ExitZ],
	Businesses[busid][Owner],
	Businesses[busid][ExitInterior],
	Businesses[busid][Custom],
	Businesses[busid][BizPrice],
	Businesses[busid][BusinessName],
	Businesses[busid][BizType],
	Businesses[busid][Products],
	Businesses[busid][Till],
	Businesses[busid][EntranceCost],
	Businesses[busid][Locked],
	busid);
	//printf(" SQL: %s",query);
	mysql_query(query);

	format(query, sizeof(query), "UPDATE Businesses SET PickupID=%d,Owned=%d WHERE BusinessID=%d",
	Businesses[busid][PickupID],
	Businesses[busid][Owned],
	busid);
	//printf(" SQL: %s",query);
	mysql_query(query);
}

forward LoadStores();
public LoadStores()
{
	new arrCoords[16][64];
	new sql[80], row[512];
	format(sql, sizeof(sql), "SELECT COUNT(*) FROM Stores");
	mysql_query(sql);
	mysql_store_result();
	mysql_fetch_row(row);
	totalstores = 2;
	mysql_free_result();

	for (new idx=0; idx<totalstores; idx++)
	{
	    format(sql, sizeof(sql), "SELECT * FROM Stores WHERE StoreID=%d", idx);
	    mysql_query(sql);
	    mysql_store_result();
	    if (mysql_num_rows() > 0)
		{
	        mysql_fetch_row(row);
			split(row, arrCoords, '|');
			mysql_free_result();
			FactionStore[idx][EnterX] = floatstr(arrCoords[1]);
			FactionStore[idx][EnterY] = floatstr(arrCoords[2]);
			FactionStore[idx][EnterZ] = floatstr(arrCoords[3]);
			FactionStore[idx][PickupID] = strval(arrCoords[4]);
			FactionStore[idx][ExitX] = floatstr(arrCoords[5]);
			FactionStore[idx][ExitY] = floatstr(arrCoords[6]);
			FactionStore[idx][ExitZ] = floatstr(arrCoords[7]);
			strmid(FactionStore[idx][Owner], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			FactionStore[idx][EnterInterior] = strval(arrCoords[9]);
			FactionStore[idx][Price] = strval(arrCoords[10]);
			FactionStore[idx][Owned] = strval(arrCoords[11]);
			strmid(FactionStore[idx][StoreName], arrCoords[12], 0, strlen(arrCoords[12]), 255);
			FactionStore[idx][Products] = strval(arrCoords[13]);
			FactionStore[idx][Till] = strval(arrCoords[14]);
			FactionStore[idx][Locked] = strval(arrCoords[15]);


			if(FactionStore[idx][Price] != 0)
			{
				if(FactionStore[idx][Owned] == 0)
				{
					FactionStore[idx][PickupID] = CreateDynamicPickup(1274, 1, FactionStore[idx][EnterX], FactionStore[idx][EnterY], FactionStore[idx][EnterZ], -1, -1, -1, 15.0);
				}
				else if(FactionStore[idx][Owned] == 1)
				{
				    FactionStore[idx][PickupID] = CreateDynamicPickup(1274, 1, FactionStore[idx][EnterX], FactionStore[idx][EnterY], FactionStore[idx][EnterZ], -1, -1, -1, 15.0);
				}
			}
		}
	}
	mysql_free_result();
	printf("%d Magazine incarcate din baza de date", totalstores);
	return true;
}

forward SaveStores(busid);
public SaveStores(busid)
{
	new query[1024];
	format(query, sizeof(query), "UPDATE Stores SET EnterX=%f,EnterY=%f,EnterZ=%f,ExitX=%f,ExitY=%f,ExitZ=%f,Owner='%s' WHERE StoreID=%d",
	FactionStore[busid][EnterX],
	FactionStore[busid][EnterY],
	FactionStore[busid][EnterZ],
	FactionStore[busid][ExitX],
	FactionStore[busid][ExitY],
	FactionStore[busid][ExitZ],
	FactionStore[busid][Owner],
	busid);
	//printf(" SQL: %s",query);
	mysql_query(query);

	format(query, sizeof(query), "UPDATE Stores SET PickupID=%d,Owned=%d WHERE BusinessID=%d",
	FactionStore[busid][PickupID],
	FactionStore[busid][Owned],
	busid);
	//printf(" SQL: %s",query);
	mysql_query(query);
}

forward LoadFactions();
public LoadFactions()
{
	new arrCoords[30][64];
	new sql[80], row[512];
	format(sql, sizeof(sql), "SELECT * FROM Factions");
	mysql_query(sql);
	mysql_store_result();
	mysql_fetch_row(row);
	totalfactions = 18;
	mysql_free_result();

	for (new idx=0; idx<totalfactions; idx++)
	{
	    format(sql, sizeof(sql), "SELECT * FROM Factions WHERE FactionID=%d", idx);
	    mysql_query(sql);
	    mysql_store_result();
	    if (mysql_num_rows() > 0)
		{
	        mysql_fetch_row(row);
			split(row, arrCoords, '|');
			mysql_free_result();
			DynamicFactions[idx][fX] = floatstr(arrCoords[1]);
			DynamicFactions[idx][fY] = floatstr(arrCoords[2]);
			DynamicFactions[idx][fZ] = floatstr(arrCoords[3]);
			DynamicFactions[idx][fType] = strval(arrCoords[4]);
			DynamicFactions[idx][fJoinRank] = strval(arrCoords[5]);
			DynamicFactions[idx][fRankAmount] = strval(arrCoords[6]);
			DynamicFactions[idx][fBank] = strval(arrCoords[7]);
			strmid(DynamicFactions[idx][fName], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			strmid(DynamicFactions[idx][fRank1], arrCoords[9], 0, strlen(arrCoords[9]), 255);
			strmid(DynamicFactions[idx][fRank2], arrCoords[10], 0, strlen(arrCoords[10]), 255);
			strmid(DynamicFactions[idx][fRank3], arrCoords[11], 0, strlen(arrCoords[11]), 255);
			strmid(DynamicFactions[idx][fRank4], arrCoords[12], 0, strlen(arrCoords[12]), 255);
			strmid(DynamicFactions[idx][fRank5], arrCoords[13], 0, strlen(arrCoords[13]), 255);
			strmid(DynamicFactions[idx][fRank6], arrCoords[14], 0, strlen(arrCoords[14]), 255);
			strmid(DynamicFactions[idx][fRank7], arrCoords[15], 0, strlen(arrCoords[15]), 255);
			strmid(DynamicFactions[idx][fRank8], arrCoords[16], 0, strlen(arrCoords[16]), 255);
			strmid(DynamicFactions[idx][fRank9], arrCoords[17], 0, strlen(arrCoords[17]), 255);
			strmid(DynamicFactions[idx][fRank10], arrCoords[18], 0, strlen(arrCoords[18]), 255);
			strmid(DynamicFactions[idx][fRank11], arrCoords[19], 0, strlen(arrCoords[19]), 255);
			strmid(DynamicFactions[idx][fRank12], arrCoords[20], 0, strlen(arrCoords[20]), 255);
			strmid(DynamicFactions[idx][fRank13], arrCoords[21], 0, strlen(arrCoords[21]), 255);
			strmid(DynamicFactions[idx][fRank14], arrCoords[22], 0, strlen(arrCoords[22]), 255);
			strmid(DynamicFactions[idx][fRank15], arrCoords[23], 0, strlen(arrCoords[23]), 255);
			strmid(DynamicFactions[idx][fRank16], arrCoords[24], 0, strlen(arrCoords[24]), 255);
			strmid(DynamicFactions[idx][fRank17], arrCoords[25], 0, strlen(arrCoords[25]), 255);
			strmid(DynamicFactions[idx][fRank18], arrCoords[26], 0, strlen(arrCoords[26]), 255);
			strmid(DynamicFactions[idx][fRank19], arrCoords[27], 0, strlen(arrCoords[27]), 255);
			strmid(DynamicFactions[idx][fRank20], arrCoords[28], 0, strlen(arrCoords[28]), 255);
		}
	}
	mysql_free_result();
	printf("%d Factiuni incarcate din baza de date", totalfactions);
	return true;
}

forward SaveFactions(busid);
public SaveFactions(busid)
{
	new query[1024];
	printf("Saving Faction %d.",busid);
	format(query, sizeof(query), "UPDATE Factions SET fX=%f,fY=%f,fZ=%f,fName='%s',fBank=%d WHERE FactionID=%d",
	DynamicFactions[busid][fX],
	DynamicFactions[busid][fY],
	DynamicFactions[busid][fZ],
	DynamicFactions[busid][fName],
	DynamicFactions[busid][fBank],
	busid);
	mysql_query(query);

	format(query, sizeof(query), "UPDATE Factions SET fRankAmount=%d,fType=%d,fJoinRank=%d,fRank1='%s',fRank2='%s',fRank3='%s' WHERE FactionID=%d",
	DynamicFactions[busid][fRankAmount],
	DynamicFactions[busid][fType],
	DynamicFactions[busid][fJoinRank],
	DynamicFactions[busid][fRank1],
	DynamicFactions[busid][fRank2],
	DynamicFactions[busid][fRank3],
	busid);
	mysql_query(query);

	format(query, sizeof(query), "UPDATE Factions SET fRank4='%s',fRank5='%s',fRank6='%s',fRank7='%s',fRank8='%s',fRank9='%s',fRank10='%s' WHERE FactionID=%d",
	DynamicFactions[busid][fRank4],
	DynamicFactions[busid][fRank5],
	DynamicFactions[busid][fRank6],
	DynamicFactions[busid][fRank7],
	DynamicFactions[busid][fRank8],
	DynamicFactions[busid][fRank9],
	DynamicFactions[busid][fRank10],
	busid);
	mysql_query(query);

	format(query, sizeof(query), "UPDATE Factions SET fRank11='%s',fRank12='%s',fRank13='%s',fRank14='%s',fRank15='%s' WHERE FactionID=%d",
	DynamicFactions[busid][fRank11],
	DynamicFactions[busid][fRank12],
	DynamicFactions[busid][fRank13],
	DynamicFactions[busid][fRank14],
	DynamicFactions[busid][fRank15],
	busid);
	mysql_query(query);

	format(query, sizeof(query), "UPDATE Factions SET fRank16='%s',fRank17='%s',fRank18='%s',fRank19='%s',fRank20='%s' WHERE FactionID=%d",
	DynamicFactions[busid][fRank16],
	DynamicFactions[busid][fRank17],
	DynamicFactions[busid][fRank18],
	DynamicFactions[busid][fRank19],
	DynamicFactions[busid][fRank20],
	busid);
	mysql_query(query);
}
//////////////////////////////////////////////=======MYSQL DATABASE LOADING=======//////////////////////////////////////
//====================================================================================================================//

#define Version 1 // 1 == Newest \\// 2 == If we are to make a new revision for testing
#if Version == 1
//                  Plugins

//                  Others

//                  Functions
// #include "/IBP/Functions/ReturnPlayerName.pwn" // ReturnPlayerName

//=== ADMIN CHECK ===//
stock AdminCheck(playerid, adminlevel)
{
	if(PlayerInfo[playerid][pAdministrator] == 0)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "[EROARE]:Nu esti autorizat sa folosesti aceasta comanda");
		return 0;
	}
	if(PlayerInfo[playerid][pAdministrator] < adminlevel)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "[EROARE]:Nu esti autorizat sa folosesti aceasta comanda");
		return 0;
	}
	return 1;
}
//=== ADMIN CHECK ===//
//=== SEND PLAYER EXTENDED MESSAGE ===//
stock SendPlayerExtendedMessage(playerid, color, const string[])
{
    new string1[256], string2[256], string3[256];
	if(strlen(string) > 90)
	{
		format(string1, sizeof(string1), string);
		format(string2, sizeof(string2), string);
		strdel(string1, 90, 256);
		strdel(string2, 0, 90);
		format(string3, sizeof(string3), "%s ...", string1);
		SendClientMessage(playerid,color, string3);
		format(string3, sizeof(string3), "... %s", string2);
		SendClientMessage(playerid,color, string3);
		return true;
	}
	else
	{
		SendClientMessage(playerid,color, string);
	    return true;
	}
}
//=== SEND PLAYER EXTENDED MESSAGE ===//
//=== SEND ERROR MESSAGE ===//
#define ERRORMESSAGE_COLOR COLOR_GREY

stock SendErrorMessage(playerid, const string[])
{
	if(strlen(string) < 2)
	{
		return 1;
	}

	SendClientMessage(playerid,ERRORMESSAGE_COLOR,string);

	return 1;
}
//=== SEND ERROR MESSAGE ===//
//=== STOCKS ===//

stock IsPlayerAiming(playerid) {
	new anim = GetPlayerAnimationIndex(playerid);
	if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) ||
	(anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
	return 0;
}


stock getRandomLetter() {
    return 65 + random(52);
}


stock Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ, Float:ObjX, Float:ObjY, Float:ObjZ, Float:FrX, Float:FrY, Float:FrZ) {

	new Float:TGTDistance;

	TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

	new Float:tmpX, Float:tmpY, Float:tmpZ;

	tmpX = FrX * TGTDistance + CamX;
	tmpY = FrY * TGTDistance + CamY;
	tmpZ = FrZ * TGTDistance + CamZ;

	return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:XX, Float:YY)
{
  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2,XX));
  DY = floatabs(floatsub(y2,YY));

  if (DY == 0.0 || DX == 0.0) {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else {
    angle = atan(DX/DY);

    if(XX > x2 && YY <= y2) angle += 90.0;
    else if(XX <= x2 && YY < y2) angle = floatsub(90.0, angle);
    else if(XX < x2 && YY >= y2) angle -= 90.0;
    else if(XX >= x2 && YY > y2) angle = floatsub(270.0, angle);
  }
  return floatadd(angle, 90.0);
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:camera_x,Float:camera_y,Float:camera_z,Float:vector_x,Float:vector_y,Float:vector_z;
    GetPlayerCameraPos(playerid, camera_x, camera_y, camera_z);
    GetPlayerCameraFrontVector(playerid, vector_x, vector_y, vector_z);

    new Float:vertical, Float:horizontal;

    switch (GetPlayerWeapon(playerid)) {
        case 34,35,36:
        {
            if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, vector_x, vector_y, vector_z) < radius) return true;
            return false;
        }
        case 30,31: {vertical = 4.0; horizontal = -1.6;}
        case 33: {vertical = 2.7; horizontal = -1.0;}
        default: {vertical = 6.0; horizontal = -2.2;}
    }

    new Float:angle = GetPointAngleToPoint(0, 0, floatsqroot(vector_x*vector_x+vector_y*vector_y), vector_z) - 270.0;
    new Float:resize_x, Float:resize_y, Float:resize_z = floatsin(angle+vertical, degrees);
    GetXYInFrontOfPoint(resize_x, resize_y, GetPointAngleToPoint(0, 0, vector_x, vector_y)+horizontal, floatcos(angle+vertical, degrees));

    if (DistanceCameraTargetToLocation(camera_x, camera_y, camera_z, x, y, z, resize_x, resize_y, resize_z) < radius) return true;
    return false;
}

stock IsPlayerAimingAtPlayer(playerid, targetid) {
 new Float:x, Float:y, Float:z;
 GetPlayerPos(targetid, x, y, z);
 if (IsPlayerAimingAt(playerid, x, y, z-0.75, 0.25)) return true;
 if (IsPlayerAimingAt(playerid, x, y, z-0.25, 0.25)) return true;
 if (IsPlayerAimingAt(playerid, x, y, z+0.25, 0.25)) return true;
 if (IsPlayerAimingAt(playerid, x, y, z+0.75, 0.25)) return true;
 return false;
}

stock GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}

stock Move3DTextLabel(&Text3D:ID, string[], color, Float:NewX, Float:NewY, Float:NewZ)
{
    Delete3DTextLabel(ID);
    ID = Create3DTextLabel(string,color,NewX,NewY,NewZ,5.0,0, 1);
}

stock IsVehicleDrivingBackwards(vehicleid) // By Joker
{
        new
                Float:Float[3]
        ;
        if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
        {
                GetVehicleZAngle(vehicleid, Float[0]);
                if(Float[0] < 90)
                {
                        if(Float[1] > 0 && Float[2] < 0) return true;
                }
                else if(Float[0] < 180)
                {
                        if(Float[1] > 0 && Float[2] > 0) return true;
                }
                else if(Float[0] < 270)
                {
                        if(Float[1] < 0 && Float[2] > 0) return true;
                }
                else if(Float[1] < 0 && Float[2] < 0) return true;
        }
        return false;
}

stock IsVehicleSpawned(vehicleid)
{
	new Float:XX,Float:YY,Float:ZZ;
	GetVehiclePos(vehicleid, XX, YY, ZZ);
	if (XX == 0.0 && YY == 0.0 && ZZ == 0.0) return 0;
	return 1;
}

stock GetPlayerSpeed( playerid, get3d )
{
	new Float:x, Float:y, Float:z;
	if( IsPlayerInAnyVehicle( playerid ) )
	    GetVehicleVelocity( GetPlayerVehicleID( playerid ), x, y, z );
	else
	    GetPlayerVelocity( playerid, x, y, z );

	return SpeedCheck( x, y, z, 100.0, get3d );
}

stock CheckInput(input[])
{
    new CheckChars[][] = { "'", "`", "TABLE", "DROP", "CREATE", "INSERT", "INTO", "DELETE", "SET", "UPDATE" };//asta e protectie sqli.. wtf
    for(new x = 0; x < sizeof(CheckChars); x++)
    {
        if(strfind(input, CheckChars[x], true) == 0)
        {
            return true;
        }
    }
    return false;
}

stock IsSkinValid(SkinID) return ((SkinID >= 0 && SkinID <= 1)||(SkinID == 2)||(SkinID == 7)||(SkinID >= 9 && SkinID <= 41)||(SkinID >= 43 && SkinID <= 85)||(SkinID >=87 && SkinID <= 118)||(SkinID >= 120 && SkinID <= 148)||(SkinID >= 150 && SkinID <= 207)||(SkinID >= 209 && SkinID <= 272)||(SkinID >= 274 && SkinID <= 288)||(SkinID >= 290 && SkinID <= 299)) ? true:false;

stock ClearScreen(playerid)
{
	for(new i = 0; i < 50; i++)
	{
	    SendClientMessage(playerid, COLOR_WHITE, " ");
	}
	return 0;
}

stock GetPlayerFirstName(playerid)
{
	new namestring[2][MAX_PLAYER_NAME];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	split(name, namestring, '_');
	return namestring[0];
}

stock GetPlayerLastName(playerid)
{
	new namestring[2][MAX_PLAYER_NAME];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	split(name, namestring, '_');
	return namestring[1];
}

stock GetPlayerIpAddress(playerid)
{
	new IP[16];
	GetPlayerIp(playerid, IP, sizeof(IP));
	return IP;
}

stock GetAmmo(playerid)
{
	new d[2], slot = -1;
	switch(GetPlayerWeapon(playerid))
	{
		case 0, 1: slot = 0;
		case 2..9: slot = 1;
		case 22..24: slot = 2;
		case 25..27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35..38: slot = 7;
		case 16..19, 39: slot = 8;
		case 41..43: slot = 9;
		case 10..15: slot = 10;
		case 44..46: slot = 11;
		case 40: slot = 12;
	}
	if(slot == -1) return -1;
	GetPlayerWeaponData(playerid,slot,d[0],d[1]);
	return d[1];
}

stock encode_lights(light1, light2, light3, light4)
{
        return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}

stock strvalEx( const string[] )
{
	if( strlen( string ) >= 50 ) return false;
	return strval(string);
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    if (IsPlayerInAnyVehicle(playerid))
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    else
        GetPlayerFacingAngle(playerid, a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
    return floatround(a);
}


stock GetRankName(playerid)
{
    new ranktext[MAX_RANK_NAME];
    switch(PlayerInfo[playerid][pRank]) {
        case 1: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank1]);
        case 2: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank2]);
        case 3: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank3]);
        case 4: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank4]);
        case 5: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank5]);
        case 6: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank6]);
        case 7: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank7]);
        case 8: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank8]);
        case 9: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank9]);
        case 10: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank10]);
        case 11: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank11]);
        case 12: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank12]);
        case 13: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank13]);
        case 14: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank14]);
        case 15: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank15]);
        case 16: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank16]);
        case 17: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank17]);
        case 18: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank18]);
        case 19: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank19]);
        case 20: format(ranktext, MAX_RANK_NAME, "%s", DynamicFactions[PlayerInfo[playerid][pFaction]][fRank20]);
    }
    return ranktext;
}

//=== STOCKS ===//
//=== SEND VEHICLE MESSAGE ===//
stock SendVehicleMessage(playerid, szMessage[])
{
	new iVehicleID,
		szString[18+MAX_PLAYER_NAME+90];

	iVehicleID = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pMaskuse] == 1)
	{
		format(szString, 18+MAX_PLAYER_NAME+90, "[Masina] [Masca_%d] sopteste: %s", PlayerInfo[playerid][pMaskID], szMessage);
	}
	else
	{
	    format(szString, 18+MAX_PLAYER_NAME+90, "[Masina] %s sopteste: %s", GetPlayerNameEx(playerid), szMessage);
	}
	foreach(Player, i)
	{
		if(IsPlayerInVehicle(i, iVehicleID))
		{
			SendClientMessage(i,COLOR_YELLOW,szString);
		}
	}
	return 1;
}
//=== SEND VEHICLE MESSAGE ===//
//=== ADD CRIMINAL RECORD ===//
stock AddCriminalRecord(playerid, szCharge[], iOfficer)
{
	if(strlen(szCharge) < 5)
	{
		return SendErrorMessage(iOfficer, "A problem occured when adding the charges onto the player. Please contact a developer.");
	}
	else
	{
		new szQuery[5+120+10+5], Day , Month , Year, Date[25];
		getdate(Year, Month, Day);
		format(Date, 25,"%02d/%02d/%d", Day , Month , Year);

		format(szQuery, 92+5+120+10+5,"INSERT INTO `criminalrecords` (userid, charge, date, officer) VALUES('%d', '%s', '%s', '%d')", PlayerInfo[playerid][pDatabaseID], szCharge, Date, PlayerInfo[iOfficer][pDatabaseID]);
		mysql_query(szQuery);

		return 1;
	}
}
//=== ADD CRIMINAL RECORD ===//
//=== REMOVE CRIMINAL RECORD ===//
stock RemoveCriminalRecord(playerid, iChargeID)
{
	new szQuery[42+5];

	format(szQuery, 42+5,"DELETE FROM `criminalrecords` WHERE id=`%d`", iChargeID);

	if(mysql_query(szQuery))
	{
		return 1;
	}
	else
	{
		return 0;
	}
}
//=== REMOVE CRIMINAL RECORD ===//
//=== ONE PLAY ANIM ===//
OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    if(!IsPlayerInAnyVehicle( playerid ) )
	{
        if(Wounded[playerid] == 0 && IsJacking[playerid] == 0)
		{
		    gPlayerUsingLoopingAnim[playerid] = 1;
			ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
		}
	}
}
//=== ONE PLAY ANIM ===//
//=== LOOPING ANIM ===//
LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    if(!IsPlayerInAnyVehicle( playerid ) )
	{
        if(Wounded[playerid] == 0 && IsJacking[playerid] == 0)
		{
		    gPlayerUsingLoopingAnim[playerid] = 1;
		    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
		}
	}
}
//=== LOOPING ANIM ===//


//                  Systems


//=== ANTICHEAT SYSTEM ===//
stock AntiMoneyCheat()
{
	foreach(Player, i)
	{
		if(GetPlayerMoney(i) != GetPlayerCash(i) && TutorialStage[i] != 0 && PlayerInfo[i][pTut] != 1 && gPlayerLogged[i] == 1)
		{
			PlayerInfo[i][pHackWarns] += 1;
			//////////////////////////////////////////////////////////////////////////////////////////////
			if(PlayerInfo[i][pHackWarns] >= 10)
			{
				new iYear,
					iMonth,
					iDay,
					szMessage[74+MAX_PLAYER_NAME+2+2+3];

				PlayerInfo[i][pBan] = 1;
				getdate(iYear, iMonth, iDay);

				format(szMessage, 74+MAX_PLAYER_NAME+2+2+3,"[BAN] %s a fost banat de catre un administrator - Motiv: [MONEYHACK] 10 Anti-Cheat Warnings [%d/%d/%d]", GetPlayerNameEx(i), iDay, iMonth, iYear);
				BanLog(szMessage);
				SendClientMessageToAll(COLOR_LIGHTRED,szMessage);
				BanEx(i, "Banned for reaching the maximum amount of Anti-Cheat warnings - Money Hack");
			}
			//////////////////////////////////////////////////////////////////////////////////////////////
			new szMessage[52+MAX_PLAYER_NAME+3+9+9];

			format(szMessage, 52+MAX_PLAYER_NAME+3+9+9,"AdmWarning: %s (%d) has got $%d, but should only have $%d", GetPlayerNameEx(i), i, GetPlayerMoney(i), GetPlayerCash(i));
			AdministratorMessage(COLOR_RED,szMessage, 1);
			HackLog(szMessage);
		}
	}

	return 1;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
stock AntiSpeedCheat()
{
	foreach(Player, i)
	{
		if(GetPlayerSpeed(i, 0) >= 220)
		{
			PlayerInfo[i][pHackWarns] += 1;
			//////////////////////////////////////////////////////////////////////////////////////////////
			if(PlayerInfo[i][pHackWarns] >= 10)
			{
				new iYear,
					iMonth,
					iDay,
					szMessage[74+MAX_PLAYER_NAME+2+2+3];

				PlayerInfo[i][pBan] = 1;
				getdate(iYear, iMonth, iDay);

				format(szMessage, 74+MAX_PLAYER_NAME+2+2+3,"[BAN] %s was banned by SYSTEM - Reason: [SPEED] 10 Anti-Cheat Warnings [%d/%d/%d]", GetPlayerNameEx(i), iDay, iMonth, iYear);
				BanLog(szMessage);
				HackLog(szMessage);
				SendClientMessageToAll(COLOR_LIGHTRED,szMessage);
				BanEx(i, "Banned for reaching the maximum amount of Anti-Cheat warnings - Speed Hack");
			}
			//////////////////////////////////////////////////////////////////////////////////////////////
			new szMessage[58+MAX_PLAYER_NAME+3+4];

			format(szMessage, 58+MAX_PLAYER_NAME+3+4,"AdmWarning: %s (%d) - Possible speedhacking. Driving at %d KM/H", GetPlayerNameEx(i), i, GetPlayerSpeed(i, 0));
			AdministratorMessage(COLOR_RED,szMessage, 1);
			HackLog(szMessage);
		}
	}

	return 1;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
stock AntiJetpackCheat()
{
	foreach(Player, i)
	{
		if(GetPlayerSpecialAction(i) == 2 && PlayerInfo[i][pAdministrator] == 0 && gPlayerLogged[i] == 1)
		{
			PlayerInfo[i][pBan] = 1;

			new iYear,
				iMonth,
				iDay,
				szMessage[51+MAX_PLAYER_NAME+2+2+4];

			getdate(iYear, iMonth, iDay);

			format(szMessage, 51+MAX_PLAYER_NAME+2+2+4,"[BAN] %s was banned by SYSTEM - Reason: Jetpack [%d/%d/%d]", GetPlayerNameEx(i), iYear, iMonth, iDay);
			SendClientMessageToAll(COLOR_LIGHTRED,szMessage);
			BanLog(szMessage);
			HackLog(szMessage);
			BanEx(i, "[JETPACK ANTICHEAT] - Spawning a Jetpack");
		}
	}

	return 1;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////Made by Extremo///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum WepInfo
{
	pSlot[13],
	pPreviousSlot[13],
	bool:pWeaponUpdate,
	pWarnings,
	pTimestamp,
	pPrevstamp
};
new WeaponInfo[MAX_PLAYERS][WepInfo];
stock AntiWeaponHack()
{
	foreach(Player, playerid)
	{
    	if(WeaponInfo[playerid][pWeaponUpdate]==false && gPlayerLogged[playerid] == 1)
		{
		    if(GetTickCount() - WeaponInfo[playerid][pPrevstamp] > 6000 && WeaponInfo[playerid][pPrevstamp] != 0)
		    {
		        for(new i = 0; i < 13; i++)
		        {
		            WeaponInfo[playerid][pPreviousSlot][i] = 0;
				}
				WeaponInfo[playerid][pPrevstamp] = 0;
			}
			new weapon, ammo;
			for(new i=0; i < 13; i++)
			{
			    if(IsPlayerConnected(playerid))
			    {
					GetPlayerWeaponData(playerid, i, weapon, ammo);
					if(ammo==0 && weapon!=0 && WeaponInfo[playerid][pSlot][i] != 0 && WeaponInfo[playerid][pWeaponUpdate] == false)
					{
						WeaponInfo[playerid][pWeaponUpdate] = true;
						WeaponInfo[playerid][pPreviousSlot][i] = WeaponInfo[playerid][pSlot][i];
						WeaponInfo[playerid][pPrevstamp] = GetTickCount();
						WeaponInfo[playerid][pSlot][i] = 0;
						WeaponInfo[playerid][pWeaponUpdate] = false;
						continue;
					}
					GetPlayerWeaponData(playerid, i, weapon, ammo);
					if(WeaponInfo[playerid][pSlot][i] != weapon && ammo != 0 && WeaponInfo[playerid][pWeaponUpdate] == false && WeaponInfo[playerid][pPreviousSlot][i] != weapon)
					{
						if(WeaponInfo[playerid][pTimestamp] == 0)
						{
						    WeaponInfo[playerid][pTimestamp] = GetTickCount();
						    WeaponInfo[playerid][pWarnings]++;
						    continue;
						}
						else if(GetTickCount() - WeaponInfo[playerid][pTimestamp] > 6000)
						{
						    WeaponInfo[playerid][pTimestamp] = 0;
						    WeaponInfo[playerid][pWarnings] = 0;
						    continue;
						}
						else if(GetTickCount() - WeaponInfo[playerid][pTimestamp] < 6000)
						{
						    WeaponInfo[playerid][pTimestamp] = GetTickCount();
						    WeaponInfo[playerid][pWarnings]++;
						    continue;
						}
						else
						{
						    WeaponInfo[playerid][pTimestamp] = 0;
						    WeaponInfo[playerid][pWarnings] = 0;
						    continue;
						}
					}
					if(WeaponInfo[playerid][pWarnings] > 1)
					{
					    RemovePlayerWeaponEx(playerid, weapon);
					}
					if(WeaponInfo[playerid][pWarnings] >= 2)
					{
					    new msg[MAX_PLAYER_NAME+64];
						GetPlayerName(playerid, msg, sizeof(msg));
						WeaponInfo[playerid][pPreviousSlot][i] = WeaponInfo[playerid][pSlot][i];
						WeaponInfo[playerid][pPrevstamp] = GetTickCount();
						WeaponInfo[playerid][pSlot][i] = 0;
						format(msg, sizeof(msg), "AdmCmd: %s a fost dat afara de catre WestCoast-BOT ,motiv: Weapon Hack.", msg);
						SendClientMessageToAll(COLOR_LIGHTRED, msg);
						WeaponInfo[playerid][pTimestamp] = 0;
						WeaponInfo[playerid][pWarnings] = 0;
						Kick(playerid);
					}
				}
			}
		}
		if (GetPlayerWeapon(playerid) == 38 || GetPlayerWeapon(playerid) == 36 || GetPlayerWeapon(playerid) == 35 || GetPlayerWeapon(playerid) == 37|| GetPlayerWeapon(playerid) == 39|| GetPlayerWeapon(playerid) == 40)
		{
			ResetPlayerWeapons(playerid);
		}
	}
}
stock GivePlayerWeaponEx(playerid, weaponid, ammo)
{
    WeaponInfo[playerid][pWeaponUpdate] = true;
    WeaponInfo[playerid][pPreviousSlot][WeaponSlot(weaponid)] = WeaponInfo[playerid][pSlot][WeaponSlot(weaponid)];
    WeaponInfo[playerid][pPrevstamp] = GetTickCount();
	WeaponInfo[playerid][pSlot][WeaponSlot(weaponid)] = weaponid;
	GivePlayerWeapon(playerid, weaponid, ammo);
	WeaponInfo[playerid][pWeaponUpdate] = false;
}
stock ResetPlayerWeaponsEx(playerid)
{
    WeaponInfo[playerid][pWeaponUpdate] = true;
	for(new i=0; i != 12; i++)
	{
	    WeaponInfo[playerid][pPreviousSlot][i] = WeaponInfo[playerid][pSlot][i];
	    WeaponInfo[playerid][pPrevstamp] = GetTickCount();
	    WeaponInfo[playerid][pSlot][i] = 0;
	}
	ResetPlayerWeapons(playerid);
	WeaponInfo[playerid][pWeaponUpdate] = false;
}
stock WeaponSlot(weaponid)
{
	switch(weaponid)
	{
		case 0..1: return 0;
		case 2..9: return 1;
		case 22..24: return 2;
		case 25..27: return 3;
		case 28,29,32: return 4;
		case 30..31: return 5;
		case 33..34: return 6;
		case 35..38: return 7;
		case 16,17,18,39: return 8;
		case 41..43: return 9;
		case 10..15: return 10;
		case 44..46: return 11;
		case 40: return 12;
	}
	return 0;
}
stock RemovePlayerWeaponEx(playerid, weaponid)
{
	if(WeaponInfo[playerid][pSlot][WeaponSlot(weaponid)] != 0)
	{
	    WeaponInfo[playerid][pWeaponUpdate] = true;
	    WeaponInfo[playerid][pPreviousSlot][WeaponSlot(weaponid)] = WeaponInfo[playerid][pSlot][WeaponSlot(weaponid)];
	    WeaponInfo[playerid][pPrevstamp] = GetTickCount();
		WeaponInfo[playerid][pSlot][WeaponSlot(weaponid)] = 0;
        new
	    saveweapon[13],
	    saveammo[13];

		for(new slot = 0; slot < 13; slot++)
	    	GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);
		ResetPlayerWeapons(playerid);
		for(new slot = 0; slot < 13; slot++)
		{
		    if(WeaponSlot(weaponid)!=slot)
		    {
		    	GivePlayerWeapon(playerid, saveweapon[slot], saveammo[slot]);
			}
		}
		WeaponInfo[playerid][pWeaponUpdate] = false;
	}
	return 1;
}

stock InitSlots(playerid)
{
	for(new i = 0; i < 13; i++)
	{
	    WeaponInfo[playerid][pSlot][i] = 0;
	}
}

#define GivePlayerWeapon GivePlayerWeaponEx
#define ResetPlayerWeapons ResetPlayerWeaponsEx
//=== ANTICHEAT SYSTEM ===//

//                  Timers

//=== ONE MINUTE TIMER ===//
forward OneMinuteTimer();
public OneMinuteTimer()
{
    SyncTime();
	AntiMoneyCheat(); // Check for moneyspoofing
	AntiSpeedCheat(); // Check for speedhacking
	AntiJetpackCheat(); // Check for usage of Jetpack

    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(gPlayerLogged[i] == 1)
		{
		    PlayerInfo[i][pPickupTime]--;
	        PlayerInfo[i][pPaydayTime]++;
	        if(PlayerInfo[i][pPaydayTime] > 59)
			{
				printf("OneMinuteTimer() Procced");
				if(PlayerInfo[i][pJob] > 0) {
	    	    if(PlayerInfo[i][pContractTime] < 25)
	    	    { PlayerInfo[i][pContractTime] ++; } }
	            new wstring[128];
	            new randcheck = 100 + random(90);
	            new pfac = PlayerInfo[i][pFaction];
	            if(pfac == 1) { PlayerInfo[i][pPayCheck] += 115; DynamicFactions[pfac][fBank]=DynamicFactions[pfac][fBank]-115; }
	            else if(pfac == 2) { PlayerInfo[i][pPayCheck] += 150; DynamicFactions[pfac][fBank]=DynamicFactions[pfac][fBank]-150; }
	            else if(pfac == 3) { PlayerInfo[i][pPayCheck] += 100; DynamicFactions[pfac][fBank]=DynamicFactions[pfac][fBank]-100; }
	            new pjob = PlayerInfo[i][pJob];
	            if(pjob == 0) { PlayerInfo[i][pPayCheck] += 50;}
	            else if(pjob == 1) { PlayerInfo[i][pPayCheck] += 145;}
	            else if(pjob == 2) { PlayerInfo[i][pPayCheck] += 85; }
	            else if(pjob == 3) { PlayerInfo[i][pPayCheck] += 140; }
	            else if(pjob == 4) { PlayerInfo[i][pPayCheck] += 135; }
	            else if(pjob == 5) { PlayerInfo[i][pPayCheck] += 160; }
	            else if(pjob == 6) { PlayerInfo[i][pPayCheck] += 190; }
	            else if(pjob == 7) { PlayerInfo[i][pPayCheck] += 250; }
	            else if(pjob == 8) { PlayerInfo[i][pPayCheck] += 85; }
	            else if(pjob == 9) { PlayerInfo[i][pPayCheck] += 240; }
	            new interest = (PlayerInfo[i][pBank]/1000)*(intrate);
	            new sinterest = (PlayerInfo[i][pSavings]/100)*(intrate);
	            new bonus = PlayerInfo[i][pPayCheck];
				new newbank;
				if (PlayerInfo[i][pImprumut] == 10000)
				{
					newbank = PlayerInfo[i][pBank] - 500 + interest + randcheck + bonus;
				}
				else
				{
					newbank = PlayerInfo[i][pBank] + interest + randcheck + bonus;
				}
				if (PlayerInfo[i][pFaction] == 2)
				{
					if (PlayerInfo[i][pRank] == 1)
					{
						newbank = newbank + 3500;
						randcheck = randcheck + 3500;
					}
					else if (PlayerInfo[i][pRank] == 2)
					{
						newbank = newbank + 3000;
						randcheck = randcheck + 3000;
					}
					else if (PlayerInfo[i][pRank] == 3)
					{
						newbank = newbank + 2800;
						randcheck = randcheck + 2800;
					}
					else if (PlayerInfo[i][pRank] == 4)
					{
						newbank = newbank + 2600;
						randcheck = randcheck + 2600;
					}
					else if (PlayerInfo[i][pRank] == 5)
					{
						newbank = newbank + 2400;
						randcheck = randcheck + 2400;
					}
					else if (PlayerInfo[i][pRank] == 6)
					{
						newbank = newbank + 2200;
						randcheck = randcheck + 2200;
					}
					else if (PlayerInfo[i][pRank] == 7)
					{
						newbank = newbank + 2000;
						randcheck = randcheck + 2000;
					}
					else if (PlayerInfo[i][pRank] == 8)
					{
						newbank = newbank + 1800;
						randcheck = randcheck + 1800;
					}
					else if (PlayerInfo[i][pRank] == 9)
					{
						newbank = newbank + 1600;
						randcheck = randcheck + 1600;
					}
					else if (PlayerInfo[i][pRank] == 10)
					{
						newbank = newbank + 1400;
						randcheck = randcheck + 1400;
					}
					else if (PlayerInfo[i][pRank] == 11)
					{
						newbank = newbank + 1200;
						randcheck = randcheck + 1200;
					}
					else if (PlayerInfo[i][pRank] == 12)
					{
						newbank = newbank + 1000;
						randcheck = randcheck + 1000;
					}
				}
				else if (PlayerInfo[i][pFaction] == 3)
				{
					if (PlayerInfo[i][pRank] == 1)
					{
						newbank = newbank + 4000;
						randcheck = randcheck + 4000;
					}
					else if (PlayerInfo[i][pRank] == 2)
					{
						newbank = newbank + 5500;
						randcheck = randcheck + 5500;
					}
					else if (PlayerInfo[i][pRank] == 3)
					{
						newbank = newbank + 3500;
						randcheck = randcheck + 3500;
					}
					else if (PlayerInfo[i][pRank] == 4)
					{
						newbank = newbank + 3200;
						randcheck = randcheck + 3200;
					}
					else if (PlayerInfo[i][pRank] == 5)
					{
						newbank = newbank + 3000;
						randcheck = randcheck + 3000;
					}
					else if (PlayerInfo[i][pRank] == 6)
					{
						newbank = newbank + 2800;
						randcheck = randcheck + 2800;
					}
					else if (PlayerInfo[i][pRank] == 7)
					{
						newbank = newbank + 2600;
						randcheck = randcheck + 2600;
					}
					else if (PlayerInfo[i][pRank] == 8)
					{
						newbank = newbank + 2400;
						randcheck = randcheck + 2400;
					}
					else if (PlayerInfo[i][pRank] == 9)
					{
						newbank = newbank + 2200;
						randcheck = randcheck + 2200;
					}
					else if (PlayerInfo[i][pRank] == 10)
					{
						newbank = newbank + 2000;
						randcheck = randcheck + 2000;
					}
					else if (PlayerInfo[i][pRank] == 11)
					{
						newbank = newbank + 1800;
						randcheck = randcheck + 1800;
					}
					else if (PlayerInfo[i][pRank] == 12)
					{
						newbank = newbank + 1600;
						randcheck = randcheck + 1600;
					}
					else if (PlayerInfo[i][pRank] == 13)
					{
						newbank = newbank + 1400;
						randcheck = randcheck + 1400;
					}
					else if (PlayerInfo[i][pRank] == 14)
					{
						newbank = newbank + 1200;
						randcheck = randcheck + 1200;
					}
					else if (PlayerInfo[i][pRank] == 15)
					{
						newbank = newbank + 1000;
						randcheck = randcheck + 1000;
					}
				}
				else if (PlayerInfo[i][pFaction] == 4)
				{
					if (PlayerInfo[i][pRank] == 1)
					{
						newbank = newbank + 4000;
						randcheck = randcheck + 4000;
					}
					else if (PlayerInfo[i][pRank] == 1)
					{
						newbank = newbank + 5000;
						randcheck = randcheck + 5000;
					}
					else if (PlayerInfo[i][pRank] == 2)
					{
						newbank = newbank + 4000;
						randcheck = randcheck + 4000;
					}
					else if (PlayerInfo[i][pRank] == 3)
					{
						newbank = newbank + 3000;
						randcheck = randcheck + 3000;
					}
					else if (PlayerInfo[i][pRank] == 4)
					{
						newbank = newbank + 2000;
						randcheck = randcheck + 2000;
					}
					else if (PlayerInfo[i][pRank] == 5)
					{
						newbank = newbank + 1000;
						randcheck = randcheck + 1000;
					}
					else if (PlayerInfo[i][pRank] == 6)
					{
						newbank = newbank + 800;
						randcheck = randcheck + 800;
					}
				}
				else if (PlayerInfo[i][pFaction] == 5)
				{
					if (PlayerInfo[i][pRank] == 1)
					{
						newbank = newbank + 2000;
						randcheck = randcheck + 2000;
					}
					else if (PlayerInfo[i][pRank] == 1)
					{
						newbank = newbank + 1800;
						randcheck = randcheck + 1800;
					}
					else if (PlayerInfo[i][pRank] == 2)
					{
						newbank = newbank + 1600;
						randcheck = randcheck + 1600;
					}
					else if (PlayerInfo[i][pRank] == 3)
					{
						newbank = newbank + 1400;
						randcheck = randcheck + 1400;
					}
					else if (PlayerInfo[i][pRank] == 4)
					{
						newbank = newbank + 1200;
						randcheck = randcheck + 1200;
					}
					else if (PlayerInfo[i][pRank] == 5)
					{
						newbank = newbank + 1000;
						randcheck = randcheck + 1000;
					}
					else if (PlayerInfo[i][pRank] == 6)
					{
						newbank = newbank + 900;
						randcheck = randcheck + 900;
					}
					else if (PlayerInfo[i][pRank] == 7)
					{
						newbank = newbank + 800;
						randcheck = randcheck + 800;
					}
					else if (PlayerInfo[i][pRank] == 8)
					{
						newbank = newbank + 700;
						randcheck = randcheck + 700;
					}
					else if (PlayerInfo[i][pRank] == 9)
					{
						newbank = newbank + 800;
						randcheck = randcheck + 800;
					}
					else if (PlayerInfo[i][pRank] == 10)
					{
						newbank = newbank + 600;
						randcheck = randcheck + 600;
					}
					else if (PlayerInfo[i][pRank] == 11)
					{
						newbank = newbank + 500;
						randcheck = randcheck + 500;
					}
				}
				else if (PlayerInfo[i][pFaction] == 6)
				{
					if (PlayerInfo[i][pRank] == 1)
					{
						newbank = newbank + 7000;
						randcheck = randcheck + 7000;
					}
					else if (PlayerInfo[i][pRank] == 2)
					{
						newbank = newbank + 4000;
						randcheck = randcheck + 4000;
					}
					else if (PlayerInfo[i][pRank] == 3)
					{
						newbank = newbank + 3500;
						randcheck = randcheck + 3500;
					}
					else if (PlayerInfo[i][pRank] == 4)
					{
						newbank = newbank + 2500;
						randcheck = randcheck + 2500;
					}
					else if (PlayerInfo[i][pRank] == 5)
					{
						newbank = newbank + 1500;
						randcheck = randcheck + 1500;
					}
					else if (PlayerInfo[i][pRank] == 6)
					{
						newbank = newbank + 1000;
						randcheck = randcheck + 1000;
					}
				}
				else if (PlayerInfo[i][pFaction] == 7)
				{
					if (PlayerInfo[i][pRank] == 1)
					{
						newbank = newbank + 2000;
						randcheck = randcheck + 2000;
					}
					else if (PlayerInfo[i][pRank] == 2)
					{
						newbank = newbank + 1500;
						randcheck = randcheck + 1500;
					}
					else if (PlayerInfo[i][pRank] == 3)
					{
						newbank = newbank + 1200;
						randcheck = randcheck + 1200;
					}
					else if (PlayerInfo[i][pRank] == 4)
					{
						newbank = newbank + 1000;
						randcheck = randcheck + 1000;
					}
					else if (PlayerInfo[i][pRank] == 5)
					{
						newbank = newbank + 800;
						randcheck = randcheck + 800;
					}
				}
                else if (PlayerInfo[i][pFaction] == 8)
				{
					if (PlayerInfo[i][pRank] == 1)
					{
						newbank = newbank + 2400;
						randcheck = randcheck + 2400;
					}
					else if (PlayerInfo[i][pRank] == 2)
					{
						newbank = newbank + 1500;
						randcheck = randcheck + 1500;
					}
					else if (PlayerInfo[i][pRank] == 3)
					{
						newbank = newbank + 1250;
						randcheck = randcheck + 1250;
					}
					else if (PlayerInfo[i][pRank] == 4)
					{
						newbank = newbank + 950;
						randcheck = randcheck + 950;
					}
					else if (PlayerInfo[i][pRank] == 5)
					{
						newbank = newbank + 650;
						randcheck = randcheck + 650;
					}
					else if (PlayerInfo[i][pRank] == 6)
					{
						newbank = newbank + 350;
						randcheck = randcheck + 350;
					}
				}
	            new newsaving = PlayerInfo[i][pSavings] + sinterest;
	            PlayerInfo[i][pHackWarns] = 0;
	            new rent = 0;
	            new playername2[MAX_PLAYER_NAME];
	            GetPlayerName(i, playername2, sizeof(playername2));
	            new key = PlayerInfo[i][pHouseKey];
	            if(key != 0) {
	                rent = Houses[key][RentCost];
	                if(strcmp(playername2, Houses[key][Owner], true) == 0) {
	                    rent = 0;
	                }
	                else if(rent > GetPlayerCash(i)) {
	                    PlayerInfo[i][pHouseKey] = 0;
	                    SendClientMessage(i, COLOR_WHITE, "Ai fost retras.");
	                    rent = 0;
	                }
	                Houses[key][Money] = Houses[key][Money]+rent;
	            }
				if(PlayerInfo[i][pImprumut] == 10000)
				{
					PlayerInfo[i][pBank] -= 500;
				}
	            PlayerPlayMusic(i);
	            SendClientMessage(i,COLOR_WHITE,"{009900}|___EXTRAS DE CONT___|{FFFFFF}");
	            format(wstring, sizeof(wstring), "~n~~w~Salariu.~n~~g~$%d",randcheck + bonus);
	            GameTextForPlayer(i, wstring, 5000, 1);
	            format(wstring, sizeof(wstring), "Salariu: $%d, Bonus: $%d", randcheck, bonus);
	            SendClientMessage(i,COLOR_WHITE, wstring);

	            format(wstring, sizeof(wstring), "Balanta: $%d, Balanta noua: $%d", PlayerInfo[i][pBank], newbank);
	            SendClientMessage(i,COLOR_WHITE, wstring);

	            format(wstring, sizeof(wstring), "Economii: $%d, Noi economii: $%d", PlayerInfo[i][pSavings], newsaving);
	            SendClientMessage(i,COLOR_WHITE, wstring);

	            format(wstring, sizeof(wstring), "Castig: $%d", interest);
	            SendClientMessage(i,COLOR_WHITE, wstring);

	            format(wstring, sizeof(wstring), "Rata: 0.%d percent", intrate);
	            SendClientMessage(i,COLOR_WHITE, wstring);

	            new bkey = PlayerInfo[i][pBizKey];
	            if(bkey != 255) {
	                if(strcmp(playername2, Businesses[bkey][Owner], true) == 0) {
	                    PlayerInfo[i][pBank] -= Tax*2;
	                    format(wstring, sizeof(wstring), "Taxa guvernamentala: -$%d", Tax*2);
	                    SendClientMessage(i, COLOR_WHITE, wstring);
	                }
	            }
	            else {
	                PlayerInfo[i][pBank] -= Tax;
	                format(wstring, sizeof(wstring), "Taxa guvernamentala: -$%d", Tax*2);
	                SendClientMessage(i, COLOR_WHITE, wstring);
	            }
	            if(PlayerInfo[i][pCarCredit] != 0) {
	                SendClientMessage(i, COLOR_WHITE, "Factura ta de la cardul tau a fost marita cu 15$");
	                PlayerInfo[i][pCarCredit] += 15;
	            }
				if(PlayerInfo[i][pImprumut] == 10000)
				{
					PlayerInfo[i][pBank] -= 500;
				}
	            PlayerInfo[i][pSavings] += sinterest;
	            PlayerInfo[i][pBank] += interest;
	            PlayerInfo[i][pBank] += randcheck + bonus;
	            DynamicFactions[5][fBank] += Tax;
	            PlayerInfo[i][pBank] -= rent;
	            PlayerInfo[i][pPayCheck] = 0;
	            PlayerInfo[i][pExp]++;
	            PlayerInfo[i][pPlayingHours] += 1;
	            FarmerPickup[i][0] = 0;
	            TruckerPickup[i][0] = 0;
	            PlayerInfo[i][pCanJob] = 0;
	            dropedcar[i] = 0;
				format(wstring, sizeof(wstring), " Chirie: -$%d", rent);
	            SendClientMessage(i, COLOR_WHITE, wstring);

	            SendClientMessage(i,COLOR_WHITE,"{009900}|----------------------------------------|{FFFFFF}");

	            new nxtlevel = PlayerInfo[i][pLevel]+1;
	            new expamount = nxtlevel*3;
	            if(PlayerInfo[i][pExp] == expamount) {
	                format(wstring, sizeof(wstring), "Level up! - Level nou: %d", nxtlevel);
	                SendClientMessage(i,COLOR_WHITE, wstring);
	                PlayerInfo[i][pLevel]++;
	                PlayerInfo[i][pExp] = 0;
	            }
	            if(PlayerInfo[i][pExp] >= expamount) {
	                format(wstring, sizeof(wstring), "Level up! - Level nou: %d", nxtlevel);
	                SendClientMessage(i,COLOR_WHITE, wstring);
	                PlayerInfo[i][pLevel]++;
	                PlayerInfo[i][pExp] = 0;
	            }
	            PlayerInfo[i][pPaydayTime] = 0;
	        }
		    if(PlayerDrunk[i] > 0) { PlayerDrunk[i] = 0; PlayerDrunkTime[i] = 0; SetPlayerDrunkLevel(i, 0); }
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
       	    {
	       		new vehicle = GetPlayerVehicleID(i);
	        	if(Fuel[vehicle] >= 1)
		   		{
		   		    if(EngineStatus[vehicle] == 1)
		   		    {
		   		       	if(!IsAdonatebike(vehicle) && !IsAPlane(vehicle))
		            	{
							new Kilometer = GetPlayerSpeed( i, 0 );
							if( Kilometer >= 1 && Kilometer <= 65 )
							{ Fuel[GetPlayerVehicleID(i)] -= 0.5; }
							else if( Kilometer >= 66 && Kilometer <= 120 )
							{ Fuel[GetPlayerVehicleID(i)] -= 0.7; }
							else { Fuel[GetPlayerVehicleID(i)] -= 0.09; }
						}
	              	}
		   		}
	   			else
	           	{
		        	EngineStatus[vehicle] = 0;
		        	GameTextForPlayer(i,"~r~Nu mai ai benzina.",1500,1);
					RemoveDriverFromVehicle(i);
				}
			}
		}
    }
}
//=== ONE MINUTE TIMER ===//
//=== ONE SECOND TIMER ===//
public OneSecTimers()
{
	AntiWeaponHack();
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(gPlayerLogged[i])
        {
            SafeWeapon[i] = 0;
			new string[128];
			for (new j=0;j<MAX_VEHICLES;j++)
			{
				if (HandBrake[j][hActiv] == 1)
				{
					new Float:vehx, Float:vehy, Float:vehz, Float:vehrotz;
					GetVehiclePos(j,vehx,vehy,vehz);
					GetVehicleZAngle(j, vehrotz);
					if (vehx != HandBrake[j][hX] || vehy != HandBrake[j][hY] || vehz != HandBrake[j][hZ])
					{
						SetVehiclePos(j, HandBrake[j][hX], HandBrake[j][hY], HandBrake[j][hZ]);
					}
					if (vehrotz != HandBrake[j][hRZ])
					{
						SetVehicleZAngle(j, HandBrake[j][hRZ]);
					}
				}
            }
			if(PlayerInfo[i][pWeedTimer] != 0) {
                PlayerInfo[i][pWeedTimer]--;
                new Float:x, Float:y, Float:z;
                if(PlayerInfo[i][pWeedTimer] == 19000 || PlayerInfo[i][pWeedTimer] == 19001) {
                    GetDynamicObjectPos(PlayerInfo[i][pPlant], x, y, z);
                    MoveDynamicObject(PlayerInfo[i][pPlant], x, y, z+0.4, 0.5);
                }
                else if(PlayerInfo[i][pWeedTimer] == 15000 || PlayerInfo[i][pWeedTimer] == 15001) {
                    GetDynamicObjectPos(PlayerInfo[i][pPlant], x, y, z);
                    MoveDynamicObject(PlayerInfo[i][pPlant], x, y, z+0.2, 0.5);
                }
                else if(PlayerInfo[i][pWeedTimer] == 10000 || PlayerInfo[i][pWeedTimer] == 10001 || PlayerInfo[i][pWeedTimer] < 10000) {// Ready here
                    GetDynamicObjectPos(PlayerInfo[i][pPlant], x, y, z);
                    MoveDynamicObject(PlayerInfo[i][pPlant], x, y, z-0.1, 0.5);
                    Ready[i] = 1;
                }
                else if(PlayerInfo[i][pWeedTimer] == 1 || PlayerInfo[i][pWeedTimer] == 2) {
                    PlayerInfo[i][pWeedX] = 0;
                    PlayerInfo[i][pWeedY] = 0;
                    PlayerInfo[i][pWeedZ] = 0;
                    DestroyDynamicObject(PlayerInfo[i][pPlant]);
                    PlayerInfo[i][pWeedTimer] = 0;
                    Ready[i] = 0;
                }
            }
            if(GetPlayerState(i) == PLAYER_STATE_ONFOOT)
            {
		        // Pickups
		        for(new a = 0; a < MAX_S_PICKUPS; a++) {
		            if(Pickup[a][pickupCreated] == 1) {
		                if(Pickup_AnyPlayerToPoint(Pickup[a][pickupRange],Pickup[a][pickupX],Pickup[a][pickupY],Pickup[a][pickupZ])) {
		                    if(Pickup[a][pickupVisible] == 0) {
		                        Pickup[a][pickupID] = CreatePickup(Pickup[a][pickupModel],Pickup[a][pickupType],Pickup[a][pickupX],Pickup[a][pickupY],Pickup[a][pickupZ]);
		                        Pickup[a][pickupVisible] = 1;
		                    }
		                }
		                else {
		                    if(Pickup[a][pickupVisible] == 1) {
		                        DestroyPickup(Pickup[a][pickupID]);
		                        Pickup[a][pickupVisible] = 0;
		                    }
		                }
		            }
		        }
                // Buildings
            	for(new h = 0; h < sizeof(Building); h++) {
                	if (PlayerToPoint(1.5,i,Building[h][EnterX], Building[h][EnterY], Building[h][EnterZ])) {
                    	format(string, sizeof(string), "%s",Building[h][BuildingName]);
                        GameTextForPlayer(i, string, 2000, 3);
                    }
                }
				// Complexe
				if (PlayerToPoint(1.5,i,1359.8156,-1854.4071,13.5703))
				{
					GameTextForPlayer(i, "~b~Complex ~w~Pershing Square", 2000, 3);
				}
				if (PlayerToPoint(1.5,i,2232.6523,-1159.8185,25.8906))
				{
					GameTextForPlayer(i, "~b~Motel ~w~Jefferson", 2000, 3);
				}
				if (PlayerToPoint(1.5,i,2044.8243,-1761.7021,13.5469))
				{
					GameTextForPlayer(i, "~b~Complex ~w~Idlewood", 2000, 3);
				}
                // Apartments
                for(new h = 0; h < sizeof(Apartment); h++) {
                	if (PlayerToPoint(1.5,i,Apartment[h][EnterX], Apartment[h][EnterY], Apartment[h][EnterZ])) {
                		if(Apartment[h][Owned] != 0) {
                        	format(string, sizeof(string), "%s~n~~w~Owner: %s",Apartment[h][ApartmentName],Apartment[h][Owner]);
                            GameTextForPlayer(i, string, 2000, 3);
                        } else {
                        	format(string, sizeof(string), "%s~n~~w~~g~Price: %d~n~~w~Owner: None",Apartment[h][ApartmentName],Apartment[h][Price],Apartment[h][Owner]);
                            GameTextForPlayer(i, string, 2000, 3);
                        }
                    }
                }
				for(new h = 0; h < sizeof(Houses); h++)
				{
					if(PlayerToPoint(1.5,i,Houses[h][EnterX], Houses[h][EnterY], Houses[h][EnterZ]))
					{
						if(Houses[h][Rentable] == 1)
						{
							GetCoords2DZone(Houses[h][EnterX], Houses[h][EnterY], string, sizeof(string));
							format(string, sizeof(string), "[Adresa] %s %d~n~Aceasta casa este de rent! Pret: %d$", string, h, Houses[h][RentCost]);
							GameTextForPlayer(i, string, 3000, 3);
						}
						else
						{
							GetCoords2DZone(Houses[h][EnterX], Houses[h][EnterY], string, sizeof(string));
							format(string, sizeof(string), "[Adresa] %s %d", string, h);
							GameTextForPlayer(i, string, 3000, 3);
						}
					}
				}
				for(new n = 0; n < sizeof(Businesses); n++) {
                	if (PlayerToPoint(1.5,i,Businesses[n][EnterX], Businesses[n][EnterY], Businesses[n][EnterZ])) {
                    	new businesstype[32];
                        if(Businesses[n][BizType] != 0) {
							switch(Businesses[n][BizType])
							{
								case 0: businesstype = "Fara";
								case 1: businesstype = "Restaurant";
								case 2: businesstype = "Casino";
							 	case 3: businesstype = "Magazin 24/7";
							 	case 4: businesstype = "Ammunation";
								case 5: businesstype = "Stiri";
								case 6: businesstype = "H&M";
							 	case 7: businesstype = "Bar/Club";
							 	case 8: businesstype = "Rentals";
								case 9: businesstype = "Respray";
								case 10: businesstype = "Tuning";
							 	case 11: businesstype = "Gas Station";
							 	case 12: businesstype = "Licenses";
								case 13: businesstype = "Parking Place";
								case 14: businesstype = "Dealership";
							 	case 15: businesstype = "Farm";
							 	case 16: businesstype = "Sex Shop";
							 	case 17: businesstype = "Boxing Club";
							 	case 18: businesstype = "Electronic Store";
							 	case 19: businesstype = "Tattoo";
							 	case 20: businesstype = "Discotek";
							}
                            if(Businesses[n][BizPrice] != 0) {
                                if(Businesses[n][Owned] == 0) {
                                    format(string, sizeof(string), "~g~FOR SALE~n~~w~%s~n~~w~Type: %s~n~~w~Price: ~g~$%d",Businesses[n][BusinessName],businesstype,Businesses[n][BizPrice]);
                                    GameTextForPlayer(i, string, 2000, 3);

                                } else {
                                    format(string, sizeof(string), "~w~%s ~n~~w~Type: %s~n~~w~Owner: %s~n~~w~Entrance Fee: ~g~$%d",Businesses[n][BusinessName],businesstype,Businesses[n][Owner],Businesses[n][EntranceCost]);
                                    GameTextForPlayer(i, string, 2000, 3);
								}
					        }
                        }
                    }
				}

                // Drug farm
				if(PlayerToPoint(1.5,i,-1110.8562,-1620.9198,76.2005))
				{
					GameTextForPlayer(i, "~w~Drug Shop - /drug buy", 1600, 3);
				}

				// Random Positions
				else if(PlayerToPoint(1.5,i,FactionMaterialsStorage[X],FactionMaterialsStorage[Y],FactionMaterialsStorage[Z]))
				{
				    if(PlayerInfo[i][pFaction] != 0 && DynamicFactions[PlayerInfo[i][pFaction]][fType] != 1) {
				        GameTextForPlayer(i, "~w~Faction Materials Storage", 1600, 3);
				    }
				}
				else if(PlayerToPoint(2.0,i,2354.2515,-2288.3057,17.4219))
				{
				    if(PlayerInfo[i][pFaction] != 0 && DynamicFactions[PlayerInfo[i][pFaction]][fType] != 1) {
				        GameTextForPlayer(i, "~w~Faction Package Storage", 1600, 3);
				    }
				}
				else if(PlayerToPoint(1.5,i,FactionDrugsStorage[X],FactionDrugsStorage[Y],FactionDrugsStorage[Z]))
				{
				    if(PlayerInfo[i][pFaction] != 0 && DynamicFactions[PlayerInfo[i][pFaction]][fType] != 1) {
				        GameTextForPlayer(i, "~w~Faction Seeds Storage", 1600, 3);
				    }
				}
				else if(PlayerToPoint(1.5,i,1735.9939,-710.1816,1082.5653))
				{
				    GameTextForPlayer(i, "~w~Ghiseul de bilete ~n~~b~ /buyairticket", 1600, 3);
				}
				// Drug farm thing
				else if(PlayerToPoint(1.5,i,-1425.6927,-1528.2820,101.9709))
				{
				    if(PlayerInfo[i][pJob] == 2) {
				        format(string, sizeof(string), "~w~%s~n~Packages:~r~ %d~n~",Businesses[14][BusinessName], DrugFarm[Ammount]);
				        GameTextForPlayer(i, string, 1600, 3);
				    }
				}
				else if(PlayerToPoint(1.0,i,DrugJob[TakeJobX],DrugJob[TakeJobY],DrugJob[TakeJobZ]))
				{
				    if(GetPlayerVirtualWorld(i) == DrugJob[TakeJobWorld]) {
				        GameTextForPlayer(i, "~n~~r~Drug Dealer Job~n~~w~/takejob", 1600, 3);
				    }
				}
				else if(PlayerToPoint(1.0,i,DrugJob[BuyDrugsX],DrugJob[BuyDrugsY],DrugJob[BuyDrugsZ]))
				{
				    if(GetPlayerVirtualWorld(i) == DrugJob[BuyDrugsWorld]) {
				        GameTextForPlayer(i, "~n~~r~Drug Dealer Job~n~~w~/drug buy", 1600, 3);
				    }
				}
				else if(PlayerToPoint(1.0,i,DrugJob[DeliverX],DrugJob[DeliverY],DrugJob[DeliverZ]))
				{
				    if(GetPlayerVirtualWorld(i) == DrugJob[DeliverWorld]) {
				        GameTextForPlayer(i, "~n~~r~Drug Dealer Job~n~~w~/drug dropoff", 1600, 3);
				    }
				}
				else if(PlayerToPoint(1.0,i,ProductsSellerJob[BuyProductsX],ProductsSellerJob[BuyProductsY],ProductsSellerJob[BuyProductsZ]))
				{
				    if(GetPlayerVirtualWorld(i) == ProductsSellerJob[BuyProductsWorld]) {
				        GameTextForPlayer(i, "~n~~r~Product Company~n~~w~/delivery buyproducts", 1600, 3);
				    }
				}
				else if(PlayerToPoint(1.0,i,PrisonJobPosition[X],PrisonJobPosition[Y],PrisonJobPosition[Z]))
				{
				    if(GetPlayerVirtualWorld(i) == PrisonJobPosition[World]) {
				        GameTextForPlayer(i, "~n~~r~Prison Guard Job~n~~w~/takejob", 1600, 3);
				    }
				}
				// Police department garage enter
				else if (GetPlayerState(i) == 1 && PlayerToPoint(2.0, i,1568.7217,-1690.5358,5.8906))
				{
				    GameTextForPlayer(i, "~b~Los Santos Police Department ~n~ ~w~", 1600, 3);
				}
				else if (GetPlayerState(i) == 1 && IsAtATM(i))
				{
				    GameTextForPlayer(i, "~w~Esti langa un bancomat ~g~/atm ~n~", 1600, 3);
				}
				// /jobs inside the city hall
				else if (GetPlayerState(i) == 1 && PlayerToPoint(3.5, i,361.8300,173.7688,1008.3828))
				{
				    GameTextForPlayer(i, "~y~ Front desk ~n~ ~w~/Jobs", 1600, 3);
				}
				else if(PlayerToPoint(1.0,i,ArmsDealerJob[X],ArmsDealerJob[Y],ArmsDealerJob[Z]))
				{
				    if(PlayerInfo[i][pFaction] != 0 && DynamicFactions[PlayerInfo[i][pFaction]][fType] != 1) {
				        GameTextForPlayer(i, "~n~~r~Arms Dealer Job~n~~w~/takejob", 1600, 3);
				    }
				}
				// Random small stuff
				if( PlayerInfo[i][StonedEffect] != 0)
				{ PlayerInfo[i][StonedEffect]--; }
	            if( PlayerInfo[i][StonedEffect] == 1)
				{
    				SetPlayerDrunkLevel(i, 0 );
	            	SetPlayerWeather( i, Weather );
	            	PlayerInfo[i][StonedEffect] = 0;
	            }
	            if( PlayerInfo[i][pDeath] != 0)
				{ PlayerInfo[i][pDeath]--; format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Death Timer: ~g~%d secunde",PlayerInfo[i][pDeath]); GameTextForPlayer(i, string, 1600, 3); }
	            if(PlayerInfo[i][pDeath] == 1)
				{
				    PlayerInfo[i][pDeath] = 0;
		    	    PlayerInfo[i][pHospital] = 1;
		    	    GivePlayerCash(i, -150);
					DynamicFactions[2][fBank] += 150;
		            SetPlayerHealth(i,0);
		            Wounded[i] = 0;
		            SendClientMessage(i, COLOR_LIGHTRED, "Caracterul tau a murit si vei ajunge la spital.");
	            }
	            if(PlayerDrunk[i] >= 10) {
	                PlayerDrunkTime[i] += 1;
	                if(PlayerDrunkTime[i] == 8) {
	                    PlayerDrunkTime[i] = 0;
	                    SetPlayerDrunkLevel(i, 100000);
	                }
	            }
	            if(PlayerInfo[i][pJailTime] != 0)
				{
				    PlayerInfo[i][pJailTime]--;
	                if(ShowJailTimer[i] == 1)
					{
	                    format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Time Left: ~g~%d seconds",PlayerInfo[i][pJailTime]);
	                    GameTextForPlayer(i, string, 1600, 3);
	                }
	                if(PlayerInfo[i][pJailed] != 0 && PlayerInfo[i][pJailTime] == 1)
	                // 4 == Ajail 3 == Arrest 4 == Prison
					{
	                    PlayerInfo[i][pJailed] = 0;
	                    PlayerCuffed[i] = 0;
	                    WantedPoints[i] = 0;
	                    SafeResetPlayerWeapons(i);
	                    ResetPlayerWantedLevelEx(i);
	                    ClearCrime(i);
	                    SendClientMessage(i, COLOR_WHITE, "Ti-ai terminat sentinta.");
	                    SetPlayerVirtualWorld(i,0);
	                    SetPlayerInterior(i,0);
	                    SetPlayerPos(i,1541.2084,-1676.0785,13.5521);
	                    PlayerInfo[i][pCell] = 999;
	                    PlayerInfo[i][pJailTime] = 0;
	                    Delete3DTextLabel(CelulaNumber[i]);
                	}
	            }
	            if(PlayerInfo[i][pBvision] != 0) {
	                new Float:hp;
	                GetPlayerHealth(i, hp);
	                if(hp > 50) {
	                    SetPlayerWeather(i, 12);
	                    new tmphour;
	                    new tmpminute;
	                    new tmpsecond;
	                    gettime(tmphour, tmpminute, tmpsecond);
	                    FixHour(tmphour);
	                    SetPlayerTime(i, tmphour, 00);
	                    SetCameraBehindPlayer(i);
	                    SetPlayerDrunkLevel(i, 0);
	                    PlayerInfo[i][pBvision] = 0;
	                }
	            }
	            // Jacking Stuff
	            if(PlayerInfo[i][pJackingtrunk] != 0)
				{
				    if(PlayerInfo[i][pJackingtrunk] == 1 || PlayerInfo[i][pJackingtrunk] == 2) {
	                    PlayerInfo[i][pJackingtrunk]--;
	                    VehicleInfo[PlayerInfo[i][pJackingtrunkID]][vTrunkLock] = 0;
	                    format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Breaking it...");
	                    GameTextForPlayer(i, string, 1600, 3);
	                    TogglePlayerControllable(i,1);
	                    new form[128];
	                    format(form, sizeof(form), "fiddles with the lock of the %s.", VehicleNames[GetVehicleModel(PlayerInfo[i][pJackingtrunkID])-400]);
	                    PlayerActionMessage(i,20.0,form);
	                    PlayerInfo[i][pJackingtrunk] = 0;
	                    PlayerInfo[i][pJackingtrunkID] = 0;
	                    IsJacking[i] = 0;
	                    GetVehicleParamsEx(PlayerInfo[i][pJackingtrunkID],engine,lights,alarm,doors,bonnet,boot,objective);
	                    SetVehicleParamsEx(PlayerInfo[i][pJackingtrunkID],engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
	                } else {
		            	PlayerInfo[i][pJackingtrunk]--;
		            	format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Breaking the lock... ~g~%d seconds",PlayerInfo[i][pJackingtrunk]);
		            	GameTextForPlayer(i, string, 1600, 3);
	            	}
	            }
	            if(PlayerInfo[i][pJackingDoor] != 0)
				{
	                if(PlayerInfo[i][pJackingDoor] == 2 || PlayerInfo[i][pJackingDoor] == 1) {
	                    PlayerInfo[i][pJackingDoor] = 0;
	                    VehicleInfo[PlayerInfo[i][pJackingDoorID]][vLock] = 0;
	                    format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Breaking the lock...");
	                    GameTextForPlayer(i, string, 1600, 3);
	                    TogglePlayerControllable(i,1);
	                    UnLockCar(PlayerInfo[i][pJackingDoorID]);
	                    SetVehicleParamsForPlayer(PlayerInfo[i][pJackingDoorID],i,0,0);
	                    TogglePlayerControllable(i,1);
	                    PlayerInfo[i][pJackingDoorID] = 0;
	                    IsJacking[i] = 0;
	                } else {
		            	PlayerInfo[i][pJackingDoor]--;
		                format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Breaking the lock... ~g~%d seconds",PlayerInfo[i][pJackingDoor]);
		                GameTextForPlayer(i, string, 1600, 3);
	                }
	            }
            }
            else if(GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER)
			{
			    // Random Shit
	            if(TransportTime[i] > 0) {
	                if(TransportTime[i] >= 10) {
	                    TransportTime[i] = 1;
	                    if(TransportDriver[i] < 999) {
	                        if(IsPlayerConnected(TransportDriver[i])) {
	                            TransportCost[i] += TransportValue[TransportDriver[i]];
	                            TransportCost[TransportDriver[i]] = TransportCost[i];
	                        }
	                    }
	                }
	                TransportTime[i] += 1;
	                format(string, sizeof(string), "~r~%d ~w~: ~g~$%d",TransportTime[i],TransportCost[i]);
	                GameTextForPlayer(i, string, 15000, 6);
				}
	            if(PlayerInfo[i][pJacking] != 0) {
		            if(PlayerInfo[i][pJacking] == 2 || PlayerInfo[i][pJacking] == 1) {
		                PlayerInfo[i][pJacking] = 0;
		                format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Starting engine...");
		                GameTextForPlayer(i, string, 999, 3);
		                new playerveh = GetPlayerVehicleID(i);
		                EngineStatus[playerveh] = 1;
		                new form[64];
		                GetVehicleParamsEx(playerveh,engine,lights,alarm,doors,bonnet,boot,objective);
		                SetVehicleParamsEx(playerveh,VEHICLE_PARAMS_ON,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		                format(form, sizeof(form), "porneste motorul masinii %s.", VehicleNames[GetVehicleModel(playerveh)-400]);
		                PlayerActionMessage(i,20.0,form);
		                VehicleInfo[playerveh][vEngineLife] -= 15;
		            	IsJacking[i] = 0;
		            } else {
		                PlayerInfo[i][pJacking]--;
		                format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~r~Hotwiring... ~g~%d seconds",PlayerInfo[i][pJacking]);
						GameTextForPlayer(i, string, 1000, 3);
		            }
	            }
	            if(PlayerInfo[i][pRefueling] != 0) {
	                PlayerInfo[i][pRefueling]--;
	                format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~g~Refueling... ~g~%d seconds",PlayerInfo[i][pRefueling]);
	                GameTextForPlayer(i, string, 1600, 3);
				}
	            if(PlayerInfo[i][pRefueling] == 1)
				{
	                PlayerInfo[i][pRefueling] = 0;
	                format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~g~Refilled, thanks!",PlayerInfo[i][pRefueling]);
	                GameTextForPlayer(i, string, 1600, 3);
	                new vehicle = GetPlayerVehicleID(i);
	                if(IsPlayerInAnyVehicle(i))
					{
	                    if(PlayerToPoint(20,i,Businesses[10][EnterX],Businesses[10][EnterY],Businesses[10][EnterZ])) {
	                                                  //Octane Spring
	                        if(Businesses[10][Locked] == 0) {
	                            if(GetPlayerCash(i) >= Businesses[10][EntranceCost]) {
	                                if(Fuel[vehicle] <= 99) {
	                                    new form[128];
	                                    format(form, sizeof(form), "Muncitor Benzinarie: Masina ta a fost realimentata cu %d$, sa aveti o zi frumoasa.",Businesses[10][EntranceCost]);
	                                    SendClientMessage(i,COLOR_GREEN,form);
	                                    GivePlayerCash(i,-Businesses[10][EntranceCost]);
	                                    Businesses[10][Products]--;
	                                    Businesses[10][Till] += Businesses[10][EntranceCost];
	                                    Fuel[vehicle] = 100;
	                                    Refueling[i] = 0;
	                                }
	                                else {
	                                    SendClientMessage(i, COLOR_GREY, "Your fuel tank is full");
	                                }
	                            }
	                            else {
	                                SendClientMessage(i, COLOR_GREY, "  You cannot afford this.");
	                            }
	                        }
	                        else {
	                            SendClientMessage(i, COLOR_GREY, "  The business is locked, come back later.");
	                        }
	                    }
	                    else if(PlayerToPoint(10,i,Businesses[8][EnterX],Businesses[8][EnterY],Businesses[8][EnterZ])) {
	                                                  //Fort Carson
	                        if(Businesses[8][Locked] == 0) {
	                            if(GetPlayerCash(i) >= Businesses[8][EntranceCost]) {
	                                if(Fuel[vehicle] <= 99) {
	                                    new form[128];
	                                    format(form, sizeof(form), "Muncitor Benzinarie: Masina ta a fost realimentata cu %d$, sa aveti o zi frumoasa.",Businesses[8][EntranceCost]);
	                                    SendClientMessage(i,COLOR_GREEN,form);
	                                    GivePlayerCash(i,-Businesses[8][EntranceCost]);
	                                    Businesses[8][Products]--;
	                                    Businesses[8][Till] += Businesses[8][EntranceCost];
	                                    Fuel[vehicle] = 100;
	                                    Refueling[i] = 0;
	                                }
	                                else {
	                                    SendClientMessage(i, COLOR_GREY, "Your fuel tank is full");
	                                }
	                            }
	                            else {
	                                SendClientMessage(i, COLOR_GREY, "  You cannot afford this.");
	                            }
	                        }
	                        else {
	                            SendClientMessage(i, COLOR_GREY, "  The business is locked, come back later.");
	                        }
	                    }
						else if(PlayerToPoint(10,i,Businesses[20][EnterX],Businesses[20][EnterY],Businesses[20][EnterZ])) {
	                                                  //Fort Carson
	                        if(Businesses[20][Locked] == 0) {
	                            if(GetPlayerCash(i) >= Businesses[20][EntranceCost]) {
	                                if(Fuel[vehicle] <= 99) {
	                                    new form[128];
	                                    format(form, sizeof(form), "Muncitor Benzinarie: Masina ta a fost realimentata cu %d$, sa aveti o zi frumoasa.",Businesses[20][EntranceCost]);
	                                    SendClientMessage(i,COLOR_GREEN,form);
	                                    GivePlayerCash(i,-Businesses[20][EntranceCost]);
	                                    Businesses[20][Products]--;
	                                    Businesses[20][Till] += Businesses[20][EntranceCost];
	                                    Fuel[vehicle] = 100;
	                                    Refueling[i] = 0;
	                                }
	                                else {
	                                    SendClientMessage(i, COLOR_GREY, "Your fuel tank is full");
	                                }
	                            }
	                            else {
	                                SendClientMessage(i, COLOR_GREY, "  You cannot afford this.");
	                            }
	                        }
	                        else {
	                            SendClientMessage(i, COLOR_GREY, "  The business is locked, come back later.");
	                        }
	                    }
	                    else {
	                        SendClientMessage(i, COLOR_GREY, "You are not at a gas station.");
	                    }
	                }
            	}
			}
		}
	}
	return 1;
}
//=== ONE SECOND TIMER ===//
//=== CHECK STATUS ===//
forward CheckStatus();
public CheckStatus()
{
    for(new i=0; i<MAX_PLAYERS; i++)
	{
        if(IsPlayerConnected(i))
		{
			if(gPlayerLogged[i])
			{
				if (radar[i] == 1)
				{
					new string[128];
					new vehicleid = GetPlayerVehicleID(i);
					if (DynamicCars[vehicleid][FactionCar] != 3)
					{
						radar[i] = 0;
						return 1;
					}
					new carid, counter = 0;
					for (new k=0;k<MAX_VEHICLES;k++)
					{
						new Float:vehx, Float:vehy, Float:vehz;
						GetVehiclePos(k, vehx, vehy, vehz);
						if (k!=vehicleid)
						{
							if (PlayerToPoint(10.0,i,vehx, vehy, vehz))
							{
								counter++;
								carid = k;
							}
						}
					}
					if (counter > 1)
					{
						SendClientMessage(i, COLOR_GREY, "Prin fata ta trec prea multe masini.");
						counter = 0;
						carid = 0;
						return 1;
					}
					static
							Float:Pos[3],
							Speed;
					GetVehicleVelocity(carid, Pos[0], Pos[1], Pos[2]);
					Speed = floatround(floatabs((Pos[0]*Pos[0]) + (Pos[1]*Pos[1]) + (Pos[2]*Pos[2])) * 198);
					if (carid == 0)
					{
						GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~w~Radar: ~g~NONE", 1600, 3);
					}
					else
					{
						format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~w~Radar: ~g~%dKM/h",Speed);
						GameTextForPlayer(i, string, 1600, 3);
					}
				}
			    if(SnowOn == 1) { if(GetPlayerInterior(i) == 0 && GetPlayerVirtualWorld(i) == 0) { new Float:x, Float:y, Float:z; GetPlayerPos(i, x, y, z); SetPlayerObjectPos(i, SnowObject[i], x-2.23, y, z-1); } }
				if(GetPlayerWeapon(i) != 0 && GetPlayerWeapon(i) != 1 && GetPlayerWeapon(i) != 41 && GetPlayerWeapon(i) != 4 && GetPlayerWeapon(i) != 5 && GetPlayerWeapon(i) != 7 && GetPlayerWeapon(i) != 6 && GetPlayerWeapon(i) != 18 && GetPlayerWeapon(i) != 16 && GetPlayerWeapon(i) != 7 && GetPlayerWeapon(i) != 8 && GetPlayerWeapon(i) != 9)
				{
				    new iCurWeap = GetPlayerWeapon(i);
				    new iCurAmmo = GetPlayerAmmo(i);
				    if(iCurWeap != PlayerInfo[i][pLastEquipped])
				    {
				        PlayerInfo[i][pLastEquipped] = iCurWeap;
				    }
				    if(iCurAmmo == 1 || iCurAmmo == 2 || iCurAmmo == 3)
				    {
				        PlayerInfo[i][pReload] = 1;
						InfoForPlayer(i, "Reload your weapon by pressing 'ALT'");
				    }
				}
	            if(IsPlayerInAnyVehicle(i))
				{
				    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
				    {
				        for(new a = 0; a < sizeof(SpikeInfo); a++)
				  	    {
				  	        if(SpikeInfo[a][sCreated] == 1)
				            {
				  	            if(IsPlayerInRangeOfPoint(i, 3.6, SpikeInfo[a][sX], SpikeInfo[a][sY], SpikeInfo[a][sZ]))
				  	            {
				  	                new panels, doorsd, lightsf, tires;
				  	                new carid = GetPlayerVehicleID(i);
						            GetVehicleDamageStatus(carid, panels, doorsd, lightsf, tires);
						            tires = encode_tires(1, 1, 1, 1);
						            UpdateVehicleDamageStatus(carid, panels, doorsd, lightsf, tires);
				  	            }
				  	        }
				  	    }
					    if ( g_fSpeedCap[ i ] != 0.0)
					    {
				  	    	static
					        	s_iVehicle
					    					;
					        s_iVehicle = GetPlayerVehicleID( i );
					        static
					        	Float:s_fX,
					            Float:s_fY,
					            Float:s_fZ,
					            Float:s_fVX,
					            Float:s_fVY,
					            Float:s_fVZ
					        ;
					        GetVehiclePos( s_iVehicle, s_fX, s_fY, s_fZ );
					        GetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );
					        if ( !IsPlayerInRangeOfPoint( i, g_fSpeedCap[ i ] + 0.05, s_fX + s_fVX, s_fY + s_fVY, s_fZ + s_fVZ ) )
					        {
					        	static
					            Float:s_fLength;
								s_fLength = floatsqroot( ( s_fVX * s_fVX ) + ( s_fVY * s_fVY ) + ( s_fVZ * s_fVZ ) );
								s_fVX = ( s_fVX / s_fLength ) * g_fSpeedCap[ i ];
								s_fVY = ( s_fVY / s_fLength ) * g_fSpeedCap[ i ];
								s_fVZ = ( s_fVZ / s_fLength ) * g_fSpeedCap[ i ];
						        SetVehicleVelocity( s_iVehicle, s_fVX, s_fVY, s_fVZ );
					        }
						}
     				}
					if(Fuel[GetPlayerVehicleID(i)] == 0)
					{
						GetVehicleParamsEx(GetPlayerVehicleID(i),engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(GetPlayerVehicleID(i),VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
						EngineStatus[GetPlayerVehicleID(i)] = 0;
						GameTextForPlayer(i,"~r~You have run out of fuel",1500,1);
					}
	             /*   if(ShowHud[i] == 1)
					{
	                    new string[128];
					    static
					        Float:Pos[3],
					        Speed;
					    GetVehicleVelocity(GetPlayerVehicleID(i), Pos[0], Pos[1], Pos[2]);
					    Speed = floatround(floatabs((Pos[0]*Pos[0]) + (Pos[1]*Pos[1]) + (Pos[2]*Pos[2])) * 198);
					    if(!IsAdonatebike(GetPlayerVehicleID(i)))
					    {
						    if(Speed == 0)
							{
								VehicleInfo[GetPlayerVehicleID(i)][vGear] = 0;
								format(string, sizeof(string), "~b~Viteza:~w~ %iKM/H",Speed);
								TextDrawSetString(Viteza[i], string);
								format(string, sizeof(string), "~b~Combustibil:~w~ %.0fL",Fuel[GetPlayerVehicleID(i)]);
								TextDrawSetString(Combustibil[i], string);

							}
						    else if(!IsVehicleDrivingBackwards(GetPlayerVehicleID(i)) && Speed > 1)
							{
								VehicleInfo[GetPlayerVehicleID(i)][vGear] = 1;
								if (Speed >= 50 && Speed < 80)
								{
									VehicleInfo[GetPlayerVehicleID(i)][vGear] = 2;
								}
								else if (Speed >= 80 && Speed < 100)
								{
									VehicleInfo[GetPlayerVehicleID(i)][vGear] = 3;
								}
								else if (Speed >= 100 && Speed < 140)
								{
									VehicleInfo[GetPlayerVehicleID(i)][vGear] = 4;
								}
								else if (Speed >= 140 && Speed < 180)
								{
									VehicleInfo[GetPlayerVehicleID(i)][vGear] = 5;
								}
								else if (Speed >= 180)
								{
									VehicleInfo[GetPlayerVehicleID(i)][vGear] = 6;
								}
								//format(string, 128, "~b~Viteza: ~w~%iKM/H~n~~b~Combustibil: ~w~%.0f~n~~w~R ~g~D ~w~~h~%d~n~~b~Kilometri: ~w~%d~n~~b~Engine Life: ~w~%d", Speed, Fuel[GetPlayerVehicleID(i)],VehicleInfo[GetPlayerVehicleID(i)][vGear],VehicleInfo[GetPlayerVehicleID(i)][vKilometri],VehicleInfo[GetPlayerVehicleID(i)][vEngineLife]);
								format(string, sizeof(string), "~b~Viteza:~w~ %iKM/H",Speed);
								TextDrawSetString(Viteza[i], string);
								format(string, sizeof(string), "~b~Combustibil:~w~ %.0fL",Fuel[GetPlayerVehicleID(i)]);
								TextDrawSetString(Combustibil[i], string);
							}
						    else if(IsVehicleDrivingBackwards(GetPlayerVehicleID(i))) \
							{
								//format(string, 128, "~b~Viteza: ~w~%iKM/H~n~~b~Combustibil: ~w~%.0f~n~~g~R ~w~D ~w~~h~%d~n~~b~Kilometri: ~w~%d~n~~b~Engine Life: ~w~%d", Speed, Fuel[GetPlayerVehicleID(i)],VehicleInfo[GetPlayerVehicleID(i)][vGear],VehicleInfo[GetPlayerVehicleID(i)][vKilometri],VehicleInfo[GetPlayerVehicleID(i)][vEngineLife]);
								format(string, sizeof(string), "~b~Viteza:~w~ %iKM/H",Speed);
								TextDrawSetString(Viteza[i], string);
								format(string, sizeof(string), "~b~Combustibil:~w~ %.0fL",Fuel[GetPlayerVehicleID(i)]);
								TextDrawSetString(Combustibil[i], string);
							}
						    else
							{
								//format(string, 128, "~b~Viteza: ~w~%iKM/H~n~~b~Combustibil: ~w~%.0f~n~~w~R ~g~D ~w~~h~%d~n~~b~Kilometri: ~w~%d~n~~b~Engine Life: ~w~%d", Speed, Fuel[GetPlayerVehicleID(i)],VehicleInfo[GetPlayerVehicleID(i)][vGear],VehicleInfo[GetPlayerVehicleID(i)][vKilometri],VehicleInfo[GetPlayerVehicleID(i)][vEngineLife]);
								format(string, sizeof(string), "~b~Viteza:~w~ %iKM/H",Speed);
								TextDrawSetString(Viteza[i], string);
								format(string, sizeof(string), "~b~Combustibil:~w~ %.0fL",Fuel[GetPlayerVehicleID(i)]);
								TextDrawSetString(Combustibil[i], string);

							}
					    }
						else
						{
							//format(string, 128, "~b~Viteza: ~w~%iKM/H~n~~b~Combustibil: ~w~%.0f~n~~b~Engine Life: ~w~%d", Speed, Fuel[GetPlayerVehicleID(i)]);
							format(string, sizeof(string), "~b~Viteza:~w~ %iKM/H",Speed);
							TextDrawSetString(Viteza[i], string);
						}
						//TextDrawShowForPlayer(i, Box1[i]);
						TextDrawShowForPlayer(i, Box2[i]);
						TextDrawShowForPlayer(i, Viteza[i]);
						TextDrawShowForPlayer(i, Combustibil[i]);
						TextDrawShowForPlayer(i, Separeu[i]);
						TextDrawShowForPlayer(i, Frana[i]);
						TextDrawShowForPlayer(i, Usi[i]);
						TextDrawShowForPlayer(i, Geamuri[i]);
						TextDrawShowForPlayer(i, Cen[i]);
						TextDrawShowForPlayer(i, Punct1[i]);
						TextDrawShowForPlayer(i, Punct2[i]);
						TextDrawShowForPlayer(i, Punct3[i]);
						TextDrawShowForPlayer(i, Punct4[i]);
						if(PlayerInfo[i][pHackWarns] == 0 && Speed > 190 && Speed < 210 && PlayerBadges[i][DriveFast] == 0)
						{
			    			PlayerBadges[i][DriveFast] = 1;
						}
						new veh = GetPlayerVehicleID(i);
						if((Speed > 400) && (!IsAPlane(veh)))
						{
							new msg[MAX_PLAYER_NAME+64];
							GetPlayerName(i, msg, sizeof(msg));
							format(msg, sizeof(msg), "AdmCmd: %s was kicked by System - Reason: Speed Hack.", msg);
							SendClientMessage(i,COLOR_LIGHTRED, msg);
							SetTimerEx("KickPublic", 50, false, "d", i);
						}
					} */
	            }
			}
        }
    }
	return 1;
}


//=== CHECK STATUS ===//

//                  Commands
// ## Admin Commands ##
//=== /vid ===//
COMMAND:vid(playerid, params[])
{
    new iVehicleID[5];

	if(!IsPlayerInAnyVehicle(playerid))
	{
		return 1;
	}

	if(PlayerInfo[playerid][pAdministrator] < 1)
	{
		return 0;
	}

    format(iVehicleID, 5, "%d", GetPlayerVehicleID(playerid));
    SendClientMessage(playerid,COLOR_RED,iVehicleID);
    return 1;
}

//=== /vid ===//
//=== /gethere ===//

COMMAND:gethere(playerid, params[])
{
	new iPlayerID; // The player we want to teleport to us
	new Float:posX, Float:posY, Float:posZ;

	///////////////////////////////////////////
	///////////ADMINCHECK/////////////////////
	if(!AdminCheck(playerid, ADMINLEVEL_MODERATOR))
		return 1;
	/////////////////////////////////////////
	/////////////////////////////////////////
	if(sscanf(params, "u", iPlayerID)) // If the player hasn't submitted the parameter "user"
	{
		return SendClientMessage(playerid,COLOR_GREY,"Usage: /gethere [PlayerID/PartOfName]");
	}

	if(IsPlayerInAnyVehicle(iPlayerID) && GetPlayerState(iPlayerID) == PLAYER_STATE_DRIVER) // Is the player currently inside a vehicle?
	{
		if(GetPlayerInterior(playerid) != 0) // If so, is the admin teleporting him inside an interior?
		{
			return SendClientMessage(playerid,COLOR_GREY,"You can't teleport a vehicle into an interior!");
		}

		////////////////////////////////////////VARIABLES////////////////////////////////////
		new szMessage[23+1+MAX_PLAYER_NAME]; // String to contain the success-message
		new iVehicleID = GetPlayerVehicleID(iPlayerID);
		/////////////////////////////////////////////////////////////////////////////////////

		GetPlayerPos(playerid, posX, posY, posZ); // Get our players position
		SetVehiclePos(iVehicleID, posX+5, posY, posZ); // Teleport the vehicle
		SetPlayerInterior(iPlayerID, GetPlayerInterior(playerid)); // Just in case something goes wrong
		SetPlayerVirtualWorld(iPlayerID, GetPlayerVirtualWorld(playerid)); // Set the players virtual world
		SetVehicleVirtualWorld(iVehicleID, GetPlayerVirtualWorld(playerid)); // Set the vehicles virtual world
		format(szMessage, 23+1+MAX_PLAYER_NAME,"L-ai teleportat pe %s la tine!", ReturnPlayerName(iPlayerID));
		SendClientMessage(playerid,COLOR_WHITE,szMessage);
	}
	else
	{
		new szMessage[23+1+MAX_PLAYER_NAME]; // String to contain the success-message

		GetPlayerPos(playerid, posX, posY, posZ); // Get our players position
		SetPlayerPos(iPlayerID, posX, posY, posZ);
		SetPlayerInterior(iPlayerID, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(iPlayerID, GetPlayerVirtualWorld(playerid));

		format(szMessage, 23+1+MAX_PLAYER_NAME,"You teleported %s to you!", ReturnPlayerName(iPlayerID));
		SendClientMessage(playerid,COLOR_WHITE,szMessage);
	}
	return 1;
}
//=== /gethere ===//
//=== /goto ===//

COMMAND:goto(playerid, params[])
{
	new iPlayerID;

	if (PlayerInfo[playerid][pAdministrator] < 1)
	{
		return 1;
	}

	if(sscanf(params, "u", iPlayerID))
	{
		return SendClientMessage(playerid,COLOR_GREY,"USAGE: /goto [PlayerID/PartOfName]");
	}

	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(GetPlayerInterior(iPlayerID) != 0)
		{
			return SendClientMessage(playerid,COLOR_GREY,"The player you a trying to teleport to is inside an interior!");
		}

		new Float:posX, Float:posY, Float:posZ;
		new iVehicleID = GetPlayerVehicleID(playerid);
		new szMessage[25+MAX_PLAYER_NAME];
		GetPlayerPos(iPlayerID, posX, posY, posZ);

		SetVehiclePos(iVehicleID, posX+5, posY, posZ);
		SetVehicleVirtualWorld(iVehicleID, GetPlayerVirtualWorld(iPlayerID));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(iPlayerID));

		format(szMessage, 25+MAX_PLAYER_NAME,"You teleported to %s", ReturnPlayerName(iPlayerID));
		SendClientMessage(playerid, COLOR_WHITE, szMessage);
	}
	else
	{
		new Float:posX, Float:posY, Float:posZ;
		new szMessage[25+MAX_PLAYER_NAME];
		GetPlayerPos(iPlayerID, posX, posY, posZ);

		SetPlayerPos(playerid, posX+1, posY, posZ);
		SetPlayerInterior(playerid, GetPlayerInterior(iPlayerID));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(iPlayerID));

		format(szMessage, 25+MAX_PLAYER_NAME,"You teleported to %s", ReturnPlayerName(iPlayerID));
		SendClientMessage(playerid, COLOR_WHITE, szMessage);
	}
	return 1;
}
//=== /goto ===//
//=== /slap ===//
COMMAND:slap(playerid, params[])
{
	//////////////////////////////////////////
	///////////ADMINCHECK/////////////////////
	if(!AdminCheck(playerid, ADMINLEVEL_MODERATOR))
		return 1;
	/////////////////////////////////////////
	/////////////////////////////////////////

	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_GREY, "USAGE: /slap [playerid]");
	else
	{
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_GREY, "SERVER: This player is not connected.");
		new Float:x,Float:y,Float:z;
		GetPlayerPos(targetid,x,y,z);
		SetPlayerPos(targetid,x,y,z+5);
		ApplyAnimation(targetid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	}
	return 1;
}
//=== /slap ===//
//=== /adminduty ===//
COMMAND:adminduty(playerid, params[])
{
    printf("0");
	///////////////////////////////////////////
	//////////////ADMINCHECK//////////////////
	///////////////////////////////PUKDAGFKASNGDFASDJFNGVAJNGBSDFJNBFDAS//////////
	if(!AdminCheck(playerid, ADMINLEVEL_MODERATOR))
		return 1;
	///////////////////////////////////////
	//////////////////////////////////////
	//////////////////////SUGE VALI PULA///////////////
	new string[128];
	if(AdminDuty[playerid] == 1)
	{
		format(string, 128, "[AdmCmd] %s nu mai este disponibil ca si administrator", GetPlayerNameEx(playerid));
		AdministratorMessage(COLOR_GREY,string,1);
		printf("1");
		AdminDuty[playerid] = 0;
		SetPlayerHealth(playerid,100);
		SetPlayerColor(playerid,COLOR_WHITE);

		if(CopOnDuty[playerid] == 1)
		{
			SetPlayerArmour(playerid,100);
		}

		if(MedicOnDuty[playerid] == 1)
		{
		    SetPlayerArmour(playerid,100);
		}

		else
		{
		    SetPlayerColor(playerid,COLOR_WHITE);
		}
		printf("2");
		return 1;
	}

	if(AdminDuty[playerid] == 0)
	{
	    printf("1x");
		format(string, 128, "[AdmCmd] %s este acum disponibil ca si administrator.", GetPlayerNameEx(playerid));
		AdministratorMessage(COLOR_RED,string,1);

		AdminDuty[playerid] = 1;
		printf("2x");
		SetPlayerColor(playerid,COLOR_RED);
		SetPlayerHealth(playerid,999);
		printf("3x");
	}
	printf("The end");
	return 1;
}






COMMAND:aduty(playerid, params[])
{
	return cmd_adminduty(playerid, params);
}

//=== /adminduty ===//
//=== /adminchat ===//
COMMAND:admin(playerid, params[])
{
	/////////////////////////////////////////////////
	//////////////////ADMINCHECK////////////////////
	///////////////////////////////////////////////
	if(!AdminCheck(playerid,ADMINLEVEL_MODERATOR))
		return 1;
	/////////////////////////////////////////////
	////////////////////////////////////////////
	///////////////////////////////////////////
	new szMessage[128];

	if(sscanf(params, "s[128]", szMessage))
	{
		return SendClientMessage(playerid,COLOR_GREY,"USAGE: (/a)dmin [message]");
	}

	if(Achat == 1 && PlayerInfo[playerid][pAdministrator] < 5)
    {
        SendClientMessage(playerid, COLOR_GREY, "Canalul adminilor este inchis nu poti vorbi acum.");
        return 1;
    }

	new szString[129+1+MAX_PLAYER_NAME+3];

	format(szString, 129+1+MAX_PLAYER_NAME+3, "[ADMINCHAT] %s: %s", GetPlayerNameEx(playerid), szMessage);

	foreach(Player, i)
	{
		if(PlayerInfo[i][pAdministrator] >= 1)
		{
			SendPlayerExtendedMessage(i, 0xF97804FF, szString);
		}
	}

	return 1;
}

COMMAND:a(playerid, params[])
{
	return cmd_admin(playerid, params);
}
//=== /adminchat ===//
//=== /drag ===//
CMD:drag(playerid, params[])
{
	new userid;
	new giveplayerid;
    //--------------------------------------------------------------------------
    if (sscanf(params, "u", userid)) return SendClientMessage(playerid, 0xAFAFAFAA, "/drag [playerid/name]");
	if (userid == INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xAFAFAFAA, "Acest jucator nu este online.");
    if (userid == playerid) return SendClientMessage(playerid, 0xAFAFAFAA, "You cannot drag yourself.");
    if(PlayerInfo[playerid][pFaction] != 3) return SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda.");
	if(!ProxDetectorS(4.0, playerid, giveplayerid)) return SendClientMessage(playerid, 0xAFAFAFAA, "Nu esti langa un jucator.");
    if(PlayerCuffed[userid] == 1) return SendClientMessage(playerid, COLOR_GREY, "Playerul este deja incatusat!");
	//--------------------------------------------------------------------------
	if (PlayerInfo[userid][pDragged])
	{
	    PlayerInfo[userid][pDragged] = 0; PlayerInfo[userid][pDraggedBy] = INVALID_PLAYER_ID;
	    KillTimer(PlayerInfo[userid][pDragTimer]);
	}
	//--------------------------------------------------------------------------
	else
	{
	    PlayerInfo[userid][pDragged] = 1; PlayerInfo[userid][pDraggedBy] = playerid;
	    PlayerInfo[userid][pDragTimer] = SetTimerEx("DragUpdate", 200, true, "dd", playerid, userid);
	}
	//--------------------------------------------------------------------------
	return 1;
}
//=== /drag ===//
//=== /admincommands ===//
CMD:acmds(playerid, params[])
{
	new szStr1[121], // First line
		szStr2[153], // Second line
		szStr3[141], // Third line
		szStr4[154], // Fourth line
		szStr5[128], // Fifth line

		szShowString[698]; // Compilation of 1-5


	if(PlayerInfo[playerid][pAdministrator]==0)
	{
		return SendClientMessage(playerid,COLOR_GREY,"Nu esti autorizat pentru a folosi comanda.");
	}
	if(PlayerInfo[playerid][pAdministrator]==1)
	{
		format(szStr1, 121, "(/a)dmin /adminduty /unbanip /akick /mute /skydive /oocstatus\n /freeze /unfreeze /check /setvw /fourdive /carid /goto\n");
		format(szStr2, 151, " /ajail /gotosf /fixcar /destroycar /masked /rtc /muted /aunjail /serverinfo\n /buildcmds /slap /aban /respawncar /gotoidlewood /gotodill /gotocarspot");
		format(szStr3, 75, " /gotopc /gotolv /gotols /hidden /unlockcar /gotocar /getcar /weatherall\n");
		format(szShowString, 121+151+75, "%s%s%s", szStr1, szStr2, szStr3);
		ShowPlayerDialog(playerid, 8372, DIALOG_STYLE_MSGBOX, "Asistent", szShowString, "Ok","");
		return 1;
	}
	if(PlayerInfo[playerid][pAdministrator]==2)
	{
		format(szStr1, 121, "(/a)dmin /adminduty /unbanip /akick /mute /skydive /oocstatus\n /freeze /unfreeze /check /setvw /fourdive /carid /goto\n");
		format(szStr2, 153, " /ajail /gotosf /fixcar /destroycar /masked /rtc /muted /aunjail /serverinfo\n /buildcmds /slap /aban /respawncar /gotoidlewood /gotodill /gotocarspot \n");
		format(szStr3, 141, " /gotopc /gotolv /gotols /hidden /asetage /asethp\n /asetarmour /gotocar /alistfaction /broadcast /logoutall /gethere /asethp /asetarmour \n");
		format(szStr4, 105, " /gotocar /alistfaction /broadcast /logoutall /gethere /update /unlockcar /gotocar /getcar /weatherall\n");
		format(szShowString, 121+153+141+105, "%s%s%s%s", szStr1, szStr2, szStr3,szStr4);
		ShowPlayerDialog(playerid, 8373, DIALOG_STYLE_MSGBOX, "Moderator", szShowString, "Ok","");
		return 1;
	}
	if(PlayerInfo[playerid][pAdministrator]==3)
	{
		format(szStr1, 121, "(/a)dmin /adminduty /unbanip /akick /mute /skydive\n /oocstatus /freeze /unfreeze /check /setvw /fourdive /carid /goto\n");
		format(szStr2, 153, " /ajail /gotosf /fixcar /destroycar /masked /rtc /muted /aunjail\n /serverinfo /buildcmds /slap /aban /respawncar /gotoidlewood /gotodill /gotocarspot \n");
		format(szStr3, 141, " /gotopc /gotolv /gotols /hidden /asetage /asethp\n /asetarmour /gotocar /alistfaction /broadcast /logoutall /gethere /asethp /asetarmour \n");
		format(szStr4, 154, " /gotocar /alistfaction /broadcast /logoutall /gethere /update /agivelicense\n /agivedrugs /asetdrugs /respawnvehicles /agivegun /unlockcar /weatherall\n");
		format(szStr5, 128, " /asetleader /aresetfaction /abuildingcmds /afactioncmds\n /acarcmds /ahousecmds /ajobcmds /abusinesscmds /rehash /rehashwarn\n");
		format(szShowString, 121+153+141+154+128, "%s%s%s%s%s", szStr1, szStr2, szStr3, szStr4, szStr5);
		ShowPlayerDialog(playerid, 8374, DIALOG_STYLE_MSGBOX, "Administrator Coordonator", szShowString, "Ok","");
		return 1;
	}
	if(PlayerInfo[playerid][pAdministrator]>=4)
	{
		format(szStr1, 121, "(/a)dmin /adminduty /unbanip /akick /mute /skydive\n /oocstatus /freeze /unfreeze /check /setvw /fourdive /carid /goto\n");
		format(szStr2, 153, " /ajail /gotosf /fixcar /destroycar /masked /rtc /muted /aunjail\n /serverinfo /buildcmds /slap /aban /respawncar /gotoidlewood /gotodill /gotocarspot \n");
		format(szStr3, 141, " /gotopc /gotolv /gotols /hidden /asetage /asethp\n /asetarmour /gotocar /alistfaction /broadcast /logoutall /gethere /asethp /asetarmour \n");
		format(szStr4, 154, " /gotocar /alistfaction /broadcast /logoutall /gethere /update /agivelicense\n /agivedrugs /asetdrugs /respawnvehicles /agivegun /unlockcar /weatherall\n");
		format(szStr5, 128, " /asetleader /aresetfaction /abuildingcmds /afactioncmds\n /acarcmds /ahousecmds /ajobcmds /abusinesscmds /rehash /rehashwarn\n");
		format(szShowString, 121+153+141+154+128, "%s%s%s%s%s", szStr1, szStr2, szStr3, szStr4, szStr5);
		ShowPlayerDialog(playerid, 8374, DIALOG_STYLE_MSGBOX, "Administrator Principal", szShowString, "Ok","");
		return 1;
	}
	if(PlayerInfo[playerid][pAdministrator]==69)
	{
		SendClientMessage(playerid, COLOR_WHITE, "/abuyinsurance /abuycar /aremovedestroy /astocuri");
	}
	return 1;
}
//=== /admincommands ===//
//=== /adminset ===//
#define MAX_STAT_NAME 14

COMMAND:frankadvseteaza(playerid, params[])
{
	//////////////////////////////////////////
	////////////ADMINCHECK///////////////////
	////////////////////////////////////////
	if(!AdminCheck(playerid, ADMINLEVEL_HEAD))
		return 1;
	///////////////////////////////////////



	///////////////////////////////////////
	//////PARAMETER CHECKING//////////////
	/////////////////////////////////////
	new iPlayerID, szStat[16], iValue;
	if(sscanf(params, "us[16]i", iPlayerID, szStat, iValue))
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /set [playerid] [value] [amount]");
	    SendClientMessage(playerid, COLOR_GREY, "experience | hours | bank | phone | housekey");
	    SendClientMessage(playerid, COLOR_GREY, "bizkey | materials | job | age | sex ");
	    SendClientMessage(playerid, COLOR_GREY, "deaths | maskid | carcredit | arrests");
	    SendClientMessage(playerid, COLOR_GREY, "workon | carkey");

		return 1;
	}
	////////////////////////////////////



	new szMessage[64]; // Store the messages
	if(!strcmp(szStat, "experience", true))
	{
	    PlayerInfo[iPlayerID][pExp] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
	    SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "hours", true))
	{
		PlayerInfo[iPlayerID][pPlayingHours] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid,COLOR_ADMINCMD,szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "bank", true))
	{
		PlayerInfo[iPlayerID][pBank] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "phone", true))
	{
		PlayerInfo[iPlayerID][pPhoneNumber] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "housekey", true))
	{
		PlayerInfo[iPlayerID][pHouseKey] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "bizkey", true))
	{
		PlayerInfo[iPlayerID][pBizKey] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "materials", true))
	{
		PlayerInfo[iPlayerID][pMaterials] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "job", true))
	{
		if(iValue < 0 || iValue > 13) { return SendClientMessage(playerid,COLOR_GRAD2, "Nu exista joburi peste 13!"); }

		PlayerInfo[iPlayerID][pJob] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "age", true))
	{
		PlayerInfo[iPlayerID][pAge] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "sex", true))
	{
		PlayerInfo[iPlayerID][pSex] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "deaths", true))
	{
		PlayerInfo[iPlayerID][pDeaths] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "maskid", true))
	{
		PlayerInfo[iPlayerID][pMaskID] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "carcredit", true))
	{
		PlayerInfo[iPlayerID][pCarCredit] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "arrests", true))
	{
		PlayerInfo[iPlayerID][pArrested] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "workon", true))
	{
		PlayerInfo[iPlayerID][pWorkOn] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	if(!strcmp(szStat, "carkey", true))
	{
		PlayerInfo[iPlayerID][pCarKey] = iValue;
		format(szMessage, 21+MAX_PLAYER_NAME+MAX_STAT_NAME+10,"You have set %s's %s to %d", ReturnPlayerName(iPlayerID), szStat, iValue);
		SendClientMessage(playerid, COLOR_ADMINCMD, szMessage);
		printf("%s has set %s's %s to %d", ReturnPlayerName(playerid), ReturnPlayerName(iPlayerID), szStat, iValue);

		return 1;
	}

	return 1;
}
//=== /adminset ===//
//=== /leadadmincmds ===//
COMMAND:afactioncmds(playerid, params[])
{
	if(!AdminCheck(playerid, ADMINLEVEL_LEAD))
		return 1;

	SendClientMessage(playerid,COLOR_GREEN,"____________________Admin Faction Commands____________________");
	SendClientMessage(playerid, COLOR_WHITE, "[Lead] /afactionkick");
	SendClientMessage(playerid, COLOR_WHITE, "[Lead] /afactioncolor /afactionspawn /afactionname /afactionuseskins /afactionrankamount /afactiontype");
	SendClientMessage(playerid, COLOR_WHITE, "[Lead] /afactionjoinrank /afactionbank  /afactionskin");
	SendClientMessage(playerid, COLOR_WHITE, "[Lead] /afactionrankname /agotofaction /afactionusecolor");

	return 1;
}

COMMAND:abusinesscmds(playerid, params[])
{
	if(!AdminCheck(playerid, ADMINLEVEL_LEAD))
		return 1;

	SendClientMessage(playerid,COLOR_WHITE,"- Admin Business Commands");
	SendClientMessage(playerid, COLOR_GRAD2, "[Lead] /abusinessentrance /abusinessexit /abusinessprice ");
	SendClientMessage(playerid, COLOR_GRAD2, "[Lead] /abusinessint /abusinessname /abusinesstype");
	SendClientMessage(playerid, COLOR_GRAD, "[Lead] /agotobusiness /abusinessproducts /abusinesssell");

	return 1;
}

COMMAND:abuildingcmds(playerid, params[])
{
	if(!AdminCheck(playerid, ADMINLEVEL_LEAD))
		return 1;

	SendClientMessage(playerid,COLOR_WHITE,"-  Admin Building Commands");
	SendClientMessage(playerid, COLOR_GRAD2, "/abuildingname /abuildingentrance /abuildingexit");
	SendClientMessage(playerid, COLOR_GRAD2, "/abuildingint /agotobuilding /abuildingfee /abuildinglock");

	return 1;
}
//=== /leadadmincmds ===//
//=== /ajail ===//
#define MAX_AJAIL_REASON 60
#define AJAIL_VIRTUAL_WORLD 124000 // 124 000 -> 124 500 is reserved for ajail

COMMAND:ajail(playerid, params[])
{
	if(!AdminCheck(playerid,ADMINLEVEL_MODERATOR))
		return 1;

	new iPlayerID,
		iTime,
		szReason[MAX_AJAIL_REASON];

	if(sscanf(params, "uis[" #MAX_AJAIL_REASON "]", iPlayerID, iTime, szReason))
	{
		return SendErrorMessage(playerid,"USAGE: /ajail [PlayerID] [timp(minute)] [motiv]");
	}

	if(strlen(szReason) > 60)
	{
		return SendErrorMessage(playerid,"Motivul nu poate fi mai lung de 60 de caractere");
	}

	new iYear,
		iMonth,
		iDay,
		szMessage[54+MAX_PLAYER_NAME+MAX_PLAYER_NAME+5+MAX_AJAIL_REASON];

	////////////////////////////////////////////////////////////////////////////
	/////Everything needed for the adminjail / all execution is done here//////
	//////////////////////////////////////////////////////////////////////////
	getdate(iYear, iMonth, iDay);
	SafeResetPlayerWeapons(iPlayerID);
	WantedPoints[iPlayerID] = 0;
	PlayerInfo[iPlayerID][pJailed] = 4;
	PlayerInfo[iPlayerID][pJailTime] = iTime* 60;
	SetPlayerInterior(iPlayerID, 0);
	SetPlayerPos(iPlayerID, 1040.6840,1017.3040,55.3047);
	SetPlayerVirtualWorld(iPlayerID, AJAIL_VIRTUAL_WORLD+playerid);
	//////////////////////////////////////////////////////////////////////////

	format(szMessage, 54+MAX_PLAYER_NAME+MAX_PLAYER_NAME+5+MAX_AJAIL_REASON,"AdmCmd: %s a fost inchis de catre %s pentru %d minute, Motiv: %s", GetPlayerNameEx(iPlayerID), GetPlayerNameEx(playerid), iTime, szReason);
	SendClientMessageToAll(COLOR_LIGHTRED,szMessage);

	AjailLog(szMessage);

	return 1;
}

//=== /ajail ===//
//=== /aunjail ===//
COMMAND:aunjail(playerid, params[])
{
	if(!AdminCheck(playerid, ADMINLEVEL_MODERATOR))
		return 1;


	new iPlayerID;

	if(sscanf(params,"u", iPlayerID))
	{
		return SendErrorMessage(playerid, "USAGE: /aunjail <PlayerID/PartOfName>");
	}

	if(PlayerInfo[iPlayerID][pJailed] != 4)
	{
		return SendErrorMessage(playerid, "That player is not in adminjail");
	}


	new iYear,
		iMonth,
		iDay,
		szMessage[53+MAX_PLAYER_NAME+MAX_PLAYER_NAME+2+2+4];

	getdate(iYear, iMonth, iDay);

	format(szMessage, 48+MAX_PLAYER_NAME+MAX_PLAYER_NAME,"AdmCmd: %s a fost scos din admin-jail de catre %s.", GetPlayerNameEx(iPlayerID), GetPlayerNameEx(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, szMessage);

	format(szMessage, 53+MAX_PLAYER_NAME+MAX_PLAYER_NAME+2+2+4,"[A-UNJAIL] %s has been released from adminjail by %s [%d/%d/%d]", GetPlayerNameEx(iPlayerID), GetPlayerNameEx(playerid), iDay, iMonth, iYear);
	AjailLog(szMessage);

	/////////////////////////////////////////////////////////////
	SetPlayerVirtualWorld(iPlayerID, 0);
	SetPlayerInterior(iPlayerID, 0);
	SetPlayerPos(iPlayerID, 1544.8065,-1675.1563,13.5591);
	PlayerInfo[iPlayerID][pJailTime] = 0;
	PlayerInfo[iPlayerID][pJailed] = 0;
	////////////////////////////////////////////////////////////
	return 1;
}
//=== /aunjail ===//
//=== /report ===//
COMMAND:report(playerid, params[])
{
	new iPlayerID,
		szReason[86],
		szMessage[38+MAX_PLAYER_NAME+MAX_PLAYER_NAME+86];


	if(sscanf(params, "us[86]", iPlayerID, szReason))
	{
		return SendErrorMessage(playerid,"FOLOSESTE: /report <PlayerID/PartOfName> <Motiv>");
	}

	if(PlayerInfo[iPlayerID][pAdministrator] > 0)
	{
		return SendErrorMessage(playerid,"Pentru a reporta un admin intra pe forum si reclamal la sectiunea de reclamatii pentru admini.");
	}

	PlayerInfo[playerid][pReport] = 1;

	format(szMessage, 38+MAX_PLAYER_NAME+3+MAX_PLAYER_NAME+3,"[REPORT] %s (%d) a fost raportat de %s (%d)", GetPlayerNameEx(iPlayerID), iPlayerID, GetPlayerNameEx(playerid), playerid);
	AdministratorMessage(COLOR_LIGHTRED, szMessage, 1);
	ReportLog(szMessage);
	format(szMessage, 18+86,"[REPORT] Motiv: %s", szReason);
	ReportMSG(COLOR_LIGHTRED, szMessage);
	SendClientMessage(playerid, COLOR_GREEN, "* Reportul tau a fost trimis adminilor online. *");
	ReportLog(szMessage);


	return 1;
}

COMMAND:re(playerid, params[])
{
	new szReason[86],
		szMessage[21+MAX_PLAYER_NAME+3+86];

	if(sscanf(params, "s[86]", szReason))
	{
		return SendErrorMessage(playerid,"FOLOSESTE: /re <report>");
	}

	PlayerInfo[playerid][pReport] = 1;
	SetTimerEx("ReportReset", 100000, false, "i", playerid);
	format(szMessage, 21+MAX_PLAYER_NAME+3+86,"[REPORT RAPID] %s (%d): %s", GetPlayerNameEx(playerid), playerid, szReason);
	AdministratorMessage(COLOR_LIGHTRED,szMessage,1);
	SendClientMessage(playerid, COLOR_GREEN, "* Reportul tau a fost trimis catre echipa administrativa. *");

	return 1;
}

COMMAND:ar(playerid, params[])
{
	if(!AdminCheck(playerid, ADMINLEVEL_MODERATOR))
		return 1;

	new iPlayerID;

	if(sscanf(params,"u", iPlayerID))
	{
		return SendErrorMessage(playerid, "USAGE: /ar <PlayerID/PartOfName>");
	}

	if(PlayerInfo[iPlayerID][pReport] == -1)
	{
		return SendErrorMessage(playerid, "** A raspuns cineva la reportul acestui player sau acesta nu a raportat ceva.");
	}

	new szMessage[73+MAX_PLAYER_NAME+MAX_PLAYER_NAME];

	format(szMessage, 73+MAX_PLAYER_NAME,"[REPORT] Administratorul %s a acceptat reportul tau, si te va ajuta.", GetPlayerNameEx(playerid));
	SendClientMessage(iPlayerID, COLOR_YELLOW, szMessage);

	format(szMessage, 34+MAX_PLAYER_NAME+3,"[ADMIN] Ai acceptat reportul lui %s(%d)", GetPlayerNameEx(iPlayerID), iPlayerID);
	SendClientMessage(playerid,COLOR_YELLOW,szMessage);

	format(szMessage, 37+MAX_PLAYER_NAME+3+MAX_PLAYER_NAME+3,"[REPORT RAPID] %s (%d) a acceptat reportul lui %s(%d)", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(iPlayerID), iPlayerID);
	AdministratorMessage(COLOR_YELLOW,szMessage,1);

	PlayerInfo[iPlayerID][pReport] = -1;

	return 1;
}
//=== /report ===//
//=== /setskin ===//
COMMAND:setskin(playerid, params[])
{
	if(!AdminCheck(playerid, ADMINLEVEL_MODERATOR))
		return 1;

	new iPlayerID,
		iSkin,
		szMessage[28+MAX_PLAYER_NAME+3];

	if(sscanf(params, "ui", iPlayerID, iSkin))
	{
		return SendErrorMessage(playerid, "USAGE: /setskin [playerid/partofname] [IDSkin]");
	}

	SetPlayerSkin(iPlayerID, iSkin);
	PlayerInfo[iPlayerID][pSkin] = iSkin;

	format(szMessage, 27+MAX_PLAYER_NAME+3,"[SKIN] %s ti-a setat skin-ul %d", GetPlayerNameEx(playerid), iSkin);
	SendClientMessage(iPlayerID, COLOR_YELLOW, szMessage);
	format(szMessage, 28+MAX_PLAYER_NAME+3,"[SKIN] I-ai setat lui %s skin-ul %d", GetPlayerNameEx(iPlayerID), iSkin);
	SendClientMessage(playerid, COLOR_YELLOW, szMessage);

	return 1;
}
//=== /setskin ===//
//=== /agivelicense ===//
COMMAND:agivelicense(playerid, params[])
{
	if(!AdminCheck(playerid, ADMINLEVEL_ADMIN))
		return 1;

	new iPlayerID,
		szOption[15];

	if(sscanf(params,"us[15]", iPlayerID, szOption))
	{
		SendErrorMessage(playerid, "USAGE: /agivelicense <PlayerID/PartOfName> <Option>");
		return SendErrorMessage(playerid, "Options: | driving | flying | weapon");
	}

	if(!strcmp(szOption, "driving", true))
	{
		new szMessage[60+MAX_PLAYER_NAME+MAX_PLAYER_NAME+2+2+3],
			iYear,
			iMonth,
			iDate;

		PlayerInfo[iPlayerID][pCarLic] = 1;
		format(szMessage, 36+MAX_PLAYER_NAME,"[ADMIN] %s gave you a drivers license", GetPlayerNameEx(playerid));
		SendClientMessage(iPlayerID, COLOR_YELLOW, szMessage);
		format(szMessage, 36+MAX_PLAYER_NAME,"[ADMIN] You gave %s a drivers license", GetPlayerNameEx(iPlayerID));
		SendClientMessage(playerid, COLOR_YELLOW, szMessage);


		getdate(iYear, iMonth, iDate);
		format(szMessage, 60+MAX_PLAYER_NAME+MAX_PLAYER_NAME+2+2+3,"[/agivelicense] Administrator %s gave %s a drivers license [%d/%d/%d]", GetPlayerNameEx(playerid), GetPlayerNameEx(iPlayerID), iDate, iMonth, iYear);
		AbuseLog(szMessage);

		return 1;
	}

	if(!strcmp(szOption, "flying", true))
	{
		new szMessage[59+MAX_PLAYER_NAME+MAX_PLAYER_NAME+2+2+3],
			iYear,
			iMonth,
			iDate;

		PlayerInfo[iPlayerID][pFlyLic] = 1;
		format(szMessage, 35+MAX_PLAYER_NAME,"[ADMIN] %s gave you a flying license", GetPlayerNameEx(playerid));
		SendClientMessage(iPlayerID, COLOR_YELLOW, szMessage);
		format(szMessage, 35+MAX_PLAYER_NAME,"[ADMIN] You gave %s a flying license", GetPlayerNameEx(iPlayerID));
		SendClientMessage(playerid, COLOR_YELLOW, szMessage);


		getdate(iYear, iMonth, iDate);
		format(szMessage, 59+MAX_PLAYER_NAME+MAX_PLAYER_NAME+2+2+3,"[/agivelicense] Administrator %s gave %s a flying license [%d/%d/%d]", GetPlayerNameEx(playerid), GetPlayerNameEx(iPlayerID), iDate, iMonth, iYear);
		AbuseLog(szMessage);

		return 1;
	}

	if(!strcmp(szOption, "weapon", true))
	{
		new szMessage[59+MAX_PLAYER_NAME+MAX_PLAYER_NAME+2+2+3],
			iYear,
			iMonth,
			iDate;

		PlayerInfo[iPlayerID][pWepLic] = 1;
		format(szMessage, 35+MAX_PLAYER_NAME,"[ADMIN] %s gave you a weapon license", GetPlayerNameEx(playerid));
		SendClientMessage(iPlayerID, COLOR_YELLOW, szMessage);
		format(szMessage, 35+MAX_PLAYER_NAME,"[ADMIN] You gave %s a weapon license", GetPlayerNameEx(iPlayerID));
		SendClientMessage(playerid, COLOR_YELLOW, szMessage);


		getdate(iYear, iMonth, iDate);
		format(szMessage, 59+MAX_PLAYER_NAME+MAX_PLAYER_NAME+2+2+3,"[/agivelicense] Administrator %s gave %s a weapon license [%d/%d/%d]", GetPlayerNameEx(playerid), GetPlayerNameEx(iPlayerID), iDate, iMonth, iYear);
		AbuseLog(szMessage);

		return 1;
	}

	return SendErrorMessage(playerid, "Incorrect option");
}
//=== /agivelicense ===//
//=== /unlockcar ===//
COMMAND:unlockcar(playerid, params[])
{
	if(!AdminCheck(playerid, ADMINLEVEL_MODERATOR))
		return 1;


	new iVehicleID;

	if(sscanf(params, "i", iVehicleID))
	{
		return SendErrorMessage(playerid, "USAGE: /unlockcar <vehicleid>");
	}

	VehicleInfo[iVehicleID][vLock] = 0;
	UnLockCar(iVehicleID);
	SetVehicleParamsForPlayer(iVehicleID, playerid, 0, 0);
	SendClientMessage(playerid,COLOR_YELLOW,"Masina cu id-ul respectiv a fost deblocata.");

	return 1;
}
//=== /unlockcar ===//
//=== /fuelallcars ===//
COMMAND:fuelallcars(playerid, params[])
{
	if(!AdminCheck(playerid, ADMINLEVEL_ADMIN))
		return 1;

	for(new i=0; i<MAX_VEHICLES; i++)
	{
		Fuel[i] = GasMax;
	}

	new szMessage[39+MAX_PLAYER_NAME];
	format(szMessage, 39+MAX_PLAYER_NAME,"AdmCmd: Toate vehiculele au fost reumplute cu benzina de catre %s", GetPlayerNameEx(playerid));
	SendClientMessageToAll(COLOR_LIGHTRED, szMessage);

	return 1;
}
//=== /fuelallcars ===//
//=== /eficace ===//
COMMAND:frankydaarme(playerid, params[])
{
	if(!AdminCheck(playerid, ADMINLEVEL_LEAD))
		return 1;

	new iPlayerID,
		iWeapon,
		iAmmo;

	if(sscanf(params, "uii", iPlayerID, iWeapon, iAmmo))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /agivegun <PlayerID/PartOfName> <WeaponID> <Ammo>");
		SendClientMessage(playerid, COLOR_WHITE, "3(Club) | 4(knife) | 5(bat) | 6(Shovel) | 7(Cue) | 8(Katana) | 10-13(Dildo) | 14(Flowers)");
		SendClientMessage(playerid, COLOR_WHITE, "16(Grenades) | 18(Molotovs) | 22(Pistol) | 23(SPistol) 24(Eagle) | 25(Shotgun) | 27(SPAS12)");
		SendClientMessage(playerid, COLOR_WHITE, "29(MP5) | 30(AK47) | 31(M4) | 33(Rifle) | 34(Sniper) | 35(Bazooka) | 37(Flamethrower)");
		SendClientMessage(playerid, COLOR_WHITE, "41(Spray) | 42(Fire Extinguisher) | 43(Camera) | 46(Parachute)");

		return 1;
	}

	if(iWeapon < 2 || iWeapon > 46)
	{
		return SendErrorMessage(playerid, "WeaponID cannot be less than 2 or above 46");
	}

	if(iAmmo < 1 || iAmmo > 500)
	{
		return SendErrorMessage(playerid, "Ammo cannot be above 500");
	}

	///////////////Execution//////////////////////
	SafeGivePlayerWeapon(iPlayerID, iWeapon, iAmmo);

	//////////////Messages////////////////////////
	new szMessage[67+MAX_PLAYER_NAME+2+4+MAX_PLAYER_NAME+2+2+4],
		iYear,
		iMonth,
		iDate;
	//////////////////////Player/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	format(szMessage, 46+MAX_PLAYER_NAME+2+4,"[ADMIN] %s ti-a dat o arma [ID: %d] cu %d gloante", GetPlayerNameEx(playerid), iWeapon, iAmmo);
	SendClientMessage(iPlayerID, COLOR_YELLOW, szMessage);
	///////////////////////Admin/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	format(szMessage, 46+MAX_PLAYER_NAME+2+4,"[ADMIN] I-ai dat lui %s o arma [ID: %d] cu %d gloante", GetPlayerNameEx(iPlayerID), iWeapon, iAmmo);
	SendClientMessage(playerid, COLOR_YELLOW, szMessage);
	////////////////////////////////////////////////////////////Logging//////////////////////////////////////////////////////////////////////////
	getdate(iYear, iMonth, iDate);
	format(szMessage, 67+MAX_PLAYER_NAME+2+4+MAX_PLAYER_NAME+2+2+4,"[/agivegun] %s a primit o arma de tip %d cu %d munitie de la administratorul %s [%d/%d/%d]", GetPlayerNameEx(iPlayerID), iWeapon, iAmmo, GetPlayerNameEx(playerid), iDate, iMonth, iYear);
	AbuseLog(szMessage);

	return 1;
}
//=== /eficace ===//
//=== /checkowner ===//
COMMAND:checkowner(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdministrator])
	{
	    return SendClientMessage(playerid, COLOR_GRAD, "You're not authorized to use this command.");
  	}
	for(new i = 0; i < sizeof(Houses); i++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 5.0, Houses[i][EnterX], Houses[i][EnterY], Houses[i][EnterZ]))
        {
			new string[MAX_PLAYER_NAME+20];
			format(string, MAX_PLAYER_NAME+20, "Owner: %s", Houses[i][Owner]);
			SendPlayerExtendedMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
	}
	return 1;
}
//=== /checkowner ===//
//=== /gotopos ===//
COMMAND:gotopos(playerid, params[])
{
	if(!AdminCheck(playerid,ADMINLEVEL_MODERATOR))
		return 1;

	new Float:x, Float:y, Float:z;

	if(sscanf(params, "fff", x,y,z))
	{
		return SendClientMessage(playerid,COLOR_GREY,"USAGE: /gotopos [X] [Y] [Z]");
	}
	else
	{
		SetPlayerPos(playerid, x, y, z);
		return 1;
	}
}
//=== /gotopos ===//
//=== /x ===//
COMMAND:x(playerid, params[])
{
	if(!AdminCheck(playerid,ADMINLEVEL_MODERATOR))
		return 1;

	new Float:add;

	if(sscanf(params, "f", add))
	{
		return SendClientMessage(playerid,COLOR_GREY,"USAGE: /x [Float]");
	}
	else
	{
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x+add, y, z);
		return 1;
	}
}
//=== /x ===//
//=== /y ===//
COMMAND:y(playerid, params[])
{
	if(!AdminCheck(playerid,ADMINLEVEL_MODERATOR))
		return 1;

	new Float:add;

	if(sscanf(params, "f", add))
	{
		return SendClientMessage(playerid,COLOR_GREY,"USAGE: /y [Float]");
	}
	else
	{
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y+add, z);
		return 1;
	}
}
//=== /y ===//
//=== /z ===//
COMMAND:z(playerid, params[])
{
	if(!AdminCheck(playerid,ADMINLEVEL_MODERATOR))
		return 1;

	new Float:add;

	if(sscanf(params, "f", add))
	{
		return SendClientMessage(playerid,COLOR_GREY,"USAGE: /z [Float]");
	}
	else
	{
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z+add);
		return 1;
	}
}
//=== /z ===//
//=== /setint ===//
COMMAND:setint(playerid, params[])
{
	if(!AdminCheck(playerid,ADMINLEVEL_MODERATOR))
		return 1;

	new id, interior;

	if(sscanf(params, "ui", id,interior))
	{
		return SendClientMessage(playerid,COLOR_GREY,"USAGE: /setint [playerid/playername] [interiorID]");
	}
	else
	{
	    SetPlayerInterior(playerid, interior);
		return 1;
	}
}
//=== /setint ===//
//=== /askq ===//
COMMAND:ask(playerid, params[])
{
	new szQuestion[86],
		szMessage[13+MAX_PLAYER_NAME+3+86];

	if(sscanf(params,"s[86]", szQuestion))
	{
		return SendErrorMessage(playerid,"FOLOSESTE: /askq <intrebarea>");
	}

	format(szMessage, 13+MAX_PLAYER_NAME+3+86,"[ASKQ] %s (%d): %s", GetPlayerNameEx(playerid), playerid, szQuestion);
	AdministratorMessage(COLOR_YELLOW, szMessage, 1);
	TesterMessage(COLOR_YELLOW, szMessage);

	PlayerInfo[playerid][pQuestion] = 1;
	SendClientMessage(playerid,COLOR_YELLOW,"[ASKQ] Intrebarea ta a fost trimisa testerilor si adminilor online. Te rugam sa astepti.");

	return 1;
}

COMMAND:aq(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdministrator])
	{
		if(PlayerInfo[playerid][pTester] == 0)
		{
			return SendErrorMessage(playerid, "Nu esti autorizat sa folosesti aceasta comanda.");
		}
	}

	new iPlayerID,
		szMessage[80+MAX_PLAYER_NAME+MAX_PLAYER_NAME];


	if(sscanf(params,"u", iPlayerID))
	{
		return SendErrorMessage(playerid, "FOLOSESTE: /acceptq <PlayerID/PartOfName>");
	}

	if(PlayerInfo[iPlayerID][pQuestion] == -1)
	{
		return SendErrorMessage(playerid, "** Cineva a raspuns deja la aceasta intrebare sau acest player nu a pus nicio intrebare.");
	}

	format(szMessage, 80+MAX_PLAYER_NAME,"[ASKQ] Salut, numele meu este (ID:%d)%s si te voi ajuta in legatura cu problema ta.", playerid, GetPlayerNameEx(playerid));
	SendClientMessage(iPlayerID, COLOR_YELLOW, szMessage);

	format(szMessage, 38+MAX_PLAYER_NAME+MAX_PLAYER_NAME+3,"[TESTER] %s a acceptat intrebarea lui %s (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(iPlayerID), iPlayerID);
	TesterMessage(COLOR_LIGHTGREEN, szMessage);
	AdministratorMessage(COLOR_LIGHTGREEN,szMessage, 1);

	PlayerInfo[iPlayerID][pQuestion] = -1;

	return 1;
}
//=== /askq ===//
//=== /testerchat ===//
COMMAND:testerchat(playerid, params[])
{
	if(!PlayerInfo[playerid][pAdministrator])
	{
	    if(PlayerInfo[playerid][pTester] == 0)
	    {
	        return SendClientMessage(playerid, COLOR_GRAD, "Nu esti autorizat sa folosesti aceasta comanda.");
		}
	}
	if(Tchat == 1 && PlayerInfo[playerid][pAdministrator] < 5)
    {
        SendClientMessage(playerid, COLOR_GREY, "Canalul testerilor este inchis nu poti vorbi acum.");
        return 1;
    }

	new szMessage[128];

	if(sscanf(params, "s[128]", szMessage))
	{
		return SendClientMessage(playerid,COLOR_GREY,"USAGE: (/t)esterchat [message]");
	}

	new szString[129+1+MAX_PLAYER_NAME+3];
	format(szString, 129+1+MAX_PLAYER_NAME+3, "[TesterChat] Staff Member %s: %s", GetPlayerNameEx(playerid), szMessage);
	foreach(Player, i)
	{
		if(PlayerInfo[i][pAdministrator] && TesterActivated[i] == 0)
		{
		    SendPlayerExtendedMessage(i, COLOR_GREEN, szString);
		}
		if(PlayerInfo[i][pTester])
		{
		    SendPlayerExtendedMessage(i, COLOR_GREEN, szString);
		}
	}
	return 1;
}
COMMAND:t(playerid, params[])
{
	return cmd_testerchat(playerid, params);
}
//=== /testerchat ===//
// ## Player Commands ##
//=== /callsign ===//
COMMAND:carsign(playerid,params[])
{
if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2)
	{
    new veh = GetPlayerVehicleID(playerid);
        if(IsPlayerInAnyVehicle(playerid))
    {
                if(isnull(params)) return SendClientMessage(playerid,COLOR_ORANGE,"INFO: {FFFFFF}/carsign [text]");
                if(!veicolo_callsign_status[veh])
        {
        new string[128];
        format(string,sizeof(string), "%s",params);
        vehicle_callsign[veh] = Create3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
        Attach3DTextLabelToVehicle( vehicle_callsign[veh], veh, -0.7, -2.8, -0.3);
        veicolo_callsign_status[veh] = 1;
                }
                else
                {
                Delete3DTextLabel(vehicle_callsign[veh]);
                veicolo_callsign_status[veh] = 0;
                return 1;
                        }
                }
                else
                {
        SendClientMessage(playerid,COLOR_ORANGE,"ERROR: {FFFFFF}Nu esti intr-un vehicol !");
        return 1;
                }
        }
        return 1;
}
COMMAND:removecarsign(playerid,params[])
{
        new veh = GetPlayerVehicleID(playerid);
        if(IsPlayerInAnyVehicle(playerid))
    {
        Delete3DTextLabel(vehicle_callsign[veh]);
                veicolo_callsign_status[veh] = 0;
    }
    else
    {
    SendClientMessage(playerid,COLOR_ORANGE,"ERROR: {FFFFFF}Nu esti intr-un vehicol.");
    }
        return 1;
}
//=== /callsign ===//
//=== /blockpm ===//
			 							*/

COMMAND:blockpm(playerid, params[])
{
	new targetid;
	if(sscanf(params, "u", targetid)) SendClientMessage(playerid, COLOR_GREY, "USAGE: /blockpm [playerid]");
	else
	{
	    if(PlayerInfo[playerid][pDonator] == 0) return SendClientMessage(playerid,COLOR_GREY," You need to be a donator to use this feature.");
	    if (targetid == playerid) return SendClientMessage(playerid, COLOR_GREY, " You cannot block yourself.");
		if(IsPlayerConnected(targetid))
		{
			switch(BlockPMPerson[playerid][targetid])
			{
			    case 0:
			    {
					SendClientMessage(playerid,COLOR_WHITE," Blocked, you wont receive any PM's from him.");
			        BlockPMPerson[playerid][targetid] = 1;
			    }
			    case 1:
			    {
			        SendClientMessage(playerid,COLOR_WHITE," Unblocked, you can now receive PM's from this person.");
			        BlockPMPerson[playerid][targetid] = 1;
			    }
			}
		}
	}
	return 1;
}
//=== /blockpm ===//
//=== /flush ===//
COMMAND:flush(playerid, params[])
{
	for(new i=0; i<50; i++)
	{
		SendClientMessage(playerid,COLOR_WHITE, "              ");
	}

	return 1;
}
//=== /flush ===//
//=== /blockedpm ===//


COMMAND:blockedpm(playerid, params[])
{
	new string[32];
    if(PlayerInfo[playerid][pDonator] >= 1)
	{
	    foreach (Player,i)
	    {
	        if(BlockPMPerson[playerid][i] == 1)
	        {
	            SendClientMessage(playerid, COLOR_GREEN, "Oamenii pe care i-ai blocat:");
	            format(string, sizeof(string), "** ID: %d ** %s", i, PlayerName(i));
				SendClientMessage(playerid, COLOR_GREY, string);
	        }
	    }
    }
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, " Trebuie sa fi un donator ca sa folosesti asta.");
	}
	return 1;
}

//=== /blockedpm ===//
//=== /dropgun ===//
#define MAX_GUN_NAME 24

COMMAND:dropgun(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 2)
	{
		return SendClientMessage(playerid, COLOR_GREY, " Aceasta comanda este interzisa . Nu ai level 2");
	}
	if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 6)
	{
		SendClientMessage(playerid, COLOR_GREY, "Nu poti da arma ,deoarece esti membru al unei factiuni guvernamentale !");
    	return 1;
	}
	new gunID = GetPlayerWeapon(playerid);
	new gunAmmo = GetPlayerAmmo(playerid);

	if(gunID != 0 && gunAmmo != 0)
	{
		new f = maxobj+1;
		for (new a = 0; a < sizeof(ObjCoords); a++)
		{
			if(ObjCoords[a][0] == 0.0) f = a;
		}

		if(f == maxobj+1) {  return SendClientMessage(playerid, COLOR_GREY, "EROARE: Obiectele maxime sunt limitate."); }

		if(GetPlayerWeapon(playerid) == 0) { return SendClientMessage(playerid,COLOR_GREY,"   Nu ai nimic in mana."); }
		if(GetPlayerWeapon(playerid) == 41) { return SendClientMessage(playerid,COLOR_GREY,"  Nu poti arunca acest item"); }

		new szGunName[MAX_GUN_NAME];
		new szString[69+MAX_PLAYER_NAME+MAX_GUN_NAME+3+10];

		SafeRemovePlayerWeapon(playerid, gunID);

		GetWeaponNameEx(gunID, szGunName, MAX_GUN_NAME);
		format(szString, 31+MAX_GUN_NAME+1, "Ti-ai aruncat %s pe jos.", szGunName);
		SendClientMessage(playerid,COLOR_GREY,szString);
		RemovePlayerWeaponA(playerid, gunID);
		ObjectID[f][0] = gunID;
		ObjectID[f][1] = gunAmmo;

		PlayerBubbleMessage(playerid,"a aruncat o arma de pe jos.");
		GetPlayerPos(playerid, ObjCoords[f][0], ObjCoords[f][1], ObjCoords[f][2]);
		object[f] = CreateDynamicObject(GunObjects[gunID][0], ObjCoords[f][0], ObjCoords[f][1], ObjCoords[f][2]-0.9, ObjCoords[f][0], ObjCoords[f][1], ObjCoords[f][2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1,150.0);
		SavePlayerAccount(playerid);
		VirtualWorld[f] = GetPlayerVirtualWorld(playerid);

		///////////////////////////////////////////
		///////////////////LOG////////////////////
		/////////////////////////////////////////
		new y, m, d;
		new h,mi,s;
		getdate(y,m,d);
		gettime(h,mi,s);
		format(szString, 69+MAX_PLAYER_NAME+MAX_GUN_NAME+3+10, "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /dropgun # si-a aruncat %s(%d) cu %d ammo.",d,m,y,h,mi,s,PlayerName(playerid), szGunName, gunID, gunAmmo);
		WeaponLog(szString);

		return 1;
	}

	SendClientMessage(playerid,COLOR_GREY," Nu esti echipat");

	return 1;
}

COMMAND:dgun(playerid, params[])
{
	return cmd_dropgun(playerid, params);
}
//=== /dropgun ===//
//=== /animlist ===//
COMMAND:animlist(playerid, params[])
{
	SendClientMessage(playerid,COLOR_WHITE,"____________________________LISTA ANIM-URILOR_____________________");
	SendClientMessage(playerid, COLOR_GRAD2, "[ANIM-LIST] /gsign(1-4) /kiss /bj /fucku(1-2) /tired(1-2) /cellout");
	SendClientMessage(playerid, COLOR_GRAD2, "[ANIM-LIST] /sit(1-6) /handsup /dance /deal /piss /injured(1-4) /strip");
    SendClientMessage(playerid, COLOR_GRAD2, "[ANIM-LIST] /slapass(1-2) /wave(1-5) /crossarms(1-2) /lean(1-3) /basket");
    SendClientMessage(playerid, COLOR_GRAD2, "[ANIM-LIST] /lookout(1-2) /aim(1-2) /lay(1-9) /bat /tapcig /crack(1-5)");
    SendClientMessage(playerid, COLOR_GRAD2, "[ANIM-LIST] /fall /plant /hide(1-2) /laugh /vomit /inbedleft /inbedright");
    SendClientMessage(playerid, COLOR_GRAD2, "[ANIM-LIST] /getarrested /stance(1-13) /yell(1-3) /walk /drunk /wank {EE5555}/stopanim{FFFFFF}");

	return 1;
}

COMMAND:anim(playerid, params[])
{
	return cmd_animlist(playerid, params);
}

COMMAND:anims(playerid, params[])
{
	return cmd_animlist(playerid, params);
}
//=== /animlist ===//
//=== /bankcmds ===//
COMMAND:bankcmds(playerid, params[])
{
	new szMessage[68];

	format(szMessage, 68, "Bank Commands\n\n/withdraw /wiretransfer/deposit /balance /savings /credit /atm /paycredit");
	ShowPlayerDialog(playerid, 99, DIALOG_STYLE_MSGBOX, "Bank Commands",szMessage, "Ok","");

	return 1;
}
//=== /bankcmds ===//
//=== /calllist ===//
COMMAND:calllist(playerid, params[])
{
	SendClientMessage(playerid,COLOR_GREEN,"- Call List");
	SendClientMessage(playerid, COLOR_GRAD2, "911 - Apel Urgenta");
	SendClientMessage(playerid, COLOR_GRAD2, "411 - Los Santos Taxi Co");
	SendClientMessage(playerid, COLOR_GRAD2, "522 - Linia Mecanicilor");
	SendClientMessage(playerid, COLOR_GRAD2, "211221 - Stirile San Andreas");
	return 1;
}
//=== /calllist ===//
//=== /vehdoors ===//
COMMAND:vehdoors(playerid,params[])
{
	new Chase_Doors[4], Chase_ID;
	new string[128];
	//--------------------------------------------------------------------------
	if(GetPlayerState(playerid) == 2) return SendClientMessage(playerid, 0xAFAFAFAA,"Nu trebuie sa te aflii intr-un vehicul!");
	//--------------------------------------------------------------------------
	if(sscanf(params, "d", Chase_ID)) return SendClientMessage(playerid, 0xAFAFAFAA ,"Foloseste: /vehdoors [id 1-5]"),
	SendClientMessage(playerid,0xAFAFAFAA ,"1 - Portiera sofer | 2 - Portiera pasager fata | 3 - Portiera pasager spate, stanga | 4 - Portiera pasager spate, dreapta");
	//--------------------------------------------------------------------------
	if(Chase_ID > 4 || Chase_ID < 1) return SendClientMessage(playerid,0xAFAFAFAA ,"1 - Portiera sofer | 2 - Portiera pasager fata | 3 - Portiera pasager spate, stanga | 4 - Portiera pasager spate, dreapta");
	if(!ProxDetectorV(2.5, playerid, PlayerInfo[playerid][pCarKey])) return SendClientMessage(playerid, 0xAFAFAFAA, "Nu esti langa o masina!");
    if (!IsABike(PlayerInfo[playerid][pCarKey]) || GetDoorStatus(PlayerInfo[playerid][pCarKey],DOOR_DRIVER)==DOOR_STATUS_OPEN && playerid)
	{
		GetVehicleParamsCarDoors(PlayerInfo[playerid][pCarKey], Chase_Doors[0], Chase_Doors[1], Chase_Doors[2], Chase_Doors[3]);
	    //----------------------------------------------------------------------
		switch(Chase_ID) //1 - geam deschis, 0 - geam inchis
		{
		    case 1:
			{
				Chase_Doors[0] = !Chase_Doors[0] ? (1) : (0);
				format(string, sizeof(string), "~g~.");
				TextDrawSetString(Punct3[playerid], string);
			}
		    case 2:
			{
				Chase_Doors[1] = !Chase_Doors[1] ? (1) : (0);
				format(string, sizeof(string), "~g~.");
				TextDrawSetString(Punct3[playerid], string);
			}
		    case 3:
			{
   				Chase_Doors[2] = !Chase_Doors[2] ? (1) : (0);
   				format(string, sizeof(string), "~g~.");
				TextDrawSetString(Punct3[playerid], string);
			}
		    case 4:
			{
   				Chase_Doors[3] = !Chase_Doors[3] ? (1) : (0);
   				format(string, sizeof(string), "~g~.");
				TextDrawSetString(Punct3[playerid], string);
			}
		}
		//----------------------------------------------------------------------
		SetVehicleParamsCarDoors(PlayerInfo[playerid][pCarKey], Chase_Doors[0], Chase_Doors[1], Chase_Doors[2], Chase_Doors[3]);
	    //----------------------------------------------------------------------
	}
	return 1;
}
//=== /vehdoors ===//
//=== /lsascmds ===//
COMMAND:lsascmds(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 7)
	{
		return SendClientMessage(playerid,COLOR_GREY,"Invalid faction");
	}

	SendClientMessage(playerid,COLOR_WHITE,"				- Los Santos Auto Service -");
	SendClientMessage(playerid, COLOR_GRAD2, "[LSAS] /v inspectdone /duty");
	SendClientMessage(playerid, COLOR_GRAD2, "[LSAS] /v buylock /v buyalarm /v buyimmob /v buygps ");
	SendClientMessage(playerid, COLOR_GRAD2, "[LSAS] /lsasimpound /impound");

	return 1;
}
//=== /lsascmds ===//
//=== /chatcmds ===//
COMMAND:chatcmds(playerid, params[])
{
	new szMessage[80];

	format(szMessage, 80, "Comenzile chat-ului\n\n/low /local /shout\n/whisper /sms /call\n/me /do /pm\n /b");
	ShowPlayerDialog(playerid, 99, DIALOG_STYLE_MSGBOX, "Info Box",szMessage, "Ok","");

	return 1;
}
//=== /chatcmds ===//
//=== /commands ===//
COMMAND:commands(playerid, params[])
{
	//SendClientMessage(playerid,COLOR_WHITE,"- South Central Roleplay [Command List]");
	SendClientMessage(playerid, COLOR_ORANGE, "_____________________LISTA COMENZILOR_________________");
	SendClientMessage(playerid, COLOR_GREY, "[GENERAL] /stats /pay /buy /accept /eatfood /time /calllist /showid /inventory /eat");
	SendClientMessage(playerid, COLOR_GREY, "[VEHICLE] /v /engine  /refuel /window /seatbelt /trunk /hood /eject /radio /takelicenses");
	SendClientMessage(playerid, COLOR_GREY, "[GENERAL] /bankcmds /jobcmds /phonecmds /housecmds /businesscmds /chatcmds /notecmds ");
	SendClientMessage(playerid, COLOR_GREY, "[GENERAL] /atm /tie /untie /frisk /searwallet /drug /dice /coin /anims /clearanims /mymail");
	SendClientMessage(playerid, COLOR_GREY, "[GENERAL] /blindfold /unblindfold /buydrink /buygun /pgun /toggle /fish /ad /cad");
	SendClientMessage(playerid, COLOR_GREY, "[GENERAL] /askq /re(port) /admins /testers /info /handbrake /boombox /healplayer");
	SendClientMessage(playerid, COLOR_GREY, "[GENERAL] /greet /resetinventory /opentoll /accept /myclothes /clothes /knockout");
	SendClientMessage(playerid, COLOR_GREY, "[GENERAL] /backpack /briefcase /enter /showmenu /unrentcar /changepass /acceptdeath /stopanim /buyclothes");
	SendClientMessage(playerid, COLOR_GREY, "[GENERAL] /quitjob /play /myhair /myclothes /showcarid");

	switch(PlayerInfo[playerid][pFaction])
	{
		case 1:
		{
			return SendClientMessage(playerid,COLOR_GRAD2,"[LSPD] /p(olice)cmds");
		}
		case 2:
		{
			return SendClientMessage(playerid, COLOR_GRAD2, "[LS-EMS] /emscmds");
		}
		case 3:
		{
			return SendClientMessage(playerid, COLOR_GRAD2, "[LSPD] /pcmds");
		}
		case 4:
		{
			return SendClientMessage(playerid, COLOR_GRAD2, "[SAN News] /newscmds");
		}
		case 7:
		{
			return SendClientMessage(playerid, COLOR_GRAD2, "[LSAS] /lsascmds");
		}
		case 9:
		{
			return SendClientMessage(playerid, COLOR_GRAD2, "[LSVR] /lsvrcmds");
		}
	}
	if(PlayerInfo[playerid][pAdministrator] >= 1)
	{
		return SendClientMessage(playerid, COLOR_GRAD2, "[Admin] /acmds");
	}

	return 1;
}

COMMAND:cmds(playerid, params[])
{
	return cmd_commands(playerid, params);
}

COMMAND:help(playerid, params[])
{
	return cmd_commands(playerid, params);
}
//=== /commands ===//
//=== /donatorcmds ===//
COMMAND:donatorcmds(playerid, params[])
{
	if(PlayerInfo[playerid][pDonator] < 1)
	{
		return SendClientMessage(playerid,COLOR_GREY,"You are not a donator");
	}

	new szMessage[65];

	format(szMessage, 65, "Comenzile de donator\n\n/mask /setstyle /toggle\n/blockedpm /blockpm");
	ShowPlayerDialog(playerid, 99, DIALOG_STYLE_MSGBOX, "Comenzile de donator",szMessage, "Ok","");

	return 1;
}
//=== /donatorcmds ===//
//=== /factioncommands ===//
COMMAND:factioncmds(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 0)
	{
		return SendErrorMessage(playerid, "Tu nu ai o factiune");
	}
	else if (PlayerInfo[playerid][pFaction] == 7)
	{
		SendClientMessage(playerid, COLOR_WHITE,"/tow /v color /repair /refill /impound /v mod /lsasgarage /lsasrampa /lsasimpound /fullrepair");
		SendClientMessage(playerid, COLOR_WHITE,"/v buylock /v buyimmob /v buygps /v buyalarm");
	}
	return 1;
}
//=== /factioncommands ===//
//=== /gangcmds ===//
COMMAND:gangcmds(playerid, params[])
{
	if(DynamicFactions[PlayerInfo[playerid][pFaction]][fType] != 2)
	{
		return SendClientMessage(playerid,COLOR_GREY,"Invalid faction");
	}

	SendClientMessage(playerid,COLOR_WHITE,"- Gang Commands");
	SendClientMessage(playerid, COLOR_GRAD2, "[Gang] /take");

	return 1;
}
//=== /gangcmds ===//
//=== /jobcommands ===//
COMMAND:jobcommands(playerid, params[])
{
	switch(PlayerInfo[playerid][pJob])
	{
		case 0: // NO JOB
		{
			return SendClientMessage(playerid, COLOR_GREY, "Nu ai un loc de munca");
		}

		case 4: // MATERIALS DELIVERER
		{
			return SendClientMessage(playerid, COLOR_WHITE, "[FERMIER] /harvest");
		}

		case 8: // MATERIALS DELIVERER
		{
			return SendClientMessage(playerid, COLOR_WHITE, "[DEALER DE ARME] /makeweapon /delivery");
		}

		case 9: // DEALER
		{
			return SendClientMessage(playerid, COLOR_WHITE, "[TIRIST] /truck");
		}

		case 10: // DETECTIVE
		{
			return SendClientMessage(playerid, COLOR_WHITE, "[MATURATOR DE STRAZI] /startsweep");
		}

		case 11: // FARMER
		{
			return SendClientMessage(playerid, COLOR_WHITE, "[LIVRATOR DE PIZZA] /startpizza");
		}

		case 14: // TAXI DRIVER
		{
			return SendClientMessage(playerid, COLOR_WHITE, "[LIVRATOR DE MOBILIER] /startdelivery");
		}

		case 15: // PRISON GUARD
		{
			return SendClientMessage(playerid, COLOR_WHITE, "[TAIETOR DE LEMNE] /startcutter /equipcutter /editranga /editvesta /editcasca /removecutter");
		}

		case 16: // ARMS DEALER
		{
			return SendClientMessage(playerid, COLOR_WHITE, "[LIVRATOR DE ZIARE] /newsduty /startnews ");
		}
	}

	return 1;
}

COMMAND:jobcmds(playerid, params[])
{
	return cmd_jobcommands(playerid, params);
}
//=== /jobcommands ===//
//=== /jobs ===//
COMMAND:jobs(playerid, params[])
{
	if (PlayerToPoint(2, playerid,361.8300,173.7688,1008.3828))
	{
		if (PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 4 || PlayerInfo[playerid][pFaction] == 7|| PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pFaction] == 7)
		{
			SendClientMessage(playerid, COLOR_GREY,"Esti intr-o factiune care are deja salariu nu poti sa iti iei un job secundar.");
		}
  		else
		{
			ShowPlayerDialog(playerid,6800,DIALOG_STYLE_LIST,"Lista locurilor de munca","Tirist\nDetectiv\nFermier\nLivrator de materiale\nMaturator de strazi\nLivrator de pizza\nTransportator de baloti","Aplica","Iesire");
		}
	}
	else SendClientMessage(playerid, COLOR_GREY,"Nu esti la biroul de la primarie.");
}
//=== /jobs ===//
//=== /kiss ===//
COMMAND:kiss(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
		return 1;
	}

	ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.0,0,0,0,0,0);
	return 1;
}
//=== /kiss ===//
//=== /piss ===//
COMMAND:piss(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
		return 1;
	}

	LoopingAnim(playerid,"PAULNMAC","Piss_in",4.0,0,0,0,0,0);
	return 1;
}
//=== /piss ===//
//=== /notecmds ===//
COMMAND:notecmds(playerid, params[])
{
	SendClientMessage(playerid,COLOR_WHITE,"- Note Commands");
	SendClientMessage(playerid, COLOR_GRAD2, "[Note] /shownotes /createnote /deletenote /givenote");

	return 1;
}
//=== /notecmds ===//
//=== /packages ===//
COMMAND:packages(playerid, params[])
{
	new szMessage[64];

	format(szMessage, 64, "Pachetul 1 - [%d] [%d] \n Pachetul 2 - [%d] [%d]", PlayerInfo[playerid][pPack1], PlayerInfo[playerid][pPack1a], PlayerInfo[playerid][pPack2], PlayerInfo[playerid][pPack2a]);
	ShowPlayerDialog(playerid, 8374, DIALOG_STYLE_MSGBOX, "Skill-urile tale.", szMessage, "Okay","");

	return 1;
}

COMMAND:package(playerid, params[])
{
	return cmd_packages(playerid, params);
}
//=== /packages ===//
//=== /pickupgun ===//
#define MAX_GUN_NAME 24

COMMAND:pickgun(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		return SendErrorMessage(playerid, "Nu poti folosi aceasta comanda daca ai sub nivelul 3");
	}

	if(PlayerInfo[playerid][pFaction] == 3)
	{
		return SendErrorMessage(playerid, "Nu poti folosi aceasta comanda cat esti in LSPD");
	}

	new f = maxobj+1;
	if(f == maxobj+1 || Dropped[f] == 1) return SendClientMessage(playerid, COLOR_GREY, "  Nu esti langa nici-o arma.");

	if(VirtualWorld[f] != GetPlayerVirtualWorld(playerid)) return SendClientMessage(playerid, COLOR_GREY, "  Nu esti langa nici o arma.");

	else
	{
		/////////////////////
		// Variables ///////
		///////////////////
		new gunname[MAX_GUN_NAME];
		new buffer[75+MAX_PLAYER_NAME+MAX_GUN_NAME+4];
		new string[128];
		////////////////

		/////////////////////
		//Resetting coords//
		///////////////////
		ObjCoords[f][0] = 7.1618;
		ObjCoords[f][1] = -5.5995;
		ObjCoords[f][2] = -79.3213;
		//////////////////
		/////////////////
   		PlayerBubbleMessage(playerid,"apuca o arma de la sol.");
		DestroyDynamicObject(object[f]);
		SafeGivePlayerWeapon(playerid, ObjectID[f][0], ObjectID[f][1]);
		GetWeaponNameEx(ObjectID[f][0], gunname, MAX_GUN_NAME);
		///////////////////////////////////////////////////////////////////////
		format(buffer, 42+MAX_GUN_NAME+4+1, "Ai ridicat arma de jos - %s cu %d ammo", gunname, ObjectID[f][1]);
		SendClientMessage(playerid, COLOR_GREY, buffer);
		/////////////////////////LOG/////////////////////////////////////////
		new y, m, d;
		new h,mi,s;
		getdate(y,m,d);
		gettime(h,mi,s);
		format(string,75+MAX_PLAYER_NAME+MAX_GUN_NAME+4, "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /pickupgun # a apucat de pe jos un %s cu %d ammo.",d,m,y,h,mi,s,ReturnPlayerName(playerid), gunname, ObjectID[f][1]);
		WeaponLog(string);
	}

	return 1;
}

COMMAND:pgun(playerid, params[])
{
	return cmd_pickgun(playerid, params);
}
//=== /pickupgun ===//
//=== /ajailacc ===//
COMMAND:ajailacc(playerid, params[])
{
    if(!AdminCheck(playerid,ADMINLEVEL_MODERATOR))
		return 1;

	new iPlayerID,
		iTime,
		szReason[MAX_AJAIL_REASON];

    if(sscanf(params, "uis[" #MAX_AJAIL_REASON "]", iPlayerID, iTime, szReason))
	{
		return SendErrorMessage(playerid,"USAGE: /ajailacc [PlayerID] [timp(minute)] [motiv]");
	}

	if(strlen(szReason) > 60)
	{
		return SendErrorMessage(playerid,"Motivul nu poate fi mai lung de 60 de caractere");
	}

	if(IsPlayerConnected(iPlayerID))
	{
	    return SendClientMessage(playerid, COLOR_GREY, "Acest player este online deci nu poti sa il bagi in admin-jail.");
	}

	new iYear,
		iMonth,
		iDay,
		szMessage[54+MAX_PLAYER_NAME+MAX_PLAYER_NAME+5+MAX_AJAIL_REASON];

	////////////////////////////////////////////////////////////////////////////
	/////Everything needed for the adminjail / all execution is done here//////
	//////////////////////////////////////////////////////////////////////////
	getdate(iYear, iMonth, iDay);
	SafeResetPlayerWeapons(iPlayerID);
	WantedPoints[iPlayerID] = 0;
	PlayerInfo[iPlayerID][pJailed] = 4;
	PlayerInfo[iPlayerID][pJailTime] = iTime* 60;
	SetPlayerInterior(iPlayerID, 0);
	SetPlayerPos(iPlayerID, 1040.6840,1017.3040,55.3047);
	SetPlayerVirtualWorld(iPlayerID, AJAIL_VIRTUAL_WORLD+playerid);

	//////////////////////////////////////////////////////////////////////////

	format(szMessage, 54+MAX_PLAYER_NAME+MAX_PLAYER_NAME+5+MAX_AJAIL_REASON,"AdmCmd: %s a fost inchis de catre %s pentru %d minute, Motiv: %s", GetPlayerNameEx(iPlayerID), GetPlayerNameEx(playerid), iTime, szReason);
	SendClientMessageToAll(COLOR_LIGHTRED,szMessage);

	AjailLog(szMessage);

	return 1;
}
//=== /ajailacc ===//
//=== /rules ===//
COMMAND:rules(playerid, params[])
{
	SendClientMessage(playerid,COLOR_LIGHTRED,"Daca ai nevoie de ajutor , tasteaza in chat [/askq]");

	return 1;
}
//=== /rules ===//
//=== /walk ===//
COMMAND:walk(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	{
		return 1;
	}

	switch(PlayerInfo[playerid][pWalk])
	{
		case 1:
		{
			LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		}
		case 2:
		{
			LoopingAnim(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		}
		case 3:
		{
			LoopingAnim(playerid,"PED","WALK_armed",4.1,1,1,1,1,1);
		}
		case 4:
		{
			LoopingAnim(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		}
		case 5:
		{
			LoopingAnim(playerid,"PED","WALK_csaw",4.1,1,1,1,1,1);
		}
		case 6:
		{
			LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		}
		case 7:
		{
			LoopingAnim(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
		}
		case 8:
		{
			LoopingAnim(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
		}
		case 9:
		{
			LoopingAnim(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
		}
		case 10:
		{
			LoopingAnim(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		}
		case 11:
		{
			LoopingAnim(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
		}
		case 12:
		{
			LoopingAnim(playerid,"PED","WALK_rocket",4.1,1,1,1,1,1);
		}
		case 13:
		{
			LoopingAnim(playerid,"PED","WALK_shuffle",4.1,1,1,1,1,1);
		}
		case 14:
		{
			LoopingAnim(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		}
		case 15:
		{
			LoopingAnim(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		}
		case 16:
		{
			LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		}
		case 17:
		{
			LoopingAnim(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		}
		case 18:
		{
			LoopingAnim(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
		}
	}
	return 1;
}
//=== /walk ===//
//=== /drug ===//


#define MARIJUANA_COST 30
#define ECSTASY_COST 80
#define COCAINE_COST 120

COMMAND:drug(playerid, params[])
{
	new szOption[16],
		szParameter[64],
		szMessage[64];

	if(sscanf(params, "s[16]S(x)[64]", szOption, szParameter))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /drug [usage]");
		SendClientMessage(playerid, COLOR_WHITE, "buy | give [PlayerID/PartOfName] [type] [amount] | inventory");

		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You can /drug frisk and /drug revoke");
		}

		return 1;
	}
	//////////////////////DRUG BUY/////////////////////////////
	if(!strcmp(szOption, "buy", true))
	{

		if(DynamicFactions[PlayerInfo[playerid][pFaction]][fType] != 2)
		{
			return SendClientMessage(playerid,COLOR_GREY,"You are not part of an official gang");
		}

		if(!PlayerToPoint(1.5,playerid,1688.5444,-1974.8156,8.8203))
		{
			return SendErrorMessage(playerid, "You are not at the place where you purchase drugs");
		}


		new szType[10],
			iAmount;

		if(!strcmp(szParameter, "x"))
		{
			SendErrorMessage(playerid,"USAGE: /drug buy [type] [amount]");
			SendErrorMessage(playerid,"[TYPES]: marijuana ($30/g) | ecstasy ($80/g) | cocaine ($120/g)");

			return 1;
		}

		sscanf(szParameter, "s[10]i", szType, iAmount); // Split the string up

		if(iAmount < 1 || iAmount > 25)
		{
			return SendErrorMessage(playerid, "Amount has to be between 1 and 25");
		}

		if(!strcmp(szType, "marijuana"))
		{
			if(GetPlayerCash(playerid) < iAmount*MARIJUANA_COST)
			{
				return SendErrorMessage(playerid, "You do not have enough money");
			}

			GivePlayerCash(playerid, -iAmount*MARIJUANA_COST);
			AddItem(playerid,"(D) Marijuana", iAmount);
			format(szMessage, 44+2,"You successfully bought %d grams of marijuana", iAmount);
			SendClientMessage(playerid,COLOR_GREEN,szMessage);

			return 1;
		}

		if(!strcmp(szType, "ecstasy"))
		{
			if(GetPlayerCash(playerid) < iAmount*ECSTASY_COST)
			{
				return SendErrorMessage(playerid, "You do not have enough money");
			}

			GivePlayerCash(playerid, -iAmount*ECSTASY_COST);
			AddItem(playerid,"(D) Ecstasy", iAmount);
			format(szMessage, 44+2,"You successfully bought %d grams of ecstasy", iAmount);
			SendClientMessage(playerid,COLOR_GREEN,szMessage);

			return 1;
		}

		if(!strcmp(szType, "cocaine"))
		{
			if(GetPlayerCash(playerid) < iAmount*COCAINE_COST)
			{
				return SendErrorMessage(playerid, "You do not have enough money");
			}

			GivePlayerCash(playerid, -iAmount*COCAINE_COST);
			AddItem(playerid,"(D) Cocaine", iAmount);
			format(szMessage, 44+2,"You successfully bought %d grams of cocaine", iAmount);
			SendClientMessage(playerid,COLOR_GREEN,szMessage);

			return 1;
		}

		else
		{
			SendErrorMessage(COLOR_GREY,"USAGE: /drug buy [type] [amount]");
			SendErrorMessage(COLOR_GREY,"[TYPES]: marijuana ($5/g) | ecstasy ($15/g) | cocaine ($50/g)");
		}

		return 1;
	}
	//////////////////////DRUG INVENTORY/////////////////////////////
	if(!strcmp(szOption, "inventory", true))
	{
		return ShowInventory(playerid);
	}

	//////////////////////DRUG GIVE/////////////////////////////
	if(!strcmp(szOption, "give", true))
	{
		if(!strcmp(szParameter, "x"))
		{
			SendErrorMessage(playerid,"USAGE: /drug give [PlayerID/PartOfName] [type] [amount]");
			SendErrorMessage(playerid,"[TYPES]: marijuana | ecstasy | cocaine");

			return 1;
		}

		new szType[10],
			iAmount,
			iPlayerID;

		if(sscanf(szParameter, "us[10]i", iPlayerID, szType, iAmount))
		{
			return SendErrorMessage(playerid, "USAGE: /drug give [PlayerID/PartOfName] [type] [amount]");
		}

		if(iAmount < 1)
		{
			return SendErrorMessage(playerid,"You cannot give less than 1 gram away!");
		}

		if(iPlayerID == playerid)
		{
			return SendErrorMessage(playerid,"You can't give drugs to yourself");
		}

		if(GetDistanceBetweenPlayers(playerid, iPlayerID) > 5)
		{
			return SendErrorMessage(playerid,"You are not near that player");
		}
		//////////////////////MARIJUANA/////////////////////////////
		if(!strcmp(szType, "marijuana"))
		{

			if(iAmount > PlayerHasItem(playerid,"(D) Marijuana"))
			{
				return SendErrorMessage(playerid,"You don't have that much marijuana");
			}

			RemoveItem(playerid,"(D) Marijuana", iAmount);
			AddItem(iPlayerID,"(D) Marijuana", iAmount);

			format(szMessage, 31+3+MAX_PLAYER_NAME,"You gave %s %d grams of marijuana!", GetPlayerNameEx(iPlayerID), iAmount);
			SendClientMessage(playerid,COLOR_GREEN,szMessage);
			format(szMessage, 39+3+MAX_PLAYER_NAME,"You received %d grams of marijuana from %s", iAmount, GetPlayerNameEx(playerid));
			SendClientMessage(iPlayerID,COLOR_GREEN,szMessage);

			return 1;
		}
		//////////////////////ECSTASY/////////////////////////////
		if(!strcmp(szType, "ecstasy"))
		{

			if(iAmount > PlayerHasItem(playerid,"(D) Ecstasy"))
			{
				return SendErrorMessage(playerid,"You don't have that much ecstasy");
			}

			RemoveItem(playerid,"(D) Ecstasy", iAmount);
			AddItem(iPlayerID,"(D) Ecstasy", iAmount);

			format(szMessage, 31+3+MAX_PLAYER_NAME,"You gave %s %d grams of ecstasy!", GetPlayerNameEx(iPlayerID), iAmount);
			SendClientMessage(playerid,COLOR_GREEN,szMessage);
			format(szMessage, 39+3+MAX_PLAYER_NAME,"You received %d grams of ecstasy from %s", iAmount, GetPlayerNameEx(playerid));
			SendClientMessage(iPlayerID,COLOR_GREEN,szMessage);

			return 1;
		}
		//////////////////////COCAINE/////////////////////////////
		if(!strcmp(szType, "cocaine"))
		{

			if(iAmount > PlayerHasItem(playerid,"(D) Cocaine"))
			{
				return SendErrorMessage(playerid,"You don't have that much Cocaine");
			}

			RemoveItem(playerid,"(D) Cocaine", iAmount);
			AddItem(iPlayerID,"(D) Cocaine", iAmount);

			format(szMessage, 31+3+MAX_PLAYER_NAME,"You gave %s %d grams of cocaine!", GetPlayerNameEx(iPlayerID), iAmount);
			SendClientMessage(playerid,COLOR_GREEN,szMessage);
			format(szMessage, 39+3+MAX_PLAYER_NAME,"You received %d grams of cocaine from %s", iAmount, GetPlayerNameEx(playerid));
			SendClientMessage(iPlayerID,COLOR_GREEN,szMessage);

			return 1;
		}

		else
		{
			return SendErrorMessage(playerid, "USAGE: /drug give [PlayerID/PartOfName] [type] [amount]");
		}
	}
	return 1;
}
//=== /drug ===//
//=== /accept ===//
COMMAND:accept(playerid, params[])
{
	new szOption[10];

	if(sscanf(params,"s[10]", szOption))
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /accept [usage]");
	    SendClientMessage(playerid, COLOR_WHITE, "faction | ticket | live | products");
	    SendClientMessage(playerid, COLOR_WHITE, "refill  | repair | drugs | job | greet");
	    return 1;
	}

	if(!strcmp(szOption, "faction"))
	{
		if(FactionRequest[playerid] == 255)
		{
			return SendErrorMessage(playerid, "Nu esti invitat intr-o factiune.");
		}

		if(PlayerInfo[playerid][pFaction] != 255 && PlayerInfo[playerid][pFaction] != 0)
		{
			return SendErrorMessage(playerid, "Esti deja intr-o factiune . /quitfaction pentru a iesi din cea actuala");
		}

		////////////////////////////
		//////////EXECUTION////////
		//////////////////////////
		PlayerInfo[playerid][pFaction] = FactionRequest[playerid];
		PlayerInfo[playerid][pRank] = DynamicFactions[FactionRequest[playerid]][fJoinRank];
		PlayerInfo[playerid][pJob] = 0;

		new szMessage[127];

		format(szMessage, 43+55,"Felicitari! Acum esti membru al factiunii: %s", DynamicFactions[FactionRequest[playerid]][fName]);
		SendClientMessage(playerid,COLOR_WHITE,szMessage);
		format(szMessage, 33+MAX_PLAYER_NAME,"** [Factiune] %s s-a alaturat factiunii.", GetPlayerNameEx(playerid));
		SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, szMessage);

		FactionRequest[playerid] = 255; // Clearing the request

		return 1;
	}

	if(!strcmp(szOption, "job"))
	{
		if(BizRequest[playerid] == 255)
		{
			return SendErrorMessage(playerid, "Nu esti invitat intr-un loc de munca");
		}

		PlayerInfo[playerid][pWorkOn] = BizRequest[playerid];
		BizRequest[playerid] = 255;
		SendClientMessage(playerid,COLOR_GREY,"Ai acceptat locul de munca");

		return 1;
	}

	if(!strcmp(szOption, "ticket"))
	{
		if(TicketOffer[playerid] >= 999)
		{
			return SendErrorMessage(playerid, "Nu ai de platit o amenda");
		}

		if(!IsPlayerConnected(TicketOffer[playerid]))
		{
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
			return SendErrorMessage(playerid,"Ofiterul care ti-a dat amenda nu este online");
		}

		if(!ProxDetectorS(3.0, playerid, TicketOffer[playerid]))
		{
			return SendErrorMessage(playerid, "Nu esti langa ofiterul care te-a amendat");
		}

		if(GetPlayerCash(playerid) < TicketMoney[playerid])
		{
			return SendErrorMessage(playerid, "You cannot afford the ticket");
		}

		GivePlayerCash(playerid, -TicketMoney[playerid]);
		DynamicFactions[LSPD][fBank] += TicketMoney[playerid];

		new szMessage[23+MAX_PLAYER_NAME+4];

		format(szMessage, 22+4,"Ticket Paid - Cost: $%d", TicketMoney[playerid]);
		SendClientMessage(playerid,COLOR_WHITE,szMessage);
		format(szMessage, 23+MAX_PLAYER_NAME+4,"%s paid your ticket of $%d", GetPlayerNameEx(playerid), TicketMoney[playerid]);
		SendClientMessage(TicketOffer[playerid], COLOR_WHITE, szMessage);

		TicketOffer[playerid] = 999;
		TicketMoney[playerid] = 0;

		return 1;
	}

	if(!strcmp(szOption, "greet"))
	{
		if(PlayerInfo[playerid][PendingHandshake] == 501)
		{
			return SendErrorMessage(playerid, "You do not have any pending handshakes");
		}

		if(!IsPlayerConnected(PlayerInfo[playerid][PendingHandshake]))
		{
			PlayerInfo[playerid][PendingHandshake] = 501;
			return SendErrorMessage(playerid, "The player who offered you a handshake is not logged on");
		}

		if(GetDistanceBetweenPlayers(playerid, PlayerInfo[playerid][PendingHandshake]) > 3)
		{
			return SendErrorMessage(playerid, "You are too far away");
		}


		switch(PlayerInfo[playerid][PendingHandshakeStyle])
		{
			case 1:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkaa",4.0,0,0,0,0,0);
				ApplyAnimation(PlayerInfo[playerid][PendingHandshake],"GANGS","hndshkaa",4.0,0,0,0,0,0);
				SendClientMessage(playerid, WHITE, "Handshake approved." );
				PlayerInfo[playerid][PendingHandshake] = 501;
			}
			case 2:
			{
				 ApplyAnimation(playerid, "GANGS", "hndshkba",4.0,0,0,0,0,0);
				 ApplyAnimation(PlayerInfo[playerid][PendingHandshake],"GANGS","hndshkba",4.0,0,0,0,0,0);
				 SendClientMessage(playerid, WHITE, "Handshake approved." );
				 PlayerInfo[playerid][PendingHandshake] = 501;
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkca",4.0,0,0,0,0,0);
				ApplyAnimation(PlayerInfo[playerid][PendingHandshake],"GANGS","hndshkca",4.0,0,0,0,0,0);
				SendClientMessage(playerid, WHITE, "Handshake approved." );
				PlayerInfo[playerid][PendingHandshake] = 501;
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkcb",4.0,0,0,0,0,0);
				ApplyAnimation(PlayerInfo[playerid][PendingHandshake],"GANGS","hndshkcb",4.0,0,0,0,0,0);
				SendClientMessage(playerid, WHITE, "Handshake approved." );
				PlayerInfo[playerid][PendingHandshake] = 501;
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda",4.0,0,0,0,0,0);
				ApplyAnimation(PlayerInfo[playerid][PendingHandshake],"GANGS","hndshkda",4.0,0,0,0,0,0);
				SendClientMessage( playerid, WHITE, "Handshake approved." );
				PlayerInfo[playerid][PendingHandshake] = 501;
			}
			case 6:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea",4.0,0,0,0,0,0);
				ApplyAnimation(PlayerInfo[playerid][PendingHandshake],"GANGS","hndshkea",4.0,0,0,0,0,0);
				SendClientMessage(playerid, WHITE, "Handshake approved." );
				PlayerInfo[playerid][PendingHandshake] = 501;
			}
			case 7:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa",4.0,0,0,0,0,0);
				ApplyAnimation(PlayerInfo[playerid][PendingHandshake],"GANGS","hndshkfa",4.0,0,0,0,0,0);
				SendClientMessage(playerid, WHITE, "Handshake approved." );
				PlayerInfo[playerid][PendingHandshake] = 501;
			}
			case 8:
			{
				ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_01",4.0,0,0,0,0,0);
				ApplyAnimation(PlayerInfo[playerid][PendingHandshake],"KIGGING","Grlfrd_Kiss_01",4.0,0,0,0,0,0);
				SendClientMessage(playerid, WHITE, "Kiss approved." );
				PlayerInfo[playerid][PendingHandshake] = 501;
			}
			case 9:
			{
				ApplyAnimation(playerid, "GANGS", "prtial_hndshk_01",4.0,0,0,0,0,0);
				ApplyAnimation(PlayerInfo[playerid][PendingHandshake],"GANGS","prtial_hndshk_01",4.0,0,0,0,0,0);
				SendClientMessage(playerid, WHITE, "Handshake approved." );
				PlayerInfo[playerid][PendingHandshake] = 501;
			}
		}

		return 1;
	}

	if(!strcmp(szOption, "live"))
	{
		if(LiveOffer[playerid] == 999)
		{
			return SendErrorMessage(playerid, "You do not have any live invitations");
		}

		if(!IsPlayerConnected(LiveOffer[playerid]))
		{
			LiveOffer[playerid] = 999;
			return SendErrorMessage(playerid, "The SAN newscaster is not online");
		}

		if(!ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
		{
			return SendErrorMessage(playerid, "You are too far away from the News Reporter");
		}

		new szMessage[38+MAX_PLAYER_NAME+MAX_PLAYER_NAME];

		SendClientMessage(playerid,COLOR_WHITE,"You are now talking live");
		SendClientMessage(LiveOffer[playerid], COLOR_WHITE, "You are now talking live. Conversation ends when you type /live again");

		TalkingLive[playerid] = LiveOffer[playerid];
		TalkingLive[LiveOffer[playerid]] = playerid;

		format(szMessage, 38+MAX_PLAYER_NAME+MAX_PLAYER_NAME,"[SAN] %s va vorbii in direct %s", GetPlayerNameEx(LiveOffer[playerid]), GetPlayerNameEx(playerid));
		OOCNews(COLOR_NEWS,szMessage);
		LiveOffer[playerid] = 999;

		return 1;
	}

	if(!strcmp(szOption, "repair"))
	{
		if(RepairOffer[playerid] == 999)
		{
			return SendErrorMessage(playerid, "You have not been offered a repair");
		}

		if(GetPlayerCash(playerid) < RepairPrice[playerid])
		{
			return SendErrorMessage(playerid, "You cannot afford the repair");
		}

		if(!IsPlayerConnected(RepairOffer[playerid]))
		{
			RepairOffer[playerid] = 999;
			return SendErrorMessage(playerid, "The mechanic is not online");
		}

		RepairVehicle(GetPlayerVehicleID(playerid));
		GivePlayerCash(playerid, -RepairPrice[playerid]);
		GivePlayerCash(RepairOffer[playerid], RepairPrice[playerid]);

		new szMessage[50+4+MAX_PLAYER_NAME];
		format(szMessage, 50+4+MAX_PLAYER_NAME,"Your vehicle has been repaired for $%d by mechanic %s", RepairPrice[playerid], GetPlayerNameEx(RepairOffer[playerid]));
		SendClientMessage(playerid,COLOR_WHITE,szMessage);
		format(szMessage, 27+MAX_PLAYER_NAME+4,"You fixed %s's vehicle for $%d", GetPlayerNameEx(playerid), RepairPrice[playerid]);
		SendClientMessage(RepairOffer[playerid], COLOR_WHITE,szMessage);

		RepairOffer[playerid] = 999;
		RepairPrice[playerid] = 0;

		return 1;
	}

	if(!strcmp(szOption, "refill"))
	{
		if(RefillOffer[playerid] == 999)
		{
			return SendErrorMessage(playerid, "Noone offered you a refill");
		}

		if(GetPlayerMoney(playerid) < RefillPrice[playerid])
		{
			RefillOffer[playerid] = 999;
			RefillPrice[playerid] = 0;
			return SendErrorMessage(playerid, "You cannot afford the refill");
		}

		if(!IsPlayerConnected(RefillOffer[playerid]))
		{
			RefillOffer[playerid] = 999;
			RefillPrice[playerid] = 0;
			return SendErrorMessage(playerid, "The mechanic who offered you the refill logged off");
		}

		if(Fuel[gLastCar[playerid]] >= GasMax)
		{
			return SendErrorMessage(playerid, "Your fueltank is already full!");
		}

		GivePlayerCash(playerid, -RefillPrice[playerid]);
		GivePlayerCash(RefillOffer[playerid], RefillPrice[playerid]);

		Fuel[gLastCar[playerid]] = GasMax;

		new szMessage[50+4+MAX_PLAYER_NAME];

		format(szMessage, 50+4+MAX_PLAYER_NAME,"Your vehicle has been refueled for $%d by mechanic %s", RefillPrice[playerid], GetPlayerNameEx(RefillOffer[playerid]));
		SendClientMessage(playerid,COLOR_WHITE, szMessage);
		format(szMessage, 30+MAX_PLAYER_NAME+4,"You refilled %s's vehicle for $%d", GetPlayerNameEx(playerid), RefillPrice[playerid]);
		SendClientMessage(RefillOffer[playerid],COLOR_WHITE, szMessage);

		RefillOffer[playerid] = 999;
		RefillPrice[playerid] = 0;

		return 1;
	}

	if(!strcmp(szOption, "products"))
	{
		if(ProductsOffer[playerid] == 999)
		{
			return SendErrorMessage(playerid, "You have not been offered products");
		}

		if(!IsPlayerConnected(ProductsOffer[playerid]))
		{
			ProductsOffer[playerid] = 999;
			ProductsCost[playerid] = 0;
			ProductsAmount[playerid] = 0;
			return SendErrorMessage(playerid, "The person who offered you products logged off");
		}

		if(!ProxDetectorS(5.0, playerid, ProductsOffer[playerid]))
		{
			return SendErrorMessage(playerid, "You are too far away");
		}

		if(GetPlayerCash(playerid) < ProductsCost[playerid])
		{
			ProductsOffer[playerid] = 999;
			ProductsCost[playerid] = 0;
			ProductsAmount[playerid] = 0;
			return SendErrorMessage(playerid, "You cannot afford this");
		}

		if(PlayerInfo[playerid][pBizKey] == 0)
		{
			ProductsOffer[playerid] = 999;
			ProductsCost[playerid] = 0;
			ProductsAmount[playerid] = 0;
			return SendErrorMessage(playerid, "You do not own a business");
		}

		Businesses[PlayerInfo[playerid][pBizKey]][Products] += ProductsAmount[playerid];
		GivePlayerCash(playerid, -ProductsCost[playerid]);
		GivePlayerCash(ProductsOffer[playerid], ProductsCost[playerid]);
		PlayerInfo[ProductsOffer[playerid]][pProducts] -= ProductsAmount[playerid];

		new szMessage[36+MAX_PLAYER_NAME+4];
		format(szMessage, 29+4,"Products Purchased - Cost: $%d", ProductsCost[playerid]);
		SendClientMessage(playerid,COLOR_WHITE,szMessage);
		format(szMessage, 36+MAX_PLAYER_NAME+4,"%s bought products from you - Cost: $%d", GetPlayerNameEx(playerid), ProductsCost[playerid]);
		SendClientMessage(ProductsOffer[playerid], COLOR_WHITE, szMessage);

	    ProductsOffer[playerid] = 999;
	    ProductsCost[playerid] = 0;
	    ProductsAmount[playerid] = 0;

		return 1;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /accept [usage]");
	    SendClientMessage(playerid, COLOR_WHITE, "faction | ticket | live | products");
	    SendClientMessage(playerid, COLOR_WHITE, "refill  | repair | drugs | job | greet");

		return 1;
	}
}
//=== /accept ===//
//=== /cw ===//
COMMAND:cw(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		return SendErrorMessage(playerid,"Nu te afli intr-un vehicul.");
	}

	new szMessage[127];

	if(sscanf(params, "s[127]", szMessage))
	{
		return SendErrorMessage(playerid, "USAGE: /cw <mesaj>");
	}

	SendVehicleMessage(playerid, szMessage);

	return 1;
}
//=== /cw ===//
//=== /greet ===//
COMMAND:greet(playerid, params[])
{
	new iPlayerID,
		iStyle;

	if(sscanf(params,"ui", iPlayerID, iStyle))
	{
		SendErrorMessage(playerid, "USAGE: /greet [playerid] [style]");
		SendClientMessage(playerid, COLOR_GREEN, "[1] Kiss  [2] Handshake  [3] Handshake  [4] Handshake [5] Handshake");
		SendClientMessage(playerid, COLOR_GREEN, "[6] Handshake  [7] Handshake  [8] Handshake  [9] Handshake [10] Handshake");
		return 1;
	}

	if(!ProxDetectorS(3.0, playerid, iPlayerID))
	{
		return SendErrorMessage(playerid, "That player is too far from you");
	}

	if(playerid == iPlayerID)
	{
		return SendErrorMessage(playerid, "You cannot greet yourself");
	}

	if(iStyle < 1 || iStyle > 8)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /greet [playerid] [style]");
		SendClientMessage(playerid, COLOR_GREEN, "[1] Kiss  [2] Handshake  [3] Handshake  [4] Handshake [5] Handshake");
		SendClientMessage(playerid, COLOR_GREEN, "[6] Handshake  [7] Handshake  [8] Handshake");
		return 1;
	}
	///////////////////////////////////
	/////EXECUTION IS DONE HERE///////
	/////////////////////////////////
	if(iStyle == 8)
	{
		PlayerInfo[iPlayerID][PendingHandshakeStyle] = iStyle+1;
	}
	else
	{
		PlayerInfo[iPlayerID][PendingHandshakeStyle] = iStyle;
	}
	PlayerInfo[iPlayerID][PendingHandshake] = playerid;

	new szMessage[74+3+MAX_PLAYER_NAME];

	format(szMessage, 62+3+MAX_PLAYER_NAME, "You offered (ID:%d) %s a greeting, please wait for them to accept", iPlayerID, GetPlayerNameEx(iPlayerID));
	SendClientMessage(playerid, COLOR_WHITE, szMessage);
	format(szMessage, 74+3+MAX_PLAYER_NAME, "(ID:%d) %s wants to initiate a greet with you, (type /accept greet) to accept",playerid, GetPlayerNameEx(playerid));
	SendClientMessage(iPlayerID, COLOR_WHITE, szMessage);
	/////////////////////////////////
	return 1;
}
//=== /greet ===//
//=== /toggle ===//


COMMAND:toggle(playerid, params[])
{
	new szOption[16];

	if(sscanf(params, "s[16]", szOption))
	{
		SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /toggle [usage]");
		SendClientMessage(playerid, COLOR_WHITE, "pm | hud | radio | ooc | jailtimer | faction | news | report");
		return 1;
	}
	//////////////////////PM/////////////////////////////
	if(!strcmp(szOption, "pm", true))
	{
		if(PlayerInfo[playerid][pDonator] || PlayerInfo[playerid][pAdministrator] >= 1|| PlayerInfo[playerid][pTester] == 1)
		{
			if(PMsEnabled[playerid])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Ti-ai dezactivat PM-ul, tu acum nu vei mai primi PM-uri.");
				PMsEnabled[playerid] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Ti-ai activat PM-ul, tu acum vei primi PM-uri.");
			    PMsEnabled[playerid] = 1;
			}
		}
	}
	//////////////////////hud/////////////////////////////
	if(!strcmp(szOption, "hud", true))
	{
		if(ShowHud[playerid] == 1)
		{
			ShowHud[playerid] = 0;
			TextDrawHideForPlayer(playerid, CarInfo[playerid]);
			SendClientMessage(playerid, COLOR_GRAD2, "   HUD is now disabled");
		}
		else if(ShowHud[playerid] == 0)
		{
			ShowHud[playerid] = 1;
			TextDrawShowForPlayer(playerid, CarInfo[playerid]);
			SendClientMessage(playerid, COLOR_GRAD2, "   HUD is now enabled");
		}
	}
	//////////////////////radio/////////////////////////////
	if(!strcmp(szOption, "radio", true))
	{
		if(PlayerInfo[playerid][pDonator] >= 1 || PlayerInfo[playerid][pAdministrator] >= 1)
		{
			if(RadioStatus[playerid])
			{
				if(PlayerInfo[playerid][pSex] == 1)
				{
					PlayerActionMessage(playerid,15.0,"takes out his radio and turns it off");
					}
				else
				{
					PlayerActionMessage(playerid,15.0,"takes out her radio and turns it off");
				}
				SendClientMessage(playerid,COLOR_GRAD2,"   You have turned your radio OFF");
			    RadioStatus[playerid] = 0;
			}
			else
			{
				if(PlayerInfo[playerid][pSex] == 1)
				{
					PlayerActionMessage(playerid,15.0,"takes out his radio and turns it on");
				}
				else
				{
					PlayerActionMessage(playerid,15.0,"takes out her radio and turns it on");
				}
				SendClientMessage(playerid,COLOR_GRAD2,"   You have turned your radio ON");
				RadioStatus[playerid] = 1;
			}
		}
	}

	//////////////////////ooc/////////////////////////////
	if(!strcmp(szOption, "ooc", true))
	{
		if(gOoc[playerid] == 1)
		{
			gOoc[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "   OOC chat channel disabled");
		}
		else if(gOoc[playerid] == 0)
		{
			gOoc[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "   OOC chat channel enabled");
		}
	}
	//////////////////////jailtimer/////////////////////////////
	if(!strcmp(szOption, "jailtimer", true))
	{
		if(ShowJailTimer[playerid] == 1)
		{
			TesterActivated[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "   Jail timers are now enabled");
		}
		else if(ShowJailTimer[playerid] == 0)
		{
			TesterActivated[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "   Jail timers are now disabled");
		}
	}
	//////////////////////faction/////////////////////////////
	if(!strcmp(szOption, "faction", true))
	{
		if(fChat[playerid] == 1)
		{
			fChat[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "   Faction chat disabled");
		}
		else if(fChat[playerid] == 0)
		{
			fChat[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "   Faction chat enabled");
		}
	}

	//////////////////////news/////////////////////////////
	if(!strcmp(szOption, "news", true))
	{
		if(NewsActivated[playerid] == 1)
		{
			NewsActivated[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "   News chat disabled");
		}
		else if(NewsActivated[playerid] == 0)
		{
			NewsActivated[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "   News chat enabled");
		}
	}
	return 1;
}
//=== /toggle ===//
//=== /refundstamp ===//
COMMAND:refundstamp(playerid, params[])
{
	new iYear,
		iMonth,
		iDate,
		iHour,
		iMinute,
		iSecond;

	getdate(iYear, iMonth, iDate);
	gettime(iHour, iMinute, iSecond);

	new szMessage[2+2+4+4+4+2+MAX_PLAYER_NAME+1];

	format(szMessage, 2+2+4+4+4+2+MAX_PLAYER_NAME+2,"[%d/%d/%d] @ [%d:%d:%d]: %s", iDate, iMonth, iYear, iHour, iMinute, iSecond, GetPlayerNameEx(playerid));
	SendClientMessage(playerid,COLOR_YELLOW,szMessage);

	return 1;
}
//=== /refundstamp ===//
//=== /radio ===//
COMMAND:radio(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
	{
		return SendErrorMessage(playerid,"Trebuie sa fii in masina pentru a asculta la radio.");
	}

	new vehi = GetPlayerVehicleID(playerid);
	if(VehicleInfo[vehi][vRadiom] == 0)
	{
		return SendErrorMessage(playerid,"Aceasta masina nu are radio. Du-te la un magazin de electronice, si achizitioneaza unul!");
	}

	ShowPlayerDialog(playerid, RADIO_DIALOG, DIALOG_STYLE_LIST, "Radio masina", "Station\nVolume", "Enter", "Escape");
	return 1;
}
//=== /radio ===//
//=== /arrest ===//
COMMAND:arrest(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 3)
	{
	    return SendClientMessage(playerid, COLOR_GRAD2, "Nu esti membru LSPD.");
	}
	new id, price, time;
	if(sscanf(params, "uii", id, time, price))
	{
		return SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arrest [playerid/playername] [time minutes] [price]");
	}
	else
	{
	    if(!PlayerToPoint(20.0,playerid,-1114.6117,2911.4419,585.8483))
	    {
			return SendClientMessage(playerid, COLOR_GRAD2, "Nu esti la celule.");
		}
		if(GetDistanceBetweenPlayers(playerid,id) > 30)
		{
			return SendClientMessage(playerid, COLOR_GRAD2, "Cel pe care vrei sa il arestezi nu este langa tine.");
		}
		if(price<0||price>2500)
		{
			return SendClientMessage(playerid, COLOR_GRAD2, "Nu poti da pagube mai mici de 0$ sau mai mari de 2500$");
		}
		if(time<1||time>120)
		{
		    return SendClientMessage(playerid, COLOR_GRAD2, "Nu poti aresta mai putin de 1 sau mai mult de 120 minute.");
		}
		if(CopOnDuty[playerid] != 1)
		{
		    return SendClientMessage(playerid, COLOR_GRAD2, "Nu esti ON Duty.");
		}
		WantedPoints[id] = 0;
		ResetPlayerWantedLevelEx(id);
		strmid(PlayerInfo[id][pWanted], "None", 0, strlen("None"), 255);
		GivePlayerCash(id, -price);
		DynamicFactions[LSPD][fBank] += price;
		SafeResetPlayerWeapons(id);
		PlayerInfo[id][pJailTime] = time * 60;
		new CellArestPlayer = random(3);
		switch(CellArestPlayer)
		{
			case 0:
			{
				SetPlayerPos(id, -1118.1434,2907.6140,585.8483);
				SetPlayerFacingAngle(id, 180);
				SetPlayerInterior(id, 1);
				TogglePlayerControllable(id, 0);
				SetTimerEx("Unfreezeren", 2500, false, "i", id);
			}
			case 1:
			{
				SetPlayerPos(id, -1118.7583,2910.9712,585.8483);
				SetPlayerFacingAngle(id, 180);
				SetPlayerInterior(id, 1);
				TogglePlayerControllable(id, 0);
				SetTimerEx("Unfreezeren", 2500, false, "i", id);
			}
			case 2:
			{
				SetPlayerPos(id, -1118.9355,2915.0127,585.8483);
				SetPlayerFacingAngle(id, 180);
				SetPlayerInterior(id, 1);
				TogglePlayerControllable(id, 0);
				SetTimerEx("Unfreezeren", 2500, false, "i", id);
			}

		}
        PlayerInfo[id][pJailed] = 3;
	    PlayerInfo[id][pArrested] += 1;
	    new string[50+MAX_RANK_NAME+MAX_PLAYER_NAME+MAX_PLAYER_NAME];
	    format(string, sizeof(string), "[Inchisoare] %s %s l-a inchis pe %s pentru %d minute [suma: %d]", GetRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(id), time, price);
		SendFactionMessage(3,COLOR_LIGHTRED, string);
		format(string, sizeof(string), "Ai fost arestat. Timp: %d, Pret: %d$", time, price);
		SendClientMessage(id, COLOR_LIGHTRED, string);
		return 1;
	}
}
//=== /arrest ===//
//=== /ticket ===//
COMMAND:ticket(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pFaction] != 3)
	{
	    return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
	}
	new id, price, reason[64];
	if(sscanf(params, "uis[64]", id, price, reason))
	{
		return SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ticket [playerid/playername] [price] [reason]");
	}
	else
	{
	    if(!ProxDetectorS(5.0, playerid, id))
		{
			return SendErrorMessage(playerid, "You're not near the person you are about to ticket.");
		}
		if(price<0||price>15000)
		{
			return SendErrorMessage(playerid, "You cannot ticket below 0$ or above 15000$");
		}
	    TicketOffer[id] = playerid;
	    TicketMoney[id] = price;

		new szMessage[40+64+5+MAX_PLAYER_NAME];

		format(szMessage, sizeof(szMessage) ,"You've been ticketed for: %s; Cost: %d", reason, price);
		SendClientMessage(id,COLOR_WHITE,szMessage);
		format(szMessage, sizeof(szMessage), "You ticketed %s for: %s; Cost: %d", GetPlayerNameEx(id), reason, price);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);
		return 1;
	}
}
//=== /ticket ===//
//=== /dnc1 ===//
COMMAND:dnc(playerid, params[])
{
    new string[32];
    //--------------------------------------------------------------------------
	if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2)
 	{
		//----------------------------------------------------------------------
		new Float:A, Float:B, Float:C;
		GetPlayerPos(playerid, A, B, C);
  		if(sscanf(params, "s[32]",string)) return SendClientMessage(playerid, 0xAFAFAFAA, "/dnc [TEXT]");
		Create3DTextLabel(string, 0xFFFFFFFF, A, B, C, 40.0, 0, 1);
		//----------------------------------------------------------------------
	}
	return 1;
}
//=== /dnc1 ===//
//=== /cardhelp ===//
COMMAND:cardhelp(playerid, params[])
{
	SendClientMessage(playerid,COLOR_GREEN,"______________________COMENZI CARD______________________");
	SendClientMessage(playerid, COLOR_GREY, "** CARD ** /makecard - Iti depui cererea pentru un card (500$).");
    SendClientMessage(playerid, COLOR_GREY, "** PIN ** /pincard - Iti afiseaza pinul.");
    SendClientMessage(playerid, COLOR_GREY, "** RETRAGERE ** /withdraw - Scoate o suma din bancomat.");
    SendClientMessage(playerid, COLOR_GREY, "** INTEROGARE ** /balance - Iti afiseaza soldul.");
	return 1;
}
//=== /cardhelp ===//
//=== /lsvrcmds ===//
COMMAND:lsvrcmds(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 8)
	{
		return SendClientMessage(playerid,COLOR_GREY,"Nu esti in factiunea respectiva");
	}

	SendClientMessage(playerid, COLOR_GRAD2, "[LSVR] /lsvrgarage /lsvrdoor /duty /v register /closelsvr");

	return 1;
}
//=== /lsvrcmds ===//
//=== /damages ===//
CMD:injuries(playerid, params[])
{
	new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, 0xFFFF0000, "FOLOSIRE: {FFFFFF}/injuries [playerid/PartOfName]");
	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "Jucatorul nu este conectat.");
	DisplayDamages(playerid, id);
	return 1;
}
//=== /damages ===//
// ## Faction Commands ##
//=== /badge ===//

#define MAX_RANK_LENGHT 20

COMMAND:showbadge(playerid, params[])
{
	new iPlayerID;

	if(PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pFaction] != EMS && PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pFaction] != 4 && PlayerInfo[playerid][pFaction] != 6)
	{
		return SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-o factiune de tipul LAW.");
	}

	if(sscanf(params, "u", iPlayerID))
	{
		return SendClientMessage(playerid,COLOR_GREY,"USAGE: /(show)badge <PlayerID/PartOfName>");
	}

	ShowBadgeToPlayer(playerid, iPlayerID);

	return 1;
}

COMMAND:badge(playerid, params[])
{
	return cmd_showbadge(playerid, params);
}

stock ShowBadgeToPlayer(playerid, toplayerid)
{
	new szFactionName[64];

	switch(PlayerInfo[playerid][pFaction])
	{
		case 3: { format(szFactionName, 29, "Los Santos Police Department"); }
		case 1: { format(szFactionName, 31, "Federal Bureau Of Investigations"); }
		case EMS: { format(szFactionName, 38, "Los Santos Emergency Medical Services"); }
		case 4: { format(szFactionName, 32, "San Andreas Network"); }
		case 6: { format(szFactionName, 32, "Government Los Santos"); }
	}

	if(ProxDetectorS(8.0, playerid, toplayerid))
	{
		SendClientMessage(toplayerid, COLOR_LSPDNEW, "_______________________");
		SendClientMessage(toplayerid, COLOR_WHITE, szFactionName);
		format(szFactionName, 1+MAX_PLAYER_NAME+MAX_RANK_NAME, "%s %s", GetRankName(playerid), GetPlayerLastName(playerid));
		SendClientMessage(toplayerid, COLOR_WHITE, szFactionName);
		format(szFactionName, 21, "Numar insigna: %d", PlayerInfo[playerid][pBadgeNumber]);
		SendClientMessage(toplayerid, COLOR_WHITE, szFactionName);
		SendClientMessage(toplayerid, COLOR_LSPDNEW, "_______________________");

		if(PlayerInfo[playerid][pSex] == 1)
		{
			return PlayerPlayerActionMessage(playerid,toplayerid,20.0,"scoate legitimatia si o arata lui");
		}
		else
		{
			return PlayerPlayerActionMessage(playerid,toplayerid,20.0,"scoate legitimatia si o arata lui");
		}
	}
	else
	{
		return SendClientMessage(playerid,COLOR_GREY,"That player is not near you");
	}
}
//=== /badge ===//
//=== /heal ===//


COMMAND:heal(playerid, params[])
{
	new iPlayerID;

	if(MedicOnDuty[playerid] == 0)
	{
		return SendClientMessage(playerid, COLOR_GRAD2, "You are not a medic on duty");
	}

	if(sscanf(params, "u", iPlayerID))
	{
		return SendClientMessage(playerid,COLOR_GRAD2, "USAGE: /heal <PlayerID/PartOfName>");
	}

	if(iPlayerID == playerid) { return SendClientMessage(playerid,COLOR_GRAD2,"You cannot heal yourself"); }

	if(ProxDetectorS(2.5, playerid, iPlayerID))
	{
		SetPlayerHealth(iPlayerID, 100.0);
		SendClientMessage(iPlayerID,COLOR_WHITE,"You have been healed to 100 HP");
		new szMessage[21+MAX_PLAYER_NAME+1];
		format(szMessage, 21+MAX_PLAYER_NAME+1,"You healed %s to 100 HP", GetPlayerNameEx(iPlayerID));
		SendClientMessage(playerid,COLOR_WHITE,szMessage);
		Wounded[iPlayerID] = 0;

		return 1;
	}

	SendClientMessage(playerid,COLOR_GRAD2,"You need to be closer to the player!");

	return 1;
}
//=== /heal ===//
//=== /newscmds ===//
COMMAND:newscmds(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] != 4)
	{
		return SendClientMessage(playerid,COLOR_GREY,"Invalid faction");
	}

	SendClientMessage(playerid,COLOR_WHITE,"- News Reporter Commands");
	SendClientMessage(playerid, COLOR_GRAD2, "[News Reporter] /news /live");

	return 1;
}
//=== /newscmds ===//
//=== /policecmds ===//
COMMAND:policecmds(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == LSPD)
	{
	    SendClientMessage(playerid,COLOR_GREEN,"_____________________POLICE COMMANDS__________________");
		SendClientMessage(playerid, COLOR_GRAD2, "[DUTY]/duty");
		SendClientMessage(playerid, COLOR_GRAD2, "[Gates] /og lspd /og lspdd");
		SendClientMessage(playerid, COLOR_GRAD2, "[Impound] /impound /io1 /ic1");
        SendClientMessage(playerid, COLOR_GRAD2, "[Sanctions to player] /suspect (/m)egaphone /arrest /ram /detain /undetain /pticket /ticket /demerit /revoke /removeweed /taser");
		SendClientMessage(playerid, COLOR_GRAD2, "[Siren] /siren");
		SendClientMessage(playerid, COLOR_GRAD2, "[CCTV] /cctv /exitcctv");
		SendClientMessage(playerid, COLOR_GRAD2, "[SWAT & CSD] /authorizeswat /swat /deauthorizeswat /authorizecsd /csd /deauthorizecsd");
		SendClientMessage(playerid, COLOR_GRAD2, "[Backup]  /backup /clearbackup");
		SendClientMessage(playerid, COLOR_GRAD2, "[Strips & Roadblocks] /roadblockhelp /rb1-8 /rrb1-8 /removeallstrips /removestrip /createstrip");
	 	SendClientMessage(playerid, COLOR_GRAD2, "[Prison]/prison /uprison /pexit /palarm /prisongate");
	 	SendClientMessage(playerid, COLOR_GRAD2, "[MDC] /mdc");


		return 1;
	}

	if(PlayerInfo[playerid][pFaction] == SASD)
	{
	    SendClientMessage(playerid,COLOR_LSPDNEW,"- Police Commands");
		SendClientMessage(playerid, COLOR_GRAD2, "[DUTY]/duty");
		SendClientMessage(playerid, COLOR_GRAD2, "[Gates] /og lspd /og lspdd");
		SendClientMessage(playerid, COLOR_GRAD2, "[Impound] /impound /io1 /ic1");
        SendClientMessage(playerid, COLOR_GRAD2, "[Sanctions to player] /suspect (/m)egaphone /arrest /ram /detain /undetain /pticket /ticket /demerit /revoke /removeweed /taser");
		SendClientMessage(playerid, COLOR_GRAD2, "[Siren] /siren");
		SendClientMessage(playerid, COLOR_GRAD2, "[CCTV] /cctv /exitcctv");
		SendClientMessage(playerid, COLOR_GRAD2, "[SWAT & CSD] /authorizeswat /swat /deauthorizeswat /authorizecsd /csd /deauthorizecsd");
		SendClientMessage(playerid, COLOR_GRAD2, "[Backup]  /backup /clearbackup");
		SendClientMessage(playerid, COLOR_GRAD2, "[Strips & Roadblocks] /roadblockhelp /rb1-8 /rrb1-8 /removeallstrips /removestrip /createstrip");
	 	SendClientMessage(playerid, COLOR_GRAD2, "[Prison]/prison /uprison /pexit /palarm /prisongate");
	 	SendClientMessage(playerid, COLOR_GRAD2, "[MDC] /mdc");


		return 1;
	}

	SendClientMessage(playerid,COLOR_GREY,"Invalid faction");

	return 1;
}

COMMAND:pcmds(playerid, params[])
{
	return cmd_policecmds(playerid, params);
}
//=== /policecmds ===//
//=== /mdc ===//
COMMAND:mdc(playerid, params[])
{
	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
	{
       ShowPlayerDialog(playerid, LSPD_MDC_SEARCH, DIALOG_STYLE_INPUT, "Mobile Data Computer - Cautare", "Te rog introdu numele sau id-ul suspectului pe care vrei sa il cauti.", "Ok", "Iesire");
    }

}
//=== /mdc ===//

#endif

// Forwards
forward IsAPlane(carid);
forward BuyingVeh(playerid);
forward SaveVehicles(playerid, car);
forward LoadVehicles(playerid, string[]);
forward LoadVehicles2(playerid, string[]);
forward LockCar(carid);
forward UnLockCar(carid);
forward UnlockVehicle(vehicleid);

enum SAZONE_MAIN {
        SAZONE_NAME[28],
        Float:SAZONE_AREA[6]
};

static const gSAZones[][SAZONE_MAIN] = {
    //  NAME                            AREA (Xmin,Ymin,Zmin,Xmax,Ymax,Zmax)
    {"The Big Ear",                 {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
    {"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
    {"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
    {"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
    {"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
    {"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
    {"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
    {"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
    {"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
    {"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
    {"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
    {"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
    {"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
    {"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
    {"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
    {"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
    {"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
    {"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
    {"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
    {"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
    {"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
    {"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
    {"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
    {"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
    {"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
    {"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
    {"Pershing Apartments",         {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
    {"Pershing Apartments",         {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
    {"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
    {"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
    {"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
    {"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
    {"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
    {"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
    {"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
    {"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
    {"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
    {"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
    {"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
    {"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
    {"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
    {"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
    {"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
    {"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
    {"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
    {"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
    {"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
    {"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
    {"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
    {"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
    {"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
    {"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
    {"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
    {"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
    {"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
    {"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
    {"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
    {"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
    {"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
    {"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
    {"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
    {"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
    {"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
    {"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
    {"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
    {"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
    {"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
    {"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
    {"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
    {"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
    {"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
    {"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
    {"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
    {"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
    {"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
    {"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
    {"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
    {"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
    {"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
    {"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
    {"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
    {"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
    {"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
    {"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
    {"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
    {"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
    {"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
    {"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
    {"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
    {"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
    {"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
    {"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
    {"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
    {"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
    {"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
    {"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
    {"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
    {"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
    {"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
    {"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
    {"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
    {"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
    {"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
    {"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
    {"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
    {"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
    {"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
    {"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
    {"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
    {"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
    {"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
    {"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
    {"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
    {"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
    {"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
    {"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
    {"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
    {"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
    {"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
    {"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
    {"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
    {"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
    {"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
    {"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
    {"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
    {"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
    {"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
    {"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
    {"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
    {"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
    {"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
    {"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
    {"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
    {"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
    {"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
    {"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
    {"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
    {"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
    {"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
    {"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
    {"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
    {"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
    {"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
    {"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
    {"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
    {"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
    {"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
    {"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
    {"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
    {"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
    {"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
    {"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
    {"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
    {"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
    {"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
    {"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
    {"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
    {"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
    {"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
    {"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
    {"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
    {"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
    {"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
    {"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
    {"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
    {"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
    {"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
    {"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
    {"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
    {"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
    {"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
    {"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
    {"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
    {"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
    {"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
    {"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
    {"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
    {"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
    {"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
    {"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
    {"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
    {"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
    {"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
    {"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
    {"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
    {"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
    {"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
    {"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
    {"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
    {"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
    {"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
    {"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
    {"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
    {"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
    {"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
    {"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
    {"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
    {"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
    {"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
    {"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
    {"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
    {"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
    {"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
    {"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
    {"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
    {"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
    {"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
    {"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
    {"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
    {"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
    {"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
    {"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
    {"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
    {"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
    {"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
    {"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
    {"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
    {"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
    {"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
    {"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
    {"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
    {"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
    {"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
    {"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
    {"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
    {"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
    {"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
    {"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
    {"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
    {"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
    {"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
    {"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
    {"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
    {"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
    {"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
    {"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
    {"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
    {"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
    {"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
    {"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
    {"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
    {"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
    {"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
    {"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
    {"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
    {"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
    {"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
    {"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
    {"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
    {"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
    {"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
    {"Playa Del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
    {"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
    {"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
    {"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
    {"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
    {"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
    {"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
    {"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
    {"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
    {"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
    {"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
    {"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
    {"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
    {"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
    {"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
    {"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
    {"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
    {"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
    {"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
    {"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
    {"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
    {"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
    {"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
    {"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
    {"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
    {"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
    {"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
    {"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
    {"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
    {"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
    {"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
    {"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
    {"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
    {"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
    {"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
    {"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
    {"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
    {"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
    {"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
    {"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
    {"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
    {"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
    {"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
    {"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
    {"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
    {"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
    {"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
    {"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
    {"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
    {"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
    {"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
    {"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
    {"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
    {"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
    {"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
    {"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
    {"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
    {"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
    {"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
    {"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
    {"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
    {"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
    {"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
    {"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
    {"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
    {"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
    {"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
    {"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
    {"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
    {"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
    {"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
    {"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
    {"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
    {"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
    {"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
    {"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
    {"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
    {"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
    {"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
    {"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
    {"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
    {"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
    {"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
    {"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
    {"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
    {"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
    {"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
    {"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
    {"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
    {"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
    {"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
    {"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
    {"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
    {"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
    {"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
    {"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
    {"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
    {"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
    {"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
    {"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
    {"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
    {"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
    {"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
    {"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
    {"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
    // Main Zones
    {"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
    {"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
    {"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
    {"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
    {"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
    {"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
    {"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
    {"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
    {"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

//-------------------------------------------------

AntiDeAMX()
{
new a[][] =
{
"Unarmed (Fist)",
"Brass K"
};
#pragma unused a

}

StopLoopingAnim(playerid) { gPlayerUsingLoopingAnim[playerid] = 0; ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0); }
PreloadAnimLib(playerid, animlib[]) { ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0); }


//===============================STOCK-URI====================================

stock IsPlayerInInvalidNosVehicle(playerid)
{
        new vehicleid = GetPlayerVehicleID(playerid);
        #define MAX_INVALID_NOS_VEHICLES 52
        new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
        {
                581,523,462,521,463,522,461,448,468,586,417,425,469,487,512,520,563,593,
                509,481,510,472,473,493,520,595,484,430,453,432,476,497,513,533,577,
                452,446,447,454,590,569,537,538,570,449,519,460,488,511,519,548,592
        };
        if(IsPlayerInAnyVehicle(playerid))
        {
                for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
        {
                if(GetVehicleModel(vehicleid) == InvalidNosVehicles[i]) return true;
        }
        }
        return false;
}

stock IsComponentidCompatible(modelid, componentid)
{
    if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
         componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
         componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
         componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
         return true;

    switch (modelid)
    {
        case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
        case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
        case 409: return (componentid == 1009);
        case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
        case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
        case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
        case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
        case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
        case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
        case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
        case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
        case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
        case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 506: return (componentid == 1009);
        case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
        case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
        case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
        case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
        case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
        case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
        case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
        case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
        case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
        case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
        case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
        case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
        case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
        case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
        case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
        case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
        case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
    }
    return false;
}



stock MovePlayerCCTV(playerid)
{
        CCTVLA[playerid][0] = CCTVLAO[CurrentCCTV[playerid]][0] + (floatmul(CCTVRadius[playerid], floatsin(-CCTVDegree[playerid], degrees)));
        CCTVLA[playerid][1] = CCTVLAO[CurrentCCTV[playerid]][1] + (floatmul(CCTVRadius[playerid], floatcos(-CCTVDegree[playerid], degrees)));
        SetPlayerCameraLookAt(playerid, CCTVLA[playerid][0], CCTVLA[playerid][1], CCTVLA[playerid][2]);
}

stock AddCCTV(name[], Float:cctvX, Float:cctvY, Float:cctvZ, Float:cctvAngle)
{
        if(TotalCCTVS >= MAX_CCTVS) return 0;
        format(CameraName[TotalCCTVS], 32, "%s", name);
        CCTVCP[TotalCCTVS][0] = cctvX;
        CCTVCP[TotalCCTVS][1] = cctvY;
        CCTVCP[TotalCCTVS][2] = cctvZ;
        CCTVCP[TotalCCTVS][3] = cctvAngle;
        CCTVLAO[TotalCCTVS][0] = cctvX;
        CCTVLAO[TotalCCTVS][1] = cctvY;
        CCTVLAO[TotalCCTVS][2] = cctvZ-10;
        TotalCCTVS++;
        return TotalCCTVS-1;
}

SetPlayerToCCTVCamera(playerid, CCTV)
{
        if(CCTV >= TotalCCTVS)
        {
            return 1;
        }
        if(CurrentCCTV[playerid] == -1)
    {
            GetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
                GetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
        LastPos[playerid][LInterior] = GetPlayerInterior(playerid);
        }
        else
        {
                KillTimer(KeyTimer[playerid]);
        }
        CurrentCCTV[playerid] = CCTV;
    TogglePlayerControllable(playerid, 0);
        //SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], (CCTVCP[CCTV][2]-50));
        SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], -100.0);
        SetPlayerCameraPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], CCTVCP[CCTV][2]);
        SetPlayerCameraLookAt(playerid, CCTVLAO[CCTV][0], (CCTVLAO[CCTV][1]+0.2), CCTVLAO[CCTV][2]);
        CCTVLA[playerid][0] = CCTVLAO[CCTV][0];
        CCTVLA[playerid][1] = CCTVLAO[CCTV][1]+0.2;
        CCTVLA[playerid][2] = CCTVLAO[CCTV][2];
        CCTVRadius[playerid] = 12.5;
        CCTVDegree[playerid] = CCTVCP[CCTV][3];
        MovePlayerCCTV(playerid);
    KeyTimer[playerid] = SetTimerEx("CheckKeyPress", 75, 1, "i", playerid);
    TextDrawShowForPlayer(playerid, TD);
        return 1;
}

stock SetPlayerWeapons(playerid)
{
    ResetPlayerWeapons(playerid);
    for(new i = 0; i < 13; i ++) {
        SafeGivePlayerWeapon(playerid, PlayerInfo[playerid][pWeapons][i], PlayerInfo[playerid][pAmmo][i]); }
    return 1;
}

// =================== PUBLICS ===========================
public OnGameModeInit()

mysql_log(ALL);

ConnectToSQLServer()
{
	if(Connection == 0)
	{
        g_handle = mysql_connect("localhost", "root", "", "genrorp");
	}
  	else
    {
      	g_handle = mysql_connect("localhost", "root", "", "genrorp");
    }
	if(mysql_errno() != 0)
	{
		print("Could not connect to database!");
		SendRconCommand("exit");
		else{print("Connection established!");}
}

}

{

	#pragma unused JoinCounter
  //  SetTimer("Speedometer", 200, true); // speedometer
    Streamer_TickRate(150);
    Streamer_CellDistance(300);
	Audio_CreateTCPServer(7777);
	Audio_SetPack("default_pack", true);
    new ip[ 32 ];
    GetServerVarAsString( "bind", ip, sizeof( ip ) );
    mysql_connect(  HOST_ADDR,  HOST_USER,  HOST_PASS,  HOST_DATA );
/*	if(fexist("IBP/Other/JoinCounter.cfg"))
	{
	    JoinCounter = dini_Int("IBP/Other/JoinCounter.cfg", "Connections");
	} else {
	    dini_Create("IBP/Other/JoinCounter.cfg");
	    dini_IntSet("IBP/Other/JoinCounter.cfg", "Connections", 0);
	}
*/

// ======== ss for roleplay ========

	ssroleplay = TextDrawCreate(30.399999, 0.000000, "LD_SPAC:white");
	TextDrawLetterSize(ssroleplay, 0.000000, 0.000000);
	TextDrawTextSize(ssroleplay, 578.399963, 225.493331);
	TextDrawAlignment(ssroleplay, 1);
	TextDrawColor(ssroleplay, -5963521);
	TextDrawSetShadow(ssroleplay, 0);
	TextDrawSetOutline(ssroleplay, 0);
	TextDrawFont(ssroleplay, 4);

// ================ server logo ================

	logo = TextDrawCreate(29.600002, 428.586669, "WS:RP v0.1");
	TextDrawLetterSize(logo, 0.237199, 1.017599);
	TextDrawAlignment(logo, 1);
	TextDrawColor(logo, -1);
	TextDrawSetShadow(logo, 0);
	TextDrawSetOutline(logo, 1);
	TextDrawBackgroundColor(logo, 51);
	TextDrawFont(logo, 2);
	TextDrawSetProportional(logo, 1);

/*// ===================== SPEEDOMETER ===============

	bg = TextDrawCreate(625.200195, 362.140075, "usebox");
	TextDrawLetterSize(bg, 0.000000, 5.283332);
	TextDrawTextSize(bg, 500.400024, 0.000000);
	TextDrawAlignment(bg, 1);
	TextDrawColor(bg, 0);
	TextDrawUseBox(bg, true);
	TextDrawBoxColor(bg, 102);
	TextDrawSetShadow(bg, 0);
	TextDrawSetOutline(bg, 0);
	TextDrawFont(bg, 0);

	barsus = TextDrawCreate(496.799926, 349.440002, "LD_SPAC:white");
	TextDrawLetterSize(barsus, 0.000000, 0.000000);
	TextDrawTextSize(barsus, 131.999908, 11.946675);
	TextDrawAlignment(barsus, 1);
	TextDrawColor(barsus, -1378294017);
	TextDrawSetShadow(barsus, 0);
	TextDrawSetOutline(barsus, 0);
	TextDrawFont(barsus, 4);
	
	vitezakm = TextDrawCreate(569.599914, 393.493255, "km/h");
	TextDrawLetterSize(vitezakm, 0.449999, 1.600000);
	TextDrawAlignment(vitezakm, 1);
	TextDrawColor(vitezakm, -1);
	TextDrawSetShadow(vitezakm, 0);
	TextDrawSetOutline(vitezakm, 1);
	TextDrawBackgroundColor(vitezakm, 51);
	TextDrawFont(vitezakm, 2);
	TextDrawSetProportional(vitezakm, 1);

	viteza = TextDrawCreate(506.399749, 348.693237, "100");
	TextDrawLetterSize(viteza, 0.874800, 7.677864);
	TextDrawAlignment(viteza, 1);
	TextDrawColor(viteza, -1);
	TextDrawSetShadow(viteza, 0);
	TextDrawSetOutline(viteza, 1);
	TextDrawBackgroundColor(viteza, 51);
	TextDrawFont(viteza, 2);
	TextDrawSetProportional(viteza, 1);


	tipmasina = TextDrawCreate(533.600158, 347.946716, "sultan");
	TextDrawLetterSize(tipmasina, 0.779600, 1.308799);
	TextDrawAlignment(tipmasina, 1);
	TextDrawColor(tipmasina, -1061109505);
	TextDrawUseBox(tipmasina, true);
	TextDrawBoxColor(tipmasina, 0);
	TextDrawSetShadow(tipmasina, 0);
	TextDrawSetOutline(tipmasina, 1);
	TextDrawBackgroundColor(tipmasina, 51);
	TextDrawFont(tipmasina, 0);
	TextDrawSetProportional(tipmasina, 1);
*/
// =========================== CCTV =============================

        AddCCTV("LS Grovestreet", 2491.7839, -1666.6194, 46.3232, 0.0);
        AddCCTV("LS Downtown", 1102.6440, -837.8973, 122.7000, 180.0);
        AddCCTV("SF Wang Cars", -1952.4282,285.9786,57.7031, 90.0);
        AddCCTV("SF Airport", -1275.8070, 52.9402, 82.9162, 0.0);
        AddCCTV("SF Crossroad", -1899.0861,731.0627,65.2969, 90.0);
        AddCCTV("SF Tower", -1753.6606,884.7520,305.8750, 150.0);
        AddCCTV("LV The Strip 1", 2137.2390, 2143.8286, 30.6719, 270.0);
        AddCCTV("LV The Strip 2", 1971.7627, 1423.9323, 82.1563, 270.0);
    	AddCCTV("Mount Chiliad", -2432.5852, -1620.1143, 546.8554, 270.0);
        AddCCTV("Sherman Dam", -702.9260, 1848.8094, 116.0507, 0.0);
        AddCCTV("Desert", 35.1291, 2245.0901, 146.6797, 310.0);
        AddCCTV("Query", 588.1079,889.4715,-14.9023, 270.0);
        AddCCTV("Water", 635.6223,498.1748,20.3451, 90.0);

        
        cctv0 = TextDrawCreate(-7.199995, 0.746667, "LD_DRV:tvcorn");
		TextDrawLetterSize(cctv0, 0.000000, 0.000000);
		TextDrawTextSize(cctv0, 311.199981, 247.893310);
		TextDrawAlignment(cctv0, 1);
		TextDrawColor(cctv0, -1);
		TextDrawSetShadow(cctv0, 0);
		TextDrawSetOutline(cctv0, 0);
		TextDrawFont(cctv0, 4);

		cctv1 = TextDrawCreate(637.799987, 1.746666, "LD_DRV:tvcorn");
		TextDrawLetterSize(cctv1, 0.000000, 0.000000);
		TextDrawTextSize(cctv1, -340.800018, 236.693374);
		TextDrawAlignment(cctv1, 1);
		TextDrawColor(cctv1, -1);
		TextDrawSetShadow(cctv1, 0);
		TextDrawSetOutline(cctv1, 0);
		TextDrawFont(cctv1, 4);

		cctv2 = TextDrawCreate(646.799987, 450.746643, "LD_DRV:tvcorn");
		TextDrawLetterSize(cctv2, 0.000000, 0.000000);
		TextDrawTextSize(cctv2, -456.800048, -259.839874);
		TextDrawAlignment(cctv2, 1);
		TextDrawColor(cctv2, -1);
		TextDrawSetShadow(cctv2, 0);
		TextDrawSetOutline(cctv2, 0);
		TextDrawFont(cctv2, 4);

		cctv3 = TextDrawCreate(-0.200015, 448.013397, "LD_DRV:tvcorn");
		TextDrawLetterSize(cctv3, 0.000000, 0.000000);
		TextDrawTextSize(cctv3, 223.199951, -211.306457);
		TextDrawAlignment(cctv3, 1);
		TextDrawColor(cctv3, -1);
		TextDrawSetShadow(cctv3, 0);
		TextDrawSetOutline(cctv3, 0);
		TextDrawFont(cctv3, 4);

        
        new Count, Left = TotalCCTVS;
        for(new menu; menu<MAX_CCTVMENUS; menu++)
        {
            if(Left > 12)
            {
                CCTVMenu[menu] = CreateMenu("CCTV", 1, 200, 100, 220);
                TotalMenus++;
                MenuType[menu] = 1;
                for(new i; i<11; i++)
                {
                        AddMenuItem(CCTVMenu[menu], 0, CameraName[Count]);
                        Count++;
                        Left--;
                        }
                        AddMenuItem(CCTVMenu[menu], 0, "Urmatorul");
                }
                else if(Left<13 && Left > 0)
                {
                    CCTVMenu[menu] = CreateMenu("CCTV", 1, 200, 100, 220);
                    TotalMenus++;
                    MenuType[menu] = 2;
                    new tmp = Left;
                for(new i; i<tmp; i++)
                {
                        AddMenuItem(CCTVMenu[menu], 0, CameraName[Count]);
                        Count++;
                        Left--;
                        }
                }
        }
        
//==========================================================================
	for(new c=0;c<MAX_VEHICLES;c++)
	{
		Fuel[c] = 100;
		VehicleLightsOn[c] = false;
	}
	
// =============================================================
	CreateDynamicPickup(1239, 2, 1770.3030,-1702.9580,13.4906, -1); // LSAS Duty
	CreateDynamicPickup(1239, 2, 1580.2388,-1634.1246,13.5626, -1); // PD CCTv
//==========================================================================

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		ShowHud[i] = 1;
	}
	new query[1328];
	format(query, sizeof(query), "UPDATE Accounts SET CarKey = '0'");
	mysql_query(query);
	format(query, sizeof(query), "UPDATE Accounts SET WeedTimer = '0'");
	mysql_query(query);
	format(query, sizeof(query), "UPDATE Accounts SET Online = '0'");
	mysql_query(query);
//==========================================================================
	ShowPlayerMarkers(0);
	ShowNameTags(1);
	ManualVehicleEngineAndLights();
	SetNameTagDrawDistance(30.0);
	EnableStuntBonusForAll(0);
    DisableInteriorEnterExits();
    AllowInteriorWeapons(1);
	AllowAdminTeleport(1);
	AntiDeAMX();
	CreateDynamicPickup(1239, 2, 1735.9939,-710.1816,1082.5653, -1);
	CreateDynamicPickup(1239, 2, 1171.7090,-1310.6366,13.9864, -1);
	CreateDynamicPickup(1239, 2, 1564.9248,-1666.0150,28.3956, -1);
	CreateDynamicPickup(1239, 2, 2267.9626,2448.4771,3.5313, -1);
	// Load Stuff here
	LoadLocations();
	LoadHouses();
	LoadGarages();
	LoadBuilding();
	LoadBusiness();
	LoadCityCars();
	LoadFactions();
	LoadFurniture();
	LoadStocuri();
//==========================================================================
	new sendcmd[128];
	if (!strcmp("Yes", GAMEMODE_USE_VERSION, true)) { format(sendcmd, sizeof(sendcmd), "%s", GAMEMODE); SetGameModeText(sendcmd); }
	else { SetGameModeText(GAMEMODE); }
	format(sendcmd, sizeof(sendcmd), "hostname %s", SERVER_NAME);
	SendRconCommand(sendcmd);
	format(sendcmd, sizeof(sendcmd), "mapname %s", MAP_NAME);
	SendRconCommand(sendcmd);
	format(sendcmd, sizeof(sendcmd), "weburl %s", WEBSITE);
	SendRconCommand(sendcmd);
	if (strlen(PASSWORD) != 0) { format(sendcmd, sizeof(sendcmd), "password %s", PASSWORD); SendRconCommand(sendcmd); }
//========================================================================== Pickups
	AddStaticPickup(1314, 1, 1359.8156,-1854.4071,13.5703, 0);
	AddStaticPickup(1314, 1, 2232.6523,-1159.8185,25.8906, 0);
	AddStaticPickup(1314, 1, 2044.8243,-1761.7021,13.5469, 0);
//========================================================================== 3dTextLabel
	CreateDynamic3DTextLabel("Stand de gazete\nCumpara un ziar pentru a afla locatiile(/newspaper).", COLOR_ORANGE, 820.3905,-1356.0406,13.5427, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	Create3DTextLabel("{FFFFFF}Scrie {FBFB04}/takelicenses{FFFFFF} pentru a da testele",COLOR_WHITE,1491.4063,1306.4121,1093.2964,10.0,12);
	Create3DTextLabel("{FFFFFF}Scrie {FBFB04}/buyfood{FFFFFF} pentru a comanda ceva de mancare",COLOR_GREY,2380.0637,-1909.4110,13.5469,15.0,0);
	Create3DTextLabel("{FFFFFF}Scrie {FBFB04}/buyfood{FFFFFF} pentru a comanda ceva de mancare",COLOR_GREY,2409.7424,-1490.5242,24.0000,15.0,0);

// ============= SPAWN ===========
	CreateDynamicObject(1649, 825.29211, -1337.39258, 14.21779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 820.90771, -1337.38733, 14.21779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 816.48730, -1337.38391, 14.21779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 812.09576, -1337.37378, 14.21779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 808.73340, -1339.25073, 17.50228,   0.00000, 0.00000, 58.19997);
	CreateDynamicObject(1649, 812.09576, -1337.37378, 17.51262,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 816.48730, -1337.38391, 17.51260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 820.90771, -1337.38733, 17.51912,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 825.29211, -1337.39258, 17.51912,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 807.60651, -1343.31091, 14.21780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 807.60651, -1343.31091, 17.51932,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 807.61450, -1347.63403, 14.21780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 807.63831, -1351.98743, 14.21780,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 807.67596, -1356.32410, 14.21780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 807.67596, -1356.32410, 17.49349,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 807.63831, -1351.98743, 17.45648,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 807.61450, -1347.63403, 17.51376,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 807.62775, -1343.62964, 19.04520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.62775, -1343.62964, 19.77077,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.62775, -1343.62964, 20.52722,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.62775, -1343.62964, 21.23735,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.63147, -1348.61340, 19.04520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.63147, -1348.61340, 19.78458,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.63147, -1348.61340, 20.52397,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.63147, -1348.61340, 21.24336,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64587, -1353.55090, 19.04520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64587, -1353.55090, 19.79017,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64587, -1353.55090, 20.53514,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64587, -1353.55090, 21.25073,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64606, -1354.47131, 19.04520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64606, -1354.47131, 19.78501,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64606, -1354.47131, 20.52483,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64606, -1354.47131, 21.26465,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64990, -1339.81470, 19.04520,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64990, -1339.81470, 19.76281,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64990, -1339.81470, 20.48042,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.64990, -1339.81470, 21.23581,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 810.05597, -1337.41199, 19.04520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 810.05597, -1337.41199, 19.78094,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 810.05597, -1337.41199, 20.51411,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 810.05597, -1337.41199, 21.23320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 815.03833, -1337.40735, 19.04520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 815.03833, -1337.40735, 19.76298,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 815.03833, -1337.40735, 20.50385,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 815.03833, -1337.40735, 21.23505,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 820.00739, -1337.39905, 19.04520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 820.00739, -1337.39905, 19.77644,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 820.00739, -1337.39905, 20.51001,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 820.00739, -1337.39905, 21.22950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 825.01025, -1337.40857, 19.04520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 825.01025, -1337.40857, 19.78513,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 825.01025, -1337.40857, 20.53040,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 825.01025, -1337.40857, 21.22776,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 824.95825, -1337.37170, 11.99184,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 819.96051, -1337.36243, 11.99184,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 814.97443, -1337.35046, 11.99184,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 812.37964, -1337.33948, 11.99184,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19866, 807.60938, -1343.55054, 11.99180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.60413, -1348.53052, 11.99180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 807.61438, -1353.51709, 11.99180,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 808.00250, -1358.43652, 11.99180,   0.00000, 0.00000, 9.12000);
	CreateDynamicObject(1649, 812.09583, -1337.37378, 14.21780,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 816.48730, -1337.38391, 14.21780,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 820.90771, -1337.38733, 14.21780,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 825.29211, -1337.39258, 14.21780,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 825.29211, -1337.39258, 17.51910,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 820.90771, -1337.38733, 17.51910,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 812.09583, -1337.37378, 17.51260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, 808.76532, -1339.30579, 17.42128,   0.00000, 0.00000, 238.38005);
	CreateDynamicObject(1649, 807.60651, -1343.31091, 14.21780,   0.00000, 0.00000, 270.00021);
	CreateDynamicObject(1649, 807.60651, -1343.31091, 17.51930,   0.00000, 0.00000, 270.00021);
	CreateDynamicObject(1649, 807.62122, -1347.66150, 14.21780,   0.00000, 0.00000, 270.00021);
	CreateDynamicObject(1649, 807.61450, -1347.63403, 17.51380,   0.00000, 0.00000, 270.00021);
	CreateDynamicObject(1649, 807.67084, -1351.97998, 14.21780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 807.63831, -1351.98743, 17.45650,   0.00000, 0.00000, 270.00021);
	CreateDynamicObject(1649, 807.67603, -1356.32410, 14.21780,   0.00000, 0.00000, 270.00021);
	CreateDynamicObject(1649, 807.67603, -1356.32410, 17.49350,   0.00000, 0.00000, 270.00021);
	CreateDynamicObject(3440, 810.00360, -1337.46191, 11.94462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 810.00360, -1337.46191, 16.69037,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 807.64893, -1341.20862, 11.94462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 807.64893, -1341.20862, 16.70097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 808.79645, -1339.31665, 15.82665,   0.00000, 90.00000, 58.44002);
	CreateDynamicObject(3440, 827.50775, -1337.41650, 11.94462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 827.50775, -1337.41650, 16.68826,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 818.69183, -1337.46765, 11.94462,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 818.69183, -1337.46765, 16.65069,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 807.64935, -1349.96924, 16.68647,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 807.64935, -1349.96924, 11.94461,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 807.68890, -1356.94189, 11.94461,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 807.68890, -1356.94189, 16.67006,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 825.01941, -1339.33972, 16.00820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19866, 825.04724, -1338.61279, 16.00820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19866, 820.02740, -1339.33289, 16.01120,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19866, 820.05188, -1338.61353, 16.00820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19866, 815.05591, -1338.60400, 16.00820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19866, 815.08221, -1339.33862, 16.00820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19866, 811.84998, -1339.32874, 16.00820,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19866, 811.99353, -1338.68884, 16.01020,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19866, 808.70581, -1341.82166, 16.00820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 808.70551, -1346.84045, 16.00820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 808.70581, -1341.82166, 16.00820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 808.70258, -1351.80115, 16.00820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 808.69177, -1356.57996, 16.00820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 807.95166, -1356.54272, 16.00820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 807.95477, -1351.62158, 16.00820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 807.95703, -1346.61975, 16.00820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 807.95868, -1343.06152, 16.00820,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 808.30505, -1342.92627, 16.00794,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 808.36804, -1342.44629, 16.00903,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19866, 811.85236, -1339.12500, 16.09057,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19866, 811.58209, -1339.32336, 16.09057,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1330, 827.10608, -1346.34509, 12.96767,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 827.45984, -1336.80554, 13.07878,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 818.66101, -1336.97742, 13.07878,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 809.64063, -1337.20850, 13.07878,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 807.16113, -1341.00061, 13.07878,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 807.13147, -1349.93359, 13.07878,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 807.24951, -1357.01062, 13.07878,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3785, 827.40985, -1344.95715, 15.07810,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3785, 839.07001, -1338.61072, 9.55557,   0.00000, 0.00000, -87.83999);
	CreateDynamicObject(3785, 842.66235, -1345.55042, 9.55557,   0.00000, 0.00000, -223.07947);
	CreateDynamicObject(3785, 833.28479, -1355.83557, 4.97472,   0.00000, 0.00000, 135.53981);
	CreateDynamicObject(1893, 822.01636, -1342.52283, 19.64600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 822.09729, -1346.04431, 19.64600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 822.12952, -1350.20630, 19.64600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 822.26068, -1354.73340, 19.64600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 815.18762, -1354.58545, 19.64600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 815.12024, -1350.26575, 19.64600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 815.52930, -1346.15332, 19.64600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1893, 815.74939, -1342.51965, 19.64600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2775, 827.11572, -1347.63940, 17.53741,   0.00000, 0.00000, -91.02001);
	CreateDynamicObject(1649, 816.48730, -1337.38391, 17.51260,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1256, 827.02417, -1348.97107, 13.17037,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 821.31879, -1337.87549, 13.17037,   0.00000, 0.00000, 89.93997);
	CreateDynamicObject(1256, 814.88739, -1337.92590, 13.17037,   0.00000, 0.00000, 91.91998);
	CreateDynamicObject(9131, 827.14026, -1352.31189, 14.94186,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 827.14032, -1352.31189, 12.75310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 819.10272, -1352.31189, 12.75310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 819.10272, -1352.31189, 14.94190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3857, 819.00781, -1356.33105, 13.15811,   0.00000, 0.00000, 315.18866);
	CreateDynamicObject(3857, 825.51746, -1352.21558, 13.15811,   0.00000, 0.00000, 44.13688);
	CreateDynamicObject(9131, 821.98761, -1352.31189, 12.75310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 821.98761, -1352.31189, 14.94190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 823.94672, -1356.73779, 15.99750,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2585, 827.39575, -1353.84668, 14.52312,   0.00000, 0.00000, 270.36600);
	CreateDynamicObject(2585, 827.39581, -1355.66638, 14.52310,   0.00000, 0.00000, 270.36600);
	CreateDynamicObject(2581, 824.74066, -1356.91089, 13.59593,   0.00000, 0.00000, 180.67328);
	CreateDynamicObject(2584, 824.96661, -1354.72351, 13.24184,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2584, 822.57684, -1354.67102, 13.24184,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2582, 820.34747, -1356.60803, 13.41479,   0.00000, 0.00000, 180.00502);
	CreateDynamicObject(2490, 822.42963, -1356.92773, 14.32851,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2490, 822.42963, -1356.92773, 13.82247,   0.00000, 0.00000, 0.00000);

	// ================================= Park + Biserica la gara ========
    CreateObject(8678, 1771.45862, -1762.35425, 13.08090,   0.00000, 0.00000, 0.00000);
    CreateObject(8675, 1779.73718, -1764.38245, 21.73350,   0.00000, 0.00000, 0.00000);
    CreateObject(8676, 1734.15674, -1745.95093, 17.48020,   0.00000, 0.00000, 0.00000);
    CreateObject(8679, 1771.71667, -1762.53430, 12.52865,   0.00000, 0.00000, 0.00000);
    CreateObject(748, 1736.90332, -1804.43726, 12.50048,   0.00000, 0.00000, 0.00000);
    CreateObject(1231, 1753.61060, -1744.82947, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(1231, 1770.06494, -1744.82947, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(1231, 1786.13391, -1744.82947, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(1231, 1801.78320, -1744.82947, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(1231, 1801.78320, -1779.45605, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(1231, 1786.13391, -1779.45605, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(1231, 1770.06494, -1779.45605, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(1231, 1753.61060, -1779.45605, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(1231, 1740.86206, -1779.44312, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(3520, 1754.40112, -1750.16907, 12.74521,   0.00000, 0.00000, 0.00000);
    CreateObject(3520, 1734.14575, -1749.80054, 12.74521,   0.00000, 0.00000, 0.00000);
    CreateObject(3520, 1734.82275, -1773.09424, 12.74521,   0.00000, 0.00000, 0.00000);
    CreateObject(3520, 1769.69873, -1779.30676, 12.74520,   0.00000, 0.00000, 90.00000);
    CreateObject(3520, 1753.38367, -1779.40698, 12.74520,   0.00000, 0.00000, 90.00000);
    CreateObject(3520, 1740.52808, -1779.35034, 12.74520,   0.00000, 0.00000, 90.00000);
    CreateObject(3520, 1786.02063, -1779.33801, 12.74520,   0.00000, 0.00000, 90.00000);
    CreateObject(3520, 1802.25012, -1779.28052, 12.74520,   0.00000, 0.00000, 90.00000);
    CreateObject(3520, 1801.38904, -1744.41821, 12.74520,   0.00000, 0.00000, 90.00000);
    CreateObject(3520, 1785.76135, -1744.55115, 12.74520,   0.00000, 0.00000, 90.00000);
    CreateObject(3520, 1769.53271, -1744.63745, 12.74520,   0.00000, 0.00000, 90.00000);
    CreateObject(3520, 1759.47168, -1744.63940, 12.74520,   0.00000, 0.00000, 90.00000);
    CreateObject(3520, 1776.94995, -1744.69104, 12.74520,   0.00000, 0.00000, 90.00000);
    CreateObject(1231, 1733.96265, -1751.79834, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(1231, 1734.55994, -1773.73926, 15.49280,   0.00000, 0.00000, 0.00000);
    CreateObject(669, 1735.22998, -1777.83667, 12.73670,   0.00000, 0.00000, 0.00000);
    CreateObject(700, 1808.18066, -1777.72998, 13.22610,   0.00000, 0.00000, 0.00000);
    CreateObject(669, 1807.72937, -1748.80200, 12.73670,   0.00000, 0.00000, 0.00000);
    CreateObject(3458, 1703.38000, -1761.02844, 14.11930,   0.00000, 0.00000, -90.00000);
    CreateObject(1280, 1715.92090, -1781.19995, 12.86000,   0.00000, 0.00000, -90.00000);
    CreateObject(1280, 1715.92090, -1782.00000, 12.86000,   0.00000, 0.00000, 90.00000);
    CreateObject(1280, 1715.92090, -1774.00000, 12.86000,   0.00000, 0.00000, 90.00000);
    CreateObject(1280, 1715.92090, -1766.00000, 12.86000,   0.00000, 0.00000, 90.00000);
    CreateObject(1280, 1715.92090, -1758.00000, 12.86000,   0.00000, 0.00000, 90.00000);
    CreateObject(1280, 1715.90857, -1750.01575, 12.86000,   0.00000, 0.00000, 90.00000);
    CreateObject(1280, 1715.92090, -1773.19995, 12.86000,   0.00000, 0.00000, -90.00000);
    CreateObject(1280, 1715.92090, -1765.19995, 12.86000,   0.00000, 0.00000, -90.00000);
    CreateObject(1280, 1715.94092, -1757.19958, 12.86000,   0.00000, 0.00000, -90.00000);
    CreateObject(1280, 1715.92090, -1749.19995, 12.86000,   0.00000, 0.00000, -90.00000);
    CreateObject(1280, 1720.00000, -1749.19995, 12.86000,   0.00000, 0.00000, -90.00000);
    CreateObject(1300, 1717.94019, -1749.66663, 12.87960,   0.00000, 0.00000, 0.00000);
    CreateObject(1280, 1720.00000, -1757.19995, 12.86000,   0.00000, 0.00000, -90.00000);
    CreateObject(1280, 1720.00000, -1765.19995, 12.86000,   0.00000, 0.00000, -90.00000);
    CreateObject(1280, 1720.00000, -1773.19995, 12.86000,   0.00000, 0.00000, -90.00000);
    CreateObject(1280, 1720.00000, -1781.19995, 12.86000,   0.00000, 0.00000, -90.00000);
    CreateObject(1280, 1720.00000, -1750.00000, 12.86000,   0.00000, 0.00000, 90.00000);
    CreateObject(1280, 1720.00000, -1758.00000, 12.86000,   0.00000, 0.00000, 90.00000);
    CreateObject(1280, 1720.00000, -1766.00000, 12.86000,   0.00000, 0.00000, 90.00000);
    CreateObject(1280, 1720.00000, -1774.00000, 12.86000,   0.00000, 0.00000, 90.00000);
    CreateObject(1280, 1720.00000, -1782.00000, 12.86000,   0.00000, 0.00000, 90.00000);
    CreateObject(1300, 1717.94019, -1757.57544, 12.87960,   0.00000, 0.00000, 0.00000);
    CreateObject(1300, 1717.94019, -1765.59338, 12.87960,   0.00000, 0.00000, 0.00000);
    CreateObject(1300, 1717.94019, -1773.57739, 12.87960,   0.00000, 0.00000, 0.00000);
    CreateObject(1300, 1717.94019, -1781.53674, 12.87960,   0.00000, 0.00000, 0.00000);
    CreateObject(1257, 1735.74158, -1809.34338, 13.81740,   0.00000, 0.00000, 75.00000);
    CreateObject(1341, 1745.20837, -1808.05530, 13.57740,   0.00000, 0.00000, 75.00000);
    CreateObject(1340, 1749.23767, -1808.73706, 13.67740,   0.00000, 0.00000, 75.00000);
    CreateObject(1342, 1753.96008, -1809.63196, 13.59740,   0.00000, 0.00000, 75.00000);
    CreateObject(1340, 1757.87146, -1811.02502, 13.61740,   0.00000, 0.00000, 75.00000);
    CreateObject(1775, 1752.36951, -1809.18958, 13.67670,   0.00000, 0.00000, 165.00000);
    CreateObject(6965, 1789.90088, -1799.61169, 16.15140,   0.00000, 0.00000, 0.00000);
    CreateObject(6964, 1789.99329, -1799.57837, 11.83070,   0.00000, 0.00000, 0.00000);
    CreateObject(1281, 1768.38708, -1785.51550, 13.32840,   0.00000, 0.00000, 0.00000);
    CreateObject(1281, 1759.57935, -1785.71826, 13.32840,   0.00000, 0.00000, 0.00000);
    CreateObject(1281, 1750.73303, -1785.65308, 13.32840,   0.00000, 0.00000, 0.00000);
    CreateObject(1281, 1742.49988, -1785.40930, 13.32840,   0.00000, 0.00000, 0.00000);
    CreateObject(1281, 1735.39075, -1785.28650, 13.32840,   0.00000, 0.00000, 0.00000);
    CreateObject(1281, 1733.97314, -1801.51868, 13.32840,   0.00000, 0.00000, -14.00000);
    CreateObject(1281, 1727.36646, -1799.86462, 13.32840,   0.00000, 0.00000, -14.00000);
    CreateObject(1281, 1720.64539, -1798.24097, 13.32840,   0.00000, 0.00000, 0.00000);
    CreateObject(1281, 1741.15491, -1803.53967, 13.32840,   0.00000, 0.00000, -14.00000);
    CreateObject(1281, 1705.11536, -1789.26038, 13.32840,   0.00000, 0.00000, 0.00000);
    CreateObject(4642, 1780.90588, -1815.70178, 14.22830,   0.00000, 0.00000, 0.00000);
    CreateObject(838, 1808.55994, -1818.22375, 15.24600,   0.00000, 0.00000, 0.00000);
    CreateObject(618, 1782.77820, -1817.87708, 12.85660,   0.00000, 0.00000, 0.00000);
    CreateObject(729, 1811.02710, -1804.72205, 12.57820,   0.00000, 0.00000, 0.00000);
    CreateObject(950, 1808.56494, -1805.02698, 13.12379,   0.00000, 0.00000, 0.00000);
    CreateObject(949, 1809.68567, -1805.03735, 13.17630,   0.00000, 0.00000, 0.00000);
    CreateObject(8990, 1811.25171, -1810.78662, 13.24750,   0.00000, 0.00000, 90.00000);
    CreateObject(8990, 1811.17700, -1789.78491, 13.24750,   0.00000, 0.00000, 90.00000);
    CreateObject(729, 1810.95129, -1795.97107, 12.57820,   0.00000, 0.00000, 0.00000);
    CreateObject(729, 1810.77856, -1787.97192, 12.57820,   0.00000, 0.00000, 0.00000);
    CreateObject(729, 1811.03687, -1813.20447, 12.57820,   0.00000, 0.00000, 0.00000);
    CreateObject(18014, 1808.72205, -1804.17175, 12.97270,   0.00000, 0.00000, 90.00000);
    CreateObject(1571, 1762.62598, -1811.67944, 13.62020,   0.00000, 0.00000, 165.00000);
    CreateObject(6299, 1709.85510, -1791.92151, 14.55620,   0.00000, 0.00000, 180.00000);
    CreateObject(19355, 1809.97095, -1798.68701, 12.47870,   0.00000, 90.00000, 0.00000);
    CreateObject(19355, 1806.48425, -1798.68701, 12.47870,   0.00000, 90.00000, 0.00000);
    CreateObject(19355, 1802.98206, -1798.68701, 12.47870,   0.00000, 90.00000, 0.00000);
    CreateObject(19355, 1809.97095, -1801.89185, 12.47870,   0.00000, 90.00000, 0.00000);
    CreateObject(19355, 1806.48425, -1801.89185, 12.47870,   0.00000, 90.00000, 0.00000);
    CreateObject(19355, 1802.98206, -1801.89185, 12.47870,   0.00000, 90.00000, 0.00000);
    CreateObject(18014, 1808.86475, -1796.51318, 12.97270,   0.00000, 0.00000, 90.00000);
    CreateObject(8990, 1756.82178, -1812.72546, 13.24750,   0.00000, 0.00000, -14.00000);
    CreateObject(8990, 1743.43286, -1809.15308, 13.24750,   0.00000, 0.00000, -14.00000);
    CreateObject(19355, 1737.59302, -1807.01074, 12.47870,   0.00000, 0.00000, -105.00000);
    CreateObject(19355, 1741.57300, -1808.10132, 12.47870,   0.00000, 0.00000, -105.00000);
    CreateObject(19355, 1745.64807, -1809.15454, 12.47870,   0.00000, 0.00000, -105.00000);
    CreateObject(19355, 1750.21753, -1810.32031, 12.47870,   0.00000, 0.00000, -105.00000);
    CreateObject(19355, 1754.54639, -1811.53284, 12.47870,   0.00000, 0.00000, -105.00000);
    CreateObject(19355, 1758.50989, -1812.60571, 12.47870,   0.00000, 0.00000, -105.00000);
    CreateObject(19355, 1762.85486, -1813.80737, 12.47870,   0.00000, 0.00000, -105.00000);
    CreateObject(1281, 1748.61914, -1805.16223, 13.32840,   0.00000, 0.00000, -14.00000);
    CreateObject(1281, 1756.22937, -1806.64563, 13.32840,   0.00000, 0.00000, -14.00000);
    CreateObject(1281, 1763.56738, -1807.36121, 13.32840,   0.00000, 0.00000, -14.00000);
    CreateObject(1281, 1777.35706, -1785.42297, 13.32840,   0.00000, 0.00000, 0.00000);
    CreateObject(618, 1760.55615, -1813.91699, 13.33661,   0.00000, 0.00000, 0.00000);
    CreateObject(618, 1756.96033, -1812.28394, 13.33660,   0.00000, 0.00000, 90.00000);
    CreateObject(618, 1748.31726, -1809.66528, 13.33660,   0.00000, 0.00000, 90.00000);
    CreateObject(618, 1739.78674, -1806.94189, 13.33660,   0.00000, 0.00000, 134.00000);
    CreateObject(618, 1743.90454, -1808.04883, 13.33660,   0.00000, 0.00000, 134.00000);
    CreateObject(618, 1752.70422, -1810.79517, 13.33660,   0.00000, 0.00000, 134.00000);
    CreateObject(8990, 1730.95081, -1749.65430, 13.24750,   0.00000, 0.00000, 90.00000);
    CreateObject(8990, 1730.48169, -1761.16345, 13.24750,   0.00000, 0.00000, -90.00000);
    CreateObject(8990, 1730.45203, -1775.06519, 13.24750,   0.00000, 0.00000, -90.00000);


// ================================== Ganton Ghetto =================
    CreateObject(12938, 2149.31860, -1700.24500, 17.98168,   0.00000, 0.00000, -88.80000);
    CreateObject(12940, 2148.39282, -1666.28088, 17.90306,   0.00000, 0.00000, -87.24002);
    CreateObject(1264, 2175.75977, -1664.65320, 14.57031,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2175.12280, -1664.71887, 14.57031,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2174.78638, -1664.25952, 14.57031,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2175.23853, -1663.81653, 14.57031,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2174.99268, -1664.23755, 14.86930,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2175.29199, -1664.69495, 14.86930,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2175.41211, -1664.20374, 14.86930,   3.14159, 0.00000, 2.53073);
    CreateObject(14497, 2150.76831, -1692.10657, 14.58194,   0.00000, 0.00000, 0.00000);
    CreateObject(1710, 2139.34204, -1677.13025, 14.07798,   0.00000, 0.00000, 59.88000);
    CreateObject(1710, 2142.60400, -1681.23267, 14.07798,   0.00000, 0.00000, 147.48000);
    CreateObject(1710, 2144.61060, -1676.07129, 14.07798,   0.00000, 0.00000, -98.57999);
    CreateObject(1264, 2149.87866, -1668.77222, 14.27568,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2149.90942, -1668.16968, 14.27568,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2149.88501, -1667.67004, 14.27568,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2149.51147, -1668.22961, 14.27568,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2142.06396, -1672.97314, 14.27568,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2141.83276, -1672.45911, 14.27568,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2141.17041, -1672.52234, 14.27568,   3.14159, 0.00000, 2.53073);
    CreateObject(1292, 2142.60107, -1698.29944, 14.58457,   0.00000, 0.00000, -135.00002);
    CreateObject(1292, 2144.95630, -1668.28503, 14.58457,   0.00000, 0.00000, 35.45998);
    CreateObject(1369, 2138.32373, -1697.41809, 14.67586,   0.00000, 0.00000, 145.91997);
    CreateObject(1362, 2152.49536, -1692.97339, 14.66582,   0.00000, 0.00000, 0.00000);
    CreateObject(1362, 2147.37793, -1695.83325, 14.66582,   0.00000, 0.00000, 0.00000);
    CreateObject(1362, 2156.25806, -1684.60071, 14.66582,   0.00000, 0.00000, 0.00000);
    CreateObject(1362, 2156.22729, -1686.21960, 14.66582,   0.00000, 0.00000, 0.00000);
    CreateObject(1362, 2141.84131, -1677.72009, 14.66582,   0.00000, 0.00000, 0.00000);
    CreateObject(3127, 2156.73511, -1677.40479, 10.35010,   0.00000, 0.00000, -151.07999);
    CreateObject(3127, 2137.63330, -1689.36658, 10.28839,   0.00000, 0.00000, -151.07999);
    CreateObject(1211, 2153.03320, -1684.62415, 14.13390,   68.93999, 91.92005, 0.00000);
    CreateObject(1211, 2139.59253, -1683.14478, 14.13390,   68.93999, 91.92005, -99.89999);
    CreateObject(1299, 2145.62036, -1701.98303, 14.04797,   0.00000, 0.00000, 0.00000);
    CreateObject(1327, 2145.38452, -1678.47900, 14.43393,   -3.00000, 44.82001, 133.98000);
    CreateObject(1440, 2143.98193, -1687.22375, 14.59416,   0.00000, 0.00000, 89.82001);
    CreateObject(1440, 2147.37256, -1666.01880, 14.59416,   0.00000, 0.00000, 7.92000);
    CreateObject(1227, 2128.45239, -1693.67664, 14.87828,   0.00000, 0.00000, 270.59988);
    CreateObject(1227, 2128.56006, -1696.48328, 14.87828,   0.00000, 0.00000, 270.59988);
    CreateObject(1227, 2167.95361, -1692.68176, 14.87583,   0.00000, 0.00000, 90.96001);
    CreateObject(1227, 2167.93604, -1695.25269, 14.87583,   0.00000, 0.00000, 90.96001);
    CreateObject(1264, 2168.69727, -1691.36865, 14.45872,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2168.02222, -1691.11560, 14.45872,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2168.88184, -1691.91138, 14.45872,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2168.54468, -1693.94714, 14.45872,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2168.28540, -1696.57434, 14.45872,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2167.50439, -1696.73254, 14.45872,   3.14159, 0.00000, 2.53073);
    CreateObject(1264, 2167.46704, -1693.87158, 15.91056,   3.14159, 0.00000, 2.53073);
    CreateObject(1946, 2148.16333, -1691.21643, 14.21075,   0.00000, 0.00000, 0.00000);
    CreateObject(1946, 2141.51416, -1678.62427, 14.23054,   0.00000, 0.00000, 0.00000);
    CreateObject(946, 2147.35400, -1667.18530, 16.26323,   3.14159, 0.00000, -175.98010);
    CreateObject(946, 2148.11987, -1698.82495, 16.26323,   3.14159, 0.00000, 361.68005);
    CreateObject(19868, 2162.65942, -1718.58044, 14.28498,   0.00000, 0.00000, 0.72000);
    CreateObject(19868, 2167.85425, -1718.52075, 14.28498,   0.00000, 0.00000, 0.72000);
    CreateObject(19868, 2170.76270, -1715.86023, 14.28498,   0.00000, 0.00000, 82.01997);
    CreateObject(19868, 2171.30444, -1710.68750, 14.28498,   0.00000, 0.00000, 86.99994);
    CreateObject(19868, 2168.83154, -1707.44458, 14.28498,   0.00000, 0.00000, 165.89992);
    CreateObject(19868, 2159.98926, -1715.91345, 14.28498,   0.00000, 0.00000, -84.83998);
    CreateObject(19868, 2160.48926, -1710.82532, 14.28498,   0.00000, 0.00000, -106.01999);
    CreateObject(946, 2161.38257, -1717.29382, 16.41716,   3.14159, 0.00000, 309.17996);
    CreateObject(1946, 2166.35425, -1715.52869, 14.39479,   0.00000, 0.00000, 0.00000);
    CreateObject(946, 2170.12476, -1709.08154, 16.60114,   3.14159, 0.00000, 492.30029);
    CreateObject(18663, 2137.72095, -1655.48169, 15.45434,   0.00000, 0.00000, 2.76000);
    CreateObject(18663, 2131.69751, -1662.99036, 15.40218,   0.00000, 0.00000, 92.76000);
    CreateObject(18663, 2155.69482, -1654.35889, 15.50738,   0.00000, 0.00000, 3.00000);
    CreateObject(18663, 2155.78320, -1656.58044, 15.44910,   16.02000, 0.42000, 3.00000);
    CreateObject(18663, 2166.64160, -1671.72937, 15.54291,   0.00000, 0.00000, 2.64000);
    CreateObject(18663, 2164.26465, -1704.31567, 15.45391,   0.00000, 0.00000, 91.25999);
    CreateObject(18663, 2139.51953, -1711.24780, 15.46285,   0.00000, 0.00000, 1.26000);
    CreateObject(18663, 2132.32568, -1704.96716, 15.46772,   0.00000, 0.00000, -88.86000);
    CreateObject(18663, 2134.03784, -1704.96008, 15.46772,   -59.22000, 178.31992, -88.86000);
    CreateObject(2672, 2149.63647, -1695.53955, 14.37355,   0.00000, 0.00000, 0.00000);
    CreateObject(2672, 2142.94458, -1675.05530, 14.37355,   0.00000, 0.00000, 0.00000);
    CreateObject(19868, 2181.57593, -1654.95923, 14.28498,   0.00000, 0.00000, 79.19994);
    CreateObject(19868, 2181.03491, -1656.71863, 14.28498,   0.00000, 0.00000, 67.61992);
    CreateObject(19868, 2174.55078, -1659.72925, 14.28498,   0.00000, 0.00000, -24.24007);
    CreateObject(19868, 2171.31445, -1656.17920, 14.28498,   0.00000, 0.00000, -70.98006);
    CreateObject(19868, 2172.50854, -1652.10095, 14.28498,   0.00000, 0.00000, -140.82008);
    CreateObject(19868, 2177.09375, -1651.07593, 14.28498,   0.00000, 0.00000, -191.40012);
    CreateObject(19868, 2179.64380, -1651.64246, 14.28498,   0.00000, 0.00000, -198.24010);
    CreateObject(2629, 2174.67749, -1652.40247, 14.05883,   0.00000, 0.00000, 23.40000);
    CreateObject(2629, 2172.73193, -1654.55139, 14.05883,   0.00000, 0.00000, 70.13999);
    CreateObject(2629, 2179.14209, -1652.88477, 14.05883,   0.00000, 0.00000, -31.08002);
    CreateObject(11730, 2172.68091, -1658.40649, 14.08169,   0.00000, 0.00000, 136.14001);
    CreateObject(11730, 2172.12280, -1657.50256, 14.08169,   0.00000, 0.00000, 117.36003);
    CreateObject(11730, 2138.01465, -1679.24353, 14.08057,   0.00000, 0.00000, 126.71999);
    CreateObject(11730, 2138.09863, -1677.57227, 14.08057,   0.00000, 37.56000, 83.03996);
    CreateObject(11730, 2137.73022, -1678.23840, 14.08057,   0.00000, 0.00000, 95.21998);
    CreateObject(11730, 2139.29150, -1680.90515, 14.08057,   -1.86000, 54.06001, 126.71999);
    CreateObject(11730, 2157.13599, -1689.40576, 14.08040,   -34.26001, 7.32001, 197.69989);
    CreateObject(2632, 2179.62744, -1656.36475, 14.08060,   -1.32000, 1.44000, -113.22002);
    CreateObject(19868, 2172.24170, -1652.47778, 14.28498,   0.00000, 0.00000, -140.82008);
    CreateObject(19868, 2171.15210, -1655.78076, 14.28498,   0.00000, 0.00000, -70.98006);
    CreateObject(19868, 2174.04639, -1659.50635, 14.28498,   0.00000, 0.00000, -24.24007);
    CreateObject(19868, 2180.80786, -1657.27942, 14.28498,   0.00000, 0.00000, 67.61992);
    CreateObject(19868, 2181.66284, -1654.51196, 14.28498,   0.00000, 0.00000, 79.19994);
    CreateObject(19868, 2170.77539, -1715.32190, 14.28498,   0.00000, 0.00000, 82.01997);
    CreateObject(19868, 2171.25781, -1710.27747, 14.28498,   0.00000, 0.00000, 86.99994);
    CreateObject(19868, 2168.06226, -1707.29675, 14.28498,   0.00000, 0.00000, 165.89992);
    CreateObject(19868, 2160.33423, -1711.65112, 14.28498,   0.00000, 0.00000, -106.01999);
    CreateObject(19868, 2159.93555, -1716.53259, 14.28498,   0.00000, 0.00000, -84.83998);
    CreateObject(19868, 2163.12598, -1718.62549, 14.28498,   0.00000, 0.00000, 0.72000);
    CreateObject(19868, 2168.21167, -1718.47168, 14.28498,   0.00000, 0.00000, 0.72000);
    CreateObject(2063, 2139.78345, -1691.31750, 14.92751,   0.00000, 0.00000, 62.93998);
    CreateObject(2063, 2156.92480, -1674.36243, 14.92751,   -8.58000, 0.00000, -128.28003);
    CreateObject(2693, 2156.10254, -1690.90527, 14.77523,   0.00000, 0.00000, -129.65997);
    CreateObject(2693, 2180.54004, -1659.34082, 14.77523,   0.00000, 0.00000, 7.08001);
    CreateObject(2692, 2139.13208, -1697.93457, 14.64941,   0.00000, 0.00000, 164.04004);
    CreateObject(2691, 2147.18018, -1664.98438, 15.45279,   0.00000, 0.00000, 2.70000);
    CreateObject(2696, 2166.55762, -1669.55566, 15.54572,   0.00000, 0.00000, 91.73999);
    CreateObject(2680, 2173.17603, -1658.13184, 15.07598,   0.00000, 0.00000, 122.88004);
    CreateObject(2680, 2172.68091, -1657.39270, 15.07598,   0.00000, 0.00000, 122.88004);
    CreateObject(2695, 2166.47974, -1704.25659, 15.90061,   0.00000, 0.00000, 0.00000);
    CreateObject(2696, 2165.87915, -1704.27734, 15.90174,   0.00000, 0.00000, 0.00000);
    CreateObject(2696, 2138.15430, -1678.12537, 15.11956,   0.00000, 0.00000, 122.16007);
    CreateObject(2695, 2147.29517, -1667.27710, 17.82212,   -2.16000, 63.42003, 4.50000);
    CreateObject(3594, 2144.26611, -1647.42957, 14.39655,   0.00000, 0.00000, 38.64000);
    CreateObject(3594, 2146.87744, -1647.16541, 14.39655,   -11.27999, -2.46000, -31.02000);

// ================================== Mechanic HQ ===================
    CreateObject(974, 1997.62000, -1822.21997, 12.54000,   0.00000, 0.00000, 0.00000);
    CreateObject(974, 2071.70239, -1882.14368, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 2071.75000, -1866.60999, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(4199, 2055.75049, -1916.47498, 14.70000,   0.00000, 0.00000, 90.24001);
    CreateObject(8947, 2059.50000, -1855.82996, 15.53000,   0.00000, 0.00000, -90.00000);
    CreateObject(3877, 2055.66968, -1910.88806, 14.14000,   0.00000, 0.00000, 45.00000);
    CreateObject(3877, 2047.22888, -1910.94312, 14.14000,   0.00000, 0.00000, 45.00000);
    CreateObject(3877, 2046.66003, -1851.56116, 14.14000,   0.00000, 0.00000, 0.00000);
    CreateObject(3877, 2046.68005, -1860.10999, 14.14000,   0.00000, 0.00000, 0.00000);
    CreateObject(10281, 2072.62988, -1866.42004, 15.09000,   0.00000, 0.00000, 90.00000);
    CreateObject(1251, 2039.82996, -1907.89441, 12.55000,   0.00000, 0.00000, 0.00000);
    CreateObject(1251, 2046.03198, -1908.07422, 12.55000,   0.00000, 0.00000, 0.00000);
    CreateObject(1251, 2053.83276, -1908.19031, 12.55000,   0.00000, 0.00000, 0.00000);
    CreateObject(1251, 2061.56104, -1908.08765, 12.55000,   0.00000, 0.00000, 0.00000);
    CreateObject(1251, 2069.18311, -1908.05701, 12.55000,   0.00000, 0.00000, 0.00000);
    CreateObject(1251, 2058.37280, -1911.56885, 12.55000,   0.00000, 0.00000, 90.12000);
    CreateObject(8661, 2055.97314, -1830.56287, 12.54220,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2056.08447, -1845.58191, 12.52684,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2043.81079, -1857.42163, 12.54363,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2055.84473, -1869.50537, 12.54638,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2055.88184, -1854.67871, 12.54601,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 1996.94055, -1852.90857, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 2036.50830, -1859.13867, 12.53086,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2035.91150, -1846.28137, 12.53169,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2029.43542, -1859.60486, 12.53360,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2027.18933, -1857.23767, 12.53454,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2025.40271, -1848.20569, 12.53539,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2018.14429, -1859.88708, 12.52525,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2015.46350, -1855.72461, 12.52613,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2015.38342, -1848.04321, 12.52644,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2013.01685, -1853.56213, 12.52886,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2013.02734, -1843.05518, 12.54173,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2012.93506, -1831.95886, 12.55130,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2036.39709, -1832.09692, 12.55130,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2012.97986, -1873.43127, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2051.75366, -1873.00818, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2051.93506, -1875.03284, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2019.23193, -1874.74902, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2052.70996, -1842.22205, 12.54220,   0.00000, 0.00000, 0.00000);
    CreateObject(974, 2044.98010, -1822.23987, 15.06000,   0.00000, 0.00000, 180.95992);
    CreateObject(974, 2051.60620, -1822.15527, 15.06000,   0.00000, 0.00000, 180.53993);
    CreateObject(974, 2058.26465, -1822.12842, 15.06000,   0.00000, 0.00000, 179.87996);
    CreateObject(974, 2064.88696, -1822.13623, 15.06000,   0.00000, 0.00000, 179.87996);
    CreateObject(974, 2068.22900, -1822.16992, 15.06000,   0.00000, 0.00000, 179.87996);
    CreateObject(974, 2071.67285, -1845.12012, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 2071.69434, -1840.88647, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 2071.54907, -1825.48865, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(969, 2071.61108, -1829.03918, 12.54000,   0.00000, 0.00000, -90.00000);
    CreateObject(10281, 2072.48657, -1824.96277, 15.09000,   0.00000, 0.00000, 90.00000);
    CreateObject(8661, 2013.01172, -1893.37158, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2052.00952, -1894.07349, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2051.99219, -1912.47180, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 2012.39795, -1912.68066, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 1991.30273, -1912.51953, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 1991.29126, -1892.91858, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 1991.24231, -1873.21753, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 1991.35681, -1853.33411, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 1991.69446, -1834.31506, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(8661, 1991.57251, -1832.25073, 12.55040,   0.00000, 0.00000, 0.00000);
    CreateObject(974, 2071.72241, -1887.69629, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 2071.72876, -1894.32239, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(969, 2071.74072, -1897.76953, 12.54000,   0.00000, 0.00000, -90.00000);
    CreateObject(974, 2071.74854, -1909.84509, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 2071.73511, -1916.48901, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 2071.73730, -1919.02710, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(10281, 2072.64844, -1887.82104, 15.09000,   0.00000, 0.00000, 90.00000);
    CreateObject(10281, 2072.71216, -1915.22791, 15.09000,   0.00000, 0.00000, 90.00000);
    CreateObject(5313, 2043.99219, -2016.86719, 25.05469,   0.00000, 0.00000, 0.00000);
    CreateObject(1251, 2051.05249, -1911.51843, 12.55000,   0.00000, 0.00000, 90.12000);
    CreateObject(1251, 2043.12146, -1911.58350, 12.55000,   0.00000, 0.00000, 90.12000);
    CreateObject(1251, 2067.34692, -1911.45728, 12.55000,   0.00000, 0.00000, 90.12000);
    CreateObject(3877, 2063.19971, -1910.73743, 14.14000,   0.00000, 0.00000, 45.00000);
    CreateObject(3877, 2070.38354, -1910.60010, 14.14000,   0.00000, 0.00000, 45.00000);
    CreateObject(974, 2038.55200, -1822.40955, 15.06000,   0.00000, 0.00000, 180.95992);
    CreateObject(974, 2031.86548, -1822.51196, 15.06000,   0.00000, 0.00000, 180.95992);
    CreateObject(974, 2025.25818, -1822.63562, 15.06000,   0.00000, 0.00000, 180.95992);
    CreateObject(974, 2018.61279, -1822.76038, 15.06000,   0.00000, 0.00000, 180.95992);
    CreateObject(974, 2011.96448, -1822.91650, 15.06000,   0.00000, 0.00000, 180.95992);
    CreateObject(974, 2005.29688, -1823.08069, 15.06000,   0.00000, 0.00000, 180.95992);
    CreateObject(974, 1998.66443, -1823.07214, 15.06000,   0.00000, 0.00000, 178.68001);
    CreateObject(974, 1992.12170, -1823.04736, 15.06000,   0.00000, 0.00000, 180.53996);
    CreateObject(974, 1985.44568, -1823.09473, 15.06000,   0.00000, 0.00000, 179.45996);
    CreateObject(974, 1978.80957, -1823.02942, 15.06000,   0.00000, 0.00000, 179.45996);
    CreateObject(974, 1974.93372, -1822.99683, 15.06000,   0.00000, 0.00000, 179.45996);
    CreateObject(974, 2071.59033, -1841.06470, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 2071.61841, -1847.66650, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.18372, -1826.31311, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.28101, -1832.92761, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.25305, -1839.58594, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.20557, -1846.22290, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.25183, -1852.79065, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.24268, -1859.49121, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.29187, -1866.17285, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.27332, -1872.78564, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.25769, -1879.41748, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.19946, -1886.09058, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.23901, -1892.72717, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.23108, -1899.42041, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.20813, -1906.07410, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.20007, -1912.70288, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1972.21936, -1919.13257, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1975.36877, -1922.43274, 15.06000,   0.00000, 0.00000, 179.45996);
    CreateObject(974, 1982.02844, -1922.46765, 15.06000,   0.00000, 0.00000, 179.45996);
    CreateObject(974, 1988.69238, -1922.50146, 15.06000,   0.00000, 0.00000, 179.81995);
    CreateObject(974, 1995.29431, -1922.49231, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2002.01807, -1922.45825, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2008.54175, -1922.41870, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2015.16394, -1922.42261, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2021.83289, -1922.41528, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2028.53333, -1922.43799, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2035.19824, -1922.38672, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2041.83472, -1922.34058, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(11387, 1993.75806, -1884.02478, 15.72290,   0.00000, -0.50000, 0.00000);
    CreateObject(11389, 1984.39832, -1868.09033, 15.07983,   0.00000, 0.00000, 0.00000);
    CreateObject(11390, 1984.42859, -1867.82532, 16.29990,   0.00000, 0.00000, 0.00000);
    CreateObject(11393, 1988.98389, -1873.37805, 14.06340,   0.00000, 0.00000, 0.00000);
    CreateObject(11391, 1976.47852, -1876.09961, 13.80000,   0.00000, 0.00000, 0.00000);
    CreateObject(974, 1971.66614, -1859.38953, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1971.69531, -1866.07080, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 1971.64990, -1852.78345, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(11326, 1975.14099, -1900.95947, 14.98140,   0.00000, 0.00000, -90.00000);
    CreateObject(19425, 2071.41577, -1877.21838, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.42529, -1873.91565, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.41504, -1870.61414, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.43213, -1879.27930, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.44214, -1898.52002, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.43823, -1901.75317, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.42725, -1905.01440, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.41943, -1905.79517, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.35229, -1838.08960, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.35718, -1834.86377, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.37598, -1831.60864, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(19425, 2071.38135, -1828.37415, 12.54805,   0.00000, 0.00000, 89.93999);
    CreateObject(1676, 2005.79028, -1876.86572, 14.14060,   0.00000, 0.00000, 87.58917);
    CreateObject(1676, 2005.78467, -1879.00708, 14.14060,   0.00000, 0.00000, 88.30920);
    CreateObject(11360, 1994.00439, -1864.39368, 14.39820,   0.00000, 0.00000, 0.00000);
    CreateObject(11359, 1979.88550, -1884.40149, 14.41450,   0.00000, 0.00000, 0.00000);
    CreateObject(11388, 1984.35107, -1867.99915, 18.71500,   0.00000, 0.00000, 0.00000);
    CreateObject(11392, 1985.49121, -1865.34729, 12.55000,   0.00000, 0.00000, 0.00000);
    CreateObject(974, 1972.24109, -1913.59595, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(7520, 2012.63770, -1837.34265, 12.59310,   0.00000, 0.00000, 0.00000);
    CreateObject(11391, 2004.96802, -1838.18457, 13.79800,   0.00000, 0.00000, -88.44000);
    CreateObject(14826, 2012.38208, -1852.49915, 13.04980,   0.00000, 0.00000, 90.12000);
    CreateObject(3594, 1979.18823, -1836.98779, 13.00000,   12.00000, 0.00000, 0.00000);
    CreateObject(3593, 1979.33545, -1834.67883, 12.73366,   0.00000, 0.00000, -67.86005);
    CreateObject(13591, 1978.43835, -1826.01807, 13.00000,   0.00000, 0.00000, 0.00000);
    CreateObject(18451, 1986.13721, -1850.34558, 13.08602,   0.00000, 0.00000, 178.67999);
    CreateObject(19872, 1979.21765, -1864.52173, 12.00000,   0.00000, 0.00000, 90.12005);
    CreateObject(19817, 1981.20520, -1856.06311, 11.99000,   0.00000, 0.00000, 90.12000);
    CreateObject(19872, 2016.71436, -1840.46887, 11.99000,   0.00000, 0.00000, 1.20000);
    CreateObject(19817, 2025.13879, -1842.50574, 11.99000,   0.00000, 0.00000, 1.56000);
    CreateObject(11547, 2030.79321, -1915.79419, 15.30000,   0.00000, 0.00000, 90.06010);
    CreateObject(11547, 2014.17761, -1915.83496, 15.30000,   0.00000, 0.00000, 90.06010);
    CreateObject(2165, 1989.79321, -1877.57397, 12.50000,   0.00000, 0.00000, 70.68000);
    CreateObject(1663, 1988.54089, -1876.30176, 13.00000,   0.00000, 0.00000, 33.84001);
    CreateObject(1663, 1990.96216, -1877.76392, 13.00000,   0.00000, 0.00000, 222.84009);
    CreateObject(3566, 1976.01294, -1839.95203, 15.00000,   0.00000, 0.00000, 0.00000);
    CreateObject(925, 1992.70178, -1850.77905, 13.90000,   0.00000, 0.00000, 0.00000);
    CreateObject(2567, 1978.76965, -1842.68433, 14.61284,   0.00000, 0.00000, 449.45996);
    CreateObject(3761, 1991.27747, -1826.16394, 14.43300,   0.00000, 0.00000, 176.99989);
    CreateObject(11417, 2006.51672, -1877.18506, 22.12720,   0.00000, 0.00000, -3.60000);
    CreateObject(910, 1987.43408, -1824.79382, 13.90910,   0.00000, 0.00000, 0.00000);
    CreateObject(1415, 1993.15295, -1827.71265, 12.97740,   0.00000, 0.00000, -0.30000);
    CreateObject(1358, 1976.89221, -1850.34131, 13.84730,   0.00000, 0.00000, 0.00000);
    CreateObject(849, 1980.86584, -1836.04761, 12.81411,   0.00000, 0.00000, 0.00000);
    CreateObject(849, 1979.99426, -1836.94165, 12.81411,   0.00000, 0.00000, 0.00000);
    CreateObject(849, 1981.07263, -1836.71606, 12.81411,   0.00000, 0.00000, 0.00000);
    CreateObject(849, 1977.79309, -1851.26184, 12.81411,   0.00000, 0.00000, 0.00000);
    CreateObject(851, 1978.13464, -1849.63843, 13.02830,   0.00000, 0.00000, 0.00000);
    CreateObject(19898, 2026.74695, -1896.54468, 12.70720,   0.00000, 0.00000, 0.00000);
    CreateObject(19898, 2010.91150, -1887.28345, 12.70720,   0.00000, 0.00000, 45.66000);
    CreateObject(19898, 2040.58069, -1875.55591, 12.70720,   0.00000, 0.00000, 144.59996);
    CreateObject(19898, 2034.70410, -1881.40833, 12.70720,   0.00000, 0.00000, 128.69995);
    CreateObject(19898, 2004.78430, -1862.92334, 12.70720,   0.00000, 0.00000, 128.69995);
    CreateObject(13027, 2055.13306, -1855.65173, 15.73900,   0.00000, 0.00000, 90.54000);
    CreateObject(8947, 2059.50000, -1855.82996, 15.91600,   0.00000, 0.00000, -90.00000);
    CreateObject(3037, 2047.32935, -1856.41479, 14.63690,   0.00000, 0.00000, 0.00000);
    CreateObject(974, 2048.51123, -1922.30542, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2055.16821, -1922.27124, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2061.81348, -1922.25378, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2068.45898, -1922.24194, 15.06000,   0.00000, 0.00000, 180.11993);
    CreateObject(974, 2071.82788, -1859.80249, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 2071.82861, -1853.13464, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(974, 2071.83960, -1851.77283, 15.06000,   0.00000, 0.00000, 90.00000);
    CreateObject(8661, 1997.45081, -1843.02258, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 2031.56763, -1852.52417, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 2033.64844, -1846.98987, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 2069.55566, -1850.57190, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 2069.57983, -1852.97534, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 1988.27722, -1843.17310, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 1988.84155, -1858.92407, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 1990.14502, -1875.53796, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 2004.59937, -1895.50684, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 2004.83948, -1899.64270, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 2000.69080, -1902.30127, 11.23200,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 2014.82324, -1905.59204, 11.50400,   180.00000, 0.00000, -46.56000);
    CreateObject(8661, 1986.47546, -1859.06799, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 1987.31091, -1847.17224, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 1987.36536, -1843.03674, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 1987.65552, -1863.76758, 10.82400,   180.00000, 0.00000, 0.00000);
    CreateObject(8661, 1992.33325, -1877.80554, 10.82400,   180.00000, 0.00000, 0.00000);

// ===================================FDHQ ==========================
    CreateObject(19370, 1715.54895, -1130.55481, 24.90710,   0.00000, 0.00000, 2.30000);
    CreateObject(19370, 1715.67627, -1133.73181, 24.90710,   0.00000, 0.00000, 2.30000);
    CreateObject(19370, 1715.67627, -1133.73181, 24.90710,   0.00000, 0.00000, 2.30000);
    CreateObject(19370, 1715.80225, -1136.87976, 24.90710,   0.00000, 0.00000, 2.30000);
    CreateObject(19370, 1715.94336, -1140.10547, 24.90710,   0.00000, 0.00000, 2.30000);
    CreateObject(19370, 1719.86450, -1130.36951, 24.78710,   0.00000, 0.00000, 1.30000);
    CreateObject(19370, 1720.05554, -1138.76807, 24.78710,   0.00000, 0.00000, 1.30000);
    CreateObject(19370, 1719.98315, -1135.55005, 24.78710,   0.00000, 0.00000, 1.30000);
    CreateObject(19370, 1718.37500, -1142.41003, 24.70710,   0.00000, 0.00000, 89.69990);
    CreateObject(19370, 1718.33984, -1131.92078, 24.70710,   0.00000, 0.00000, 89.69990);
    CreateObject(2607, 1719.46704, -1135.77246, 23.29840,   0.00000, 0.00000, 90.39990);
    CreateObject(2607, 1719.48877, -1138.65515, 23.29840,   0.00000, 0.00000, 90.39990);
    CreateObject(1491, 1716.16602, -1141.31226, 23.10290,   0.00000, 0.00000, -41.80000);
    CreateObject(19370, 1718.37622, -1142.43286, 28.12720,   0.00000, 0.00000, 89.69990);
    CreateObject(19370, 1715.95251, -1140.12256, 28.29720,   0.00000, 0.00000, 2.09990);
    CreateObject(19370, 1715.83447, -1136.90515, 28.29720,   0.00000, 0.00000, 2.09990);
    CreateObject(19370, 1715.73682, -1133.74585, 28.29720,   0.00000, 0.00000, 2.09990);
    CreateObject(19370, 1715.62024, -1130.56885, 28.29720,   0.00000, 0.00000, 2.09990);
    CreateObject(2811, 1715.94165, -1129.27026, 23.02250,   0.00000, 0.00000, 0.00000);
    CreateObject(19168, 1715.97534, -1134.74353, 27.33150,   94.59990, -4.19990, 94.30000);
    CreateObject(1806, 1718.48096, -1138.69165, 23.08250,   0.00000, 0.00000, -93.49990);
    CreateObject(1806, 1718.33411, -1135.67761, 23.08250,   0.00000, 0.00000, -93.49990);
    CreateObject(1738, 1718.76575, -1141.99255, 23.56830,   0.00000, 0.00000, 0.00000);
    CreateObject(18885, 1719.11768, -1129.70654, 24.23860,   0.00000, 0.00000, -89.69980);
    CreateObject(366, 1719.30994, -1131.75854, 23.69820,   2.49990, 40.19990, 12.70000);
    CreateObject(1211, 1719.50195, -1130.96655, 23.70640,   0.00000, 0.00000, 0.00000);
    CreateObject(1442, 1718.56165, -1131.44751, 23.65320,   0.00000, 0.00000, 0.00000);
    CreateObject(19330, 1719.17847, -1129.97302, 25.40220,   1.19990, -88.80000, 0.00000);
    CreateObject(19330, 1719.17896, -1129.36121, 25.49500,   0.50000, -88.80000, 103.89990);
    CreateObject(19632, 1718.55017, -1131.38306, 23.98270,   0.00000, 0.00000, 0.00000);
    CreateObject(3034, 1716.65771, -1141.83142, 27.29300,   -0.69990, -90.29990, -43.39990);
    CreateObject(11008, 1729.43823, -1109.87280, 29.95480,   0.00000, 0.00000, -91.00000);
    
// ========================================== PRIMARIE ===============================
    CreateDynamicObject(10412, 1478.31519, -1786.28577, 39.55844,   0.00000, 0.00000, 121.80000);
    CreateDynamicObject(19545, 1484.64136, -1775.18945, 12.55500,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19545, 1470.88965, -1775.19849, 12.55400,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19543, 1456.01245, -1775.40540, 12.55340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19543, 1441.00879, -1775.87146, 12.55340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19543, 1426.05103, -1779.36267, 12.55340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19543, 1411.09399, -1782.84668, 12.55340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19543, 1408.93713, -1781.63611, 12.56610,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19543, 1499.53015, -1775.37097, 12.55340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19543, 1514.49121, -1775.40308, 12.55340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19543, 1529.39880, -1776.27258, 12.55340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19543, 1544.31287, -1783.08105, 12.55340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19543, 1550.65759, -1782.84021, 12.55340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(970, 1492.55432, -1775.01807, 13.08532,   0.00000, 0.00000, 95.64001);
    CreateDynamicObject(970, 1492.14478, -1770.92188, 13.08532,   0.00000, 0.00000, 95.64001);
    CreateDynamicObject(970, 1491.94458, -1766.80737, 13.08532,   0.00000, 0.00000, 90.30001);
    CreateDynamicObject(970, 1491.93225, -1762.68274, 13.08532,   0.00000, 0.00000, 90.30001);
    CreateDynamicObject(970, 1491.98584, -1750.31091, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(970, 1492.00366, -1746.17029, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(970, 1463.49451, -1746.02722, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(970, 1463.48022, -1750.16736, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(970, 1463.47156, -1754.28564, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(970, 1463.45850, -1758.43152, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(970, 1463.43457, -1762.56226, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(970, 1463.45544, -1766.67786, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(970, 1463.45349, -1770.82520, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(970, 1463.45166, -1774.94873, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(970, 1463.46240, -1779.08948, 13.08532,   0.00000, 0.00000, 89.76002);
    CreateDynamicObject(8645, 1448.75098, -1744.22998, 13.28021,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(8645, 1419.32776, -1744.27100, 13.28021,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(8645, 1415.74365, -1744.25647, 13.28021,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(8645, 1401.13232, -1758.84802, 13.28020,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(8645, 1401.16492, -1788.23865, 13.28020,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(8645, 1401.18579, -1817.57776, 13.28020,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(8645, 1401.24084, -1846.90234, 13.28020,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(8645, 1506.79248, -1744.10632, 13.28020,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(8645, 1536.36646, -1744.11548, 13.28020,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(8645, 1543.91260, -1744.10522, 13.28020,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(8645, 1558.45166, -1758.74438, 13.28020,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(8645, 1558.39050, -1788.22485, 13.28020,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(8645, 1558.36975, -1817.80554, 13.28020,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1558.44556, -1826.16772, 13.40961,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1558.47034, -1813.39966, 13.40961,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1558.44543, -1800.63745, 13.40961,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1558.45715, -1787.83337, 13.40961,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1558.38477, -1774.67847, 13.40961,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1558.37512, -1761.90381, 13.40961,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1558.38110, -1750.71313, 13.40961,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1551.74390, -1744.09949, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1538.95776, -1744.13281, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1526.15747, -1744.15417, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1513.37769, -1744.14343, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1502.06299, -1744.13062, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1457.00049, -1744.21021, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1502.06299, -1744.13062, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1444.23572, -1744.21191, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1431.44958, -1744.23108, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1418.64282, -1744.25061, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1407.44653, -1744.27881, 13.40960,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(984, 1401.12683, -1750.81470, 13.40960,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1401.12451, -1763.61609, 13.40960,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1401.12708, -1776.41638, 13.40960,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1401.16138, -1789.18347, 13.40960,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1401.13440, -1801.97180, 13.40960,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(984, 1401.12988, -1814.76343, 13.40960,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(993, 1402.89392, -1838.09460, 13.69810,   0.00000, 0.00000, 89.99999);
    CreateDynamicObject(993, 1402.90869, -1828.13452, 13.69810,   0.00000, 0.00000, 89.99999);
    CreateDynamicObject(993, 1402.89124, -1818.14575, 13.69810,   0.00000, 0.00000, 89.99999);
    CreateDynamicObject(993, 1405.51587, -1815.34863, 13.69810,   0.00000, 0.00000, -3.18001);
    CreateDynamicObject(710, 1447.39697, -1748.22986, 28.16340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(710, 1424.88843, -1748.01379, 28.16340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(710, 1406.40320, -1748.23010, 28.16340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(710, 1406.04639, -1764.65979, 28.16340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(710, 1554.52734, -1764.55872, 28.16340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(710, 1553.94690, -1749.46594, 28.16340,   0.00000, 0.00000, 0.06000);
    CreateDynamicObject(710, 1535.30396, -1748.63391, 28.16340,   0.00000, 0.00000, 0.06000);
    CreateDynamicObject(710, 1517.20251, -1747.96533, 28.16340,   0.00000, 0.00000, 0.06000);
    CreateDynamicObject(1566, 1476.31848, -1779.32605, 15.95420,   0.00000, 0.00000, 2.16000);
    CreateDynamicObject(4199, 1524.01746, -1855.85120, 14.43890,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(993, 1504.92212, -1845.86304, 13.69810,   0.00000, 0.00000, 89.99999);
    CreateDynamicObject(993, 1504.88391, -1840.60791, 13.69810,   0.00000, 0.00000, 89.99999);
    CreateDynamicObject(993, 1507.64966, -1837.71326, 13.69810,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(993, 1517.64319, -1837.70972, 13.69810,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(993, 1527.65698, -1837.68103, 13.69810,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(993, 1537.65051, -1837.73474, 13.69810,   0.00000, 0.00000, -0.48000);
    CreateDynamicObject(993, 1547.65527, -1837.81860, 13.69810,   0.00000, 0.00000, -0.48000);
    CreateDynamicObject(993, 1550.96985, -1837.83911, 13.69810,   0.00000, 0.00000, -0.48000);
    CreateDynamicObject(7921, 1557.58643, -1834.28796, 13.53862,   0.00000, 0.00000, 0.72001);
    CreateDynamicObject(7921, 1556.88806, -1834.92981, 13.53862,   0.00000, 0.00000, -90.11992);
    CreateDynamicObject(8650, 1487.52075, -1835.35840, 13.61300,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(8650, 1457.05798, -1835.35071, 13.61300,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(8650, 1426.60547, -1835.34412, 13.61300,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(8650, 1416.53699, -1835.35510, 13.61300,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(710, 1553.69202, -1817.66565, 28.16340,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(710, 1405.95093, -1820.98352, 28.16340,   0.00000, 0.00000, 0.18000);
    CreateDynamicObject(710, 1407.67627, -1831.95166, 28.16340,   0.00000, 0.00000, 0.54000);
    CreateDynamicObject(710, 1455.15027, -1832.74475, 28.16340,   0.00000, 0.00000, 0.54000);
    CreateDynamicObject(710, 1503.55371, -1832.46277, 28.16340,   0.00000, 0.00000, 0.18000);

	// ================================ semne prin oras =========================

	CreateDynamicObject(1283, 1367.82959, -1137.39001, 25.84375,   356.85840, 0.00000, 88.65843);
	CreateDynamicObject(19976, 1694.76892, -1743.35474, 12.54473,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19976, 1684.28845, -1722.33545, 12.54473,   0.00000, 0.00000, 180.54008);
	CreateDynamicObject(19966, 1699.54028, -1726.96057, 12.54417,   0.00000, 0.00000, 91.02000);
	CreateDynamicObject(19966, 1679.40918, -1737.66321, 12.54417,   0.00000, 0.00000, -90.17998);
	CreateDynamicObject(19966, 1574.93848, -1742.67969, 12.54468,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1524.32312, -1722.11414, 12.54641,   0.00000, 0.00000, 180.54005);
	CreateDynamicObject(19966, 1539.65552, -1622.78052, 12.54616,   0.00000, 0.00000, 90.24000);
	CreateDynamicObject(19966, 1535.08960, -1602.55664, 12.54504,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1439.65710, -1587.00623, 12.54675,   0.00000, 0.00000, 90.84003);
	CreateDynamicObject(19966, 1419.45337, -1598.02124, 12.54767,   0.00000, 0.00000, -90.36001);
	CreateDynamicObject(19977, 1434.87402, -1602.57190, 12.54726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19977, 1424.17249, -1582.24451, 12.54726,   0.00000, 0.00000, 180.83997);
	CreateDynamicObject(19966, 1419.38940, -1652.99939, 12.54759,   0.00000, 0.00000, -90.36002);
	CreateDynamicObject(19966, 1424.02356, -1721.77405, 12.54542,   0.00000, 0.00000, -180.29999);
	CreateDynamicObject(19966, 1394.65906, -1742.13818, 12.54603,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1351.82214, -1742.43677, 12.54656,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1322.54407, -1726.83142, 12.54897,   0.00000, 0.00000, 90.17997);
	CreateDynamicObject(19966, 1322.75867, -1566.85071, 12.54846,   0.00000, 0.00000, 90.24005);
	CreateDynamicObject(19953, 1422.18335, -1390.10278, 12.56809,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19953, 1395.58643, -1446.19568, 12.54831,   0.00000, 0.00000, -180.05997);
	CreateDynamicObject(19966, 1287.28992, -1717.37390, 12.54781,   0.00000, 0.00000, -87.84000);
	CreateDynamicObject(19966, 1287.24475, -1577.46790, 12.54676,   0.00000, 0.00000, -89.99998);
	CreateDynamicObject(19966, 1190.97229, -1562.14697, 12.54738,   0.00000, 0.00000, -180.78008);
	CreateDynamicObject(19966, 1155.41541, -1582.35071, 12.45540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 923.27094, -1582.09241, 12.54343,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 912.09076, -1562.11194, 12.54559,   0.00000, 0.00000, -177.84001);
	CreateDynamicObject(19977, 906.62543, -1577.49390, 12.54473,   0.00000, 0.00000, -90.17992);
	CreateDynamicObject(19977, 928.00549, -1567.11279, 12.54473,   0.00000, 0.00000, 90.78008);
	CreateDynamicObject(19966, 826.73724, -1610.29639, 12.54615,   0.00000, 0.00000, -128.03987);
	CreateDynamicObject(19966, 800.30438, -1680.21985, 12.54577,   0.00000, 0.00000, -90.71995);
	CreateDynamicObject(19966, 650.03119, -1667.07092, 13.75177,   0.00000, 0.00000, 90.54003);
	CreateDynamicObject(19966, 618.43579, -1682.52637, 15.16216,   0.00000, 0.00000, -95.75998);
	CreateDynamicObject(19966, 618.73981, -1718.01880, 13.00988,   0.00000, 0.00000, -180.54007);
	CreateDynamicObject(19977, 643.44336, -1727.59253, 13.03872,   0.00000, 0.00000, 77.10000);
	CreateDynamicObject(19966, 617.24591, -1597.49390, 15.15710,   0.00000, 0.00000, -86.52002);
	CreateDynamicObject(19966, 647.50262, -1581.35510, 14.51744,   0.00000, 0.00000, 91.85999);
	CreateDynamicObject(19966, 802.73364, -1415.96985, 12.54990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 791.51715, -1384.96948, 12.68670,   0.00000, 0.00000, -177.65999);
	CreateDynamicObject(19966, 807.50653, -1314.95886, 12.54598,   0.00000, 0.00000, 86.33999);
	CreateDynamicObject(19966, 787.21893, -1325.46875, 12.54371,   0.00000, 0.00000, -90.71999);
	CreateDynamicObject(19977, 802.83801, -1337.61743, 12.54345,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19977, 792.18536, -1310.01990, 12.54631,   0.00000, 0.00000, -180.23999);
	CreateDynamicObject(19977, 792.15973, -1130.61011, 22.82005,   0.00000, 0.00000, 181.01994);
	CreateDynamicObject(19977, 802.66919, -1161.27039, 22.59573,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 807.71265, -1135.01563, 22.82318,   0.00000, 0.00000, 90.41998);
	CreateDynamicObject(19966, 977.92938, -955.08197, 39.87534,   0.00000, 0.00000, -116.09999);
	CreateDynamicObject(19966, 968.04041, -982.65143, 38.10172,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 972.91199, -1033.61475, 29.25200,   0.00000, 0.00000, 89.76001);
	CreateDynamicObject(19977, 967.58173, -1049.48022, 29.19307,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19977, 957.41766, -1029.68420, 29.23869,   0.00000, 0.00000, -182.51996);
	CreateDynamicObject(19966, 957.33392, -1130.54590, 22.82368,   0.00000, 0.00000, -181.68002);
	CreateDynamicObject(19966, 947.81940, -1159.47961, 22.76666,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1067.80920, -1159.29871, 22.82557,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1077.18787, -1130.87939, 22.82465,   0.00000, 0.00000, 180.95998);
	CreateDynamicObject(19966, 1157.18335, -1130.84265, 22.82318,   0.00000, 0.00000, -182.09996);
	CreateDynamicObject(19966, 1221.85486, -1159.50134, 22.61670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1257.01599, -1130.67725, 22.84482,   0.00000, 0.00000, -190.20003);
	CreateDynamicObject(19966, 1460.18127, -1171.13574, 22.81661,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1476.58472, -1150.44214, 22.81661,   0.00000, 0.00000, 182.03998);
	CreateDynamicObject(19966, 1487.61023, -1044.80554, 22.81801,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19961, 1503.53467, -1040.54077, 22.81172,   0.00000, 0.00000, -94.25996);
	CreateDynamicObject(19960, 1583.10571, -1141.22400, 22.82358,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1572.33545, -1150.43567, 23.06105,   0.00000, 0.00000, -177.77997);
	CreateDynamicObject(19966, 1632.35034, -1150.23853, 23.06105,   0.00000, 0.00000, -177.77997);
	CreateDynamicObject(19966, 1720.15906, -1170.93652, 22.82011,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1724.82190, -1295.51416, 12.54470,   0.00000, 0.00000, 92.09999);
	CreateDynamicObject(19966, 1704.75281, -1308.75989, 12.54470,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(19977, 1709.40430, -1288.40002, 12.54480,   0.00000, 0.00000, -190.08006);
	CreateDynamicObject(19977, 1720.16125, -1311.22375, 12.54484,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1773.51233, -1458.76147, 12.54583,   0.00000, 0.00000, -18.96000);
	CreateDynamicObject(19966, 1981.70886, -1450.81567, 12.55411,   0.00000, 0.00000, -181.07999);
	CreateDynamicObject(19966, 2102.48657, -1471.25049, 22.99392,   0.00000, 0.00000, -92.58002);
	CreateDynamicObject(19966, 2117.79614, -1394.34668, 22.99408,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2161.48755, -1374.21106, 22.98012,   0.00000, 0.00000, -180.77995);
	CreateDynamicObject(19966, 2217.96606, -1394.62000, 22.99486,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2265.57275, -1374.28040, 22.98304,   0.00000, 0.00000, -183.83994);
	CreateDynamicObject(19966, 2280.27319, -1389.58276, 23.07028,   0.00000, 0.00000, -91.74001);
	CreateDynamicObject(19966, 2292.92847, -1378.87561, 23.07030,   0.00000, 0.00000, 91.74000);
	CreateDynamicObject(19966, 2299.28052, -1374.39954, 23.07030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19966, 2347.80884, -1395.86450, 22.98146,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2365.69141, -1374.14343, 23.01219,   0.00000, 0.00000, -182.10001);
	CreateDynamicObject(19954, 2392.17651, -1383.72717, 22.98961,   0.00000, 0.00000, -76.55999);
	CreateDynamicObject(19953, 2392.69312, -1384.15784, 22.99270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19953, 2391.03662, -1445.78564, 22.99270,   0.00000, 0.00000, 181.19998);
	CreateDynamicObject(19954, 2391.54980, -1446.21130, 22.98961,   0.00000, 0.00000, -257.51999);
	CreateDynamicObject(19966, 2436.37134, -1454.45239, 22.98927,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2445.55664, -1434.04285, 22.99130,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19966, 2456.75024, -1264.99866, 22.94631,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2445.34644, -1247.75476, 22.84800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19966, 2381.49390, -1251.00732, 22.87260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19966, 2376.44849, -1164.52344, 26.59838,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2293.11646, -1144.66516, 25.75790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19966, 2280.94702, -1154.81726, 25.73060,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19966, 2276.34204, -1158.18091, 25.72835,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2082.18506, -1295.64417, 22.98470,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19966, 2056.92822, -1346.64832, 22.97850,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19966, 2056.76025, -1266.34082, 22.96870,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19954, 1941.91443, -1610.87134, 12.54284,   0.00000, 0.00000, -93.65999);
	CreateDynamicObject(19953, 1942.30505, -1611.33533, 12.54230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1936.13977, -1742.12756, 12.54470,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19966, 1966.95471, -1762.32117, 12.54503,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 1996.31409, -1742.02966, 12.54060,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19966, 2011.61609, -1666.46667, 12.54520,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19966, 2033.84021, -1602.23193, 12.53860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19966, 2087.05566, -1622.39978, 12.53952,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2087.01123, -1602.42676, 12.54750,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19966, 2186.12280, -1645.53857, 14.46360,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19966, 2205.70117, -1651.93127, 14.28980,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19966, 2232.35205, -1662.66919, 14.47011,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2220.22876, -1642.52380, 14.44090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19966, 2337.46484, -1653.59607, 12.40800,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19966, 2348.06177, -1669.02185, 12.52726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2425.60962, -1722.57410, 12.77070,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19966, 2477.50806, -1722.00037, 12.54230,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19966, 2533.16553, -1742.40930, 12.53951,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19966, 2632.97290, -1737.68494, 9.88040,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19966, 2652.95581, -1652.09119, 9.85540,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19991, 2618.22998, -1727.16809, 10.74630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19987, 1558.74927, -1727.01111, 12.37320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19987, 1547.70398, -1587.06384, 12.54580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19987, 1424.21863, -1574.65942, 12.54610,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19987, 1414.34448, -1597.82166, 12.54320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19987, 1420.21582, -1737.72937, 12.54420,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19991, 1419.51636, -1726.92371, 12.54580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19991, 1559.15222, -1737.54980, 12.54540,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19991, 1547.49805, -1597.48511, 12.54410,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19991, 1434.77380, -1575.21606, 12.54543,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19991, 1414.62622, -1587.05994, 12.54590,   0.00000, 0.00000, 90.00000);
	

// =================================== EMS ==========================
	CreateDynamicObject(1999,1503.7299805,-1546.1999512,1969.9200439,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1523,1512.0478516,-1536.0292969,1969.8399658,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1523,1499.2460938,-1536.0292969,1969.8399658,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1523,1505.6474609,-1536.0292969,1969.8399658,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1523,1513.6464844,-1556.3349609,1969.8399658,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1499.6999512,-1531.9000244,1970.4000244,0.0000000,0.0000000,209.9981689);
    CreateDynamicObject(1811,1500.0999756,-1553.6999512,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1500.0999756,-1554.5000000,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1500.0999756,-1555.3000488,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1500.0999756,-1556.0999756,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1500.0999756,-1558.8000488,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1500.0999756,-1559.5999756,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1500.0999756,-1560.4000244,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1500.0999756,-1561.1999512,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1500.0999756,-1562.0000000,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1499.3000488,-1562.0000000,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1499.3000488,-1561.1999512,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1499.3000488,-1560.4000244,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1499.3000488,-1559.5999756,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1499.3000488,-1558.8000488,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1499.3000488,-1556.0999756,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1499.3000488,-1555.3000488,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1499.3000488,-1554.5000000,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1499.3000488,-1553.6999512,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1499.3000488,-1552.9000244,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.0000000,-1562.0000000,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.0000000,-1561.1999512,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.0000000,-1560.4000244,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.0000000,-1559.5999756,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.0000000,-1558.8000488,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.0000000,-1556.1999512,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.0000000,-1555.4000244,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.0000000,-1554.5999756,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.0000000,-1553.8000488,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.0000000,-1553.0000000,1970.4000244,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1811,1503.8000488,-1553.0000000,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1503.8000488,-1553.8000488,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1503.8000488,-1554.5999756,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1503.8000488,-1555.4000244,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1503.8000488,-1556.1999512,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1503.8000488,-1558.8000488,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1503.8000488,-1559.5999756,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1503.8000488,-1560.4000244,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1503.8000488,-1561.1999512,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(1811,1503.8000488,-1562.0000000,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(2315,1498.9000244,-1552.0000000,1969.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2315,1499.0000000,-1563.0999756,1969.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2315,1502.6999512,-1563.0999756,1969.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2315,1502.5999756,-1552.0000000,1969.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2855,1499.4000244,-1552.0000000,1970.3000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2854,1500.1999512,-1552.1999512,1970.3000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2853,1503.3000488,-1552.0000000,1970.3000488,0.0000000,0.0000000,120.0000000);
    CreateDynamicObject(2852,1500.5000000,-1563.0999756,1970.2869873,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(14518,1490.4000244,-1564.0000000,1971.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(14518,1498.6999512,-1564.0000000,1971.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(14518,1492.3000488,-1537.1999512,1971.0999756,0.0000000,0.0000000,312.0000000);
    CreateDynamicObject(1999,1503.7299805,-1548.3000488,1969.9200439,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2253,1504.0000, -1552.0000, 1970.5601,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2253,1502.9000, -1563.2000, 1970.5580,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2205,1503.7010498,-1544.6999512,1969.4000244,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2205,1503.7020264,-1547.0000000,1969.4000244,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2205,1503.6999512,-1549.1800537,1969.4000244,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2205,1503.6999512,-1546.9002686,1969.8000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2205,1503.7020264,-1544.6999512,1969.8010254,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2205,1503.7020264,-1549.1800537,1969.8010254,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2205,1503.8010254,-1543.9000244,1969.5300293,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2205,1503.8000488,-1546.0999756,1969.5310059,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2205,1503.7989502,-1548.3000488,1969.5300293,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2315,1497.4000244,-1537.9000244,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(14518,1492.3000488,-1536.0999756,1971.0999756,0.0000000,0.0000000,311.9952393);
    CreateDynamicObject(14518,1492.2998047,-1532.0000000,1971.0999756,0.0000000,0.0000000,311.9952393);
    CreateDynamicObject(2205,1500.1992188,-1530.5996094,1969.8000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(14518,1499.4000244,-1519.4000244,1971.0999756,0.0000000,0.0000000,79.9914551);
    CreateDynamicObject(14518,1494.4000244,-1519.4000244,1971.0999756,0.0000000,0.0000000,79.9914551);
    CreateDynamicObject(1811,1500.0996094,-1552.8994141,1970.4000244,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(2190,1500.0000000,-1529.4799805,1969.8000488,0.0000000,90.0000000,90.0000000);
    CreateDynamicObject(2074,1500.0999756,-1529.9000244,1970.9699707,0.0000000,180.0000000,0.0000000);
    CreateDynamicObject(18608,1507.0000000,-1538.5000000,1973.9480,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(18608,1521.8000488,-1543.8000488,1973.9480,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(18608,1521.8000488,-1554.5000000,1973.9480,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(18608,1493.9000244,-1559.9000244,1973.9480,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(18608,1501.8000488,-1554.9000244,1973.9480,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(18608,1492.5999756,-1530.6999512,1973.9480,0.0000000,0.0000000,270.0000000);
    //CreateDynamicObject(18608,1513.9000244,-1530.4000244,1973.9480,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2253,1503.5000000,-1548.5000000,1971.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1671,1501.5999756,-1530.0000000,1970.3000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2163,1500.3000488,-1526.5000000,1969.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2164,1498.5000000,-1526.5000000,1969.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2611,1502.7740479,-1530.4000244,1971.5999756,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(14518,1492.3000488,-1530.9000244,1971.0999756,0.0000000,0.0000000,311.9952393);
    CreateDynamicObject(3394,1508.0000000,-1527.0999756,1969.8000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(3395,1503.5999756,-1530.5999756,1969.8000488,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(3396,1504.8299561,-1527.1040039,1969.7989502,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(3397,1509.0999756,-1530.6999512,1969.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3397,1516.0999756,-1530.6999512,1969.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3395,1510.5000000,-1530.5999756,1969.8000488,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(3394,1515.0000000,-1527.0999756,1969.8000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(3396,1511.8199463,-1527.0999756,1969.7989502,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(16101,1512.7998047,-1530.0000000,1961.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(16101,1505.9000244,-1530.0000000,1961.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1009,1505.9599609,-1529.9899902,1971.5999756,0.0000000,270.0000000,180.0000000);
    CreateDynamicObject(1009,1509.3699951,-1562.2939453,1971.3000488,0.0000000,270.0000000,0.0000000);
    CreateDynamicObject(2994,1506.5000000,-1529.1999512,1970.3000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2994,1513.4000244,-1529.1999512,1970.3000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2007,1516.1999512,-1533.0999756,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1516.1999512,-1534.0999756,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1516.1999512,-1535.0999756,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1516.1999512,-1535.0999756,1971.1999512,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1516.1999512,-1534.0999756,1971.1999512,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1516.1999512,-1533.0999756,1971.1999512,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1509.1999512,-1533.0999756,1971.1999512,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1509.1999512,-1533.0999756,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1509.1999512,-1534.0999756,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1509.1999512,-1535.0999756,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1509.1999512,-1535.0999756,1971.1999512,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2007,1509.1992188,-1534.0996094,1971.1999512,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1523,1511.8100586,-1557.1479492,1969.8399658,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(19466,1511.8000488,-1560.5999756,1971.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19466,1511.8000488,-1562.8409424,1971.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(11237,1527.6999512,-1561.6999512,1993.7321,0.0000000,180.0000000,0.0000000);
    CreateDynamicObject(18608,1521.9000244,-1560.0999756,1973.9480,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(3053,1508.9000244,-1561.6999512,1972.960000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3056,1508.9000244,-1561.6999512,1972.9680,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(3396,1513.6999512,-1563.0000000,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(3395,1516.0999756,-1560.5999756,1969.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(16101,1509.4000244,-1562.3000488,1960.6999512,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1009,1512.8593750,-1529.9892578,1971.5999756,0.0000000,269.9890137,179.9945068);
    CreateDynamicObject(3394,1508.5999756,-1557.0000000,1969.8000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2951,1511.8399658,-1561.5999756,1972.0999756,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2253,1499.8994141,-1529.0000000,1971.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2253,1503.5000000,-1544.0999756,1971.0000000,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1671,1511.0000000,-1543.9000244,1970.3000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1671,1510.8000488,-1542.9000244,1970.3000488,0.0000000,0.0000000,179.9975586);
    CreateDynamicObject(1671,1509.0000000,-1544.6999512,1970.3000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1671,1509.1999512,-1542.8000488,1970.3000488,0.0000000,0.0000000,190.0000000);
    CreateDynamicObject(1671,1507.0000000,-1542.9000244,1970.3000488,0.0000000,0.0000000,165.9975586);
    CreateDynamicObject(1671,1507.5000000,-1549.0999756,1970.3000488,0.0000000,0.0000000,279.9924316);
    CreateDynamicObject(1671,1507.5000000,-1551.0000000,1970.3000488,0.0000000,0.0000000,265.9920654);
    CreateDynamicObject(1671,1507.5000000,-1553.0000000,1970.3000488,0.0000000,0.0000000,269.9899902);
    CreateDynamicObject(1671,1506.8000488,-1554.8000488,1970.3000488,0.0000000,0.0000000,285.9890137);
    CreateDynamicObject(1671,1510.5000000,-1554.8000488,1970.3000488,0.0000000,0.0000000,91.9851074);
    CreateDynamicObject(1671,1510.5000000,-1552.9000244,1970.3000488,0.0000000,0.0000000,81.9830322);
    CreateDynamicObject(1671,1510.5000000,-1551.0996094,1970.3000488,0.0000000,0.0000000,91.9775391);
    CreateDynamicObject(2186,1509.5000000,-1555.6999512,1969.8000488,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(948,1511.5999756,-1549.5999756,1969.8000488,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1671,1510.8000488,-1546.8000488,1970.3000488,0.0000000,0.0000000,175.9775391);
    CreateDynamicObject(1671,1509.0000000,-1546.8000488,1970.3000488,0.0000000,0.0000000,191.9734955);
    CreateDynamicObject(1811,1505.0999756,-1540.6999512,1970.4000244,0.0000000,0.0000000,269.9945068);
    CreateDynamicObject(1811,1506.0000000,-1540.6999512,1970.4000244,0.0000000,0.0000000,269.9890137);
    CreateDynamicObject(1811,1506.9000244,-1540.6999512,1970.4000244,0.0000000,0.0000000,269.9890137);
    CreateDynamicObject(1811,1507.8000488,-1540.6999512,1970.4000244,0.0000000,0.0000000,269.9890137);
    CreateDynamicObject(1811,1508.6999512,-1540.6999512,1970.4000244,0.0000000,0.0000000,269.9890137);
    CreateDynamicObject(1811,1504.0999756,-1536.6999512,1970.4000244,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1811,1503.1999512,-1536.6999512,1970.4000244,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(1811,1502.1999512,-1536.6999512,1970.4000244,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2111,1517.6999512,-1546.0000000,1970.1999512,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1823,1521.3000488,-1545.9000244,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1823,1524.3000488,-1545.9000244,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1823,1524.3000488,-1539.5000000,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1823,1521.3000488,-1539.5000000,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1823,1520.0999756,-1539.5000000,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1823,1517.0999756,-1539.5000000,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(1752,1517.5999756,-1546.0999756,1970.5999756,0.0000000,0.0000000,132.0000000);
    CreateDynamicObject(2576,1525.3000488,-1541.5999756,1969.8000488,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(2253,1521.7998, -1546.5000, 1970.5580,0.0000000,0.0000000,30.0000000);
    CreateDynamicObject(2253,1524.7000, -1540.2000, 1970.5580,0.0000000,0.0000000,29.9981689);
    CreateDynamicObject(2105,1524.8000488,-1546.5000000,1970.6999512,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2105,1517.5000000,-1539.8994141,1970.6999512,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(2105,1521.7998047,-1539.8994141,1970.6999512,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(16101,1524.1999512,-1539.5999756,1960.6999512,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(16101,1520.0000000,-1539.5999756,1960.6999512,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(16101,1522.4000244,-1546.8000488,1960.6999512,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(1009,1522.4499512,-1546.7900391,1971.3000488,0.0000000,269.9890137,179.9945068);
    CreateDynamicObject(1009,1524.1800537,-1539.5899658,1971.3000488,0.0000000,269.9890137,0.0000000);
    CreateDynamicObject(1009,1519.9799805,-1539.5899658,1971.3000488,0.0000000,269.9890137,0.0000000);
    CreateDynamicObject(1671,1513.5000000,-1561.5000000,1970.3000488,0.0000000,0.0000000,357.9775391);
    CreateDynamicObject(1502,1516.8199463,-1544.6839600,1969.8299561,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2267,1496.8100586,-1538.6999512,1971.5000000,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2007,1497.3000488,-1533.3000488,1969.8000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2007,1497.3000488,-1532.3000488,1969.8000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2007,1497.3000488,-1531.3000488,1969.8000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2162,1496.9000244,-1529.8000488,1969.8000488,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(2270,1501.6999512,-1563.2199707,1971.5000000,0.0000000,0.0000000,180.0000000);
    CreateDynamicObject(2271,1499.0000000,-1563.2197266,1971.5145264,0.0000000,0.0000000,179.9945068);
    CreateDynamicObject(2268,1504.0000000,-1563.2197266,1971.3437500,0.0000000,0.0000000,179.9945068);

    CreateDynamicObject(18756, 1521.20, -1550.92, 1971.78,   0.00, 0.00, 90.00);
    CreateDynamicObject(18757, 1521.21, -1550.92, 1971.78,   0.00, 0.00, 90.00);
    CreateDynamicObject(1569, 1496.75, -1547.80, 1969.78,   0.00, 0.00, 90.00);
    CreateDynamicObject(1569, 1525.86, -1549.33, 1969.80,   0.00, 0.00, 270.00);
    CreateDynamicObject(1569, 1496.74, -1544.80, 1969.78,   0.00, 0.00, 270.00);
    CreateDynamicObject(1569, 1525.86, -1552.33, 1969.80,   0.00, 0.00, 90.00);

    //Floor
    new floor = CreateObject(19378,1501.9000244,-1559.0000000,1969.6999512,0.0000000,90.0000000,0.0000000);
    new floor1 = CreateObject(19378,1501.9000244,-1549.4000244,1969.7010498,0.0000000,90.0000000,0.0000000);
    new floor2 = CreateObject(19378,1501.9000244,-1539.8000488,1969.6999512,0.0000000,90.0000000,0.0000000);
    new floor3 = CreateObject(19378,1512.4000244,-1539.8000488,1969.6999512,0.0000000,90.0000000,0.0000000);
    new floor4 = CreateObject(19378,1512.4000244,-1549.4000244,1969.6989746,0.0000000,90.0000000,0.0000000);
    new floor5 = CreateObject(19378,1512.4000244,-1559.0000000,1969.6999512,0.0000000,90.0000000,0.0000000);
    new floor6 = CreateObject(19378,1522.9000244,-1549.4000244,1969.6999512,0.0000000,90.0000000,0.0000000);

    SetObjectMaterial(floor, 0, 18030, "gap", "mp_furn_floor");
    SetObjectMaterial(floor1, 0, 18030, "gap", "mp_furn_floor");
    SetObjectMaterial(floor2, 0, 18030, "gap", "mp_furn_floor");
    SetObjectMaterial(floor3, 0, 18030, "gap", "mp_furn_floor");
    SetObjectMaterial(floor4, 0, 18030, "gap", "mp_furn_floor");
    SetObjectMaterial(floor5, 0, 18030, "gap", "mp_furn_floor");
    SetObjectMaterial(floor6, 0, 18030, "gap", "mp_furn_floor");
    
        //Ceiling
    new ceiling = CreateDynamicObject(19380,1501.9000244,-1559.0000000,1972.8830,0.0000000,90.0000000,0.0000000);
    new ceiling1 = CreateDynamicObject(19380,1501.9000244,-1549.4000244,1972.8840,0.0000000,90.0000000,0.0000000);
    new ceiling2 = CreateDynamicObject(19380,1501.9000244,-1539.8000488,1972.8830,0.0000000,90.0000000,0.0000000);
    new ceiling3 = CreateDynamicObject(19380,1501.9000244,-1530.1999512,1972.8840,0.0000000,90.0000000,0.0000000);
    new ceiling4 = CreateDynamicObject(19380,1512.4000244,-1530.1999512,1972.8830,0.0000000,90.0000000,0.0000000);
    new ceiling5 = CreateDynamicObject(19380,1512.4000244,-1539.8000488,1972.8840,0.0000000,90.0000000,0.0000000);
    new ceiling6 = CreateDynamicObject(19380,1512.4000244,-1549.4000244,1972.8830,0.0000000,90.0000000,0.0000000);
    new ceiling7 = CreateDynamicObject(19380,1512.4000244,-1559.0000000,1972.8840,0.0000000,90.0000000,0.0000000);
    new ceiling8 = CreateDynamicObject(19380,1522.9000244,-1549.4000244,1972.8830,0.0000000,90.0000000,0.0000000);
    new ceiling9 = CreateDynamicObject(19380,1522.9000244,-1539.8000488,1972.8830,0.0000000,90.0000000,0.0000000);

    SetDynamicObjectMaterial(ceiling, 0, 18026, "scummy", "ceiling_256");
    SetDynamicObjectMaterial(ceiling1, 0, 18026, "scummy", "ceiling_256");
    SetDynamicObjectMaterial(ceiling2, 0, 18026, "scummy", "ceiling_256");
    SetDynamicObjectMaterial(ceiling3, 0, 18026, "scummy", "ceiling_256");
    SetDynamicObjectMaterial(ceiling4, 0, 18026, "scummy", "ceiling_256");
    SetDynamicObjectMaterial(ceiling5, 0, 18026, "scummy", "ceiling_256");
    SetDynamicObjectMaterial(ceiling6, 0, 18026, "scummy", "ceiling_256");
    SetDynamicObjectMaterial(ceiling7, 0, 18026, "scummy", "ceiling_256");
    SetDynamicObjectMaterial(ceiling8, 0, 18026, "scummy", "ceiling_256");
    SetDynamicObjectMaterial(ceiling9, 0, 18026, "scummy", "ceiling_256");

    //Walls
    new wall = CreateDynamicObject(19461,1505.8994141,-1555.8994141,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall1 = CreateDynamicObject(19461,1505.8994141,-1565.5000000,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall2 = CreateDynamicObject(19461,1502.8994141,-1531.1992188,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall3 = CreateDynamicObject(19369,1504.5450439,-1548.9699707,1971.5999756,0.0000000,0.0000000,300.0000000);
    new wall4 = CreateDynamicObject(19369,1504.5460205,-1543.6290283,1971.5999756,0.0000000,0.0000000,60.0000000);
    new wall5 = CreateDynamicObject(19442,1503.1999512,-1542.0999756,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall6 = CreateDynamicObject(19369,1505.9000244,-1543.0999756,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall7 = CreateDynamicObject(19397,1505.9000244,-1546.3000488,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall8 = CreateDynamicObject(19369,1505.8994141,-1549.5000000,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall9 = CreateDynamicObject(19442,1503.1999512,-1550.5000000,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall10 = CreateDynamicObject(19461,1501.5000000,-1526.4000244,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall11 = CreateDynamicObject(19461,1511.0999756,-1526.4000244,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall12 = CreateDynamicObject(19461,1520.6999512,-1526.4000244,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall13 = CreateDynamicObject(19461,1509.7998047,-1531.1992188,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall14 = CreateDynamicObject(19461,1516.8000488,-1531.3000488,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall15 = CreateDynamicObject(19461,1516.8000488,-1559.9000244,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall16 = CreateDynamicObject(19461,1507.2998047,-1541.2998047,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall17 = CreateDynamicObject(19461,1521.5999756,-1547.0999756,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall18 = CreateDynamicObject(19461,1525.9000244,-1542.3000488,1971.5999756,0.0000000,0.0000000,0.2500000);
    new wall19 = CreateDynamicObject(19461,1521.6999512,-1539.3000488,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall20 = CreateDynamicObject(19461,1521.5999756,-1552.8000488,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall21 = CreateDynamicObject(19461,1525.9000244,-1552.0000000,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall22 = CreateDynamicObject(19461,1521.5999756,-1548.8000488,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall23 = CreateDynamicObject(19369,1509.5996094,-1536.0000000,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall24 = CreateDynamicObject(19369,1503.1999512,-1536.0000000,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall25 = CreateDynamicObject(19369,1496.8994141,-1536.0000000,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall26 = CreateDynamicObject(19369,1516.0000000,-1536.0000000,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall27 = CreateDynamicObject(19369,1512.0999756,-1551.5000000,1971.5999756,0.0000000,0.0000000,180.0000000);
    new wall28 = CreateDynamicObject(19369,1512.0996094,-1554.6992188,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall29 = CreateDynamicObject(19369,1512.0996094,-1542.8154297,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall30 = CreateDynamicObject(19369,1512.1009521,-1545.5000000,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall31 = CreateDynamicObject(19369,1504.1999512,-1551.3010254,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall32 = CreateDynamicObject(19369,1508.0000000,-1556.2998047,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall33 = CreateDynamicObject(19369,1511.1992188,-1556.2998047,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall34 = CreateDynamicObject(19369,1517.5999756,-1556.3000488,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall35 = CreateDynamicObject(19369,1498.2998047,-1541.2998047,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall36 = CreateDynamicObject(19369,1507.4199219,-1556.3007812,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall37 = CreateDynamicObject(19369,1505.9010010,-1542.9000244,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall38 = CreateDynamicObject(19369,1516.8000488,-1537.6999512,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall39 = CreateDynamicObject(19369,1516.8000488,-1540.9000244,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall40 = CreateDynamicObject(19369,1516.8000488,-1547.0999756,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall41 = CreateDynamicObject(19369,1516.8000488,-1553.5000000,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall42 = CreateDynamicObject(19442,1502.3100586,-1535.4100342,1971.5999756,0.0000000,0.0000000,315.0000000);
    new wall43 = CreateDynamicObject(19461,1496.6999512,-1559.0000000,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall44 = CreateDynamicObject(19461,1496.6992188,-1549.3994141,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall45 = CreateDynamicObject(19461,1496.6992188,-1539.7998047,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall46 = CreateDynamicObject(19461,1496.6992188,-1530.1992188,1971.5999756,0.0000000,0.0000000,0.0000000);
    new wall47 = CreateDynamicObject(19461,1501.5000000,-1563.8000488,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall48 = CreateDynamicObject(19461,1511.0999756,-1563.8000488,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall49 = CreateDynamicObject(19461,1520.6999512,-1563.8000488,1971.5999756,0.0000000,0.0000000,90.0000000);
    new wall50 = CreateDynamicObject(19397,1512.8000488,-1536.0000000,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall51 = CreateDynamicObject(19397,1506.3994141,-1536.0000000,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall52 = CreateDynamicObject(19397,1500.0000000,-1536.0009766,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall53 = CreateDynamicObject(19397,1512.0996094,-1548.2998047,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall54 = CreateDynamicObject(19397,1514.3994141,-1556.2998047,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall55 = CreateDynamicObject(19397,1501.5000000,-1541.3007812,1971.5999756,0.0000000,0.0000000,270.0000000);
    new wall56 = CreateDynamicObject(19397,1511.9000244,-1557.9000244,1971.5999756,0.0000000,0.0000000,180.0000000); //Radiohraphy
    new wall57 = CreateDynamicObject(19397,1511.8000488,-1557.9000244,1971.5999756,0.0000000,0.0000000,179.9945068); //Radiohraphy
    new wall58 = CreateDynamicObject(19397,1511.8990479,-1565.1989746,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall59 = CreateDynamicObject(19397,1511.8010254,-1565.1999512,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall60 = CreateDynamicObject(19397,1516.8000488,-1543.9000244,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall61 = CreateDynamicObject(19397,1516.8000488,-1550.3000488,1971.5999756,0.0000000,0.0000000,179.9945068);
    new wall62 = CreateDynamicObject(19461,1511.9000244,-1564.2989502,1974.0009766,0.0000000,0.0000000,0.0000000); //Radiohraphy
    new wall63 = CreateDynamicObject(19461,1511.8990479,-1564.3000488,1969.1009521,0.0000000,180.0000000,0.0000000); //Radiohraphy
    new wall64 = CreateDynamicObject(19461,1511.8010254,-1564.3000488,1969.0999756,0.0000000,179.9945068,0.0000000); //Radiohraphy
    new wall65 = CreateDynamicObject(19461,1511.8000488,-1564.3010254,1974.0000000,0.0000000,0.0000000,0.0000000); //Radiohraphy


    SetDynamicObjectMaterial(wall, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall1, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall2, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall3, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall4, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall5, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall6, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall7, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall8, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall9, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall10, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall11, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall12, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall13, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall14, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall15, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall16, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall17, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall18, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall19, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall20, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall21, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall22, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall23, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall24, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall25, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall26, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall27, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall28, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall29, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall30, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall31, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall32, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall33, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall34, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall35, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall36, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall37, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall38, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall39, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall40, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall41, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall42, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall43, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall44, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall45, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall46, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall47, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall48, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall49, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall50, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall51, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall52, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall53, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall54, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall55, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall56, 0, 14675, "civic02cj", "ab_hosWallUpr"); //Radiohraphy
    SetDynamicObjectMaterial(wall57, 0, 14675, "civic02cj", "ab_hosWallUpr"); //Radiohraphy
    SetDynamicObjectMaterial(wall58, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall59, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall60, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");
    SetDynamicObjectMaterial(wall61, 0, 18020, "genintintfastb2", "CJ_BURG_WALL");

    SetDynamicObjectMaterial(wall62, 0, 14675, "civic02cj", "ab_hosWallUpr"); //Radiohraphy
    SetDynamicObjectMaterial(wall63, 0, 14675, "civic02cj", "ab_hosWallUpr"); //Radiohraphy
    SetDynamicObjectMaterial(wall64, 0, 14675, "civic02cj", "ab_hosWallUpr"); //Radiohraphy
    SetDynamicObjectMaterial(wall65, 0, 14675, "civic02cj", "ab_hosWallUpr"); //Radiohraphy

    //Lists
    CreateDynamicObject(19442,1503.1999512,-1542.0999756,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19442,1503.1999512,-1550.5000000,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19442,1502.3100586,-1535.4100342,1968.0999756,0.0000000,0.0000000,315.0000000);
    CreateDynamicObject(19461,1496.6999512,-1559.0000000,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1496.6992188,-1549.3994141,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1496.6999512,-1539.8000488,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1496.6992188,-1530.1992188,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1501.5000000,-1563.8000488,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1511.0999756,-1563.8000488,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1520.6999512,-1563.8000488,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1516.8000488,-1560.0999756,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1516.8000488,-1550.5000000,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1516.7998047,-1540.8994141,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1516.8000488,-1531.0999756,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1512.0000000,-1526.4000244,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1502.4000244,-1526.4000244,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1492.8000488,-1526.4000244,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1512.7998047,-1536.0000000,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1505.9000244,-1546.1999512,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1507.2998047,-1541.2998047,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1502.8994141,-1531.0996094,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1509.8000488,-1531.0999756,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1503.3000488,-1546.5000000,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1504.1999512,-1546.5000000,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1511.9000244,-1561.1999512,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1512.0999756,-1546.0279541,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1512.1010000,-1551.5000000,1968.1019521,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1497.6999512,-1541.3000488,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1503.1999512,-1536.0000000,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1493.5999756,-1536.0000000,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1505.9000244,-1555.8000488,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1505.9000244,-1565.4000244,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1511.8000488,-1561.1999512,1968.1009521,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1521.5999756,-1547.0999756,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1521.6999512,-1539.3000488,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1525.9000244,-1542.3000488,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1525.9000244,-1551.9000244,1968.0999756,0.0000000,0.0000000,0.0000000);
    CreateDynamicObject(19461,1531.3000488,-1539.3000488,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19461,1521.5999756,-1552.8000488,1968.0999756,0.0000000,0.0000000,90.0000000);
    CreateDynamicObject(19369,1504.1999512,-1551.3010254,1968.0999756,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(19369,1508.0000000,-1556.2998047,1968.0999756,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(19369,1511.1999512,-1556.3000488,1968.0999756,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(19369,1515.1999512,-1556.3000488,1968.0999756,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(19369,1512.0620117,-1556.3010254,1968.0999756,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(19369,1507.4200439,-1556.3010254,1968.0999756,0.0000000,0.0000000,270.0000000);
    CreateDynamicObject(19369,1504.5460205,-1543.6290283,1968.0999756,0.0000000,0.0000000,59.9963379);
    CreateDynamicObject(19369,1504.5450439,-1548.9709473,1968.0999756,0.0000000,0.0000000,299.9981689);
    CreateDynamicObject(19461,1521.5999756,-1548.8000488,1968.0999756,0.0000000,0.0000000,90.0000000);

    //Grey floor
    new greyfloor = CreateObject(19377,1511.1999512,-1561.0999756,1969.7199707,0.0000000,90.0000000,0.0000000);
    new greyfloor1 = CreateObject(19377,1521.6999512,-1561.0999756,1969.7199707,0.0000000,90.0000000,0.0000000);
    new greyfloor2 = CreateObject(19377,1508.0996094,-1531.1992188,1969.7299805,0.0000000,90.0000000,0.0000000);
    new greyfloor3 = CreateObject(19377,1518.5996094,-1531.1992188,1969.7299805,0.0000000,90.0000000,0.0000000);

    SetObjectMaterial(greyfloor, 0, 14388, "dr_gsnew", "ws_stationfloor");
    SetObjectMaterial(greyfloor1, 0, 14388, "dr_gsnew", "ws_stationfloor");
    SetObjectMaterial(greyfloor2, 0, 14388, "dr_gsnew", "ws_stationfloor");
    SetObjectMaterial(greyfloor3, 0, 14388, "dr_gsnew", "ws_stationfloor");

    //Carpets
    new carpet = CreateDynamicObject(19373,1501.5996094,-1554.1992188,1969.7299805,0.0000000,90.0000000,0.0000000);
    new carpet1 = CreateDynamicObject(19373,1501.5996094,-1557.5000000,1969.7299805,0.0000000,90.0000000,0.0000000);
    new carpet2 = CreateDynamicObject(19373,1520.9000244,-1543.1999512,1969.7299805,0.0000000,90.0000000,0.0000000);
    new carpet3 = CreateDynamicObject(19373,1500.5000000,-1546.2998047,1969.7299805,0.0000000,90.0000000,0.0000000);
    new carpet4 = CreateDynamicObject(19373,1508.8994141,-1552.2998047,1969.7299805,0.0000000,90.0000000,0.0000000);
    new carpet5 = CreateDynamicObject(19373,1508.8994141,-1548.1992188,1969.7299805,0.0000000,90.0000000,0.0000000);
    new carpet6 = CreateDynamicObject(19373,1508.8994141,-1544.0000000,1969.7299805,0.0000000,90.0000000,0.0000000);
    new carpet7 = CreateDynamicObject(19373,1501.5996094,-1560.7998047,1969.7299805,0.0000000,90.0000000,0.0000000);

    SetDynamicObjectMaterial(carpet, 0, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(carpet1, 0, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(carpet2, 0, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(carpet3, 0, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(carpet4, 0, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(carpet5, 0, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(carpet6, 0, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(carpet7, 0, 3781, "LSOffice1floors", "carpet13-256x256");

    //Wooden floor
    new woodenfloor = CreateObject(19379,1497.6992188,-1531.1992188,1969.7299805,0.0000000,90.0000000,0.0000000);
	new woodenfloor1 = CreateObject(19379,1522.0999756,-1542.1999512,1969.7199707,0.0000000,90.0000000,0.0000000);

    SetObjectMaterial(woodenfloor, 0, 18030, "gap", "mp_furn_floor");
    SetObjectMaterial(woodenfloor1, 0, 18030, "gap", "mp_furn_floor");

    //Computer
    new pcmid = CreateDynamicObject(2268,1499.6199951,-1529.5660400,1971.0999756,0.0000000,90.0000000,270.0000000);
    new pcfront = CreateDynamicObject(2268,1500.6230469,-1530.2294922,1971.0999756,0.0000000,90.0000000,90.0000000);
    new pcback = CreateDynamicObject(2268,1499.5739746,-1529.5660400,1971.0999756,0.0000000,90.0000000,270.0000000);
    new key = CreateDynamicObject(1547,1500.3994141,-1529.8994141,1970.7399902,0.0000000,0.0000000,90.0000000); //Keyboard


    SetDynamicObjectMaterial(pcmid, 0, 3781, "LSOffice1floors", "carpet13-256x256", 0xFF333333);
    SetDynamicObjectMaterial(pcfront, 1, 2268, "picture_frame", "CJ_PAINTING7", 0xFF000000);
    SetDynamicObjectMaterial(pcfront, 0, 3781, "LSOffice1floors", "carpet13-256x256", 0xFF333333);
    SetDynamicObjectMaterial(pcback, 0, 3781, "LSOffice1floors", "carpet13-256x256", 0xFF333333);
    SetDynamicObjectMaterial(pcback, 1, 3781, "LSOffice1floors", "carpet13-256x256", 0xFF333333);
    SetDynamicObjectMaterial(key, 0, 2172, "cj_office", "of_key_256");

	//Office desks
    new desk = CreateDynamicObject(2172,1511.5000000,-1550.5999756,1969.8000488,0.0000000,0.0000000,270.0000000);
    new desk1 = CreateDynamicObject(2172,1511.5000000,-1552.5000000,1969.8000488,0.0000000,0.0000000,270.0000000);
    new desk2 = CreateDynamicObject(2172,1511.5000000,-1554.4000244,1969.8000488,0.0000000,0.0000000,270.0000000);
    new desk3 = CreateDynamicObject(2172,1506.5000000,-1555.3000488,1969.8000488,0.0000000,0.0000000,90.0000000);
    new desk4 = CreateDynamicObject(2172,1506.5000000,-1553.4000244,1969.8000488,0.0000000,0.0000000,90.0000000);
    new desk5 = CreateDynamicObject(2172,1506.5000000,-1551.5000000,1969.8000488,0.0000000,0.0000000,90.0000000);
    new desk6 = CreateDynamicObject(2172,1506.5000000,-1549.5999756,1969.8000488,0.0000000,0.0000000,90.0000000);
    new desk7 = CreateDynamicObject(2172,1506.5999756,-1541.9000244,1969.8000488,0.0000000,0.0000000,0.0000000);
    new desk8 = CreateDynamicObject(2172,1508.5000000,-1541.9000244,1969.8000488,0.0000000,0.0000000,0.0000000);
    new desk9 = CreateDynamicObject(2172,1510.4000244,-1541.9000244,1969.8000488,0.0000000,0.0000000,0.0000000);
    new desk10 = CreateDynamicObject(2172,1511.4000244,-1544.9000244,1969.8000488,0.0000000,0.0000000,180.0000000);
    new desk11 = CreateDynamicObject(2172,1509.5000000,-1544.9000244,1969.8000488,0.0000000,0.0000000,179.9945068);
    new desk12 = CreateDynamicObject(2172,1508.4919434,-1545.8000488,1969.8000488,0.0000000,0.0000000,0.0000000);
    new desk13 = CreateDynamicObject(2172,1510.4110107,-1545.8000488,1969.8000488,0.0000000,0.0000000,0.0000000);

    new noteboard = CreateDynamicObject(2737,1506.0300293,-1543.9000244,1971.4000244,0.0000000,0.0000000,90.0000000);

    SetDynamicObjectMaterial(desk, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk1, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk2, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk3, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk4, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk5, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk6, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk7, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk8, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk9, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk10, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk11, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk12, 6, 3781, "LSOffice1floors", "carpet13-256x256");
    SetDynamicObjectMaterial(desk13, 6, 3781, "LSOffice1floors", "carpet13-256x256");

    SetDynamicObjectMaterial(desk, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk1, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk2, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk3, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk4, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk5, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk6, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk7, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk8, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk9, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk10, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk11, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk12, 8, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(desk13, 8, 2205, "cj_office", "CJ_WOOD5");

    SetDynamicObjectMaterial(noteboard, 0, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(noteboard, 1, 2162, "cj_office", "white32");

    //Stretchers
    new stretcher = CreateDynamicObject(2146,1502.0999756,-1533.4000244,1970.2900391,0.0000000,0.0000000,0.0000000);
    new stretcher1 = CreateDynamicObject(2146,1506.5000000,-1530.8000488,1970.3000488,0.0000000,0.0000000,180.0000000);
    new stretcher2 = CreateDynamicObject(2146,1513.4000244,-1530.8000488,1970.3000488,0.0000000,0.0000000,179.9945068);
    new stretcher3 = CreateDynamicObject(2146,1516.0999756,-1538.5999756,1970.3000488,0.0000000,0.0000000,179.9945068);
    new stretcher4 = CreateDynamicObject(2146,1516.0999756,-1546.6999512,1970.3000488,0.0000000,0.0000000,179.9945068);
    new stretcher5 = CreateDynamicObject(2146,1516.0999756,-1553.0000000,1970.3000488,0.0000000,0.0000000,179.9945068);
    new stretcher6 = CreateDynamicObject(2146,1508.9000244,-1561.3000488,1970.3000488,0.0000000,0.0000000,179.9945068);

    SetDynamicObjectMaterial(stretcher, 0, 1798, "cj_s_beds", "CJ_MATRESS3");
    SetDynamicObjectMaterial(stretcher1, 0, 1798, "cj_s_beds", "CJ_MATRESS3");
    SetDynamicObjectMaterial(stretcher2, 0, 1798, "cj_s_beds", "CJ_MATRESS3");
    SetDynamicObjectMaterial(stretcher3, 0, 1798, "cj_s_beds", "CJ_MATRESS3");
    SetDynamicObjectMaterial(stretcher4, 0, 1798, "cj_s_beds", "CJ_MATRESS3");
    SetDynamicObjectMaterial(stretcher5, 0, 1798, "cj_s_beds", "CJ_MATRESS3");
    SetDynamicObjectMaterial(stretcher6, 0, 1798, "cj_s_beds", "CJ_MATRESS3");

    SetDynamicObjectMaterial(stretcher, 1, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher1, 1, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher2, 1, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher3, 1, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher4, 1, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher5, 1, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher6, 1, 1811, "cj_tables", "CJ_CHROME2");

    SetDynamicObjectMaterial(stretcher, 2, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher1, 2, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher2, 2, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher3, 2, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher4, 2, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher5, 2, 1811, "cj_tables", "CJ_CHROME2");
    SetDynamicObjectMaterial(stretcher6, 2, 1811, "cj_tables", "CJ_CHROME2");

    CreateDynamicObject(1808, 1502.90, -1550.80, 1969.80,   0.00, 0.00, 270.00);
    CreateDynamicObject(1808, 1497.00, -1557.50, 1969.80,   0.00, 0.00, 90.00);
    CreateDynamicObject(1808, 1502.00, -1535.30, 1969.80,   0.00, 0.00, 226.00);
    CreateDynamicObject(2894, 1503.93, -1545.92, 1970.73,   0.00, 0.00, 90.00);
 	CreateDynamicObject(1808, 1504.88, -1535.70, 1969.80,   0.00, 0.00, 180.00);
    CreateDynamicObject(1808, 1511.28, -1535.70, 1969.80,   0.00, 0.00, 179.99);
    CreateDynamicObject(2596, 1497.09, -1555.27, 1971.87,   0.00, 0.00, 90.00);

    //Beds
    new bed = CreateDynamicObject(1798,1518.5999756,-1542.9000244,1969.8000488,0.0000000,0.0000000,0.0000000);
    new bed1 = CreateDynamicObject(1798,1522.8000488,-1542.9000244,1969.8000488,0.0000000,0.0000000,0.0000000);
    new bed2 = CreateDynamicObject(1798,1523.8000488,-1543.5000000,1969.8000488,0.0000000,0.0000000,180.0000000);

    SetDynamicObjectMaterial(bed, 2, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(bed1, 2, 2205, "cj_office", "CJ_WOOD5");
    SetDynamicObjectMaterial(bed2, 2, 2205, "cj_office", "CJ_WOOD5");
    HospitalDoor1 = CreateDynamicObject(1567,1500.7516, -1541.3116, 1969.8427,0.0000000,0.0000000,0.0000000); //Doors
    HospitalDoor2 = CreateDynamicObject(1567,1505.8879, -1545.5511, 1969.8398,0.0000000,0.0000000,270.0000000); //Doors

    new Reception = CreateDynamicObject(1547, 1503.2116, -1546.2935, 1970.5238, 90.2000, -4.0999, -85.8697);
    SetDynamicObjectMaterialText(Reception, 0, "RECEPTION", 50, "Times New Roman", 24, 1, -9868951, 0, 1);

    new AllSaints = CreateDynamicObject(19353, 1505.8795, -1556.1978, 1971.5361, 0.0000, 0.0000, 180);
    SetDynamicObjectMaterialText(AllSaints, 0, "All Saints", 140, "Times New Roman", 60, 1, -8092540, 0, 1);

    new GH = CreateDynamicObject(19353, 1505.8692, -1558.1240, 1971.5261, 0.0000, 0.0000, 180);
    SetDynamicObjectMaterialText(GH, 0, "General Hospital", 140, "Times New Roman", 60, 1, -8092540, 0, 1);



//=========================================================ADMIN AREA======================================================//
	CreateDynamicObject(1649, 3315.12231, 965.00537, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3314.91943, 961.77271, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3315.32495, 968.32098, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3315.50903, 971.63452, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3319.28638, 961.51025, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3319.48535, 964.75781, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3319.69019, 968.08337, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3319.86768, 971.37817, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3323.67993, 961.26392, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3328.02148, 961.00958, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3332.40137, 960.75055, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3324.22412, 971.11731, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3332.60620, 964.06482, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3332.81079, 967.37762, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3333.00024, 970.60834, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3328.62231, 970.86151, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3324.04736, 967.79248, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3323.90210, 964.47937, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3328.24097, 964.21661, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3328.41724, 967.53790, 6.23780,   270.00000, 0.00000, 356.61270);
	CreateDynamicObject(16090, 3334.04639, 965.35980, -2.05430,   0.00000, 0.00000, 357.06079);
	CreateDynamicObject(1649, 3315.62720, 973.29456, 7.89920,   0.00000, 0.00000, 356.73819);
	CreateDynamicObject(1649, 3319.98560, 973.03491, 7.89920,   0.00000, 0.00000, 356.73819);
	CreateDynamicObject(1649, 3324.37671, 972.77667, 7.89920,   0.00000, 0.00000, 356.73819);
	CreateDynamicObject(1649, 3314.87573, 960.14258, 7.89920,   0.00000, 0.00000, 176.85022);
	CreateDynamicObject(1649, 3328.71338, 972.52063, 7.89920,   0.00000, 0.00000, 356.73819);
	CreateDynamicObject(1649, 3333.13330, 972.26740, 7.89920,   0.00000, 0.00000, 356.73819);
	CreateDynamicObject(1649, 3319.22632, 959.90637, 7.89920,   0.00000, 0.00000, 176.85022);
	CreateDynamicObject(1649, 3323.57178, 959.68518, 7.89920,   0.00000, 0.00000, 176.85022);
	CreateDynamicObject(1649, 3327.97314, 959.40625, 7.89920,   0.00000, 0.00000, 176.85022);
	CreateDynamicObject(1649, 3332.33667, 959.16132, 7.89920,   0.00000, 0.00000, 176.85022);
	CreateDynamicObject(1649, 3312.80688, 962.43683, 7.89920,   0.00000, 0.00000, 87.11920);
	CreateDynamicObject(1649, 3313.03296, 966.79218, 7.89920,   0.00000, 0.00000, 87.11920);
	CreateDynamicObject(1649, 3313.27441, 971.20850, 7.89920,   0.00000, 0.00000, 86.60910);
	CreateDynamicObject(1649, 3334.64917, 961.25549, 7.89920,   0.00000, 0.00000, 266.76544);
	CreateDynamicObject(1649, 3334.89941, 965.68396, 7.89920,   0.00000, 0.00000, 266.76544);
	CreateDynamicObject(1649, 3335.18286, 969.93896, 7.89920,   0.00000, 0.00000, 266.76544);
	CreateDynamicObject(16090, 3323.29932, 965.64514, -2.05430,   0.00000, 0.00000, 357.06079);
	CreateDynamicObject(16090, 3314.17944, 966.39209, -2.05430,   0.00000, 0.00000, 357.06079);
	CreateDynamicObject(2200, 3313.05786, 964.70416, 6.23220,   0.00000, 0.00000, 87.02513);
	CreateDynamicObject(1703, 3334.19629, 962.68304, 6.23080,   0.00000, 0.00000, 265.60291);
	CreateDynamicObject(1703, 3334.34839, 965.19373, 6.23080,   0.00000, 0.00000, 265.60294);
	CreateDynamicObject(1703, 3334.53564, 967.69196, 6.23080,   0.00000, 0.00000, 265.60294);
	CreateDynamicObject(1703, 3334.72925, 970.22797, 6.23080,   0.00000, 0.00000, 265.60294);
	CreateDynamicObject(14455, 3323.72437, 959.88953, 7.68900,   0.00000, 0.00000, 355.52423);
	CreateDynamicObject(14455, 3318.06836, 960.32800, 7.68900,   0.00000, 0.00000, 355.52423);
	CreateDynamicObject(2200, 3313.17432, 966.93829, 6.23220,   0.00000, 0.00000, 87.02513);
	CreateDynamicObject(2200, 3313.28369, 969.13800, 6.23220,   0.00000, 0.00000, 87.02513);
	CreateDynamicObject(2261, 3322.24048, 972.39990, 7.77602,   0.00000, 0.00000, 358.27167);
	CreateDynamicObject(2029, 3332.73120, 966.49860, 6.12797,   0.00000, 0.00000, 87.25298);
	CreateDynamicObject(2029, 3332.84326, 968.73187, 6.12797,   0.00000, 0.00000, 87.25298);
	CreateDynamicObject(2029, 3332.62524, 963.83936, 6.12797,   0.00000, 0.00000, 87.25298);
	CreateDynamicObject(2029, 3332.56885, 961.31720, 6.12797,   0.00000, 0.00000, 87.25298);
	CreateDynamicObject(1703, 3320.09082, 972.48975, 6.23270,   0.00000, 0.00000, 357.52158);
	CreateDynamicObject(1703, 3322.61572, 972.39227, 6.23270,   0.00000, 0.00000, 357.52158);
	CreateDynamicObject(1703, 3325.15210, 972.26422, 6.23270,   0.00000, 0.00000, 357.52158);
	CreateDynamicObject(19366, 3328.87354, 967.54742, 6.15080,   0.00000, -90.00000, 355.63470);
	CreateDynamicObject(19366, 3328.62451, 964.36438, 6.15080,   0.00000, -90.00000, 355.63470);
	CreateDynamicObject(19366, 3325.38428, 967.80670, 6.15080,   0.00000, -90.00000, 355.63470);
	CreateDynamicObject(19366, 3325.16943, 964.63116, 6.15080,   0.00000, -90.00000, 355.63470);
	CreateDynamicObject(19366, 3321.89355, 968.08331, 6.15080,   0.00000, -90.00000, 355.63470);
	CreateDynamicObject(19366, 3321.68408, 964.89844, 6.15080,   0.00000, -90.00000, 355.63470);
	CreateDynamicObject(19366, 3318.19824, 965.17365, 6.15080,   0.00000, -90.00000, 355.63470);
	CreateDynamicObject(19366, 3318.43530, 968.34155, 6.15080,   0.00000, -90.00000, 355.63470);
	CreateDynamicObject(1649, 3332.42432, 960.82117, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3332.60010, 964.11365, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3332.84302, 967.43506, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3333.01978, 970.68408, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3328.58618, 970.92108, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3328.41357, 967.61633, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3328.19019, 964.30255, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3327.99512, 961.02533, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3324.19458, 971.17523, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3324.00195, 967.84894, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3323.81763, 964.53210, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3323.63379, 961.31433, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3319.27588, 961.52979, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3314.87769, 961.76855, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3319.40161, 964.77155, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3319.58008, 968.07422, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3319.79541, 971.39441, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3315.44189, 971.65466, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3315.24512, 968.35699, 9.56930,   90.00000, 0.00000, 356.61270);
	CreateDynamicObject(1649, 3315.06616, 965.08459, 9.56930,   90.00000, 0.00000, 356.61270);

//=======================================================JOB FURNITURE============================================================//
    CreateObject(970, 2112.01758, -2156.58960, 12.87790,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2116.17749, -2156.58960, 12.87790,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2120.31763, -2156.58960, 12.87790,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2124.45752, -2156.58960, 12.87790,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2128.59766, -2156.58960, 12.87790,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2132.75610, -2156.58887, 12.87790,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2136.92773, -2156.60059, 12.87790,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 2139.00537, -2154.49585, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2139.00537, -2150.33569, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2139.00537, -2146.19580, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2139.00537, -2142.05591, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2139.00537, -2137.91577, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2109.95630, -2154.50659, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2139.00537, -2133.77588, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2138.98535, -2130.83569, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2109.95630, -2150.36670, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2109.95630, -2146.22681, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2109.95630, -2154.50659, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2109.95630, -2142.12671, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2109.95630, -2138.00684, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2109.95630, -2133.88672, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2109.95630, -2129.76685, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2109.95630, -2125.62671, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2109.95630, -2122.86670, 12.91790,   0.00000, 0.00000, -90.00000);
	CreateObject(970, 2137.12988, -2127.82349, 12.91790,   0.00000, 0.00000, -27.00000);
	CreateObject(970, 2133.33423, -2126.15063, 12.91790,   0.00000, 0.00000, -21.00000);
	CreateObject(970, 2129.38599, -2124.86157, 12.91790,   0.00000, 0.00000, -15.00000);
	CreateObject(970, 2125.35693, -2123.78589, 12.91790,   0.00000, 0.00000, -15.00000);
	CreateObject(970, 2121.33765, -2122.70581, 12.91790,   0.00000, 0.00000, -15.00000);

//======================== CIORDIRE DE PE ROMANIA RP =========================================

//======================================GARAJ MAPPING FACTIUNI==================================================//
	CreateDynamicObject(971, 2251.20215, 2504.31494, 5.70667,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(971, 2251.21436, 2495.52417, 5.70667,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(971, 2320.04443, 2450.51855, 4.99717,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(971, 2320.03271, 2441.70776, 4.99717,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(971, 2294.06812, 2499.22412, 4.99717,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1506, 2294.37231, 2492.90552, 2.24854,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(17951, -301.26447, 1046.32458, 20.41380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17951, -227.47661, 980.21344, 19.31810,   0.00000, 0.00000, 90.00000);


//======================== Magazin Telefoane         ============================
	CreateDynamicObject(14665, 1008.47949, 52.23438, 56.30649,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1885, 1004.62476, 50.38561, 54.27211,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1984, 1006.75482, 54.02099, 54.29711,   0.00000, 0.00000, 179.19000);
	CreateDynamicObject(2362, 1006.30518, 54.29913, 55.24323,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2412, 1004.01837, 53.52606, 54.30394,   0.00000, 0.00000, 270.67499);
	CreateDynamicObject(2412, 1004.02881, 50.21970, 54.30394,   0.00000, 0.00000, 270.67017);
	CreateDynamicObject(2413, 1013.72852, 56.21582, 54.32211,   0.00000, 0.00000, 270.35706);
	CreateDynamicObject(2413, 1013.73242, 54.61816, 54.32211,   0.00000, 0.00000, 270.35156);
	CreateDynamicObject(2413, 1013.72284, 53.02059, 54.32211,   0.00000, 0.00000, 270.35706);
	CreateDynamicObject(2413, 1013.71869, 51.39541, 54.32211,   0.00000, 0.00000, 270.35706);
	CreateDynamicObject(2434, 1010.06415, 46.37968, 54.32211,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2434, 1010.25702, 47.48144, 54.32211,   0.00000, 0.00000, 87.34003);
	CreateDynamicObject(2435, 1009.17365, 46.38908, 54.32211,   0.00000, 0.00000, 359.86502);
	CreateDynamicObject(2435, 1009.16736, 47.67495, 54.32211,   0.00000, 0.00000, 180.63501);
	CreateDynamicObject(2434, 1008.27612, 47.67778, 54.32211,   0.00000, 0.00000, 178.64587);
	CreateDynamicObject(2434, 1008.07953, 46.56667, 54.32211,   0.00000, 0.00000, 269.95313);
	CreateDynamicObject(2403, 1008.97479, 46.52891, 54.27761,   0.00000, 0.00000, 274.64499);
	CreateDynamicObject(2403, 1008.96179, 46.53107, 55.45269,   0.00000, 0.00000, 274.64172);
	CreateDynamicObject(2403, 1008.34180, 46.39944, 55.45269,   0.00000, 0.00000, 183.33185);
	CreateDynamicObject(2403, 1008.33276, 46.37611, 54.27761,   0.00000, 0.00000, 183.32886);
	CreateDynamicObject(2125, 1004.63397, 55.09865, 54.63199,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1954, 1013.56964, 51.37440, 54.65974,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1954, 1013.58215, 53.96910, 54.64600,   0.00000, 0.00000, 89.54999);
	CreateDynamicObject(1958, 1013.59436, 51.53061, 55.38877,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1429, 1013.63660, 46.33495, 56.37989,   0.00000, 0.00000, 260.74988);
	CreateDynamicObject(1429, 1006.49237, 42.15121, 56.37989,   0.00000, 0.00000, 157.52991);
	CreateDynamicObject(2199, 1013.88226, 48.28861, 54.30039,   0.00000, 0.00000, 270.67505);
	CreateDynamicObject(2606, 1013.87793, 53.52930, 56.69782,   0.00000, 0.00000, 270.67017);
	CreateDynamicObject(5061, 1003.05414, 57.75640, 56.23474,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5061, 1003.05957, 62.00736, 56.23474,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5061, 1003.06720, 46.83071, 55.93834,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1500, 1003.03998, 52.22422, 54.32211,   0.00000, 0.00000, 270.67505);
	CreateDynamicObject(1500, 1003.03235, 53.71820, 54.32211,   0.00000, 0.00000, 270.67017);
	CreateDynamicObject(1717, 1009.88562, 48.04082, 54.80265,   0.00000, 0.00000, 131.14502);
	CreateDynamicObject(1718, 1013.62854, 55.51069, 55.39830,   0.00000, 0.00000, 272.65997);
	CreateDynamicObject(1719, 1013.28741, 55.99262, 54.72882,   0.00000, 0.00000, 270.67499);
	CreateDynamicObject(1747, 1007.80927, 41.54731, 54.95312,   0.00000, 0.00000, 175.35498);
	CreateDynamicObject(1747, 1012.53168, 43.28279, 54.95312,   0.00000, 0.00000, 230.93280);
	CreateDynamicObject(1748, 1005.09814, 42.76603, 56.15341,   0.00000, 0.00000, 143.46002);
	CreateDynamicObject(1749, 1009.36414, 46.65398, 55.37768,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1750, 1011.29980, 42.42367, 56.16826,   0.00000, 0.00000, 208.59998);
	CreateDynamicObject(1750, 1009.81439, 41.71519, 54.94319,   0.00000, 0.00000, 194.70239);
	CreateDynamicObject(1752, 1009.90765, 41.75657, 56.11424,   0.00000, 0.00000, 190.59999);
	CreateDynamicObject(1782, 1012.42474, 43.61005, 55.90462,   0.00000, 0.00000, 224.65997);
	CreateDynamicObject(1785, 1005.32373, 43.01709, 55.62032,   0.00000, 0.00000, 318.31500);
	CreateDynamicObject(1786, 1004.16943, 43.97821, 56.13497,   0.00000, 0.00000, 119.46002);
	CreateDynamicObject(1786, 1013.50677, 44.84127, 56.10997,   0.00000, 0.00000, 246.85986);
	CreateDynamicObject(1787, 1013.18933, 44.82385, 55.93029,   0.00000, 0.00000, 248.34500);
	CreateDynamicObject(1788, 1006.57074, 42.20835, 55.01282,   0.00000, 0.00000, 157.40002);
	CreateDynamicObject(1791, 1004.19690, 44.15108, 54.93644,   0.00000, 0.00000, 121.44501);
	CreateDynamicObject(1792, 1012.70013, 43.38141, 56.05910,   358.01498, 0.00000, 226.55499);
	CreateDynamicObject(1792, 1008.00201, 41.51371, 56.05910,   358.01147, 0.00000, 172.95953);
	CreateDynamicObject(1809, 1008.02533, 47.10511, 55.37768,   0.00000, 0.00000, 272.34500);
	CreateDynamicObject(1839, 1010.15833, 47.16987, 55.37768,   0.00000, 0.00000, 180.58499);
	CreateDynamicObject(1840, 1013.47046, 46.41183, 54.97294,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1840, 1013.46375, 45.91414, 54.97294,   0.00000, 0.00000, 346.10501);
	CreateDynamicObject(2028, 1013.58325, 56.23041, 55.44719,   0.00000, 0.00000, 270.31506);
	CreateDynamicObject(2099, 1003.37598, 47.47678, 54.32211,   0.00000, 0.00000, 91.67001);
	CreateDynamicObject(2101, 1003.80560, 45.64203, 56.09894,   0.00000, 0.00000, 105.56500);
	CreateDynamicObject(2102, 1013.60876, 52.67992, 55.36386,   0.00000, 0.00000, 270.31500);
	CreateDynamicObject(2103, 1013.58905, 54.30647, 55.33886,   0.00000, 0.00000, 270.49500);
	CreateDynamicObject(2104, 1014.00873, 49.25853, 54.32211,   0.00000, 0.00000, 270.31500);
	CreateDynamicObject(2190, 1013.82373, 50.56318, 55.35017,   0.00000, 0.00000, 268.51001);
	CreateDynamicObject(2202, 171.55243, 95.82595, 483.48163,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2226, 1013.49457, 52.70935, 54.52899,   0.00000, 0.00000, 270.67499);
	CreateDynamicObject(2229, 1013.74280, 58.60546, 54.32919,   0.00000, 0.00000, 266.70499);
	CreateDynamicObject(2230, 1013.77118, 59.19083, 54.27211,   0.00000, 0.00000, 270.67499);
	CreateDynamicObject(2231, 1013.72852, 59.83271, 54.29711,   0.00000, 0.00000, 270.49500);
	CreateDynamicObject(2232, 1013.54077, 60.87248, 54.89499,   0.00000, 0.00000, 268.41998);
	CreateDynamicObject(2344, 1008.57330, 47.80574, 55.38776,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2596, 1003.57465, 53.88491, 57.26685,   0.00000, 0.00000, 91.53500);
	CreateDynamicObject(14604, 1011.37885, 61.69847, 55.30276,   0.00000, 0.00000, 179.28003);
	CreateDynamicObject(16377, 1012.39154, 61.80362, 55.27744,   0.00000, 0.00000, 179.37000);
	CreateDynamicObject(1208, 1003.60913, 59.88251, 54.32211,   0.00000, 0.00000, 270.45001);
	CreateDynamicObject(16779, 1009.01923, 56.20559, 58.45436,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16779, 1008.61096, 50.10574, 58.45436,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2413, 1003.50055, 58.24919, 54.32211,   0.00000, 0.00000, 89.54114);
	CreateDynamicObject(2413, 1003.50000, 56.64326, 54.32211,   0.00000, 0.00000, 89.53857);
	CreateDynamicObject(2413, 1013.72351, 57.80486, 54.32211,   0.00000, 0.00000, 270.35706);
	CreateDynamicObject(2966, 1003.64410, 58.02969, 54.91491,   0.00000, 0.00000, 91.31003);
	CreateDynamicObject(2966, 1003.64905, 56.62140, 54.91491,   0.00000, 0.00000, 91.30737);
	CreateDynamicObject(2966, 1003.65784, 59.15842, 54.91491,   0.00000, 0.00000, 91.30737);
	CreateDynamicObject(2967, 1003.59509, 58.56643, 54.87525,   0.00000, 0.00000, 87.34003);
	CreateDynamicObject(2967, 1003.53387, 56.95958, 54.87525,   0.00000, 0.00000, 87.33582);
	CreateDynamicObject(2967, 1003.56024, 57.35735, 54.87525,   0.00000, 0.00000, 87.33582);
	CreateDynamicObject(2495, 1006.14709, 53.50404, 55.03824,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2413, 1007.59271, 62.76525, 54.32211,   0.00000, 0.00000, -0.75885);
	CreateDynamicObject(2413, 1005.98535, 62.79425, 54.32211,   0.00000, 0.00000, -0.75885);
	CreateDynamicObject(2413, 1009.19714, 62.74409, 54.32211,   0.00000, 0.00000, -0.75885);
	CreateDynamicObject(18866, 1006.67688, 62.58215, 55.32346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18866, 1006.47632, 62.57052, 55.32346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18866, 1006.14117, 62.68462, 55.32346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18866, 1006.38513, 62.77452, 55.32346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18866, 1005.78168, 62.69964, 55.32346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18866, 1005.97522, 62.58787, 55.32346,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19424, 1008.40234, 62.67735, 55.34443,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19424, 1007.91913, 62.66341, 55.34443,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19424, 1007.41718, 62.67068, 55.34443,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1009.34546, 62.79580, 55.34299,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1010.15472, 62.79414, 55.34299,   0.00000, 0.00000, -17.10000);
//========================    MAPPING LS      ============================
	CreateDynamicObject(986, 1017.45538, -922.08136, 40.18465,   0.00000, 0.00000, 7.91745);
	CreateDynamicObject(986, 1015.91736, -913.45184, 40.18465,   0.00000, 0.00000, 7.91745);
	CreateDynamicObject(1676, 998.97284, -937.37793, 42.78300,   0.00000, 0.00000, 8.12313);
	CreateDynamicObject(1676, 1001.91626, -936.97028, 42.78300,   0.00000, 0.00000, 8.12313);
	CreateDynamicObject(1676, 1005.72443, -936.55975, 42.78300,   0.00000, 0.00000, 8.12313);
	CreateDynamicObject(1676, 1008.99475, -936.11670, 42.78300,   0.00000, 0.00000, 8.12313);
	CreateDynamicObject(8674, 1001.26123, -937.94708, 40.87312,   0.00000, 0.00000, 8.03872);
	CreateDynamicObject(8674, 1006.60144, -937.17975, 40.87312,   0.00000, 0.00000, 8.03872);
	CreateDynamicObject(8674, 1001.26630, -936.46716, 40.87312,   0.00000, 0.00000, 8.03872);
	CreateDynamicObject(8674, 1006.66125, -935.70270, 40.87312,   0.00000, 0.00000, 8.03872);
	CreateDynamicObject(1360, 995.65759, -937.96997, 41.93800,   0.00000, 0.00000, 4.06677);
	CreateDynamicObject(1215, 995.61462, -937.31372, 41.86684,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 995.66010, -938.62750, 41.86684,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1360, 1012.12695, -935.85333, 41.93800,   0.00000, 0.00000, 4.06677);
	CreateDynamicObject(1215, 1012.13483, -936.50983, 41.86684,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1012.06549, -935.20398, 41.86684,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1069.38403, -927.21826, 43.52920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1074.51392, -922.07526, 43.52920,   0.00000, 0.00000, 359.92026);
	CreateDynamicObject(8674, 1073.69910, -869.30145, 43.52920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 999.37823, -953.62872, 41.54590,   0.00000, 0.00000, 6.00390);
	CreateDynamicObject(970, 1003.51624, -953.19409, 41.54593,   0.00000, 0.00000, 6.00393);
	CreateDynamicObject(970, 1007.59625, -952.74695, 41.54593,   0.00000, 0.00000, 6.00393);
	CreateDynamicObject(970, 1009.63092, -952.53430, 41.54593,   0.00000, 0.00000, 6.00393);
	CreateDynamicObject(970, 998.51007, -944.21637, 41.54590,   0.00000, 0.00000, 6.00390);
	CreateDynamicObject(970, 1002.62726, -943.78271, 41.54590,   0.00000, 0.00000, 6.00390);
	CreateDynamicObject(970, 1006.75018, -943.34631, 41.54590,   0.00000, 0.00000, 6.00390);
	CreateDynamicObject(970, 1009.00769, -943.11682, 41.54590,   0.00000, 0.00000, 6.00390);
	CreateDynamicObject(1215, 1011.19714, -942.95593, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1013.48627, -943.37335, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1014.70026, -944.31775, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1015.49768, -945.36981, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1015.99969, -946.76288, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1015.98517, -948.47424, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1015.49518, -949.82184, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1014.68018, -950.94360, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1013.58289, -951.79010, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1011.80078, -952.26013, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 996.31122, -944.47040, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 994.82672, -945.02295, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 993.32275, -946.22180, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 992.58362, -947.66693, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 992.29132, -949.43781, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 992.67108, -951.21814, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 993.70459, -952.65070, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 994.90326, -953.35358, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 997.21075, -953.82690, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 996.17902, -953.77087, 41.54590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1903.21106, -1762.34058, 13.90529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1908.40076, -1767.48169, 13.90530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1940.91602, -1770.16589, 12.17700,   0.00000, 0.00000, 89.79496);
	CreateDynamicObject(8674, 1940.90161, -1775.69983, 12.17700,   0.00000, 0.00000, 89.99596);
	CreateDynamicObject(8674, 1942.41309, -1775.59155, 12.17700,   0.00000, 0.00000, 89.99596);
	CreateDynamicObject(8674, 1942.40942, -1770.26758, 12.17700,   0.00000, 0.00000, 89.99596);
	CreateDynamicObject(1360, 1941.57922, -1764.61755, 13.14350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1941.59509, -1781.12683, 13.14350,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1940.80981, -1781.15100, 13.11390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1942.23047, -1781.14319, 13.11390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1942.22119, -1764.64893, 13.11390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1940.89685, -1764.64600, 13.11390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1941.59668, -1765.39465, 16.96860,   -25.00000, -29.00000, 324.00000);
	CreateDynamicObject(1215, 1941.52368, -1772.33569, 16.96860,   -25.00000, -29.00000, 324.00000);
	CreateDynamicObject(1215, 1941.65454, -1780.45337, 17.03799,   -324.00000, -4.00000, 0.00000);
	CreateDynamicObject(1215, 1941.36206, -1773.35388, 17.03799,   -324.00000, -4.00000, 0.00000);
	CreateDynamicObject(985, 1912.04346, -1780.67566, 11.46943,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1916.54675, -1762.59119, 13.04931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1920.65039, -1762.59338, 13.04931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1924.83667, -1762.57190, 13.04931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1928.97803, -1762.55444, 13.04931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1931.41382, -1764.69519, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1931.40625, -1768.82068, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1931.41052, -1772.94189, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9131, 1931.26599, -1774.87476, 12.58602,   0.00000, 0.00000, 0.13267);
	CreateDynamicObject(9131, 1931.27515, -1777.22754, 12.58602,   0.00000, 0.00000, 0.13267);
	CreateDynamicObject(9131, 1931.13623, -1762.67896, 12.58602,   0.00000, 0.00000, 0.13267);
	CreateDynamicObject(9131, 1914.74438, -1762.67151, 12.58602,   0.00000, 0.00000, 0.13267);
	CreateDynamicObject(970, 1931.46155, -1778.97473, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1931.46472, -1781.02563, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1931.47473, -1785.15173, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9131, 1931.24097, -1786.94458, 12.58602,   0.00000, 0.00000, 0.13267);
	CreateDynamicObject(970, 1928.82288, -1787.26208, 13.04931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1924.73059, -1787.26147, 13.04931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1920.57849, -1787.25708, 13.04931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1916.46033, -1787.25671, 13.04931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1914.00378, -1786.90735, 12.58602,   0.00000, 0.00000, 0.13267);
	CreateDynamicObject(970, 1913.68127, -1784.47754, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1913.67603, -1780.34741, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1956.32056, -1771.05701, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1956.33118, -1775.20532, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1956.30957, -1766.95276, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1956.30530, -1764.37256, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1947.00232, -1775.10693, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1947.00439, -1770.95691, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1947.01672, -1766.82434, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1947.01428, -1764.38342, 13.04930,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1947.04907, -1762.28198, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1947.38354, -1760.59167, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1948.44250, -1759.06433, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1949.93896, -1758.04810, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1951.62012, -1757.71423, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1953.39124, -1758.11523, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1954.92786, -1759.17102, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1955.85181, -1760.58484, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1956.28906, -1762.23108, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1956.22827, -1777.36768, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1955.83691, -1779.10071, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1954.88196, -1780.47266, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1953.37036, -1781.56628, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1951.61987, -1781.94775, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1949.83069, -1781.50500, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1948.42126, -1780.56409, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1947.38452, -1779.01636, 13.04930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1947.03687, -1777.27954, 13.04930,   0.00000, 0.00000, 0.00000);


//============================================IDLEWOOOD COMPLEX================================================//
	CreateDynamicObject(1498, 2043.85559, -1762.65381, 12.50364,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 648.40448, 1705.96851, -82.95740,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 658.86261, 1705.98035, -82.95740,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 669.29150, 1705.98438, -82.95740,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 679.75763, 1705.98438, -82.95740,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19455, 647.87756, 1710.71216, -81.23711,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 657.45612, 1710.73169, -81.23710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 667.05627, 1710.73169, -81.23710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 676.68640, 1710.73169, -81.23710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 686.28302, 1710.73169, -81.23710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 647.97333, 1701.22534, -81.23711,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 657.57123, 1701.22534, -81.23710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 667.19019, 1701.22534, -81.23710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 676.73212, 1701.22534, -81.23710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 686.33331, 1701.22534, -81.23710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 643.13684, 1705.94141, -81.23710,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1535, 643.20789, 1705.15454, -82.86480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2924, 651.07379, 1710.66992, -81.63830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 659.30048, 1710.66992, -81.63830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 668.87512, 1710.66992, -81.63830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 677.63306, 1710.68909, -81.63830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 677.83148, 1701.32080, -81.63830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 668.91028, 1701.32080, -81.63830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 660.30542, 1701.32080, -81.63830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 654.41089, 1701.32080, -81.63830,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1442, 643.75787, 1710.02332, -82.27840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 643.62769, 1701.73865, -82.27840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 665.88269, 1701.68176, -82.27840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 666.00787, 1710.22400, -82.27840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 684.36664, 1701.70935, -82.27840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 684.37250, 1710.13477, -82.27840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 672.88892, 1710.24414, -82.87479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 655.51495, 1710.21838, -82.87479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 651.71460, 1701.72131, -82.87480,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1728, 674.67657, 1701.67957, -82.87480,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2672, 671.63751, 1709.33118, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 676.92273, 1709.34412, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 683.21082, 1703.44128, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 682.05902, 1702.70972, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 682.29480, 1708.39685, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 671.32526, 1702.76941, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 663.57446, 1702.57446, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 662.28845, 1709.48022, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 653.95203, 1709.13965, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 647.58185, 1709.41003, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 647.13019, 1702.56946, -82.59670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 659.92505, 1705.98755, -79.49650,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 649.51135, 1705.97925, -79.49650,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 639.05817, 1705.97327, -79.49650,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 670.43097, 1705.98145, -79.49650,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(12950, 685.52722, 1706.02075, -82.26630,   0.00000, 0.00000, 270.12030);
	CreateDynamicObject(19380, 680.73279, 1706.01099, -79.49650,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19455, 685.08539, 1700.65295, -81.23710,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19455, 685.10840, 1711.55298, -81.23710,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19455, 689.98328, 1705.38977, -81.23710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 689.95831, 1706.81970, -81.23710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 689.02740, 1706.10938, -84.29270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19378, 690.25781, 1705.98438, -82.95740,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 696.12109, 1705.99219, -79.02890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19455, 695.61212, 1701.09326, -77.39760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 706.49432, 1705.99219, -79.02890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 716.97412, 1705.99072, -79.02890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 727.42041, 1705.99268, -79.02890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19455, 690.87421, 1700.63220, -77.39760,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19455, 690.87421, 1711.47656, -77.39760,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19455, 686.11877, 1705.39380, -77.82970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 689.02740, 1706.10938, -80.83790,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19455, 686.14227, 1705.37793, -74.32320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 686.03088, 1706.75427, -77.82970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 686.05048, 1706.74988, -74.34120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 685.90277, 1705.46594, -77.83470,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19380, 691.12335, 1705.91052, -75.67010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19455, 685.92279, 1705.46594, -74.33981,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19455, 695.75354, 1710.82239, -77.39760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 705.25049, 1701.09326, -77.39760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 714.85217, 1701.09326, -77.39760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 724.46588, 1701.09326, -77.39760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 734.10168, 1701.09326, -77.39760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 705.36432, 1710.82239, -77.39760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 714.94843, 1710.82239, -77.39760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 724.48547, 1710.82239, -77.39760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 734.02142, 1710.82239, -77.39760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 737.82776, 1700.72632, -80.68034,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19455, 732.67694, 1705.97449, -77.39760,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 698.25122, 1710.78540, -77.72180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 707.49072, 1710.78540, -77.72180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 717.49573, 1710.78540, -77.72180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 727.13300, 1710.78540, -77.72180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 698.04572, 1701.16003, -77.72180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 707.11230, 1701.16003, -77.72180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 716.94452, 1701.17847, -77.72180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2924, 726.90820, 1701.16003, -77.72180,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1442, 691.37415, 1710.28821, -78.33700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 691.35785, 1701.51721, -78.33700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 703.96399, 1710.34900, -78.33700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 713.30267, 1701.61853, -78.33700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 722.81604, 1710.23792, -78.33700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 731.81256, 1701.73157, -78.33700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 732.04755, 1710.31775, -78.33700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 704.56671, 1701.60083, -79.00900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1728, 722.86920, 1701.60083, -79.00900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1728, 712.36121, 1710.14624, -79.00900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1728, 732.06989, 1707.14099, -79.00900,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2672, 700.99579, 1702.42688, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 694.53265, 1702.41699, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 693.14435, 1708.71240, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 701.82031, 1709.68494, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 710.49231, 1709.54639, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 715.62268, 1709.36780, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 725.40558, 1703.44116, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 719.35358, 1702.56921, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 731.20697, 1708.51440, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 731.34155, 1703.36060, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 725.41449, 1709.33972, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 720.48590, 1709.38000, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2672, 709.60876, 1702.42322, -78.65200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 701.56281, 1705.94702, -75.67010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 712.00507, 1705.93604, -75.67010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 722.52802, 1705.93604, -75.67010,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 732.96149, 1705.93604, -75.67010,   0.00000, 90.00000, 0.00000);

//============================================PARCARE PECO SUD=================================================//
	CreateDynamicObject(8041, 1923.95239, -1798.53650, 18.24832,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1906.44275, -1802.08447, 12.52580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1906.44275, -1811.71887, 12.52580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1916.91772, -1802.08447, 12.52580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1916.91772, -1811.71887, 12.52580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1927.37927, -1802.08447, 12.52580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1937.85925, -1802.08447, 12.52580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1946.45911, -1802.08447, 12.52580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1927.37927, -1811.71887, 12.52580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1937.87476, -1811.71887, 12.52580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1946.45361, -1811.71082, 12.52580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(8674, 1901.24670, -1811.33057, 13.97420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1901.24670, -1802.37927, 13.97420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1906.40125, -1797.20081, 13.97420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1909.00256, -1797.20081, 13.97420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1946.55188, -1797.20081, 13.97420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1938.85083, -1797.20081, 13.97420,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(8674, 1951.71460, -1802.37927, 13.97420,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(8674, 1951.71460, -1811.33057, 13.97420,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(8674, 1946.55188, -1816.55713, 13.97420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1936.24255, -1816.55713, 13.97420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1925.93872, -1816.55713, 13.97420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1915.65771, -1816.55713, 13.97420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1906.40515, -1816.55713, 13.97420,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(3578, 1951.43005, -1811.40002, 11.88210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1946.56494, -1811.40002, 11.88210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1941.46350, -1811.40002, 11.88210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1936.25867, -1811.40002, 11.88210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1931.19043, -1811.40002, 11.88210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1926.00220, -1811.40002, 11.88210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1920.85864, -1811.40002, 11.88210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1915.65173, -1811.40002, 11.88210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1910.59375, -1811.40002, 11.88210,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 1905.49353, -1811.40002, 11.88210,   0.00000, 0.00000, 90.00000);
//============================================JEFERSON MOTEL COMPLEX===========================================//
	CreateDynamicObject(19362, 314.14874, 137.82391, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.14871, 134.61771, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.64999, 134.62000, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.64999, 137.83000, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.14871, 141.02000, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.14871, 144.23000, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.15256, 147.41910, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.15067, 150.62711, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.15137, 153.84018, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.64999, 141.02000, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.64999, 144.23399, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.65424, 147.42555, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.65192, 150.63708, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.64999, 153.84019, 1002.01703,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14407, 314.20065, 157.39700, 1001.76862,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19353, 309.00000, 134.62061, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 137.82370, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 141.02370, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 144.22369, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 147.42340, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 150.62309, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 153.82320, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 310.63715, 155.25897, 1003.82361,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 310.68307, 133.09567, 1003.82361,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 313.88480, 133.09570, 1003.82361,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 315.55774, 134.62495, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55771, 137.83110, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55771, 141.03120, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55771, 144.23129, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55771, 147.41260, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55771, 150.57890, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55771, 153.76190, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55771, 155.84731, 1003.82361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14407, 310.34451, 160.37625, 1002.32227,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 313.97922, 160.81660, 1004.90118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 158.40460, 1003.82117,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 161.02100, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 156.83020, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.48651, 160.81660, 1004.90118,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19353, 312.18671, 156.87611, 1003.75653,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 161.01210, 1003.82123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 157.83791, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 154.65790, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 151.49831, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 148.31900, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 145.13989, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 141.93770, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 138.73680, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 135.55600, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 315.55890, 132.37601, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 313.88480, 133.09570, 1007.30969,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 310.68311, 133.09570, 1007.30969,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 309.00000, 134.62061, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 137.82370, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 141.02370, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 144.22369, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 147.42340, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 150.62309, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 153.82320, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 313.88239, 162.50571, 1003.82123,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 310.69711, 162.50571, 1003.82123,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 309.00000, 160.82159, 1003.82123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 157.63640, 1003.82123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 313.88239, 162.50571, 1007.30969,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 310.69711, 162.50571, 1007.30969,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19353, 309.00000, 160.82159, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 157.63640, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 309.00000, 157.01642, 1007.30969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 312.18671, 156.95720, 1003.73688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 312.18671, 157.27800, 1003.51752,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19353, 312.18671, 157.59650, 1003.31738,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 153.64960, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 150.48990, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 147.29761, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 144.08740, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 140.90359, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.07254, 153.62129, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.04752, 150.45909, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.07510, 147.31891, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.08621, 144.15855, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.07007, 140.98784, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.06958, 137.80144, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.13846, 134.62524, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60562, 137.76358, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.69894, 134.58391, 1005.51520,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.69894, 134.58391, 1009.09485,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60559, 137.76360, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 140.90359, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 144.08740, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 147.29761, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 150.48990, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 153.64960, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.60001, 156.83020, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.07251, 153.62131, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.04749, 150.45911, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.07510, 147.31889, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.08621, 144.15860, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.07010, 140.98779, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.06961, 137.80141, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.13849, 134.62520, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.59467, 159.99153, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 310.59509, 163.17464, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.05380, 156.80595, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.03427, 159.92775, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19362, 314.01364, 163.07156, 1009.09479,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1506, 311.49561, 133.16817, 1002.04803,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1504, 309.09122, 134.44255, 1002.01062,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1504, 309.07419, 139.94370, 1002.01062,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1504, 309.06732, 145.24924, 1002.01062,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1504, 309.07886, 151.07802, 1002.01062,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1504, 315.46442, 135.93881, 1002.01062,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1504, 315.46616, 141.65877, 1002.01062,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1504, 315.47000, 146.67946, 1002.01062,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1504, 315.46387, 152.66248, 1002.01062,   0.00000, 0.00000, 270.48001);
	CreateDynamicObject(1504, 315.46439, 135.93880, 1005.52631,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1504, 315.43707, 142.10503, 1005.52631,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1504, 315.48172, 147.48563, 1005.52631,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1504, 315.45425, 153.36502, 1005.52631,   0.00000, 0.00000, 270.48001);
	CreateDynamicObject(1504, 309.09119, 134.44260, 1005.52631,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1504, 309.09402, 139.74472, 1005.52631,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1504, 309.06729, 145.24921, 1005.52631,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1504, 309.07626, 151.54875, 1005.52631,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2286, 315.40823, 138.08502, 1004.16534,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2266, 309.63464, 137.97829, 1003.67249,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2268, 314.95898, 148.82339, 1003.77484,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2270, 310.64026, 154.65746, 1004.00726,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2275, 312.05865, 133.73744, 1007.43378,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2281, 309.62241, 149.02742, 1004.03284,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2264, 312.40533, 161.89529, 1007.30652,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2269, 314.95779, 138.33051, 1007.40259,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2276, 309.65677, 137.95374, 1007.35181,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2282, 309.63223, 149.18379, 1007.35571,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2283, 315.43292, 149.56824, 1007.78326,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2240, 309.45389, 154.81754, 1002.58148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2240, 309.40390, 133.38853, 1002.58148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2240, 315.10391, 133.54942, 1002.58148,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 309.42154, 133.48384, 1005.60254,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(948, 315.08450, 133.48225, 1005.60254,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(948, 309.46008, 162.00008, 1004.94208,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(948, 315.06921, 162.02943, 1004.94208,   0.00000, 0.00000, 0.30000);
//====================================================BARIERA LS===============================================//
	CreateDynamicObject(4639, 66.18296, -1532.32959, 5.70271,   0.00000, 0.00000, -10.08000);
	CreateDynamicObject(4639, 59.86925, -1534.34131, 5.70271,   0.00000, 0.00000, 172.74011);
	CreateDynamicObject(970, 67.49004, -1534.35742, 4.53876,   0.00000, 0.00000, 81.83998);
	CreateDynamicObject(970, 65.13836, -1536.10632, 4.53880,   0.00000, 0.00000, 172.25998);
	CreateDynamicObject(970, 61.07675, -1535.50500, 4.53880,   0.00000, 0.00000, 170.94003);
	CreateDynamicObject(970, 62.73414, -1530.69104, 4.53880,   0.00000, 0.00000, 169.32010);
	CreateDynamicObject(970, 58.65719, -1529.93677, 4.53880,   0.00000, 0.00000, 169.74008);
	CreateDynamicObject(970, 54.61731, -1529.20337, 4.53880,   0.00000, 0.00000, 169.74008);
	CreateDynamicObject(970, 50.55988, -1528.47473, 4.53880,   0.00000, 0.00000, 169.74008);
	CreateDynamicObject(970, 46.50737, -1527.73132, 4.53880,   0.00000, 0.00000, 169.74008);
	CreateDynamicObject(970, 42.44864, -1527.02368, 4.53880,   0.00000, 0.00000, 170.58005);
	CreateDynamicObject(970, 38.38451, -1526.34692, 4.53880,   0.00000, 0.00000, 170.28004);
	CreateDynamicObject(970, 34.30321, -1525.65588, 4.53880,   0.00000, 0.00000, 170.28004);
	CreateDynamicObject(970, 38.38451, -1526.34692, 4.53880,   0.00000, 0.00000, 170.28004);
	CreateDynamicObject(970, 30.24470, -1524.95508, 4.39996,   0.00000, 4.00000, 170.28000);
	CreateDynamicObject(970, 26.16059, -1524.26636, 4.10552,   0.00000, 4.00000, 170.28000);
	CreateDynamicObject(970, 22.12637, -1523.61731, 3.82968,   0.00000, 4.00000, 171.35995);
	CreateDynamicObject(970, 18.03948, -1522.96033, 3.54714,   0.00000, 4.00000, 170.57999);
	CreateDynamicObject(970, 13.97385, -1522.28577, 3.26774,   0.00000, 4.00000, 170.57999);
	CreateDynamicObject(970, 9.91807, -1521.61084, 2.98424,   0.00000, 4.00000, 170.57999);
	CreateDynamicObject(970, 5.85950, -1520.94727, 2.67049,   0.00000, 4.00000, 170.57999);
	CreateDynamicObject(970, 1.78896, -1520.27893, 2.39534,   0.00000, 4.00000, 170.81998);
	CreateDynamicObject(970, -2.26488, -1519.72986, 2.09005,   0.00000, 4.00000, 173.70003);
	CreateDynamicObject(970, -6.36299, -1519.28918, 1.79078,   0.00000, 4.00000, 173.70003);
	CreateDynamicObject(970, -10.45572, -1518.81592, 1.51524,   0.00000, 4.00000, 172.92006);
	CreateDynamicObject(970, -13.42736, -1518.45361, 1.30061,   0.00000, 4.00000, 172.92006);
	CreateDynamicObject(970, -13.51354, -1518.80908, 1.30061,   0.00000, 4.00000, 162.47989);
	CreateDynamicObject(970, -9.59853, -1520.05396, 1.60393,   0.00000, 4.00000, 162.47989);
	CreateDynamicObject(970, -5.66999, -1521.25696, 1.89261,   0.00000, 4.00000, 163.43985);
	CreateDynamicObject(970, -1.70497, -1522.42615, 2.18087,   0.00000, 4.00000, 163.79984);
	CreateDynamicObject(970, 2.26977, -1523.50891, 2.45522,   0.00000, 4.00000, 165.47977);
	CreateDynamicObject(970, 6.26936, -1524.55298, 2.72923,   0.00000, 4.00000, 165.47977);
	CreateDynamicObject(970, 10.24306, -1525.57813, 3.00936,   0.00000, 4.00000, 165.47977);
	CreateDynamicObject(970, 14.22829, -1526.60742, 3.29509,   0.00000, 4.00000, 165.47977);
	CreateDynamicObject(970, 18.22932, -1527.64417, 3.58403,   0.00000, 4.00000, 165.47977);
	CreateDynamicObject(970, 22.22489, -1528.67627, 3.86629,   0.00000, 4.00000, 165.47977);
	CreateDynamicObject(970, 26.22556, -1529.71826, 4.14613,   0.00000, 4.00000, 165.47977);
	CreateDynamicObject(970, 30.22698, -1530.74683, 4.43030,   0.00000, 4.00000, 165.47977);
	CreateDynamicObject(970, 34.21988, -1531.67249, 4.57199,   0.00000, 0.00000, 168.36012);
	CreateDynamicObject(970, 38.25887, -1532.38538, 4.57199,   0.00000, 0.00000, 171.60004);
	CreateDynamicObject(970, 42.33806, -1532.98499, 4.57199,   0.00000, 0.00000, 171.60004);
	CreateDynamicObject(970, 46.42264, -1533.53662, 4.57199,   0.00000, 0.00000, 172.91998);
	CreateDynamicObject(970, 50.51339, -1534.05884, 4.57199,   0.00000, 0.00000, 172.32001);
	CreateDynamicObject(970, 54.59831, -1534.59705, 4.57199,   0.00000, 0.00000, 172.32001);
	CreateDynamicObject(970, 58.68837, -1535.15637, 4.57199,   0.00000, 0.00000, 172.32001);
	CreateDynamicObject(19127, -15.45289, -1518.25842, 1.31855,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 67.14954, -1536.32336, 4.68619,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 58.66781, -1530.02063, 4.68619,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 50.53226, -1534.02380, 4.68619,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 42.39286, -1527.11206, 4.68619,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 34.19661, -1531.63489, 4.68619,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 28.18868, -1524.68835, 4.37532,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 22.23920, -1528.62366, 3.98190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 16.00371, -1522.70679, 3.62984,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 8.29380, -1525.00574, 3.03969,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1.77560, -1520.37463, 2.53831,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, -5.67133, -1521.19861, 2.09907,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, -10.47519, -1518.88232, 1.81919,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 57.66176, -1535.40503, 4.25950,   0.00000, 0.00000, -8.28000);
	CreateDynamicObject(9131, 56.68582, -1542.88318, 4.25950,   0.00000, 0.00000, -8.28000);
	CreateDynamicObject(9131, 56.58272, -1543.62927, 4.25950,   0.00000, 0.00000, -8.28000);
	CreateDynamicObject(9131, 56.47892, -1544.36462, 4.25950,   0.00000, 0.00000, -8.28000);
	CreateDynamicObject(19127, 56.64473, -1542.88647, 5.40400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 63.40280, -1530.42285, 4.25950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 63.39740, -1521.49890, 4.25950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 63.40280, -1522.21899, 4.25950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 63.40280, -1529.70764, 4.25950,   0.00000, 0.00000, 0.00000);

	barieraLS2 = CreateObject(968, 63.40188, -1522.28833, 5.13980,   0.00000, -90.00000, 90.00000);
	barieraLS = CreateObject(968,57.6492, -1535.4741, 5.1398,0.0000, 90.0000, -98.2800);
//==========================================================BARIERA LV======================================//
	CreateDynamicObject(4639, 1781.23596, 649.35358, 19.29728,   0.00000, 0.00000, 256.08008);
	CreateDynamicObject(4639, 1772.75671, 651.26251, 19.29728,   0.00000, 0.00000, 436.74030);
	CreateDynamicObject(970, 1775.25220, 649.00641, 17.97337,   0.00000, 0.00000, -12.12000);
	CreateDynamicObject(970, 1779.26953, 648.14484, 17.97337,   0.00000, 0.00000, -12.12000);
	CreateDynamicObject(970, 1781.22681, 653.17737, 17.71930,   0.00000, 3.00000, 77.81999);
	CreateDynamicObject(970, 1782.08667, 657.20319, 17.48630,   0.00000, 3.00000, 77.99998);
	CreateDynamicObject(970, 1774.51013, 654.66162, 17.71930,   0.00000, 3.00000, 77.81999);
	CreateDynamicObject(970, 1775.37573, 658.68005, 17.48630,   0.00000, 3.00000, 77.99998);
	CreateDynamicObject(970, 1777.81677, 660.25476, 17.37048,   0.00000, 0.00000, -12.12000);
	CreateDynamicObject(970, 1780.50061, 659.67078, 17.37048,   0.00000, 0.00000, -12.12000);
	CreateDynamicObject(19127, 1782.43665, 659.15692, 17.55899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1775.75842, 660.61755, 17.55899,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1793.84656, 646.61877, 18.06671,   0.00000, 0.00000, -12.12000);
	CreateDynamicObject(970, 1791.80603, 647.07251, 18.06671,   0.00000, 0.00000, -12.12000);
	CreateDynamicObject(9131, 1789.61414, 647.63666, 18.01311,   0.00000, 0.00000, -11.88000);
	CreateDynamicObject(970, 1760.18860, 654.38153, 17.98640,   0.00000, 0.00000, -12.12000);
	CreateDynamicObject(970, 1762.22449, 653.93982, 17.98640,   0.00000, 0.00000, -12.12000);
	CreateDynamicObject(9131, 1764.32690, 653.46777, 18.01311,   0.00000, 0.00000, -11.88000);

	barieraLV = CreateObject(968, 1789.43347, 647.66431, 18.65376,   0.00000, -90.00000, -11.88001);
	barieraLV2 = CreateObject(968, 1764.49365, 653.49512, 18.65380,   0.00000, 90.00000, -11.88000);
//==========================================================BARIERA SF======================================//
	CreateDynamicObject(970, -1647.72253, 546.14087, 37.99517,   0.00000, 0.00000, -43.92001);
	CreateDynamicObject(4639, -1654.45520, 553.07153, 39.03679,   0.00000, 0.00000, 226.19991);
	CreateDynamicObject(4639, -1659.22180, 557.39111, 39.03679,   0.00000, 0.00000, 406.73993);
	CreateDynamicObject(970, -1657.80115, 554.16907, 38.48020,   0.00000, 0.00000, -43.92001);
	CreateDynamicObject(970, -1655.72290, 556.46954, 38.48020,   0.00000, 0.00000, -43.92001);
	CreateDynamicObject(970, -1665.86743, 564.64899, 37.99517,   0.00000, 0.00000, -43.92001);
	CreateDynamicObject(9131, -1664.56885, 563.48218, 37.63499,   0.00000, 0.00000, 45.60000);
	CreateDynamicObject(9131, -1648.96460, 547.38812, 37.63499,   0.00000, 0.00000, 45.60000);

	barieraSF = CreateObject(968, -1664.53113, 563.42999, 38.44354,   0.00000, -90.00000, 135.96001);
	barieraSF2 = CreateObject(968, -1648.99268, 547.42462, 38.44350,   0.00000, 90.00000, 135.96001);
	barieraSF3 = CreateObject(968, -2689.76294, 1274.25537, 55.60280,   0.00000, 90.00000, 0.00000);
	barieraSF4 = CreateObject(968, -2691.18042, 1274.25537, 55.58320,   0.00000, -90.00000, 0.00000);
	barieraSF5 = CreateObject(968, -2671.58496, 1274.25537, 55.60283,   0.00000, 90.00000, 0.00000);
	barieraSF6 = CreateObject(968, -2673.17847, 1274.25537, 55.58320,   0.00000, -90.00000, 0.00000);
//==================================================SERVICE REPAIR===================================//
	CreateDynamicObject(971, 1015.57703, -913.60260, 41.20193,   0.00000, 0.00000, 8.46000);
	servicepeconord = CreateObject(10575, 1017.57013, -922.08051, 42.51389,   0.00000, 0.00000, -82.68000);
    CreateDynamicObject(971, 1912.70508, -1780.67456, 12.10105,   0.00000, 0.00000, 0.00000);
	servicepecosud = CreateObject(10575, 1912.0736, -1771.8940, 13.7736,   0.00000, 0.00000, 90.00000);

	Create3DTextLabel("{FFFFFF}Scrie {FBFB04}/servicerepair{FFFFFF} pentru a repara masina",COLOR_WHITE,1017.7125,-917.7939,42.1797,10.0,0);
	Create3DTextLabel("{FFFFFF}Scrie {FBFB04}/servicerepair{FFFFFF} pentru a repara masina",COLOR_WHITE,1911.2708,-1776.4354,13.3828,10.0,0);
	Create3DTextLabel("{FFFFFF}Scrie {FBFB04}/servicerepair{FFFFFF} pentru a repara masina",COLOR_WHITE,-110.9694,1133.2971,19.7422,10.0,0);
//======================================COMPLEX PERSHIG SQUARE=====================//
	CreateDynamicObject(19378, 174.77980, 2499.51782, -90.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 164.29010, 2499.52075, -90.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 164.29739, 2489.89746, -90.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 174.79372, 2489.90063, -90.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19363, 163.87869, 2485.16138, -88.17490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19392, 160.67178, 2485.16260, -88.17410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19363, 167.07910, 2485.16650, -88.17490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19363, 170.28677, 2485.15820, -88.17490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19363, 163.72479, 2484.94775, -88.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19409, 163.73309, 2488.14136, -88.17580,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19363, 159.17436, 2486.78711, -88.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19363, 159.16769, 2489.98584, -88.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19363, 159.17349, 2493.18628, -88.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19363, 165.25096, 2489.65845, -88.17490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19392, 168.45520, 2489.65918, -88.17410,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19363, 169.98030, 2488.13159, -88.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19363, 169.97540, 2484.92065, -88.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 159.88916, 2485.16260, -89.91560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19363, 177.07080, 2485.15771, -88.17490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19363, 180.28000, 2485.16260, -88.17490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 179.89951, 2489.94312, -88.17400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 179.90710, 2499.56201, -88.17400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 159.16940, 2499.60229, -88.17400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 163.74492, 2497.63672, -88.17400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 168.49973, 2502.36963, -88.17400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 164.28760, 2509.14429, -90.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 174.76860, 2509.14600, -90.00000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19455, 173.25882, 2497.62500, -88.17400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 168.50482, 2492.90332, -88.17400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 168.62422, 2506.17798, -88.17400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 159.17409, 2509.22510, -88.17400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14596, 186.41576, 2501.68774, -90.83660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 179.88539, 2511.28223, -88.17400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 173.37082, 2510.92456, -88.17400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19455, 175.14182, 2513.86133, -88.17400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19455, 165.53920, 2513.85669, -88.17400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19363, 159.15710, 2513.86646, -88.17490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19363, 163.88513, 2507.70776, -88.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19363, 163.88901, 2514.11157, -88.17490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19392, 163.87959, 2510.91113, -88.17410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2605, 164.34128, 2488.21069, -89.51270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, 163.83501, 2485.85693, -89.91280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1712, 169.49014, 2488.01831, -89.91260,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2235, 167.11861, 2485.17480, -89.91300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1549, 169.27350, 2485.55396, -89.91270,   0.00000, 0.00000, 50.00000);
	CreateDynamicObject(2855, 167.38684, 2485.66064, -89.42720,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(2238, 168.01799, 2485.70264, -89.00730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1806, 165.13179, 2487.77808, -89.91270,   0.00000, 0.00000, 20.00000);
	CreateDynamicObject(2260, 167.10005, 2485.72119, -88.01350,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19466, 163.72301, 2488.34766, -87.57560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1330, 163.13237, 2485.76978, -89.45270,   0.00000, 0.00000, 9.00000);
	CreateDynamicObject(19314, 168.45410, 2489.77148, -87.17090,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19347, 164.41870, 2488.08667, -89.09620,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18641, 164.12950, 2488.08667, -89.07620,   -90.00000, 90.00000, 50.00000);
	CreateDynamicObject(19474, 171.26967, 2509.96973, -89.35330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1712, 166.87361, 2506.81812, -89.91270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1823, 165.57867, 2508.09082, -89.91281,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2854, 166.00230, 2508.56079, -89.41910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1330, 172.82903, 2506.71997, -89.47330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1210, 167.33705, 2506.90210, -89.75360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2681, 166.52754, 2513.18677, -89.91290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1330, 164.40500, 2513.38135, -89.47300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2779, 168.21278, 2513.17163, -89.91261,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1731, 162.48328, 2485.39380, -88.01810,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19133, 159.23019, 2488.37329, -88.33640,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 163.72600, 2499.71265, -89.94700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1535, 163.71417, 2493.98535, -89.94700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1731, 163.50400, 2497.59253, -87.83990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 173.32091, 2499.86182, -89.94700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1535, 173.33266, 2493.99829, -89.94700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1731, 173.49640, 2497.80298, -87.57090,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1330, 179.36600, 2485.72900, -89.47500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2268, 178.24561, 2485.75195, -88.41080,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1731, 176.99229, 2485.39673, -87.97100,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1535, 179.87212, 2488.10010, -89.91460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1535, 179.87938, 2493.96436, -89.91460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1535, 176.09503, 2513.80713, -89.91460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 179.86699, 2509.65332, -89.91460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1330, 173.83974, 2513.33154, -89.47390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1731, 178.58060, 2513.62769, -87.66010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1731, 179.64020, 2512.53760, -87.66010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2265, 174.91240, 2513.27661, -88.18660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 160.87723, 2513.80151, -89.91460,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 159.23965, 2509.26245, -89.91460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1731, 159.41716, 2512.26025, -87.50900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1731, 160.00648, 2513.62256, -87.50900,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1330, 159.63036, 2513.34570, -89.47300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2286, 173.25191, 2509.66235, -87.88730,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1535, 159.22736, 2499.93921, -89.91460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1535, 159.24034, 2493.97559, -89.91460,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1731, 159.43825, 2497.80981, -87.50900,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1731, 179.63503, 2491.67847, -87.66010,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19379, 164.30305, 2489.91040, -86.43420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 174.80309, 2489.92944, -86.43420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 174.78734, 2499.53394, -86.43420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 164.35258, 2499.54517, -86.43420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 165.42210, 2509.16895, -86.43420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 175.91251, 2509.17017, -86.43420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 154.99165, 2509.14917, -86.43420,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(14775, 174.50310, 2501.26904, -93.72490,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19375, 176.28770, 2506.15063, -84.21410,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 165.81107, 2506.15820, -84.21410,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 155.32430, 2506.15796, -84.21410,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, 180.74741, 2502.76489, -82.43080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, 180.75220, 2508.09131, -82.43080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 176.10500, 2509.78589, -82.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 166.47780, 2509.80005, -82.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 156.87546, 2509.79883, -82.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 166.54799, 2501.34448, -82.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 156.91534, 2501.34351, -82.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 152.51118, 2505.47192, -82.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 152.58865, 2505.07666, -84.13050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1535, 162.06996, 2509.73535, -84.13050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 162.98871, 2501.40332, -84.13050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 169.76723, 2509.73535, -84.13050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 177.12770, 2509.72754, -84.13050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19380, 176.25819, 2505.61157, -80.61000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 165.80792, 2505.60229, -80.61000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 155.31279, 2505.63184, -80.61000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 180.77750, 2505.70728, -76.12000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19375, 176.33250, 2496.53442, -84.21410,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 176.33566, 2486.90967, -84.21410,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, 171.28337, 2496.60547, -82.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 171.27251, 2486.98560, -82.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 180.75031, 2496.41187, -82.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 180.75990, 2486.79810, -82.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 176.08130, 2485.14868, -82.43000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1330, 178.24197, 2485.86890, -83.68860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1535, 180.73372, 2490.51587, -84.13050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1535, 180.73009, 2497.61230, -84.13050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1712, 179.99945, 2487.48560, -84.12810,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(2261, 178.28606, 2485.76196, -82.17560,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2260, 171.84410, 2487.32690, -82.21700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2262, 171.85159, 2492.88452, -82.13970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2263, 171.86945, 2495.82813, -81.89590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2264, 171.87030, 2498.90015, -82.09670,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2265, 171.84715, 2490.49463, -82.12310,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19380, 176.20483, 2495.98071, -80.61000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 176.20393, 2486.34692, -80.61000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 185.04231, 2507.92749, -91.13545,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19363, 173.94389, 2485.15796, -88.17490,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19363, 171.98680, 2485.15820, -88.17490,   0.00000, 0.00000, 90.00000);
// SAN NEWS
	CreateObject(19378, 695.22394, -563.71893, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 695.19452, -573.33038, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, 700.26837, -568.44690, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 690.04718, -560.79810, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 695.51660, -563.20648, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 685.92029, -563.20648, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14393, 681.24371, -576.27069, -50.97140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 690.04724, -570.33374, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 690.04718, -582.92291, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14391, 682.76819, -577.19006, -52.24970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 673.01398, -578.90411, -53.36580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 673.01398, -575.98877, -53.36580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 674.62292, -578.59729, -53.24560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2311, 674.62018, -575.78491, -53.24560,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, 674.34943, -571.90979, -53.21920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 675.65131, -580.56580, -53.21920,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19390, 700.26837, -574.85797, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 700.26837, -581.26611, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 705.10742, -579.13568, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 705.67883, -574.37689, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, 705.13922, -569.50140, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 716.15729, -574.37286, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, 714.73383, -579.13568, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 714.77411, -569.50140, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 719.51385, -574.34222, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 719.35968, -572.83350, -52.79661,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14782, 710.06689, -569.89429, -52.12522,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 711.20837, -578.65155, -53.21115,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2315, 708.79468, -578.65161, -53.21120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2846, 711.46674, -578.73254, -52.72790,   0.00000, 0.00000, 320.20587);
	CreateDynamicObject(2843, 710.64044, -579.10950, -52.71652,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2844, 709.99115, -579.18958, -52.71679,   0.00000, 0.00000, 75.78606);
	CreateDynamicObject(2846, 711.46667, -578.73248, -53.14800,   0.00000, 0.00000, 320.20590);
	CreateDynamicObject(2843, 710.64038, -579.10950, -53.14800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2844, 709.99109, -579.18958, -53.14800,   0.00000, 0.00000, 75.78610);
	CreateDynamicObject(1775, 703.96722, -578.89941, -52.18996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1775, 706.00201, -578.87433, -52.18996,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2389, 719.14551, -572.69141, -50.65250,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2389, 719.11456, -573.69507, -50.65250,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2389, 719.10345, -574.66522, -50.65250,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2389, 719.19995, -575.58197, -50.65250,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2391, 719.20868, -572.73181, -51.50880,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2391, 719.12256, -573.69165, -51.50880,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2391, 719.00629, -574.68079, -51.50880,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2391, 719.16272, -575.63171, -51.50880,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19378, 695.21503, -582.86615, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19434, 700.26837, -586.88892, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 700.26837, -558.92438, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, 701.54315, -587.65265, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, 695.20471, -587.65259, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, 688.82428, -587.65259, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, 690.04718, -576.66382, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 701.55518, -587.83496, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, 695.20837, -587.83502, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 688.79248, -587.83392, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 684.05664, -592.54388, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 684.05658, -602.17029, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 706.28595, -592.67377, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 706.28589, -602.27643, -51.48270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 688.79846, -606.90985, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 698.41492, -606.90991, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, 708.02710, -606.90991, -51.48270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 689.35669, -592.49927, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 699.82782, -592.49750, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 710.24854, -592.64142, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 689.34302, -602.13647, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 699.76111, -602.09906, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 710.20959, -602.26257, -53.29720,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2207, 693.73456, -605.23785, -53.20020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 693.74615, -604.23145, -53.29320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 693.75098, -601.45020, -53.29320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 693.74170, -598.58936, -53.29320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 693.73407, -596.32031, -53.29320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 695.63605, -604.18958, -53.29320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 695.63666, -601.43469, -53.29320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 695.62549, -598.76123, -53.29320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, 695.63989, -596.29102, -53.29320,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2207, 695.56409, -592.67719, -53.21030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1671, 692.29742, -596.52448, -52.60580,   0.00000, 0.00000, 86.17030);
	CreateDynamicObject(1671, 692.29742, -597.68872, -52.60580,   0.00000, 0.00000, 86.17030);
	CreateDynamicObject(1671, 692.29742, -599.26538, -52.60580,   0.00000, 0.00000, 86.17030);
	CreateDynamicObject(1671, 692.29742, -600.87012, -52.60580,   0.00000, 0.00000, 86.17030);
	CreateDynamicObject(1671, 692.29736, -602.68420, -52.60583,   0.00000, 0.00000, 86.17028);
	CreateDynamicObject(1671, 692.29742, -595.13538, -52.60580,   0.00000, 0.00000, 86.17030);
	CreateDynamicObject(1671, 694.66669, -606.25677, -52.50265,   0.00000, 0.00000, 153.79707);
	CreateDynamicObject(1671, 696.81848, -603.30396, -52.50270,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 696.81848, -601.64288, -52.50270,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 696.81848, -600.22522, -52.50270,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 696.81848, -598.68201, -52.50270,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 696.81848, -597.06281, -52.50270,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1671, 696.81848, -595.41840, -52.50270,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2200, 700.65930, -606.59332, -53.21700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, 690.78931, -606.66364, -53.21700,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14455, 706.16309, -597.98315, -51.64959,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, 684.09064, -593.02069, -51.64960,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1723, 684.62195, -590.66339, -53.36580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 684.62341, -602.34796, -53.36580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 705.70551, -588.77179, -53.36580,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1723, 705.65826, -600.93011, -53.36580,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1491, 700.29443, -575.59857, -53.21080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 690.08832, -577.41089, -53.21080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 694.42041, -587.76318, -53.21165,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1506, 694.45563, -563.31848, -53.19950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3811, 693.11060, -563.58710, -52.84560,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3811, 697.41357, -563.58716, -52.84560,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2614, 690.17889, -569.79266, -50.91550,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2614, 690.18695, -583.24884, -50.91550,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2614, 700.09149, -569.54614, -50.91550,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2614, 700.13794, -582.78583, -50.91550,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19380, 695.28607, -567.97540, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 695.30719, -577.58557, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 705.64264, -574.26013, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 716.06915, -574.32513, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 695.28607, -587.15692, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 701.06683, -592.65198, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 701.06567, -602.20850, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 690.57092, -602.22137, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 680.06543, -602.21136, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 690.69470, -592.68921, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 680.18683, -592.64539, -49.82330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1506, 700.20221, -586.24377, -53.19950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1506, 690.11761, -586.47028, -53.19950,   0.00000, 0.00000, 90.00000);
//====================================INTERIOR BANCA========================================//
    CreateObject(1892, 1460.63452, -989.85126, 995.19348,   0.00000, 0.00000, 0.00000);
	CreateObject(1892, 1460.73779, -994.99701, 995.19348,   0.00000, 0.00000, 0.00000);
	CreateObject(2811, 1460.36267, -996.08807, 995.09430,   0.00000, 0.00000, 0.00000);
	CreateObject(2811, 1460.32886, -988.96033, 995.09430,   0.00000, 0.00000, 0.00000);
	CreateObject(19379, -1000.00171, 995.76678, 995.76678,   0.00000, 0.00000, 125.00000);
	CreateObject(1557, 1460.61401, -990.80737, 995.19342,   0.00000, 0.00000, -90.00000);
	CreateObject(1557, 1460.60083, -993.83911, 995.19342,   0.00000, 0.00000, 90.00000);
	CreateObject(1649, 1458.58789, -977.81403, 996.63348,   0.00000, 0.00000, 0.00000);
	CreateObject(1649, 1454.15991, -977.81403, 996.63348,   0.00000, 0.00000, 0.00000);
	CreateObject(1808, 1452.66882, -978.71942, 995.05151,   0.00000, 0.00000, 0.00000);
	CreateObject(1808, 1452.59192, -958.53833, 995.05151,   0.00000, 0.00000, 0.00000);
	CreateObject(1811, 1454.70313, -969.12921, 995.75250,   0.00000, 0.00000, 76.00000);
	CreateObject(1516, 1454.45947, -970.49457, 995.29309,   0.00000, 0.00000, 0.00000);
	CreateObject(1811, 1454.44312, -971.91418, 995.75250,   0.00000, 0.00000, -99.00000);
	CreateObject(1811, 1455.31262, -957.84595, 995.75250,   0.00000, 0.00000, 90.00000);
	CreateObject(1516, 1455.23218, -959.44019, 995.29309,   0.00000, 0.00000, 0.00000);
	CreateObject(1811, 1455.18872, -960.82959, 995.75250,   0.00000, 0.00000, -99.00000);
	CreateObject(1723, 1445.05945, -957.25262, 995.11060,   0.00000, 0.00000, 0.00000);
	CreateObject(1723, 1438.61060, -957.26611, 995.11060,   0.00000, 0.00000, 0.00000);
	CreateObject(633, 1442.81067, -957.18903, 996.11169,   0.00000, 0.00000, 0.00000);
	CreateObject(633, 1436.87817, -957.06744, 996.11169,   0.00000, 0.00000, 0.00000);
	CreateObject(1663, 1459.09583, -972.33038, 995.55212,   0.00000, 0.00000, 270.00000);
	CreateObject(2165, 1458.12842, -972.81769, 995.13300,   0.00000, 0.00000, 90.00000);
	CreateObject(1663, 1459.15723, -975.87091, 995.55212,   0.00000, 0.00000, 270.00000);
	CreateObject(2165, 1458.17310, -976.59326, 995.13300,   0.00000, 0.00000, 90.00000);
	CreateObject(2161, 1460.40039, -971.80078, 996.57867,   0.00000, 0.00000, -90.00000);
	CreateObject(2161, 1460.30542, -975.46820, 996.57867,   0.00000, 0.00000, -90.00000);
	CreateObject(2165, 1458.62439, -961.74744, 995.13300,   0.00000, 0.00000, 90.00000);
	CreateObject(1663, 1459.92395, -961.23657, 995.55212,   0.00000, 0.00000, 270.00000);
	CreateObject(2165, 1458.60193, -965.32190, 995.13300,   0.00000, 0.00000, 90.00000);
	CreateObject(1663, 1459.97864, -964.52771, 995.55212,   0.00000, 0.00000, 270.00000);
	CreateObject(2161, 1460.41870, -962.67450, 996.57867,   0.00000, 0.00000, -90.00000);
	CreateObject(2773, 1430.38574, -959.30322, 995.56738,   0.00000, 0.00000, 90.00000);
	CreateObject(2165, 1428.30652, -971.52307, 995.13422,   0.00000, 0.00000, -90.00000);
	CreateObject(2008, 1427.99109, -990.32599, 995.09210,   0.00000, 0.00000, -90.00000);
	CreateObject(2309, 1426.99365, -991.13483, 995.13281,   0.00000, 0.00000, -90.00000);
	CreateObject(2183, 1423.84485, -984.97321, 995.13177,   0.00000, 0.00000, 90.00000);
	CreateObject(2183, 1439.69617, -983.65015, 995.13177,   0.00000, 0.00000, 90.00000);
	CreateObject(19378, 1455.64868, -992.90387, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19450, 1460.73230, -992.90149, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1460.73230, -983.42938, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1460.73230, -973.82050, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1460.73230, -964.19897, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1460.73230, -954.62421, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1460.73230, -1002.42139, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19388, 1455.05212, -988.12878, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19450, 1461.45801, -988.12878, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19358, 1451.85242, -988.12878, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19358, 1450.33215, -989.75378, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19388, 1450.33215, -992.94611, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19358, 1450.33215, -996.13379, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19358, 1451.98193, -997.65082, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19450, 1458.39197, -997.65082, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19378, 1455.64868, -983.25983, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1455.64868, -973.64569, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19450, 1457.36426, -977.78662, 993.52930,   0.00000, 0.00000, 90.00000);
	CreateObject(19450, 1456.77661, -977.78662, 1000.04498,   0.00000, 180.00000, 90.00000);
	CreateObject(2774, 1452.64746, -977.77051, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(1649, 1454.22876, -977.70532, 996.63348,   0.00000, 0.00000, 180.00000);
	CreateObject(1649, 1458.58789, -977.70532, 996.63348,   0.00000, 0.00000, 180.00000);
	CreateObject(19378, 1455.64868, -964.02081, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19450, 1457.36426, -968.41241, 993.52930,   0.00000, 0.00000, 90.00000);
	CreateObject(2774, 1452.69067, -968.45239, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(1649, 1458.58789, -968.43268, 996.71350,   0.00000, 0.00000, 0.00000);
	CreateObject(1649, 1454.22339, -968.43268, 996.71350,   0.00000, 0.00000, 0.00000);
	CreateObject(1649, 1454.22876, -968.39581, 996.71350,   0.00000, 0.00000, 180.00000);
	CreateObject(1649, 1458.65649, -968.39581, 996.71350,   0.00000, 0.00000, 180.00000);
	CreateObject(19450, 1456.77661, -968.41241, 1000.10498,   0.00000, 180.00000, 90.00000);
	CreateObject(2774, 1452.69067, -957.53918, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1455.84509, -956.65088, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19378, 1455.64832, -954.42389, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19450, 1446.26599, -956.65088, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19450, 1436.71301, -956.67090, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19445, 1450.32251, -992.81952, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19445, 1450.32251, -983.20288, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19445, 1450.32251, -973.58228, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19445, 1450.32251, -963.94672, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19445, 1450.32251, -954.37109, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19376, 1445.01672, -992.88391, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 1444.99402, -983.25513, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 1444.99402, -973.64081, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 1445.00720, -964.05835, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 1445.01404, -954.42969, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 1434.52966, -992.88391, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 1434.50818, -983.25513, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 1434.50818, -973.63928, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19376, 1434.55884, -964.06042, 994.98218,   0.02000, 90.00000, 0.00000);
	CreateObject(19376, 1434.54077, -954.42969, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19445, 1429.21228, -992.81952, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19445, 1429.23230, 1429.23230, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19445, 1429.21228, -983.20062, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19445, 1429.21228, -973.59387, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19445, 1429.21228, -964.00592, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19445, 1429.21228, -954.38147, 993.32141,   0.00000, 0.00000, 0.00000);
	CreateObject(19379, 1423.88538, -992.88391, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 1423.88538, -983.25513, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 1423.88538, -973.67932, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 1423.86536, -964.05804, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19379, 1423.88538, -954.42969, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19450, 1427.24939, -956.67090, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19450, 1417.83508, -956.67090, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19450, 1445.42566, -997.65082, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19450, 1435.79724, -997.65082, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19450, 1426.17639, -997.65082, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19450, 1416.59570, -997.65082, 996.77869,   0.00000, 0.00000, 90.00000);
	CreateObject(19450, 1418.74927, -992.82843, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1418.74927, -983.20532, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1418.74927, -973.72180, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1418.74927, -964.08759, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19450, 1418.74927, -954.49280, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19431, 1429.05823, -996.80127, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19358, 1429.05823, -992.80872, 994.78857,   0.00000, 0.00000, 0.00000);
	CreateObject(19358, 1429.05823, -989.61249, 994.78857,   0.00000, 0.00000, 0.00000);
	CreateObject(19431, 1429.05823, -995.20618, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19431, 1429.05823, -987.20422, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19431, 1429.05823, -985.60608, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19358, 1429.05823, -983.19940, 994.78857,   0.00000, 0.00000, 0.00000);
	CreateObject(19358, 1429.05823, -980.03381, 994.78857,   0.00000, 0.00000, 0.00000);
	CreateObject(19431, 1429.05823, -977.62531, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19431, 1429.05823, -976.08502, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19358, 1429.05823, -973.68597, 994.78857,   0.00000, 0.00000, 0.00000);
	CreateObject(19358, 1429.05823, -970.49011, 994.78857,   0.00000, 0.00000, 0.00000);
	CreateObject(19431, 1429.05823, -968.09167, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19431, 1429.05823, -966.51093, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19358, 1429.05823, -964.11499, 994.78857,   0.00000, 0.00000, 0.00000);
	CreateObject(19358, 1429.05823, -960.94220, 994.78857,   0.00000, 0.00000, 0.00000);
	CreateObject(19431, 1429.05823, -958.54138, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(19431, 1429.05823, -956.94220, 996.77869,   0.00000, 0.00000, 0.00000);
	CreateObject(2357, 1439.22327, -989.07922, 995.37128,   0.00000, 0.00000, 90.00000);
	CreateObject(2357, 1439.09485, -972.64282, 995.37128,   0.00000, 0.00000, 90.00000);
	CreateObject(2773, 1430.38574, -965.64392, 995.56738,   0.00000, 0.00000, 90.00000);
	CreateObject(2773, 1430.38574, -968.87762, 995.56738,   0.00000, 0.00000, 90.00000);
	CreateObject(2773, 1430.38574, -975.27301, 995.56738,   0.00000, 0.00000, 90.00000);
	CreateObject(2183, 1439.71558, -966.00519, 995.13177,   0.00000, 0.00000, 90.00000);
	CreateObject(2773, 1430.38574, -978.50140, 995.56738,   0.00000, 0.00000, 90.00000);
	CreateObject(2773, 1430.38574, -984.77252, 995.56738,   0.00000, 0.00000, 90.00000);
	CreateObject(2773, 1430.38574, -988.00818, 995.56738,   0.00000, 0.00000, 90.00000);
	CreateObject(2773, 1430.38574, -994.44928, 995.56738,   0.00000, 0.00000, 90.00000);
	CreateObject(1649, 1429.08838, -993.59564, 998.71228,   0.00000, 0.00000, 90.00000);
	CreateObject(19358, 1429.05823, -992.79999, 999.77643,   0.00000, 180.00000, 0.00000);
	CreateObject(19358, 1429.05823, -989.60663, 999.77643,   0.00000, 180.00000, 0.00000);
	CreateObject(1649, 1429.08838, -989.24939, 998.71228,   0.00000, 0.00000, 90.00000);
	CreateObject(1649, 1429.08838, -983.83331, 998.71228,   0.00000, 0.00000, 90.00000);
	CreateObject(1649, 1429.08838, -979.50623, 998.71228,   0.00000, 0.00000, 90.00000);
	CreateObject(19358, 1429.05823, -983.20392, 999.77643,   0.00000, 180.00000, 0.00000);
	CreateObject(19358, 1429.05823, -980.03479, 999.77643,   0.00000, 180.00000, 0.00000);
	CreateObject(1649, 1429.08838, -973.89563, 998.71228,   0.00000, 0.00000, 90.00000);
	CreateObject(1649, 1429.08838, -969.49231, 998.71228,   0.00000, 0.00000, 90.00000);
	CreateObject(19358, 1429.05823, -973.69482, 999.77643,   0.00000, 180.00000, 0.00000);
	CreateObject(19358, 1429.05823, -970.49518, 999.77643,   0.00000, 180.00000, 0.00000);
	CreateObject(1649, 1429.05823, -964.31012, 998.71228,   0.00000, 0.00000, 90.00000);
	CreateObject(1649, 1429.05823, -959.96741, 998.71228,   0.00000, 0.00000, 90.00000);
	CreateObject(19358, 1429.05823, -964.12000, 999.77643,   0.00000, 180.00000, 0.00000);
	CreateObject(19358, 1429.05823, -960.94019, 999.77643,   0.00000, 180.00000, 0.00000);
	CreateObject(19450, 1453.39648, 993.44928, 993.52930,   0.00000, 0.00000, 180.00000);
	CreateObject(3578, 1431.66724, -962.01477, 994.30090,   0.00000, 0.00000, 90.00000);
	CreateObject(3578, 1431.66724, -972.29578, 994.30090,   0.00000, 0.00000, 90.00000);
	CreateObject(3578, 1431.66724, -982.57013, 994.30090,   0.00000, 0.00000, 90.00000);
	CreateObject(3578, 1431.66724, -992.86188, 994.30090,   0.00000, 0.00000, 90.00000);
	CreateObject(3578, 1431.68005, -951.72711, 994.30090,   0.00000, 0.00000, 90.00000);
	CreateObject(633, 1448.99854, -957.24841, 996.11169,   0.00000, 0.00000, 0.00000);
	CreateObject(1723, 1433.33264, -957.45941, 995.11060,   0.00000, 0.00000, 0.00000);
	CreateObject(633, 1432.43677, -957.19318, 996.11169,   0.00000, 0.00000, 0.00000);
	CreateObject(1723, 1460.19226, -979.72021, 995.11060,   0.00000, 0.00000, 270.00000);
	CreateObject(1723, 1460.15332, -983.98511, 995.11060,   0.00000, 0.00000, 270.00000);
	CreateObject(1516, 1458.66309, -982.82300, 995.29309,   0.00000, 0.00000, 0.00000);
	CreateObject(1723, 1455.46021, -978.36401, 995.11060,   0.00000, 0.00000, 0.00000);
	CreateObject(2774, 1460.49988, -968.45239, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(2774, 1460.49988, -977.77051, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(2774, 1459.86841, -957.53918, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(2774, 1438.92529, -977.77051, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(2774, 1439.55090, -968.45239, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(2774, 1438.92529, -993.92548, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(2774, 1424.41211, -959.91156, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(2774, 1424.41211, -977.77051, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(2774, 1424.41211, -995.32959, 990.92450,   0.00000, 0.00000, 0.00000);
	CreateObject(2161, 1418.85461, -992.00366, 996.57867,   0.00000, 0.00000, 90.00000);
	CreateObject(2161, 1418.85461, -983.90820, 996.57867,   0.00000, 0.00000, 90.00000);
	CreateObject(2161, 1418.85461, -971.96661, 996.57867,   0.00000, 0.00000, 90.00000);
	CreateObject(2161, 1418.85461, -963.50702, 996.57867,   0.00000, 0.00000, 90.00000);
	CreateObject(2690, 1438.96045, -993.03430, 995.40747,   0.00000, 0.00000, 1802.00000);
	CreateObject(2961, 1438.93579, -993.05719, 996.66492,   0.00000, 0.00000, 180.00000);
	CreateObject(2962, 1438.94043, -993.04907, 996.60559,   0.00000, 0.00000, 180.00000);
	CreateObject(2195, 1440.25098, -993.89899, 995.67078,   0.00000, 0.00000, 0.00000);
	CreateObject(2195, 1447.64160, -997.28363, 995.67078,   0.00000, 0.00000, 0.00000);
	CreateObject(2195, 1460.42749, -987.35461, 995.67078,   0.00000, 0.00000, 0.00000);
	CreateObject(2690, 1439.01636, -978.70496, 995.40747,   0.00000, 0.00000, 1802.00000);
	CreateObject(2195, 1438.97668, -976.62622, 995.67078,   0.00000, 0.00000, 0.00000);
	CreateObject(2195, 1439.15186, -969.64166, 995.67078,   0.00000, 0.00000, 0.00000);
	CreateObject(2690, 1439.84558, -969.37006, 995.40747,   0.00000, 0.00000, 1802.00000);
	CreateObject(633, 1430.35632, -967.33435, 996.11169,   0.00000, 0.00000, 0.00000);
	CreateObject(633, 1430.28015, -976.80219, 996.11169,   0.00000, 0.00000, 0.00000);
	CreateObject(633, 1430.41260, -986.30017, 996.11169,   0.00000, 0.00000, 0.00000);
	CreateObject(633, 1430.39038, -996.25458, 996.11169,   0.00000, 0.00000, 0.00000);
	CreateObject(633, 1430.23730, -957.70142, 996.11169,   0.00000, 0.00000, 0.00000);
	CreateObject(1723, 1445.56091, -997.00537, 995.06372,   0.00000, 0.00000, 180.00000);
	CreateObject(1723, 1440.07886, -997.02576, 995.06372,   0.00000, 0.00000, 180.00000);
	CreateObject(1723, 1435.31763, -996.93817, 995.06372,   0.00000, 0.00000, 180.00000);
	CreateObject(2008, 1428.41431, -980.74976, 995.09210,   0.00000, 0.00000, -90.00000);
	CreateObject(2309, 1427.54346, -981.53320, 995.13281,   0.00000, 0.00000, -90.00000);
	CreateObject(2309, 1427.43079, -972.20728, 995.13281,   0.00000, 0.00000, -90.00000);
	CreateObject(2008, 1428.38965, -961.49365, 995.09210,   0.00000, 0.00000, -90.00000);
	CreateObject(2309, 1427.17419, -962.23627, 995.13281,   0.00000, 0.00000, -90.00000);
	CreateObject(2200, 1418.84082, -968.60577, 995.05688,   0.00000, 0.00000, 90.00000);
	CreateObject(2200, 1418.99109, -978.02148, 995.05688,   0.00000, 0.00000, 90.00000);
	CreateObject(2200, 1418.89844, -989.38013, 995.05688,   0.00000, 0.00000, 90.00000);
	CreateObject(2200, 1418.97852, -996.44556, 995.05688,   0.00000, 0.00000, 90.00000);
	CreateObject(2183, 1423.91846, -973.10742, 995.13177,   0.00000, 0.00000, 90.00000);
	CreateObject(2183, 1424.19922, -992.16046, 995.13177,   0.00000, 0.00000, 90.00000);
	CreateObject(19378, 1455.66931, -954.44287, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1455.64868, -964.02081, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1455.64868, -973.64569, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1455.62866, -983.25983, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1455.64868, 998.44513, 994.98218,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1445.16064, -992.88391, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1445.12903, -983.25983, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1445.18689, -973.64569, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1445.14844, -964.02081, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1445.15552, -954.42389, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1434.66199, -954.42389, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1424.16919, -954.42389, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1413.69336, -954.42389, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1434.77942, -964.02081, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1424.32275, -964.02081, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1413.82166, -964.02081, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1434.69373, -973.64569, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1424.24097, -973.64569, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1413.77771, -973.64569, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1434.63672, -983.25983, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1424.14026, -983.25983, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1413.71155, -983.25983, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1434.65991, -992.90387, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1424.17371, -992.90387, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1413.70056, -992.90387, 998.62512,   0.00000, 90.00000, 0.00000);
	CreateObject(19378, 1455.64868, -992.90387, 994.98218,   0.00000, 90.00000, 0.00000);
//==========================================IMPOUND TCC=====================================//
	CreateDynamicObject(4100, 2540.89966, -2116.77612, 14.17419,   0.00000, 0.00000, 50.09999);
	impoundgate = CreateObject(980, 2424.3372, -2085.0945, 15.1924,   0.00000, 0.00000, 90.00000);
	impoundgate2 = CreateObject(980, 2424.3118, -2096.5752, 15.1924,   0.00000, 0.00000, 90.00000);
//=====================================INTERIOR TCC=========================================//
	CreateObject(19378, -504.20517, -530.60455, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -504.21390, -540.22424, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -514.66895, -540.23077, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -514.67645, -530.61151, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -525.16455, -530.60858, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -525.13812, -540.24030, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, -510.68210, -525.91931, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -510.23099, -545.06732, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, -519.80798, -545.05823, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -511.86938, -549.86792, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -527.40295, -549.81750, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -511.89828, -559.44330, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -527.39117, -559.41760, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, -511.69571, -549.83875, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -515.11841, -549.84033, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -518.59357, -549.85297, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -522.06403, -549.85272, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -525.56030, -549.86304, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -511.72742, -559.47223, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -515.19629, -559.44684, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -518.62292, -559.45331, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -522.11273, -559.47003, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -525.60864, -559.48712, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, -522.62408, -564.19440, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -513.20569, -564.20618, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, -516.64642, -545.05811, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, -522.98468, -545.05560, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, -535.63464, -530.63922, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -535.65411, -540.20551, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, -500.62079, -545.07050, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19434, -525.34277, -545.05872, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19434, -526.89948, -545.07709, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19434, -528.48297, -545.06073, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, -530.85211, -545.06409, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, -533.98273, -545.06732, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, -537.16217, -545.07257, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -540.27612, -549.81879, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19434, -539.56982, -545.05908, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -540.27032, -559.45508, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -532.15387, -564.22607, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -541.68701, -564.21521, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19452, -529.14014, -549.88086, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -532.62018, -549.85498, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -536.12061, -549.84882, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -539.57428, -549.85724, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -539.54858, -559.44379, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -536.12793, -559.45941, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -532.63000, -559.49622, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -529.18396, -559.49786, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19407, -517.05231, -525.92688, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, -520.24969, -525.92029, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, -523.41083, -525.92609, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19434, -525.80499, -525.93481, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19434, -527.39563, -525.93408, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19434, -529.01123, -525.94458, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, -531.39685, -525.95044, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19390, -534.55463, -525.95264, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19407, -537.73096, -525.95636, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -511.92651, -521.13409, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -511.92554, -511.58801, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -527.42548, -521.14490, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -527.41516, -511.54703, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -522.71350, -506.81433, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -513.37708, -506.80493, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -540.75970, -521.22668, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -540.76117, -511.62631, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -532.25061, -506.80881, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -541.81140, -506.81631, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19434, -540.03009, -525.95386, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19452, -513.02515, -520.99347, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -516.51782, -520.98615, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -519.93738, -520.98553, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -523.41986, -520.97864, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -526.86652, -521.01904, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -530.30133, -521.04791, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -533.78650, -521.05060, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -537.28973, -521.04999, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -540.75317, -521.05121, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -512.99585, -511.52585, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -516.49530, -511.54785, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -519.98242, -511.54501, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -523.42749, -511.54636, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -526.85657, -511.54117, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -530.30219, -511.55621, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -533.75818, -511.55289, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -537.21918, -511.53497, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -540.69012, -511.54422, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, -501.10785, -525.90063, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -545.62988, -525.95667, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -545.11511, -545.05359, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, -546.12567, -530.66510, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -546.11737, -540.17188, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, -554.91278, -525.95331, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -554.72748, -545.02350, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -498.90445, -530.75482, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -498.90140, -540.35510, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -551.39075, -545.42877, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -551.39435, -526.34204, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19407, -551.39392, -539.02155, -35.77600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19407, -551.39130, -532.73755, -35.77600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19390, -551.39825, -535.88110, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, -553.09949, -540.16168, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -553.11041, -530.53369, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -556.49060, -530.55701, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -556.49683, -540.15802, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, -564.31995, -545.03430, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -564.49847, -525.95032, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19452, -559.96136, -530.55762, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -559.95599, -540.18896, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -563.42871, -530.55170, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -566.90338, -530.56049, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -570.39520, -530.57440, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -563.43671, -540.18127, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -566.93463, -540.18286, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -570.41327, -540.19714, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, -574.10010, -525.95532, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -573.81958, -545.03162, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19453, -572.23212, -530.91895, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19453, -572.23071, -540.25244, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -516.18256, -545.12238, -36.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -524.09692, -545.13232, -36.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -530.49603, -545.12097, -36.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -537.27448, -545.11963, -36.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -537.61511, -526.03528, -36.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -531.07440, -525.98395, -36.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -523.30640, -526.00049, -36.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -516.28247, -525.98230, -36.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, -516.83209, -544.98181, -36.33690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, -524.15729, -545.03247, -36.33690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, -530.46722, -545.04633, -36.33690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, -537.41461, -545.00482, -36.33690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1649, -516.62244, -525.88086, -36.33687,   0.00000, 0.00000, 180.14473);
	CreateDynamicObject(1649, -524.14349, -525.87408, -36.33687,   0.00000, 0.00000, 180.14473);
	CreateDynamicObject(1649, -531.26807, -525.89496, -36.33687,   0.00000, 0.00000, 180.14473);
	CreateDynamicObject(1649, -537.74316, -525.87659, -36.33687,   0.00000, 0.00000, 180.14473);
	CreateDynamicObject(1649, -551.31329, -532.65131, -36.45130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, -551.42798, -532.43341, -36.45130,   0.00000, 0.00000, 269.44107);
	CreateDynamicObject(1649, -551.42230, -539.05499, -36.45130,   0.00000, 0.00000, 269.44107);
	CreateDynamicObject(1649, -551.34363, -539.19769, -36.45130,   0.00000, 0.00000, 89.39195);
	CreateDynamicObject(1504, -498.95978, -535.36169, -37.49850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, -520.59338, -545.05908, -37.53860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, -534.76526, -545.04968, -37.53860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, -535.33575, -525.98529, -37.53860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, -521.03278, -525.95197, -37.53860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, -551.36603, -536.63049, -37.50920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3077, -519.51373, -507.65799, -37.51477,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, -512.00629, -521.86249, -35.97760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14455, -512.02667, -516.18994, -35.97760,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, -527.17188, -522.11438, -37.51010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, -527.26801, -519.26038, -37.51010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, -527.27734, -516.15393, -37.51010,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, -527.02393, -507.10406, -37.50912,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2184, -520.74896, -512.32672, -37.50816,   0.00000, 0.00000, 359.43283);
	CreateDynamicObject(2205, -524.49829, -515.25391, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -520.18622, -515.22278, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -516.02917, -515.29596, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -520.10809, -517.51996, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -515.96124, -517.55768, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -524.50092, -517.34961, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -520.19678, -519.67804, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -515.87500, -519.62830, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -524.52789, -519.59155, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -524.45654, -521.96832, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -520.14996, -521.94653, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2205, -515.94824, -521.90393, -37.51055,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -523.71429, -516.46661, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -523.75793, -518.79370, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -523.79779, -520.95251, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -523.82257, -523.38049, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -519.54382, -523.26141, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -519.51501, -521.00061, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -519.44177, -518.77203, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -519.51691, -516.57343, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -515.36603, -516.56464, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -515.16736, -518.95654, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -515.29535, -521.27271, -37.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2309, -519.66437, -510.46820, -37.50880,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, -511.79874, -511.68228, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -522.24402, -511.50464, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -522.21741, -521.16895, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -511.81802, -521.00366, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1723, -526.79181, -548.69647, -37.50980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, -526.81805, -552.50812, -37.50980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, -526.82446, -556.32111, -37.50980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, -526.80450, -560.29663, -37.50980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, -512.46289, -546.79352, -37.50980,   0.00000, 0.00000, 270.03754);
	CreateDynamicObject(1723, -512.48834, -550.47534, -37.50980,   0.00000, 0.00000, 270.03754);
	CreateDynamicObject(1723, -512.45160, -553.95142, -37.50980,   0.00000, 0.00000, 270.03754);
	CreateDynamicObject(1723, -512.54718, -557.55231, -37.50980,   0.00000, 0.00000, 270.03754);
	CreateDynamicObject(2200, -512.67731, -564.11658, -37.46140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2200, -525.12195, -564.11884, -37.46140,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2207, -518.52460, -560.78430, -37.51010,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2309, -519.43518, -562.49609, -37.50715,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, -522.25537, -549.83752, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -522.31500, -559.38269, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -511.86414, -559.40424, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -511.75711, -549.85822, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1884, -528.99103, -563.91772, -37.50958,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1848, -532.98114, -563.65466, -37.51260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1889, -536.93982, -563.90894, -37.50971,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, -528.32294, -550.49658, -36.97635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, -528.44745, -546.80194, -36.97635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, -528.19550, -554.09027, -36.97635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, -528.29333, -557.45715, -36.97635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, -528.24030, -560.75739, -36.97635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, -539.41895, -560.69250, -36.97635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, -539.44519, -557.34888, -36.97635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, -539.41815, -554.21228, -36.97635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, -539.38477, -550.76514, -36.97635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2746, -539.36713, -546.84625, -36.97635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2747, -539.31488, -548.92206, -37.10260,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2747, -539.30957, -552.39844, -37.10260,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2747, -539.35449, -555.70654, -37.10260,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2747, -539.26349, -558.91620, -37.10260,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2747, -528.29614, -559.22632, -37.10260,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2747, -528.31445, -555.79999, -37.10260,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2747, -528.30054, -552.28986, -37.10260,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2747, -528.39734, -548.15424, -37.10260,   0.00000, 0.00000, 360.00000);
	CreateDynamicObject(2860, -528.14941, -559.30249, -36.69094,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2860, -528.22839, -555.86047, -36.69094,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2860, -528.17395, -552.31000, -36.69094,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2860, -528.34094, -548.20728, -36.69094,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2860, -539.35626, -549.01556, -36.69094,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2860, -539.32526, -552.41345, -36.69094,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2860, -539.45032, -555.79742, -36.69094,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2860, -539.31647, -559.02344, -36.69094,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1302, -539.27148, -563.83801, -37.50840,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, -532.72192, -549.81647, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -532.80707, -559.44495, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -543.07611, -549.77411, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -543.11865, -559.37366, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2517, -539.20819, -523.81342, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2517, -539.20868, -522.45251, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2517, -539.21375, -521.11267, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2517, -539.20007, -519.75281, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2517, -539.21478, -518.41187, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2517, -539.18530, -517.12451, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2517, -539.15112, -515.70245, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2517, -539.16229, -514.30225, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2517, -539.17328, -512.90204, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2517, -539.20313, -511.53693, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2517, -539.21191, -510.15323, -37.50810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2523, -537.84546, -507.36118, -37.51600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2523, -537.17889, -507.36478, -37.51600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2523, -536.51398, -507.35333, -37.51600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2521, -534.86438, -507.33948, -37.50690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2521, -533.88116, -507.37570, -37.50690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, -534.39471, -503.29007, -37.56560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, -535.47504, -503.29913, -37.56560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, -533.28125, -503.30930, -37.56560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2521, -532.68109, -507.41513, -37.50690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19461, -532.15729, -503.29108, -37.56560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, -530.30219, -511.55621, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19452, -530.30219, -511.55621, -37.59430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2628, -528.12732, -510.06461, -37.50920,   0.00000, 0.00000, 270.32178);
	CreateDynamicObject(2628, -528.13177, -511.00644, -37.50920,   0.00000, 0.00000, 270.32178);
	CreateDynamicObject(2628, -528.09631, -511.94586, -37.50920,   0.00000, 0.00000, 270.32178);
	CreateDynamicObject(2628, -528.10413, -512.82764, -37.50920,   0.00000, 0.00000, 270.32178);
	CreateDynamicObject(2628, -528.13770, -513.73590, -37.50920,   0.00000, 0.00000, 270.32178);
	CreateDynamicObject(2627, -528.49402, -515.63727, -37.50960,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2627, -528.43835, -516.63928, -37.50960,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2627, -528.45337, -517.77234, -37.50960,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2627, -528.59406, -518.87799, -37.50960,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2627, -528.50165, -520.00629, -37.50960,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2630, -528.27692, -521.87195, -37.51440,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2630, -528.26874, -522.77191, -37.51440,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2630, -528.26221, -523.73450, -37.51440,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2630, -528.25732, -524.80200, -37.51440,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19377, -532.71387, -521.10974, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -543.21716, -521.08765, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -532.60675, -511.52957, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -543.06476, -511.49567, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2509, -572.14166, -543.76471, -35.87950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2509, -572.13544, -542.46222, -35.87950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2399, -571.84338, -544.16974, -35.42480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2399, -571.84778, -543.64661, -35.42480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2401, -571.87903, -543.11011, -35.77600,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2383, -571.91974, -542.20245, -35.75119,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2236, -569.13129, -545.07660, -37.50779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2236, -567.77100, -545.08411, -37.50779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2236, -566.39099, -545.09161, -37.50779,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2845, -568.46509, -545.35571, -37.00330,   0.00000, 0.00000, 61.00855);
	CreateDynamicObject(2845, -567.09955, -545.31702, -37.00330,   0.00000, 0.00000, 61.00855);
	CreateDynamicObject(2845, -565.75415, -545.33435, -37.00330,   0.00000, 0.00000, 61.00855);
	CreateDynamicObject(2200, -571.98132, -539.09283, -37.51650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2200, -571.97260, -536.91089, -37.51650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14782, -561.71802, -544.26727, -36.50160,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2380, -554.36133, -544.88916, -35.09483,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2380, -566.80145, -544.88098, -35.09483,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1775, -554.94427, -526.14429, -36.57785,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1302, -556.62677, -526.30072, -37.47874,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2204, -572.04285, -532.53766, -37.51060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2204, -566.01721, -526.21747, -37.51112,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, -556.50922, -540.30389, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -566.99274, -540.29376, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -566.97778, -530.69208, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19453, -572.22852, -522.36414, -35.77600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, -556.50195, -530.71973, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2614, -508.93378, -526.08051, -35.16945,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, -527.98907, -526.06458, -35.16945,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, -543.88397, -526.12817, -35.16945,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2614, -508.78061, -544.94482, -35.16940,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2614, -526.69220, -544.92303, -35.16940,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2614, -541.22406, -544.89459, -35.16940,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2714, -499.06219, -531.32379, -35.22740,   0.00000, 0.00000, 271.46783);
	CreateDynamicObject(1724, -513.70471, -526.46094, -37.50973,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, -506.08044, -526.48718, -37.50973,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, -526.09766, -526.48676, -37.50973,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, -530.12897, -526.50287, -37.50973,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1724, -505.52182, -544.39929, -37.50970,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1724, -511.44440, -544.51105, -37.50970,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1724, -525.25433, -544.47058, -37.50970,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1724, -528.80945, -544.52222, -37.50970,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3811, -499.16336, -530.85052, -37.07266,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3811, -499.22241, -538.23706, -37.07266,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, -546.03223, -540.32324, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -546.03680, -530.71655, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -535.60730, -540.23621, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -535.55566, -530.63373, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -525.17621, -530.68896, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -525.21234, -540.27527, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -514.75397, -540.49567, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -514.73486, -530.64276, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -514.68677, -532.91821, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -504.27176, -540.22394, -34.09005,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -504.21793, -530.60620, -34.09005,   0.00000, 90.00000, 0.00000);
//==================================================INTERIOR LSPD===========================//
	CreateDynamicObject(19378, -1129.00696, 2939.19116, 597.21454,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1128.98535, 2929.60400, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1139.43018, 2929.63013, 597.20801,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, -1123.93872, 2929.65845, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1123.94214, 2939.13965, 599.02496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1128.61218, 2943.79004, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1133.76904, 2943.78516, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1138.52795, 2939.07495, 599.02496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, -1123.93835, 2932.86157, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1138.51404, 2931.77710, 599.02496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1125.54517, 2928.15991, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1128.72327, 2928.16187, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, -1138.51135, 2937.27173, 596.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, -1139.05908, 2939.20581, 597.20801,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19462, -1138.50159, 2941.45679, 596.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, -1133.64587, 2943.72925, 596.74719,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, -1124.11084, 2943.75391, 596.74719,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, -1123.98047, 2938.44629, 596.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, -1124.00000, 2948.03076, 596.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, -1123.94482, 2930.53467, 596.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, -1123.95129, 2929.60547, 596.74719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19370, -1125.55676, 2928.16064, 596.74719,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, -1128.71924, 2928.18286, 596.74719,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19370, -1131.21973, 2929.39551, 596.74719,   0.00000, 0.00000, 39.72000);
	CreateDynamicObject(3859, -1131.94543, 2930.24146, 601.92438,   0.00000, 0.00000, 56.28000);
	CreateDynamicObject(19370, -1132.65857, 2931.13745, 596.74719,   0.00000, 0.00000, 39.72000);
	CreateDynamicObject(19370, -1132.65857, 2931.13745, 596.74719,   0.00000, 0.00000, 39.72000);
	CreateDynamicObject(19370, -1135.20923, 2932.41406, 596.74719,   0.00000, 0.00000, 86.76002);
	CreateDynamicObject(19370, -1138.42419, 2932.61914, 596.74719,   0.00000, 0.00000, 86.76002);
	CreateDynamicObject(3859, -1136.21753, 2932.43384, 601.92236,   0.00000, 0.00000, -76.26000);
	CreateDynamicObject(19358, -1136.98755, 2927.03931, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1130.68494, 2927.03491, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -1133.85596, 2927.03931, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1127.54431, 2927.03027, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1125.46155, 2927.03174, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1123.94348, 2928.56787, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1131.55872, 2927.62549, 599.02502,   0.00000, 0.00000, 107.21999);
	CreateDynamicObject(19378, -1118.52954, 2929.60205, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1118.56311, 2939.19849, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -1119.36523, 2938.97168, 599.02496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1122.25964, 2943.76245, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1120.87732, 2943.75610, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -1119.36975, 2932.60181, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1119.37402, 2929.45215, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1119.37854, 2926.35669, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1114.67700, 2943.75537, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, -1108.08899, 2929.64429, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1108.10876, 2939.14502, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -1105.14575, 2943.75464, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1102.94458, 2929.58716, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1102.94727, 2939.12256, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1114.62891, 2924.81543, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1105.02954, 2924.81421, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19462, -1116.27673, 2929.65796, 595.78693,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, -1116.27356, 2930.54028, 595.78693,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3859, -1116.24353, 2927.53076, 599.92291,   0.00000, 0.00000, 17.21999);
	CreateDynamicObject(3859, -1116.26245, 2932.72388, 599.92291,   0.00000, 0.00000, 17.22000);
	CreateDynamicObject(19462, -1116.26746, 2941.96899, 595.78693,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3859, -1116.25403, 2939.76001, 599.90308,   0.00000, 0.00000, 17.22000);
	CreateDynamicObject(3859, -1116.27454, 2944.93384, 599.92291,   0.00000, 0.00000, 17.22000);
	CreateDynamicObject(19462, -1116.27673, 2929.65796, 602.34723,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, -1116.27356, 2930.54028, 602.34039,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, -1116.27209, 2942.01343, 602.32098,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19462, -1116.26111, 2937.92383, 602.32098,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, -1124.62891, 2919.98535, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1135.11377, 2920.08154, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1114.16235, 2919.95703, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1103.67065, 2919.96802, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1103.69556, 2910.44556, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1114.17297, 2910.43188, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1121.73230, 2910.38452, 597.20758,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -1103.01160, 2920.01611, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1102.99548, 2910.42407, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1107.71704, 2906.16602, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1117.20361, 2906.15918, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1126.87085, 2918.58960, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1119.36365, 2924.87134, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1114.63477, 2923.32104, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1105.05579, 2923.32080, 599.02362,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1118.96216, 2923.32666, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -1125.35596, 2923.32642, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1126.88770, 2908.96729, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1122.11597, 2906.16211, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1134.96423, 2918.38086, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14407, -1128.99072, 2912.41016, 594.10223,   0.00000, 0.00000, 180.54002);
	CreateDynamicObject(14407, -1125.00085, 2904.06079, 587.79840,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(14395, -1130.07349, 2902.34424, 590.74139,   0.00000, 0.00000, -89.75999);
	CreateDynamicObject(14395, -1132.55237, 2902.28760, 590.74139,   0.00000, 0.00000, -89.28000);
	CreateDynamicObject(14409, -1133.00049, 2908.61646, 600.11481,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, -1145.60706, 2920.08374, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1149.87671, 2929.61865, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19358, -1136.58521, 2923.10254, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -1139.71252, 2923.09521, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1142.87671, 2923.09790, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1144.46521, 2918.36304, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, -1139.90991, 2910.48755, 597.20837,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -1134.96497, 2909.09521, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, -1135.06250, 2907.08423, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1139.81787, 2911.94873, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -1136.61804, 2911.94824, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -1142.98828, 2911.94727, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1144.46558, 2916.71826, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, -1140.49365, 2907.16309, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19385, -1136.61853, 2911.93677, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19385, -1136.62317, 2911.93433, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, -1138.99207, 2911.93384, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, -1136.75317, 2905.67358, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, -1138.93311, 2905.68091, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, -1140.53955, 2910.28418, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, -1140.54871, 2907.13770, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, -1145.42334, 2910.32788, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19387, -1142.99255, 2911.94141, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19387, -1142.98254, 2911.94141, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, -1141.26843, 2911.93506, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19430, -1144.71997, 2911.93359, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, -1145.43982, 2907.20361, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, -1142.16235, 2905.63989, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, -1145.30261, 2905.64502, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, -1140.36743, 2907.14624, 597.21149,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -1144.47351, 2926.66553, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1143.29138, 2930.72583, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1122.30225, 2943.29102, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1120.95911, 2943.30688, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, -1130.95862, 2910.55176, 595.59729,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, -1130.95862, 2910.55176, 592.21283,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, -1130.97253, 2900.98169, 592.08832,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, -1130.97253, 2900.98169, 595.57501,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, -1126.93140, 2910.07861, 595.59271,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, -1126.94177, 2909.97632, 592.12518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14407, -1128.92139, 2899.75586, 595.46698,   -10.00000, 180.00000, 358.73993);
	CreateDynamicObject(19447, -1126.43005, 2902.18555, 592.08832,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, -1126.43005, 2902.18555, 595.58942,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, -1122.18945, 2905.24097, 592.08832,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, -1122.18945, 2905.24097, 595.58319,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, -1126.43005, 2902.18555, 588.62561,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1113.42102, 2901.97998, 586.59998,   0.00000, 0.00000, 88.62000);
	CreateDynamicObject(19456, -1111.02673, 2906.65576, 586.59448,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, -1111.01599, 2916.20337, 586.59448,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, -1122.62939, 2906.05933, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, -1122.18945, 2905.24097, 590.05249,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1122.16748, 2905.23047, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1122.14966, 2905.39111, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1122.15100, 2905.55615, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1122.15234, 2905.72119, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1122.12976, 2905.90112, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1122.07654, 2906.04443, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1122.95251, 2902.22656, 586.59448,   0.00000, 0.00000, 88.62000);
	CreateDynamicObject(19377, -1113.26477, 2906.52051, 584.76239,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1113.00659, 2916.12671, 584.76239,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1123.48730, 2916.32300, 584.76239,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1123.55090, 2906.72754, 584.76239,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1122.50879, 2900.38843, 592.68262,   0.00000, -60.00000, 0.00000);
	CreateDynamicObject(19377, -1120.27893, 2900.62305, 591.32800,   0.00000, -60.00000, 0.00000);
	CreateDynamicObject(19447, -1120.61023, 2905.29175, 590.05249,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, -1117.13379, 2902.06445, 590.06519,   0.00000, 0.00000, 88.62000);
	CreateDynamicObject(19447, -1117.10815, 2902.05249, 593.25134,   0.00000, 0.00000, 88.62000);
	CreateDynamicObject(19447, -1126.93555, 2900.41943, 596.93719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1129.32178, 2907.30225, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1128.43420, 2907.32446, 599.02502,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1130.91357, 2910.54785, 601.56042,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1130.94690, 2910.57251, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1130.96289, 2910.57251, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1134.96851, 2910.53662, 601.56042,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1134.94824, 2918.38086, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1134.94897, 2909.09521, 599.02502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, -1131.73914, 2901.97998, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1131.74060, 2892.40723, 603.23358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1142.24475, 2901.99072, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1142.22314, 2892.44604, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1152.67407, 2892.45898, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1152.70520, 2901.98267, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1152.69409, 2882.83740, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1152.70032, 2873.23486, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1142.21008, 2882.83545, 603.22888,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1131.71631, 2882.84448, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1121.27966, 2901.97632, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1110.83350, 2901.99023, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1121.25269, 2892.40771, 603.23358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1121.21973, 2883.03125, 603.23358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1110.75330, 2882.86450, 603.23358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1110.76721, 2892.41309, 603.23358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1142.25903, 2873.22974, 603.23358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1131.79846, 2873.22559, 603.23358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1121.32166, 2873.23169, 603.23358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1110.85815, 2873.24609, 603.23358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -1139.66418, 2906.67896, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, -1131.75867, 2901.98413, 603.23352,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -1149.20789, 2906.67896, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1158.73389, 2906.67065, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1130.81409, 2911.58838, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, -1125.55542, 2911.46216, 603.23358,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1115.13684, 2911.45776, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1104.77380, 2911.46606, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1125.62915, 2921.00464, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1115.12988, 2920.98291, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1104.66406, 2920.98877, 603.23364,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -1130.81531, 2921.03662, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1126.36438, 2924.53101, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1116.87195, 2924.53345, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1107.45081, 2924.53027, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1102.69482, 2919.78906, 605.04950,   0.00000, 0.00000, 0.66000);
	CreateDynamicObject(19450, -1102.57947, 2910.25635, 605.04950,   0.00000, 0.00000, 0.66000);
	CreateDynamicObject(19450, -1126.08179, 2906.86108, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -1119.66797, 2906.86694, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1113.39502, 2906.87012, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1103.87231, 2906.84961, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -1132.30029, 2897.87695, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1135.47766, 2897.87573, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19358, -1129.15149, 2897.87573, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19404, -1127.63806, 2896.34497, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -1127.63257, 2890.07202, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1127.63293, 2893.23120, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1127.63599, 2886.90601, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -1127.63416, 2883.76025, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1127.63269, 2880.63818, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -1137.00549, 2896.33545, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1137.00952, 2893.16626, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -1137.01086, 2890.01074, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1137.00427, 2886.81055, 605.04950,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(19404, -1137.01135, 2883.63501, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1137.00134, 2880.47388, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1141.79834, 2878.93481, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1151.38110, 2878.93530, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1132.26245, 2878.97095, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1122.68921, 2878.96436, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1113.19153, 2878.94458, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1108.48547, 2883.66895, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1108.51257, 2893.12500, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1108.49048, 2902.08032, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1156.10571, 2883.67017, 605.04950,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(19450, -1156.10913, 2893.13306, 605.04950,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(19450, -1156.09802, 2902.76050, 605.04950,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(19388, -1115.22876, 2905.28174, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -1115.23413, 2902.13403, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1115.23291, 2898.98291, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1110.40259, 2899.13232, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -1115.22302, 2895.85864, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -1115.21631, 2892.70679, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1115.20715, 2889.59961, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1110.47314, 2888.07837, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1115.19104, 2883.29492, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, -1149.36438, 2905.15015, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -1149.36279, 2901.97925, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1149.36267, 2898.82446, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1154.18030, 2899.07593, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19388, -1149.36194, 2895.69873, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19404, -1149.35425, 2892.54736, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19358, -1149.35632, 2889.36914, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1154.19312, 2889.71021, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1149.35852, 2883.01904, 605.04950,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(1536, -1132.64453, 2943.64429, 597.30121,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, -1129.65869, 2943.69214, 597.30121,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, -1127.43103, 2943.15918, 597.30103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -1138.35645, 2939.10303, 597.29510,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, -1138.38696, 2939.78662, 597.29510,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, -1138.36353, 2940.51587, 597.29510,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, -1138.27954, 2941.34448, 597.29510,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1722, -1138.36292, 2942.14795, 597.29510,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2269, -1137.90466, 2936.87744, 599.49640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2835, -1131.93481, 2941.97729, 597.30127,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, -1126.56689, 2941.62061, 598.07184,   0.00000, 0.00000, 47.34000);
	CreateDynamicObject(1775, -1123.48108, 2938.45703, 598.37201,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, -1122.75330, 2942.51660, 597.30103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1808, -1119.10535, 2938.02197, 597.25568,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2571, -1142.81165, 2924.53027, 597.29468,   0.00000, 0.00000, 83.22000);
	CreateDynamicObject(1723, -1142.35657, 2930.11743, 597.30103,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1775, -1143.83044, 2929.23608, 598.37201,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, -1104.62317, 2943.09131, 597.29523,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2172, -1106.72351, 2943.13647, 597.29523,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2172, -1108.94360, 2943.18091, 597.29523,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2172, -1111.36584, 2943.16162, 597.29523,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2172, -1113.95862, 2943.08398, 597.29523,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2172, -1110.82874, 2939.18799, 597.29523,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, -1110.80530, 2937.10742, 597.29523,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, -1110.78918, 2935.00854, 597.29523,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, -1110.79614, 2932.95874, 597.29523,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, -1110.77930, 2930.91064, 597.29523,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2172, -1111.85510, 2931.88696, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, -1111.84009, 2933.98755, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, -1111.83008, 2936.03174, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, -1111.80310, 2938.13647, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, -1111.88159, 2940.19556, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, -1103.63098, 2940.24609, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, -1103.65369, 2938.03735, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, -1103.66211, 2935.64819, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, -1103.68616, 2933.33398, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, -1103.69458, 2931.20996, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2172, -1103.67798, 2928.98779, 597.29523,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2193, -1103.67798, 2926.39966, 597.29889,   0.00000, 0.00000, 180.83998);
	CreateDynamicObject(2356, -1104.29968, 2926.58154, 597.29614,   0.00000, 0.00000, 143.09998);
	CreateDynamicObject(2356, -1105.03796, 2928.15039, 597.29614,   0.00000, 0.00000, 276.59995);
	CreateDynamicObject(2356, -1105.01868, 2930.65210, 597.29614,   0.00000, 0.00000, 276.59995);
	CreateDynamicObject(2356, -1104.84961, 2932.56079, 597.29614,   0.00000, 0.00000, 276.59995);
	CreateDynamicObject(2356, -1104.97815, 2935.21338, 597.29614,   0.00000, 0.00000, 277.49994);
	CreateDynamicObject(2356, -1105.04492, 2937.46948, 597.29614,   0.00000, 0.00000, 276.83994);
	CreateDynamicObject(2356, -1104.73596, 2939.63916, 597.29614,   0.00000, 0.00000, 302.99991);
	CreateDynamicObject(2356, -1103.90808, 2941.50000, 597.29614,   0.00000, 0.00000, 369.29993);
	CreateDynamicObject(2356, -1105.95435, 2941.71509, 597.29614,   0.00000, 0.00000, 369.29993);
	CreateDynamicObject(2356, -1108.09253, 2941.80566, 597.29614,   0.00000, 0.00000, 369.29993);
	CreateDynamicObject(2356, -1110.52197, 2941.90723, 597.29614,   0.00000, 0.00000, 369.29993);
	CreateDynamicObject(2356, -1113.29956, 2941.73901, 597.29614,   0.00000, 0.00000, 369.29993);
	CreateDynamicObject(2356, -1113.51758, 2939.61768, 597.29614,   0.00000, 0.00000, 283.55997);
	CreateDynamicObject(2356, -1113.31311, 2937.47363, 597.29614,   0.00000, 0.00000, 283.55997);
	CreateDynamicObject(2356, -1113.19458, 2935.25073, 597.29614,   0.00000, 0.00000, 283.55997);
	CreateDynamicObject(2356, -1113.17957, 2933.09888, 597.29614,   0.00000, 0.00000, 283.55997);
	CreateDynamicObject(2356, -1113.17944, 2930.82715, 597.29614,   0.00000, 0.00000, 283.55997);
	CreateDynamicObject(2356, -1109.05396, 2931.60815, 597.29614,   0.00000, 0.00000, 471.66000);
	CreateDynamicObject(2356, -1109.35071, 2933.79248, 597.29614,   0.00000, 0.00000, 471.66000);
	CreateDynamicObject(2356, -1110.15247, 2935.48730, 597.29614,   0.00000, 0.00000, 471.66000);
	CreateDynamicObject(2356, -1109.45703, 2937.71533, 597.29614,   0.00000, 0.00000, 471.66000);
	CreateDynamicObject(2356, -1110.30103, 2939.85425, 597.29614,   0.00000, 0.00000, 471.66000);
	CreateDynamicObject(1968, -1121.93787, 2921.84253, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1122.00854, 2919.12964, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1121.98767, 2916.48853, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1122.11511, 2910.57129, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1122.18835, 2907.16919, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1118.90955, 2907.27710, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1115.46460, 2907.37622, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1111.77820, 2907.25732, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1119.17126, 2910.53882, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1115.47070, 2910.52686, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1111.81030, 2910.45801, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1119.34253, 2916.43481, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1119.33289, 2919.09741, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1119.20837, 2921.77930, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1116.37476, 2921.75977, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1116.45947, 2919.11621, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1116.46558, 2916.16699, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1111.93164, 2916.12915, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1111.90613, 2919.04028, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, -1112.22925, 2921.80273, 597.82794,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2424, -1107.34753, 2922.75122, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.34509, 2921.84473, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.33936, 2920.91870, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -842.99359, 2479.50488, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.33875, 2919.99854, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.33777, 2919.07837, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.33569, 2918.15820, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.33337, 2917.23730, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.33167, 2916.33716, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.32593, 2915.41675, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.32019, 2914.49634, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.31482, 2913.57690, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.30920, 2912.65698, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.31201, 2911.73438, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.30298, 2910.81689, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.31335, 2909.91919, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.31775, 2908.99365, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.30542, 2908.09546, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2424, -1107.33862, 2906.01123, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2770, -1126.38794, 2906.71167, 597.96039,   0.00000, 0.00000, 37.86000);
	CreateDynamicObject(2614, -1126.97791, 2928.29004, 599.61041,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2612, -1126.99841, 2943.64526, 599.52032,   -0.36000, -0.06000, 0.00000);
	CreateDynamicObject(1845, -1107.19592, 2914.08789, 597.79803,   0.00000, 0.00000, -90.53998);
	CreateDynamicObject(1972, -1107.19421, 2916.45776, 598.53302,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2134, -1103.58740, 2915.83643, 597.29578,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2134, -1103.59216, 2914.87158, 597.29578,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2451, -1103.66992, 2913.92798, 597.29669,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2451, -1103.67029, 2912.04834, 597.29669,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2419, -1103.67944, 2910.15088, 597.29590,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2419, -1103.66785, 2908.28906, 597.29590,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2418, -1103.58850, 2917.72705, 597.29572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2418, -1103.55603, 2921.41479, 597.29572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2416, -1103.56836, 2919.59229, 597.29633,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2418, -1103.56689, 2923.23706, 597.29572,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1523, -1107.48328, 2907.73975, 595.81805,   0.00000, 0.00000, -90.42000);
	CreateDynamicObject(2169, -1131.93311, 2929.38599, 597.29663,   0.00000, 0.00000, -49.43999);
	CreateDynamicObject(2169, -1133.18250, 2930.86377, 597.29663,   0.00000, 0.00000, -50.46000);
	CreateDynamicObject(2169, -1135.12427, 2931.84814, 597.29663,   0.00000, 0.00000, -3.60000);
	CreateDynamicObject(2169, -1133.72021, 2931.51489, 597.29663,   0.00000, 0.00000, -50.46000);
	CreateDynamicObject(2169, -1137.03784, 2931.96851, 597.29663,   0.00000, 0.00000, -3.60000);
	CreateDynamicObject(2169, -1138.91028, 2932.07178, 597.29663,   0.00000, 0.00000, -3.60000);
	CreateDynamicObject(2356, -1136.49890, 2930.45874, 597.29596,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2356, -1133.53674, 2929.04102, 597.29596,   0.00000, 0.00000, -36.12000);
	CreateDynamicObject(2190, -1137.03918, 2932.22290, 598.08649,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, -1132.82629, 2930.97632, 598.08649,   0.00000, 0.00000, -38.99999);
	CreateDynamicObject(2835, -1135.97766, 2928.63184, 597.30127,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11729, -1135.35986, 2922.68579, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1135.35522, 2922.01782, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1135.37048, 2921.34668, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1135.36609, 2920.67847, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1135.35010, 2920.04492, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1135.33875, 2919.42407, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1135.36499, 2918.77930, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1135.35022, 2918.13818, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1135.37207, 2917.45386, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1135.35803, 2916.79907, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1135.36304, 2916.11792, 597.29498,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(11729, -1144.04822, 2921.00220, 597.29498,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11729, -1144.04626, 2920.29785, 597.29498,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11729, -1144.04614, 2919.57373, 597.29498,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11729, -1144.06396, 2918.87134, 597.29498,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11729, -1144.07922, 2918.18921, 597.29498,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11729, -1144.07080, 2917.48804, 597.29498,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11729, -1144.10095, 2916.76416, 597.29498,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11729, -1144.07996, 2916.07373, 597.29498,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11729, -1144.09021, 2915.33691, 597.29498,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11728, -1134.86914, 2922.43799, 599.11377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11728, -1134.87964, 2921.37231, 599.11377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11728, -1134.89197, 2920.13794, 599.11377,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, -1139.98694, 2912.45459, 597.97418,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1368, -1142.06104, 2922.48022, 597.97418,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, -1137.24109, 2922.61938, 597.97418,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2063, -1139.94507, 2910.49121, 598.23370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2063, -1139.95593, 2907.77856, 598.23370,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(334, -1140.11584, 2911.14063, 598.21021,   -89.16000, 92.52000, 69.12000);
	CreateDynamicObject(334, -1139.93481, 2910.62476, 598.21021,   -89.16000, 92.52000, 69.12000);
	CreateDynamicObject(334, -1140.12830, 2910.55444, 598.21021,   -89.16000, 92.52000, 69.12000);
	CreateDynamicObject(334, -1140.12817, 2910.04785, 598.21021,   -89.16000, 92.52000, 52.85999);
	CreateDynamicObject(334, -1140.01978, 2909.58472, 598.21021,   -89.16000, 92.52000, 52.85999);
	CreateDynamicObject(334, -1140.09326, 2909.75854, 598.21021,   -89.16000, 92.52000, 52.85999);
	CreateDynamicObject(342, -1139.80652, 2911.65112, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.97290, 2911.24731, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.94568, 2911.66675, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.95679, 2911.38647, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.90845, 2911.28027, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.85132, 2911.07251, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1140.10962, 2911.04321, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.89331, 2910.85547, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1140.06665, 2910.76001, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.76184, 2910.73413, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1140.04602, 2910.39990, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.99023, 2910.59204, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.89441, 2910.41870, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.87646, 2910.21948, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1140.13550, 2910.19629, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.94971, 2909.46997, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1140.08472, 2910.08032, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.83691, 2909.78125, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.90186, 2909.83521, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1139.99426, 2909.74634, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(342, -1140.03052, 2909.70288, 597.72290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.95850, 2908.60547, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.89978, 2908.33179, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.97778, 2908.02881, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.84753, 2907.42261, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.98999, 2907.51489, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.94128, 2907.66821, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.98328, 2907.86377, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1140.11877, 2908.30542, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1140.12292, 2908.89697, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.84216, 2908.73218, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1140.01270, 2908.85938, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.98181, 2907.00488, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.96631, 2906.74268, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.85315, 2906.78735, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1139.89514, 2906.98291, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(343, -1140.14954, 2907.21484, 597.74390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(347, -1139.76099, 2908.55273, 598.20264,   -89.52002, -127.85999, -4.56000);
	CreateDynamicObject(347, -1139.95117, 2908.39990, 598.20264,   -89.52002, -127.85999, -4.56000);
	CreateDynamicObject(347, -1139.78638, 2908.03003, 598.20264,   -89.52002, -127.85999, -4.56000);
	CreateDynamicObject(347, -1139.80103, 2908.24927, 598.20264,   -89.52002, -127.85999, -4.56000);
	CreateDynamicObject(347, -1139.86182, 2907.71240, 598.20264,   -89.52002, -127.85999, -4.56000);
	CreateDynamicObject(347, -1139.83167, 2907.24268, 598.20264,   -89.52002, -127.85999, -4.56000);
	CreateDynamicObject(347, -1139.80786, 2907.40088, 598.20264,   -89.52002, -127.85999, -4.56000);
	CreateDynamicObject(347, -1139.85828, 2906.80103, 598.20264,   -89.52002, -127.85999, -4.56000);
	CreateDynamicObject(347, -1139.83142, 2906.97900, 598.20264,   -89.52002, -127.85999, -4.56000);
	CreateDynamicObject(348, -1140.07910, 2909.58838, 598.59857,   90.53999, 10.08003, 44.34000);
	CreateDynamicObject(348, -1140.07690, 2909.90454, 598.59857,   90.53999, 10.08003, 44.34000);
	CreateDynamicObject(348, -1140.01392, 2910.18530, 598.59857,   90.53999, 10.08003, 44.34000);
	CreateDynamicObject(348, -1140.10461, 2910.36475, 598.59857,   90.53999, 10.08003, 44.34000);
	CreateDynamicObject(348, -1140.06750, 2910.65723, 598.59857,   90.53999, 10.08003, 44.34000);
	CreateDynamicObject(348, -1140.06641, 2911.04248, 598.59857,   90.53999, 10.08003, 44.34000);
	CreateDynamicObject(348, -1140.09998, 2911.32690, 598.59857,   90.53999, 10.08003, 44.34000);
	CreateDynamicObject(348, -1140.07947, 2909.22119, 598.59857,   90.53999, 10.08003, 44.34000);
	CreateDynamicObject(18637, -1140.11121, 2907.17432, 598.59814,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18637, -1140.11121, 2907.17432, 598.65143,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18637, -1140.11121, 2907.17432, 598.70471,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18637, -1140.10608, 2908.40845, 598.59814,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18637, -1140.10608, 2908.40845, 598.63641,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18637, -1140.10608, 2908.40845, 598.69189,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19142, -1139.95972, 2911.40625, 599.23761,   0.00000, -90.00000, -89.76001);
	CreateDynamicObject(19142, -1139.95959, 2910.74438, 599.23761,   0.00000, -90.00000, -89.76001);
	CreateDynamicObject(19142, -1139.89832, 2910.09912, 599.23761,   0.00000, -90.00000, -89.76001);
	CreateDynamicObject(19142, -1139.97083, 2909.56250, 599.23761,   0.00000, -90.00000, -89.76001);
	CreateDynamicObject(19142, -1140.06689, 2908.93433, 599.23761,   0.00000, -90.00000, -89.76001);
	CreateDynamicObject(19142, -1140.04382, 2908.40112, 599.23761,   0.00000, -90.00000, -89.76001);
	CreateDynamicObject(19142, -1139.92981, 2907.91382, 599.23761,   0.00000, -90.00000, -89.76001);
	CreateDynamicObject(19142, -1139.99585, 2907.25220, 599.23761,   0.00000, -90.00000, -89.76001);
	CreateDynamicObject(19142, -1139.97620, 2906.65576, 599.23761,   0.00000, -90.00000, -89.76001);
	CreateDynamicObject(2509, -1135.14294, 2910.40527, 599.07233,   0.00000, 0.00000, -90.42001);
	CreateDynamicObject(2509, -1135.15527, 2909.16479, 599.07233,   0.00000, 0.00000, -90.42001);
	CreateDynamicObject(2509, -1135.18201, 2907.90332, 599.07233,   0.00000, 0.00000, -90.42001);
	CreateDynamicObject(2509, -1135.18921, 2906.64185, 599.07233,   0.00000, 0.00000, -90.42001);
	CreateDynamicObject(349, -1135.20483, 2910.50122, 598.27081,   0.00000, 0.00000, -83.87999);
	CreateDynamicObject(349, -1135.20483, 2910.50122, 598.46979,   0.00000, 0.00000, -83.87999);
	CreateDynamicObject(349, -1135.20483, 2910.50122, 598.66876,   0.00000, 0.00000, -83.87999);
	CreateDynamicObject(349, -1135.20483, 2910.50122, 598.82800,   0.00000, 0.00000, -83.87999);
	CreateDynamicObject(349, -1135.20483, 2910.50122, 598.98718,   0.00000, 0.00000, -83.87999);
	CreateDynamicObject(349, -1135.20483, 2910.50122, 599.18622,   0.00000, 0.00000, -83.87999);
	CreateDynamicObject(349, -1135.20483, 2910.50122, 599.34540,   0.00000, 0.00000, -83.87999);
	CreateDynamicObject(349, -1135.20483, 2910.50122, 599.54437,   0.00000, 0.00000, -83.87999);
	CreateDynamicObject(349, -1135.20483, 2910.50122, 599.70355,   0.00000, 0.00000, -83.87999);
	CreateDynamicObject(353, -1135.19739, 2908.66821, 598.28717,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(353, -1135.19739, 2908.66821, 598.62653,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(353, -1135.19739, 2908.66821, 598.92596,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(353, -1135.19739, 2908.66821, 599.20544,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(353, -1135.19739, 2908.66821, 599.48663,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(356, -1135.23987, 2906.80420, 598.42841,   0.00000, 0.00000, -86.51998);
	CreateDynamicObject(356, -1135.23987, 2906.80420, 598.80273,   0.00000, 0.00000, -86.51998);
	CreateDynamicObject(356, -1135.23987, 2906.80420, 599.13953,   0.00000, 0.00000, -86.51998);
	CreateDynamicObject(356, -1135.23987, 2906.80420, 599.47632,   0.00000, 0.00000, -86.51998);
	CreateDynamicObject(356, -1135.23987, 2906.80420, 599.83191,   0.00000, 0.00000, -86.51998);
	CreateDynamicObject(2527, -1143.90430, 2906.31909, 597.29877,   0.00000, 0.00000, 92.03999);
	CreateDynamicObject(2527, -1143.91516, 2907.80811, 597.29877,   0.00000, 0.00000, 92.03999);
	CreateDynamicObject(2527, -1143.86597, 2909.30078, 597.29877,   0.00000, 0.00000, 91.13999);
	CreateDynamicObject(2527, -1143.89685, 2910.93530, 597.29877,   0.00000, 0.00000, 91.13999);
	CreateDynamicObject(2523, -1141.12549, 2911.38184, 597.29919,   0.00000, 0.00000, -90.06001);
	CreateDynamicObject(2523, -1141.12048, 2910.09302, 597.29919,   0.00000, 0.00000, -90.06001);
	CreateDynamicObject(2523, -1141.12366, 2908.78589, 597.29919,   0.00000, 0.00000, -90.06001);
	CreateDynamicObject(2523, -1141.12097, 2907.54077, 597.29919,   0.00000, 0.00000, -90.06001);
	CreateDynamicObject(2208, -1131.31250, 2882.77197, 603.22260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2207, -1133.20349, 2881.72388, 603.32007,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, -1131.29504, 2885.48267, 603.22260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, -1131.29871, 2887.96362, 603.22260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, -1131.31116, 2890.54468, 603.22260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, -1133.21399, 2882.66040, 603.22260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, -1133.22546, 2885.26489, 603.22260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, -1133.21533, 2888.01245, 603.22260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2208, -1133.20203, 2890.57910, 603.22260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2207, -1131.34338, 2894.15137, 603.32013,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, -1132.29907, 2879.98486, 603.31879,   0.00000, 0.00000, 180.66002);
	CreateDynamicObject(1715, -1129.61462, 2883.48804, 603.32068,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(1715, -1129.55554, 2885.00415, 603.32068,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(1715, -1129.48645, 2886.31470, 603.32068,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(1715, -1129.45459, 2887.72266, 603.32068,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(1715, -1129.51477, 2889.20801, 603.32068,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(1715, -1129.49585, 2890.34790, 603.32068,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(1715, -1129.49341, 2891.70801, 603.32068,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(1715, -1129.47229, 2892.98804, 603.32068,   0.00000, 0.00000, -90.84000);
	CreateDynamicObject(1715, -1134.90649, 2892.84839, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, -1134.82068, 2891.29492, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, -1134.90308, 2889.97314, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, -1134.96436, 2888.47070, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, -1134.92834, 2887.00757, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, -1134.91675, 2885.66235, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1715, -1134.85278, 2884.11890, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3017, -1131.55994, 2883.32153, 604.11475,   0.00000, 0.00000, -89.88004);
	CreateDynamicObject(2894, -1132.32043, 2881.70288, 604.09637,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1736, -1132.56335, 2879.36157, 605.93433,   0.00000, 0.00000, 186.40004);
	CreateDynamicObject(1828, -1132.13538, 2895.78223, 603.32074,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2186, -1129.32642, 2879.46313, 603.32019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14604, -1132.36560, 2893.70679, 604.25049,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2165, -1152.53040, 2904.26782, 603.32068,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2166, -1153.54822, 2906.17700, 603.32068,   0.00000, 0.00000, -89.82001);
	CreateDynamicObject(2173, -1152.48267, 2902.51294, 603.32141,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(16377, -1150.08215, 2899.90723, 604.22913,   0.00000, 0.00000, 50.22000);
	CreateDynamicObject(2184, -1111.66663, 2904.58203, 603.31934,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(2108, -1149.81494, 2906.27148, 603.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, -1153.17456, 2899.19824, 604.85767,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2161, -1151.87598, 2899.21240, 604.85767,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2164, -1156.03247, 2905.07104, 603.31952,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, -1155.97986, 2904.09937, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, -1155.97546, 2903.21191, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2186, -1155.40344, 2899.60400, 603.32019,   0.00000, 0.00000, -268.67999);
	CreateDynamicObject(2166, -1153.61963, 2898.51465, 603.32068,   0.00000, 0.00000, -89.82001);
	CreateDynamicObject(2165, -1152.62134, 2896.59521, 603.32068,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2173, -1152.61841, 2894.86670, 603.32141,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2186, -1155.45313, 2890.24390, 603.32019,   0.00000, 0.00000, -268.67999);
	CreateDynamicObject(2167, -1155.96021, 2898.57007, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, -1155.95410, 2897.64551, 603.32068,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2164, -1155.98633, 2894.41919, 603.31952,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16377, -1150.29077, 2890.37988, 604.22913,   0.00000, 0.00000, 24.54001);
	CreateDynamicObject(2161, -1151.93591, 2889.77148, 604.85767,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2161, -1153.24524, 2889.76074, 604.85767,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2108, -1149.80566, 2898.51001, 603.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2108, -1155.63135, 2896.37329, 603.32123,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, -1154.34436, 2896.63257, 603.31879,   0.00000, 0.00000, 96.96004);
	CreateDynamicObject(1714, -1154.48669, 2904.61670, 603.31879,   0.00000, 0.00000, 96.96004);
	CreateDynamicObject(14455, -1108.69189, 2901.09155, 604.92694,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1736, -1112.28479, 2899.56665, 605.93433,   0.00000, 0.00000, 186.40004);
	CreateDynamicObject(1714, -1109.38342, 2903.48022, 603.31879,   0.00000, 0.00000, 273.90009);
	CreateDynamicObject(14604, -1114.57446, 2899.96631, 604.25049,   0.00000, 0.00000, 308.09998);
	CreateDynamicObject(1828, -1113.10107, 2903.52930, 603.32074,   0.00000, 0.00000, 84.53999);
	CreateDynamicObject(2186, -1109.28149, 2899.98340, 603.32019,   0.00000, 0.00000, -179.16005);
	CreateDynamicObject(2164, -1111.39026, 2899.28418, 603.31952,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2207, -1110.74878, 2892.80835, 603.32007,   0.00000, 0.00000, -180.29996);
	CreateDynamicObject(14455, -1114.44714, 2888.29224, 604.92688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14455, -1108.65967, 2888.26465, 604.92688,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, -1111.69995, 2890.85571, 603.31879,   0.00000, 0.00000, 180.66002);
	CreateDynamicObject(2186, -1109.11780, 2890.45142, 603.32019,   0.00000, 0.00000, 271.01999);
	CreateDynamicObject(1828, -1112.04175, 2896.12036, 603.32074,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2164, -1115.09277, 2889.91577, 603.31952,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2167, -1110.12720, 2899.07764, 603.32068,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2167, -1110.99646, 2899.09302, 603.32068,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1123.43738, 2911.64575, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1123.43384, 2921.20972, 605.04950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, -1118.53906, 2918.58081, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1109.03040, 2918.58643, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19450, -1099.46228, 2918.57886, 605.04950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, -1100.86426, 2913.67603, 603.35297,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1100.86426, 2913.67603, 603.49945,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1100.78711, 2911.49976, 603.35297,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, -1100.06348, 2911.40063, 603.47296,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2180, -1109.12793, 2915.78931, 603.31830,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(2180, -1111.67554, 2915.77002, 603.31830,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(2180, -1114.35803, 2915.81665, 603.31830,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(2180, -1117.10950, 2915.89722, 603.31830,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(2180, -1119.67053, 2915.97046, 603.31830,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(2180, -1119.76965, 2912.43530, 603.31830,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(2180, -1117.19165, 2912.32251, 603.31830,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(2180, -1114.44727, 2912.27710, 603.31830,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(2180, -1111.62048, 2912.30298, 603.31830,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(2180, -1109.15430, 2912.32178, 603.31830,   0.00000, 0.00000, 89.00000);
	CreateDynamicObject(1811, -1121.20044, 2913.48657, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1121.22363, 2912.32080, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1121.07117, 2915.99170, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1121.10461, 2917.03198, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1118.72485, 2917.08813, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1116.18005, 2916.98950, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1113.47546, 2916.89648, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1110.71252, 2916.86572, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1110.82288, 2915.94116, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1113.56458, 2915.93311, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1116.18774, 2915.96826, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1118.76990, 2915.98535, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1118.84631, 2913.38086, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1116.28320, 2913.32373, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1113.54175, 2913.33179, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1110.64111, 2913.36548, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1110.66858, 2912.36328, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1113.48926, 2912.33203, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1116.25220, 2912.38354, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1811, -1118.91528, 2912.43799, 603.90228,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(11711, -1130.41382, 2906.76978, 605.95361,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11711, -1131.07471, 2943.68579, 600.19629,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19786, -1102.62170, 2913.34570, 605.63171,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2534, -1104.95911, 2914.38354, 602.19666,   0.00000, 0.00000, 91.01997);
	CreateDynamicObject(2534, -1105.09692, 2914.41211, 602.19672,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(2571, -1116.93420, 2886.84473, 603.31482,   0.00000, 0.00000, -89.93999);
	CreateDynamicObject(2571, -1118.93323, 2880.63965, 603.31482,   0.00000, 0.00000, -179.69995);
	CreateDynamicObject(2571, -1127.56677, 2899.52466, 603.31482,   0.00000, 0.00000, -179.69995);
	CreateDynamicObject(2571, -1147.87280, 2887.62549, 603.31482,   0.00000, 0.00000, -268.97995);
	CreateDynamicObject(2266, -1141.71667, 2906.03833, 605.39392,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2266, -1124.36194, 2906.25928, 605.39392,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2261, -1122.02515, 2879.58154, 605.44434,   0.00000, 0.00000, 180.81998);
	CreateDynamicObject(1723, -1126.70874, 2886.28735, 603.32062,   0.00000, 0.00000, 91.91998);
	CreateDynamicObject(2571, -1141.38660, 2880.21313, 603.31482,   0.00000, 0.00000, -179.69995);
	CreateDynamicObject(2571, -1138.72485, 2887.44971, 603.31482,   0.00000, 0.00000, -92.87998);
	CreateDynamicObject(1723, -1148.68115, 2882.52686, 603.32062,   0.00000, 0.00000, 89.99999);
	CreateDynamicObject(1775, -1137.57593, 2881.21362, 604.42218,   0.00000, 0.00000, -90.23999);
	CreateDynamicObject(1775, -1137.62952, 2893.52808, 604.42218,   0.00000, 0.00000, -90.23999);
	CreateDynamicObject(2261, -1143.04944, 2879.58081, 605.44434,   0.00000, 0.00000, 180.81998);
	CreateDynamicObject(19393, -1113.97937, 2903.94751, 586.58649,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19410, -1112.45728, 2905.52295, 586.58649,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, -1112.07227, 2905.53833, 587.02344,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, -1113.99060, 2900.90161, 586.58649,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, -1115.75574, 2905.53784, 587.90149,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19303, -1114.43433, 2905.46997, 586.08582,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19303, -1117.79114, 2905.55273, 586.08582,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19456, -1122.10242, 2909.70508, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1122.14355, 2913.31616, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1122.12952, 2916.93213, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1121.03540, 2910.51611, 586.59448,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19456, -1121.05322, 2920.01318, 586.59448,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19303, -1117.35901, 2908.75439, 586.08582,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19303, -1117.35693, 2907.01880, 586.08582,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19303, -1117.35730, 2912.36938, 586.08582,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19303, -1117.35168, 2910.67480, 586.08582,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19303, -1117.37244, 2914.27246, 586.08582,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19303, -1117.37561, 2915.98584, 586.08582,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19456, -1112.98840, 2916.94409, 586.59448,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, -1117.37378, 2907.86621, 587.96051,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, -1117.36768, 2911.51929, 587.96051,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, -1117.40356, 2915.11987, 587.96051,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2185, -1111.58472, 2905.04907, 584.85101,   0.00000, 0.00000, 180.72000);
	CreateDynamicObject(2356, -1111.48267, 2903.54248, 584.85065,   0.00000, 0.00000, 43.44000);
	CreateDynamicObject(1738, -1111.31030, 2909.70313, 585.48254,   0.00000, 0.00000, 90.78000);
	CreateDynamicObject(1738, -1111.30225, 2915.56787, 585.48254,   0.00000, 0.00000, 90.78000);
	CreateDynamicObject(1771, -1120.24597, 2907.46826, 585.39935,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, -1120.34119, 2911.08740, 585.39935,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, -1120.26733, 2914.74170, 585.39935,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1778, -1114.24939, 2902.50659, 584.85022,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, -1110.58948, 2906.88696, 588.39404,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1120.87927, 2910.21606, 588.42328,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1110.58948, 2906.88696, 588.52496,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1120.84351, 2919.65918, 588.42328,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1110.47522, 2916.43823, 588.42328,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1140.28577, 2908.89087, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1140.31140, 2918.41479, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1140.24548, 2927.99023, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1133.28357, 2938.96899, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3859, -1149.30420, 2901.61841, 606.84949,   0.00000, 0.00000, -162.84001);
	CreateDynamicObject(3859, -1149.39209, 2892.04492, 606.84949,   0.00000, 0.00000, -162.84001);
	CreateDynamicObject(3859, -1136.93628, 2894.82568, 606.84949,   0.00000, 0.00000, -162.84001);
	CreateDynamicObject(3859, -1137.01636, 2890.21362, 606.84949,   0.00000, 0.00000, -162.84001);
	CreateDynamicObject(3859, -1137.03809, 2883.48755, 606.84949,   0.00000, 0.00000, -162.84001);
	CreateDynamicObject(3859, -1127.59912, 2883.99683, 606.84949,   0.00000, 0.00000, -162.84001);
	CreateDynamicObject(3859, -1127.57361, 2895.20020, 606.84949,   0.00000, 0.00000, -162.96001);
	CreateDynamicObject(3859, -1115.20435, 2892.08862, 606.84949,   0.00000, 0.00000, -162.96001);
	CreateDynamicObject(3859, -1115.27490, 2901.52588, 606.84949,   0.00000, 0.00000, -162.96001);
	CreateDynamicObject(1502, -1115.21362, 2906.06152, 603.31866,   0.00000, 0.00000, -90.17999);
	CreateDynamicObject(1502, -1115.20288, 2896.66113, 603.31866,   0.00000, 0.00000, -90.17999);
	CreateDynamicObject(1502, -1149.42139, 2905.93896, 603.31866,   0.00000, 0.00000, -90.17999);
	CreateDynamicObject(1502, -1149.41284, 2896.50244, 603.31866,   0.00000, 0.00000, -90.17999);
	CreateDynamicObject(1502, -1133.10583, 2897.82227, 603.31873,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, -1120.44653, 2906.89355, 603.31873,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, -1107.66748, 2911.67993, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1107.65723, 2921.15674, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1118.14136, 2914.52271, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1110.08496, 2902.02368, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1110.06909, 2892.44507, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1120.34924, 2883.75244, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1130.80396, 2883.74951, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1141.20264, 2883.75830, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1151.59656, 2883.81177, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1151.41504, 2893.33472, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1151.53430, 2902.86157, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1141.15540, 2902.85913, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1141.02393, 2893.37378, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1130.60034, 2893.37793, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1120.44275, 2893.36523, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1120.63660, 2902.95117, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1130.78955, 2902.79810, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1118.12439, 2910.27075, 606.87500,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19450, -1134.90955, 2911.44019, 605.03485,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, -1132.81079, 2912.38989, 606.87384,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1132.76428, 2915.20776, 606.00238,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1502, -1140.48474, 2923.06152, 597.29486,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, -1143.76550, 2911.95923, 597.29486,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, -1134.65527, 2927.02734, 597.29486,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, -1126.15613, 2923.28833, 597.29492,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, -1119.31531, 2931.86230, 597.29492,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, -1133.34021, 2929.96924, 600.80573,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1130.00378, 2919.99780, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1130.04565, 2929.54663, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1122.79907, 2938.99292, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1112.34363, 2939.05493, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1101.89526, 2938.98438, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1119.55396, 2929.38330, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1109.11768, 2929.42334, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1098.63123, 2929.40820, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1119.66138, 2919.79248, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1109.26306, 2919.91870, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1098.88989, 2919.86377, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1117.97766, 2910.72632, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1107.82373, 2910.56494, 600.80518,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, -1125.66260, 2910.83887, 600.80548,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2110, -1127.06287, 2941.56860, 597.30200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1722, -1128.15369, 2928.45825, 597.29510,   0.00000, 0.00000, 1.62001);
	CreateDynamicObject(1722, -1127.35486, 2928.50293, 597.29510,   0.00000, 0.00000, 1.62001);
	CreateDynamicObject(1722, -1126.67358, 2928.50122, 597.29510,   0.00000, 0.00000, 1.62001);
	CreateDynamicObject(1722, -1125.93237, 2928.50293, 597.29510,   0.00000, 0.00000, 1.62001);
	CreateDynamicObject(3859, -1127.59424, 2890.07690, 606.84949,   0.00000, 0.00000, -162.96001);

	pddoor = CreateDynamicObject(1495, -1123.96033, 2933.65601, 597.26660,   0.00000, 0.00000, -90.00000);
     
    // CreateDynamicObject(1495, -1123.96033, 2934.97607, 597.26660,   0.00000, 0.00000, -90.00000); - usa deschisa


//=====================================================BISERICA INTERIOR========================//
	CreateDynamicObject(9931, 369.68164, 2339.92676, 1904.99158,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9931, 369.70605, 2308.43164, 1904.99207,   0.00000, 0.00000, 0.00000);
	CreateObject(6959, 380.31934, 2327.49512, 1888.59814,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 378.18066, 2333.77539, 1897.54663,   296.47705, 0.00000, 0.00000);
	CreateDynamicObject(6959, 378.07031, 2314.83936, 1897.50842,   63.74002, 0.00000, 0.00000);
	CreateDynamicObject(6959, 363.04980, 2326.47363, 1902.50073,   0.00000, 270.18677, 0.00000);
	CreateObject(9931, 409.28952, 2325.36133, 1903.95142,   0.00000, 0.00000, 182.88501);
	CreateDynamicObject(6959, 349.35693, 2328.10840, 1889.63599,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14394, 370.83624, 2320.27002, 1888.79468,   0.00000, 0.00000, 179.43994);
	CreateDynamicObject(14394, 370.92697, 2328.26318, 1888.79468,   0.00000, 0.00000, 179.43970);
	CreateDynamicObject(3657, 373.32642, 2328.60034, 1889.08508,   0.00000, 0.00000, 269.96997);
	CreateDynamicObject(3657, 375.27359, 2328.58716, 1889.08508,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(3657, 377.10638, 2328.55078, 1889.08508,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(3657, 379.10193, 2328.55298, 1889.08508,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(3657, 381.24136, 2328.55273, 1889.08508,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(3657, 383.30206, 2328.54590, 1889.08508,   0.00000, 0.00000, 269.96704);
	CreateDynamicObject(3657, 373.34204, 2320.07715, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(3657, 375.22266, 2320.04346, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(3657, 377.12314, 2320.04199, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(3657, 379.14075, 2320.06152, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(3657, 381.31061, 2320.05859, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(3657, 383.32202, 2320.02930, 1889.08508,   0.00000, 0.00000, 269.96155);
	CreateDynamicObject(8131, 359.04636, 2324.15601, 1890.94678,   334.75000, 0.00000, 270.44000);
	CreateDynamicObject(14705, 367.74390, 2322.64966, 1890.70459,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2208, 367.70975, 2325.31104, 1889.60474,   0.00000, 0.00000, 269.95499);
	CreateDynamicObject(2868, 367.74664, 2325.31738, 1890.46997,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2894, 367.60568, 2324.02197, 1890.46997,   0.00000, 0.00000, 269.39514);
	CreateDynamicObject(2869, 368.66562, 2331.67920, 1889.60474,   0.00000, 0.00000, 320.95996);
	CreateDynamicObject(2869, 365.07346, 2331.70239, 1889.60474,   0.00000, 0.00000, 322.20654);
	CreateDynamicObject(2869, 365.21088, 2316.75049, 1889.60474,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(2869, 368.77744, 2316.80200, 1889.60474,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(2896, 367.05939, 2318.20679, 1890.24402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 367.76474, 2323.08081, 1890.63672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1667, 367.53043, 2323.22949, 1890.55859,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2869, 375.79761, 2316.71118, 1888.56689,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(2869, 382.89117, 2316.57129, 1888.56689,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(2869, 375.69821, 2331.72070, 1888.56689,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(2869, 382.86984, 2331.74341, 1888.56689,   0.00000, 0.00000, 320.95459);
	CreateDynamicObject(6959, 375.40222, 2326.05957, 1915.37219,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6959, 387.21533, 2323.32227, 1924.68115,   0.00000, 269.68677, 2.75000);
	CreateDynamicObject(3462, 364.39996, 2328.12598, 1890.39270,   0.00000, 0.00000, 179.65002);
	CreateDynamicObject(3462, 364.37485, 2320.16626, 1890.36768,   0.00000, 0.00000, 180.39844);
//======================================================BLOCAJE PAYNS==========================//
	CreateDynamicObject(971, 720.00958, -462.52905, 15.37525,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(971, 1843.32703, -1855.14673, 12.27336,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(971, -1904.63025, 277.65067, 43.06939,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(971, -1420.76794, 2591.09082, 56.96036,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(971, -99.64841, 1111.46509, 20.76090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(971, -2425.82227, 1028.17773, 51.64113,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(971, 1968.19324, 2162.51025, 10.87035,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(971, 1042.69714, -1025.81262, 31.74635,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(971, 2644.37744, -2039.36597, 12.54100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(971, 2386.87427, 1043.39380, 9.81223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(971, -2716.12915, 218.47090, 4.11947,   0.00000, 0.00000, 90.00000);
//=================================================SERVICE===========================================//
	CreateDynamicObject(980, -110.92925, 1140.12341, 15.76597,   0.00000, 90.00000, 0.00000);
	servicefortcarson = CreateObject(10575, -112.06892, 1125.32605, 19.73144,   0.00000, 0.00000, 90.00000);

	CreateDynamicObject(971, 88.96719, -161.00203, 1.58639,   0.00000, 0.00000, 0.00000);
	Create3DTextLabel("{FFFFFF}Scrie {FBFB04}/servicerepair{FFFFFF} pentru a repara masina",COLOR_WHITE,91.4999,-165.0383,2.5938,10.0,0);

//=================================================GARAJ MAPPING=======================================//
	CreateDynamicObject(19355, 94.62430, -302.18539, 2.25270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 94.62430, -305.38541, 2.25270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 94.62430, -308.56451, 2.25270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 92.96255, -310.07492, 2.25270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11393, 90.68754, -300.10474, 1.99803,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 89.80920, -310.07489, 2.25270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 86.61270, -310.07489, 2.25270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 85.08540, -308.56451, 2.25270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 85.08540, -305.38541, 2.25270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 85.08540, -302.18539, 2.25270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 85.08540, -298.98410, 2.25270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19355, 86.61270, -300.87860, 2.25270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 89.80920, -300.87860, 2.25270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 92.96260, -300.87860, 2.25270,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19355, 92.87156, -302.47614, 4.02172,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19355, 89.37504, -302.46942, 4.02172,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19355, 85.90031, -302.45981, 4.02172,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19355, 92.87160, -305.65109, 4.02170,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19355, 89.37500, -305.65109, 4.02170,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19355, 85.90030, -305.65109, 4.02170,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19355, 92.87160, -308.85590, 4.02170,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19355, 89.37500, -308.85590, 4.02170,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19355, 85.90030, -308.85590, 4.02170,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(10575, 85.17947, -305.52295, 2.09342,   0.00000, 0.00000, 0.00000);
//============================================EMS HELI==============================================//
	CreateDynamicObject(984, 1179.39209, -1385.09082, 23.59778,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 1185.79590, -1378.69141, 23.59780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1185.79028, -1370.69067, 23.63780,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 1179.38843, -1367.50073, 23.58143,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1506, 1172.98889, -1371.45313, 22.88466,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1506, 1160.76355, -1342.44250, 25.53479,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1506, 1160.94922, -1336.28552, 30.47502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14416, 1174.75037, -1378.33801, 22.37084,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9339, 1163.44922, -1376.28625, 23.37751,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9339, 1163.44922, -1376.28625, 24.77877,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9339, 1163.44922, -1380.45178, 24.77880,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(9339, 1163.44922, -1380.45178, 23.37750,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3934, 1161.36584, -1363.11963, 25.65199,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3934, 1160.99805, -1311.83215, 30.49115,   0.00000, 0.00000, 90.00000);
//==========================================NEWS EXTERIOR=====================================//
	CreateDynamicObject(970, 615.31134, -1523.78296, 14.45275,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 617.37073, -1521.71191, 14.45275,   0.00000, 0.00000, 89.94003);
	CreateDynamicObject(970, 617.37793, -1517.58862, 14.45275,   0.00000, 0.00000, 89.94003);
	CreateDynamicObject(970, 617.37390, -1513.47107, 14.45275,   0.00000, 0.00000, 89.94003);
	CreateDynamicObject(970, 617.41644, -1495.29700, 14.45275,   0.00000, 0.00000, 89.94003);
	CreateDynamicObject(970, 617.41058, -1491.19641, 14.45275,   0.00000, 0.00000, 89.94003);
	CreateDynamicObject(970, 615.34869, -1488.62952, 14.45270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 611.24530, -1488.62268, 14.45270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(9131, 617.36182, -1488.78027, 14.19535,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 617.34784, -1523.75391, 14.19535,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 617.41461, -1499.40198, 14.45275,   0.00000, 0.00000, 89.94003);
	CreateDynamicObject(9131, 617.38177, -1501.64795, 13.44548,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 617.38177, -1501.64795, 15.63313,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 617.34814, -1511.14490, 13.44548,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 617.34808, -1511.14490, 15.63310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 617.58575, -1488.80676, 14.60351,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 617.51062, -1511.15857, 14.60351,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 617.48438, -1501.64941, 14.60351,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 617.23047, -1523.61877, 14.60351,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 617.38757, -1501.69666, 16.68223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 617.32721, -1511.11230, 16.68223,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 587.40125, -1523.80591, 14.52421,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 583.28333, -1523.81201, 14.52421,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1215, 588.59174, -1523.80090, 14.70669,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 583.44714, -1523.86047, 14.70669,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 581.45703, -1488.69934, 14.54229,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 577.34161, -1488.69348, 14.54229,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1504, 597.99231, -1488.77795, 14.09033,   0.00000, 0.00000, 0.00000);
	newsgate = CreateObject(971, 617.40344, -1506.39661, 13.16276,   0.00000, 0.00000, 90.00000);
//====================================DEALERSHIP LS=================================================//
	CreateDynamicObject(11317, 955.21350, -1365.62769, 23.42788,   0.00000, 0.00000, 90.59092);
	CreateDynamicObject(19377, 958.31622, -1348.28821, 19.21812,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 958.28827, -1355.08997, 19.21810,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 963.02118, -1358.12378, 19.21810,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 972.63422, -1358.12378, 19.21810,   0.00000, 0.00000, 270.61420);
	CreateDynamicObject(19377, 979.83154, -1358.12378, 19.21810,   0.00000, 0.00000, 270.61420);
	CreateDynamicObject(19377, 984.63672, -1362.80640, 19.21812,   0.00000, 0.00000, 0.60704);
	CreateDynamicObject(19377, 984.79639, -1372.42847, 19.21812,   0.00000, 0.00000, 1.21305);
	CreateDynamicObject(19377, 984.83197, -1380.15479, 19.21810,   0.00000, 0.00000, 0.70930);
	CreateDynamicObject(19377, 984.83197, -1380.15479, 9.03384,   0.00000, 0.00000, 0.70930);
	CreateDynamicObject(19377, 984.79639, -1372.42847, 9.03380,   0.00000, 0.00000, 1.21310);
	CreateDynamicObject(19377, 984.63672, -1362.80640, 9.03380,   0.00000, 0.00000, 0.60700);
	CreateDynamicObject(19377, 979.83148, -1358.12378, 9.03380,   0.00000, 0.00000, 270.61420);
	CreateDynamicObject(19377, 972.63422, -1358.12378, 9.03380,   0.00000, 0.00000, 270.61420);
	CreateDynamicObject(19377, 963.02118, -1358.12378, 9.03380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 958.31622, -1348.28821, 9.03380,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 958.28833, -1355.08997, 9.03380,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 953.42493, -1343.57422, 19.21810,   0.00000, 0.00000, 90.50100);
	CreateDynamicObject(19377, 945.35590, -1343.57422, 19.21810,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 935.77118, -1343.62866, 19.21810,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 930.23151, -1343.65515, 19.21810,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 925.50244, -1348.42029, 19.21812,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 925.55621, -1358.00171, 19.21812,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 925.65851, -1367.62085, 19.21812,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 925.71625, -1377.09351, 19.21812,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 925.76202, -1380.79529, 19.21812,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 925.76202, -1380.79529, 9.03380,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 925.71619, -1377.09351, 9.03380,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 925.65851, -1367.62085, 9.03380,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 925.55621, -1358.00171, 9.03380,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 925.50238, -1348.42029, 9.03380,   0.00000, 0.00000, 0.40200);
	CreateDynamicObject(19377, 930.23151, -1343.65515, 9.03380,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 935.77118, -1343.62866, 9.03380,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 945.35590, -1343.57422, 9.03380,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 953.42493, -1343.57422, 9.03380,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 983.01740, -1364.38721, 19.21812,   0.00000, 0.00000, 0.60704);
	CreateDynamicObject(19377, 983.03442, -1366.25500, 19.21812,   0.00000, 0.00000, 0.60704);
	CreateDynamicObject(19378, 927.52728, -1368.91638, 12.95880,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(19378, 927.56201, -1369.55725, 12.95880,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(19378, 927.58313, -1379.12976, 12.95880,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(19378, 932.24158, -1368.79993, 12.95880,   0.00000, 0.00000, 90.61520);
	CreateDynamicObject(19378, 935.60742, -1368.76868, 12.95880,   0.00000, 0.00000, 90.61520);
	CreateDynamicObject(19378, 945.17889, -1368.67102, 12.95880,   0.00000, 0.00000, 90.61520);
	CreateDynamicObject(19378, 953.70062, -1368.57397, 12.95880,   0.00000, 0.00000, 90.61520);
	CreateDynamicObject(19378, 958.43610, -1363.78784, 13.04876,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(19378, 963.17578, -1360.01184, 12.95880,   0.00000, 0.00000, 90.61520);
	CreateDynamicObject(19378, 972.75262, -1359.91077, 12.95880,   0.00000, 0.00000, 90.61520);
	CreateDynamicObject(19378, 979.80353, -1359.83435, 12.95880,   0.00000, 0.00000, 90.61520);
	CreateDynamicObject(19378, 982.93457, -1364.51147, 13.04876,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(19378, 982.99030, -1373.98352, 13.04876,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(19378, 983.01215, -1378.47119, 13.04876,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(19378, 958.45056, -1366.98755, 13.04876,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(19378, 953.64673, -1371.83203, 12.95880,   0.00000, 0.00000, 90.61520);
	CreateDynamicObject(19377, 953.51959, -1343.52295, 19.21810,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19380, 932.88086, -1379.08154, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 932.87122, -1369.48706, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 948.75018, -1367.14868, 12.95880,   0.00000, 0.00000, 0.29900);
	CreateDynamicObject(19380, 943.36932, -1379.02124, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 953.82184, -1378.95837, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 964.30078, -1378.89429, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 974.79120, -1378.74353, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 977.84259, -1378.74011, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 942.94342, -1369.56067, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 953.32898, -1369.94434, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 963.80487, -1369.41138, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 972.91602, -1369.53137, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 977.94086, -1369.26514, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 962.33704, -1359.79541, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 971.71893, -1359.90430, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19380, 977.70715, -1359.72717, 16.61325,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3851, 951.16852, -1383.94189, 14.61130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 964.31219, -1383.94189, 14.61130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 977.47913, -1383.94189, 14.61130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 933.38580, -1383.94189, 14.61130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 933.36182, -1383.93591, 20.20280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 951.16852, -1383.94189, 20.20280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 964.31219, -1383.94189, 20.20280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 977.47913, -1383.94189, 20.20280,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 961.13617, -1354.99182, 18.51510,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 970.66132, -1354.95789, 18.51510,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 979.77417, -1354.86646, 18.51510,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 984.58221, -1359.63550, 18.51008,   0.00000, 0.00000, 0.60704);
	CreateDynamicObject(19377, 979.77417, -1354.86646, 8.14142,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 970.66132, -1354.95789, 8.14140,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 961.13623, -1354.99182, 8.14140,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(19377, 984.58221, -1359.63550, 8.14140,   0.00000, 0.00000, 0.60700);
	CreateDynamicObject(19377, 963.67560, -1360.25281, 23.67820,   0.00000, 90.00000, 270.61420);
	CreateDynamicObject(19377, 973.24097, -1360.10339, 23.67820,   0.00000, 90.00000, 270.61420);
	CreateDynamicObject(19377, 979.86603, -1360.10120, 23.67820,   0.00000, 90.00000, 270.61420);
	CreateDynamicObject(5737, 972.42163, -1350.22485, 6.55350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5737, 946.58130, -1350.23987, 6.55350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5737, 940.49384, -1350.22485, 6.55350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 926.19159, -1385.24573, 13.53526,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 926.19159, -1385.24573, 15.74476,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 956.87671, -1336.37744, 15.13284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 956.70337, -1338.33984, 15.13284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 974.54486, -1338.37158, 15.13284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 983.79425, -1347.48376, 15.13280,   0.00000, 0.00000, 270.67889);
	CreateDynamicObject(3660, 937.29089, -1336.41565, 15.13284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 937.29089, -1338.33984, 15.13280,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 974.60602, -1336.37329, 15.13284,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 985.80481, -1345.42834, 15.13280,   0.00000, 0.00000, 270.67889);
	CreateDynamicObject(3660, 985.81427, -1364.92883, 15.13280,   0.00000, 0.00000, 270.67889);
	CreateDynamicObject(3660, 985.91785, -1375.13525, 15.13280,   0.00000, 0.00000, 270.67889);
	CreateDynamicObject(3660, 926.91455, -1345.51233, 15.13280,   0.00000, 0.00000, 270.67889);
	CreateDynamicObject(3660, 925.03668, -1345.54089, 15.13280,   0.00000, 0.00000, 270.67889);
	CreateDynamicObject(3660, 925.25427, -1365.17017, 15.13280,   0.00000, 0.00000, 270.67889);
	CreateDynamicObject(3660, 925.35144, -1375.78125, 15.13280,   0.00000, 0.00000, 270.67889);
	CreateDynamicObject(4199, 1024.44348, -1356.21033, 14.05015,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(983, 930.91333, -1385.50061, 13.32250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 937.31622, -1385.39636, 13.32250,   0.00000, 0.00000, 91.86777);
	CreateDynamicObject(983, 948.69495, -1385.30713, 13.32250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 955.10425, -1385.22546, 13.32250,   0.00000, 0.00000, 91.70815);
	CreateDynamicObject(983, 961.88367, -1385.19263, 13.32250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 975.00574, -1385.06409, 13.32250,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 968.28394, -1385.11707, 13.32250,   0.00000, 0.00000, 91.70815);
	CreateDynamicObject(983, 981.42407, -1384.98328, 13.32250,   0.00000, 0.00000, 91.70815);
	CreateDynamicObject(2942, 939.85010, -1385.73853, 12.94327,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1775, 944.54395, -1385.43274, 13.53173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 956.73859, -1350.41455, 12.77142,   0.00000, 90.00000, 0.51010);
	CreateDynamicObject(19381, 977.48010, -1350.34375, 12.77142,   0.00000, 90.00000, 0.51010);
	CreateDynamicObject(19381, 967.14923, -1350.44336, 12.77142,   0.00000, 90.00000, 0.51010);
	CreateDynamicObject(19381, 977.16998, -1340.84363, 12.77142,   0.00000, 90.00000, 0.51010);
	CreateDynamicObject(19381, 966.81305, -1340.83447, 12.77142,   0.00000, 90.00000, 0.51010);
	CreateDynamicObject(19381, 956.39026, -1340.83997, 12.77142,   0.00000, 90.00000, 0.51010);
	CreateDynamicObject(19381, 945.92871, -1341.01672, 12.77142,   0.00000, 90.00000, 0.51010);
	CreateDynamicObject(19381, 935.50452, -1340.81824, 12.77142,   0.00000, 90.00000, 0.51010);
	CreateDynamicObject(19381, 929.19678, -1341.47021, 12.77142,   0.00000, 90.00000, 0.51010);
	CreateDynamicObject(1723, 936.23926, -1369.32898, 12.61661,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 928.17554, -1369.44727, 12.61661,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 946.23267, -1369.27905, 12.61660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2200, 982.80090, -1366.92773, 12.67120,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2200, 982.80573, -1364.73779, 12.67120,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19173, 954.55255, -1371.90796, 15.63555,   0.00000, 0.00000, 0.60300);
	CreateDynamicObject(2608, 958.75507, -1368.51526, 13.19790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(710, 926.45673, -1385.92065, 26.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(710, 984.32813, -1385.12830, 26.50691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1736, 970.83508, -1360.41040, 15.11881,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2184, 969.68518, -1364.95593, 12.62014,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2184, 967.39130, -1363.14551, 12.62010,   0.00000, 0.00000, 315.61801);
	CreateDynamicObject(2184, 972.59882, -1364.65540, 12.62010,   0.00000, 0.00000, 43.04690);
	CreateDynamicObject(2184, 974.50330, -1362.49585, 12.62010,   0.00000, 0.00000, 84.01650);
	CreateDynamicObject(2184, 967.00256, -1360.24109, 12.62010,   0.00000, 0.00000, 271.64853);
	CreateDynamicObject(1828, 971.22052, -1361.95349, 12.60060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 971.10614, -1361.78357, 12.62533,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2485, 970.22321, -1364.75830, 13.43850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 972.46600, -1366.47705, 12.62130,   0.00000, 0.00000, 229.00000);
	CreateDynamicObject(1715, 969.39191, -1366.51428, 12.62130,   0.00000, 0.00000, 135.00000);
	CreateDynamicObject(2195, 982.00482, -1360.47888, 13.22339,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2195, 982.42285, -1383.01611, 13.22339,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 996.29089, -1336.60291, 15.15420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1015.71539, -1337.96497, 15.15420,   0.00000, 0.00000, -8.00000);
	CreateDynamicObject(983, 989.04297, -1381.88232, 13.23530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 989.04352, -1375.44641, 13.23530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 989.03265, -1368.99207, 13.23530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 989.04877, -1362.49475, 13.23530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 988.96783, -1353.44971, 13.23530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 988.93402, -1346.99976, 13.23530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 988.95441, -1341.11035, 13.23530,   0.00000, 0.00000, 0.00000);


//============================================GARDURI TRUCK========================================//
	CreateDynamicObject(984, -81.82047, -1110.86475, 4.17288,   0.00000, 0.00000, -18.35999);
	CreateDynamicObject(983, -79.30273, -1103.30115, 4.17290,   0.00000, 0.00000, -18.29999);
	CreateDynamicObject(984, -72.22580, -1102.25769, 4.17290,   0.00000, 0.00000, 72.06000);
	CreateDynamicObject(984, -60.15294, -1106.45935, 4.17290,   0.00000, 0.00000, 69.71999);
	CreateDynamicObject(984, -48.12802, -1110.89929, 4.17290,   0.00000, 0.00000, 69.71999);
	CreateDynamicObject(984, -36.10821, -1115.27698, 4.17290,   0.00000, 0.00000, 70.25999);
	CreateDynamicObject(984, -27.07509, -1118.50513, 4.17290,   0.00000, 0.00000, 70.25999);
	CreateDynamicObject(984, -23.69537, -1126.47070, 4.17288,   0.00000, 0.00000, -24.60000);
	CreateDynamicObject(984, -29.01739, -1138.10400, 4.17288,   0.00000, 0.00000, -24.60000);
	CreateDynamicObject(983, -33.04802, -1146.78394, 4.17290,   0.00000, 0.00000, -25.38000);
	CreateDynamicObject(983, -35.96533, -1152.43555, 4.17290,   0.00000, 0.00000, -29.34000);
	CreateDynamicObject(983, -38.93752, -1157.68274, 4.17290,   0.00000, 0.00000, -29.34000);
	CreateDynamicObject(984, -46.34081, -1157.83655, 4.17290,   0.00000, 0.00000, 65.63999);
	CreateDynamicObject(984, -57.97133, -1152.49060, 4.17290,   0.00000, 0.00000, 65.04000);
	CreateDynamicObject(984, -69.57316, -1147.08252, 4.17290,   0.00000, 0.00000, 65.04000);
	CreateDynamicObject(984, -81.18249, -1141.70251, 4.17290,   0.00000, 0.00000, 65.21999);
	CreateDynamicObject(983, -88.46136, -1138.34119, 4.17290,   0.00000, 0.00000, 65.28000);

//==============================================BANCA=================================================//
	CreateDynamicObject(9131, 581.39453, -1244.32312, 15.91130,   0.00000, 0.00000, 22.38000);
	CreateDynamicObject(9131, 581.39453, -1244.32312, 18.12182,   0.00000, 0.00000, 22.38000);
	CreateDynamicObject(9131, 603.79932, -1235.26208, 16.32403,   0.00000, 0.00000, 22.38000);
	CreateDynamicObject(9131, 603.79932, -1235.26208, 18.57710,   0.00000, 0.00000, 22.38000);
	CreateDynamicObject(970, 604.67725, -1237.40710, 17.62510,   0.00000, 0.00000, 110.75997);
	CreateDynamicObject(970, 606.12616, -1241.24597, 17.62510,   0.00000, 0.00000, 110.75997);
	CreateDynamicObject(970, 607.55225, -1244.96997, 17.62510,   0.00000, 0.00000, 110.75997);
	CreateDynamicObject(1215, 608.25348, -1246.90955, 17.79839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 603.85303, -1235.34863, 17.79839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 582.03009, -1246.53113, 17.12080,   0.00000, 0.00000, 100.01997);
	CreateDynamicObject(970, 582.75464, -1250.57959, 17.12080,   0.00000, 0.00000, 100.01997);
	CreateDynamicObject(970, 583.47467, -1254.63574, 17.12080,   0.00000, 0.00000, 100.01997);
	CreateDynamicObject(1215, 583.84149, -1256.59363, 17.31990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 581.43671, -1244.16724, 17.53976,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 604.51050, -1243.58240, 17.79839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 585.97632, -1251.00061, 17.79839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 599.91687, -1245.41565, 17.79839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 595.21753, -1247.27258, 17.79839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 590.68359, -1249.17468, 17.79839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 606.16730, -1241.32166, 17.77333,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 582.71857, -1250.61694, 17.28715,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 608.55957, -1237.74475, 16.24743,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 572.06836, -1257.37402, 16.24743,   0.00000, 0.00000, 0.00000);
//===============================================DMV==================================================//
	CreateDynamicObject(970, 1195.08228, -1822.89221, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1195.07312, -1827.02136, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1195.07776, -1831.13135, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1195.08252, -1835.25171, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1197.15222, -1837.31421, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1201.28796, -1837.30823, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1215, 1206.37280, -1838.37158, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1215, 1208.19177, -1840.56995, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1215, 1208.25232, -1843.51025, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1215, 1206.75452, -1845.87219, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1215, 1203.84985, -1847.08911, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1205.47827, -1846.81055, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1207.68860, -1844.88745, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1208.50037, -1842.07629, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1207.52014, -1839.38342, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19127, 1204.79944, -1837.61829, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1195.10535, -1820.73730, 12.59712,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1195.10535, -1820.42444, 12.59710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1225.83020, -1837.32300, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1229.95483, -1837.32251, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1234.08398, -1837.31201, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1238.20386, -1837.30823, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1242.30896, -1837.30798, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1246.43420, -1837.30066, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1250.55762, -1837.30457, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1254.68018, -1837.30518, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1257.89954, -1837.32422, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1215, 1223.66968, -1837.38257, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1222.45288, -1837.60754, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1221.25610, -1838.19788, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1220.16016, -1838.97473, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1219.41760, -1840.15100, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1218.97961, -1841.71155, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1219.20044, -1843.38855, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1219.79016, -1844.84668, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1220.86487, -1846.00354, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1222.13049, -1846.78601, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1223.60913, -1847.05786, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1215, 1260.00793, -1837.37781, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1215, 1203.33386, -1837.38550, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1261.44348, -1837.62927, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1262.75720, -1838.43579, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1263.85132, -1839.47485, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1264.49695, -1840.72742, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1264.84692, -1842.26624, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1264.47852, -1843.83386, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1263.77576, -1845.21643, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1262.75439, -1846.04163, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1261.57983, -1846.74683, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1260.08936, -1846.96631, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(970, 1258.09363, -1846.96313, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1253.96692, -1846.95398, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1249.83838, -1846.94861, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1245.72144, -1846.95251, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1241.59302, -1846.96509, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1237.49622, -1846.96912, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1233.37695, -1846.96423, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1229.26355, -1846.97461, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1225.68445, -1846.97510, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1276.66589, -1793.19397, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1280.78516, -1793.19299, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1282.85754, -1795.24756, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1282.85669, -1799.35815, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1272.55652, -1793.19910, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1268.45251, -1793.20569, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1264.35071, -1793.20276, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1260.24841, -1793.19958, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1256.14539, -1793.20532, 12.93870,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(970, 1282.86206, -1803.45691, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1282.86401, -1807.56824, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1282.85913, -1811.69250, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1282.85718, -1815.80029, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1282.85522, -1819.90808, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1282.85852, -1824.00977, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1282.86206, -1828.13147, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1282.85645, -1832.25342, 12.93873,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1282.85645, -1835.32397, 12.93870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1282.81799, -1837.43860, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1281.50757, -1837.37524, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1280.19751, -1837.44507, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1278.70691, -1837.71252, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1277.20081, -1838.61316, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1276.03162, -1839.84326, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1275.41992, -1841.52051, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1275.50720, -1843.24194, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1276.12170, -1844.66956, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1277.14172, -1845.82959, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1278.37659, -1846.58875, 13.14844,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19127, 1279.92126, -1846.96033, 13.21019,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1262.28796, -1795.26611, 12.44970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1266.40515, -1795.27808, 12.44970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1270.49438, -1795.27356, 12.44970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1274.61304, -1795.26453, 12.44970,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1278.74255, -1795.26221, 12.44970,   0.00000, 0.00000, 90.00000);

//===============================================ATM-URI================================================//
	CreateDynamicObject(2942, 1224.93347, -1811.67859, 16.23798,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2942, 1549.65637, -1679.48499, 13.15502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2942, 1172.60681, -1318.87598, 15.02624,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2942, 1668.77002, -1405.48840, 13.14690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2942, 995.55811, -1294.10144, 13.35396,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2942, 1781.9608, -1771.4186, 13.3695,   0.00000, 0.00000, -180.00000);
//======================================LSPD TOT CE TINE EXTERIOR===================================================
	CreateObject(1498, 1564.31897, -1667.41333, 27.37780,   0.00000, 0.00000, 0.00000);
	CreateObject(1498, 1559.40991, -1637.19116, 12.49472,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1534.73840, -1639.97620, 13.04986,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1644.08911, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1648.24792, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1652.35193, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1656.49524, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1660.61597, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(1360, 1535.86353, -1663.23010, 13.26519,   0.00000, 0.00000, 90.00000);
	CreateObject(1360, 1538.10657, -1665.05603, 13.26520,   0.00000, 0.00000, 0.00000);
	CreateObject(1360, 1538.10657, -1669.69910, 13.26520,   0.00000, 0.00000, 0.00000);
	CreateObject(1360, 1538.10657, -1673.98108, 13.26520,   0.00000, 0.00000, 0.00000);
	CreateObject(1360, 1538.10657, -1678.88147, 13.26520,   0.00000, 0.00000, 0.00000);
	CreateObject(1360, 1535.86353, -1681.64685, 13.26520,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1684.58435, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1688.68384, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1692.80530, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1696.94641, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1701.04834, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1705.17078, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1709.29138, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1713.44556, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1717.56592, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1720.27234, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1615.72156, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1611.62097, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1607.47278, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1534.73840, -1604.34985, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(970, 1541.64429, -1622.79333, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1541.64429, -1632.93494, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1543.66370, -1634.96350, 13.04986,   0.00000, 0.00000, 90.00000);
	CreateObject(1215, 1539.45740, -1633.04785, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, 1537.73401, -1633.46887, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, 1536.15405, -1634.53870, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, 1535.16431, -1636.02881, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, 1534.76453, -1637.80750, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, 1539.46387, -1622.70264, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, 1537.67004, -1622.22717, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, 1536.17432, -1621.18103, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, 1535.15503, -1619.66089, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(1215, 1534.78320, -1617.87976, 13.04990,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1539.52490, -1717.96790, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(9131, 1537.22888, -1720.20764, 12.54590,   0.00000, 0.00000, 0.00000);
	CreateObject(9131, 1537.22888, -1602.56238, 12.54590,   0.00000, 0.00000, 0.00000);
	CreateObject(3660, 1553.54529, -1620.39343, 14.81552,   0.00000, 0.00000, 0.00000);
	CreateObject(970, 1543.71143, -1620.70605, 13.04990,   0.00000, 0.00000, 90.00000);
	CreateObject(9131, 1543.80994, -1618.28040, 12.54590,   0.00000, 0.00000, 0.00000);
	CreateObject(3660, 1569.56860, -1620.39050, 14.81552,   0.00000, 0.00000, 0.00000);
	CreateObject(4199, 1602.09839, -1618.30066, 14.15086,   0.00000, 0.00000, 179.47939);
	CreateObject(977, 1582.37830, -1638.10889, 13.85688,   0.00000, 0.00000, 11.36309);
	CreateObject(986, 1588.53857, -1638.26086, 12.99495,   0.00000, 0.00000, 0.00000);
	CreateObject(9131, 1544.44275, -1623.22131, 12.54590,   0.00000, 0.00000, 0.00000);
//========================================================================== LSPD Toilet and the place to go on duty
	CreateDynamicObject(2610,218.75526428,121.83491516,1003.04418945,0.00000000,0.00000000,0.00000000); //object(cj_p_fileing2) (1)
	CreateDynamicObject(2609,219.27465820,121.84451294,1002.95043945,0.00000000,0.00000000,0.00000000); //object(cj_p_fileing1) (1)
	CreateDynamicObject(2608,221.64674377,121.90673065,1002.93023682,0.00000000,0.00000000,0.00000000); //object(polce_shelf) (1)
	CreateDynamicObject(2602,218.13377380,108.18171692,998.53906250,0.00000000,0.00000000,91.80505371); //object(police_cell_toilet) (2)
	CreateDynamicObject(2700,227.60937500,116.82064056,1000.65795898,0.00000000,0.00000000,140.66055298); //object(cj_sex_tv2) (1)
//========================================================================== Pickups / pay and sprays
	CreateDynamicObject(971,1025.27950000,-1029.22990000,32.10160000,0.00000000,0.00000000,0.00000000); // pay & spray
	CreateDynamicObject(971,488.23410000,-1735.45910000,11.14160000,0.00000000,0.00000000,174.00000000); // pay & spray
	CreateDynamicObject(971,2071.54100000,-1831.41430000,13.54690000,0.00000000,0.00000000,90.00000000); // pay & spray
	CreateDynamicObject(971,719.81990000,-462.47680000,16.33590000,0.00000000,0.00000000,0.00000000); // pay & spray
	CreateDynamicObject(971,-1904.45610000,277.85780000,41.04690000,0.00000000,0.00000000,0.00000000); // pay & spray
	pdmain = CreateObject(977, 239.619140625, 118.5859375, 1003.8226318359, 0.000000, 0.000000, 280.2392578125); // PD inside door, by GuSo
//========================================================================== LSPD Dividers
	CreateDynamicObject(988,239.59571838,112.93193817,1004.42272949,0.00000000,0.00000000,90.44970703); //object(ws_apgate) (1)
	CreateDynamicObject(988,253.29562378,117.35619354,1004.42272949,0.00000000,0.00000000,270.27026367); //object(ws_apgate) (2)
//========================================================================== LSPD Head quarter.
	CreateDynamicObject(977,239.65409851,126.08593750,1003.82263184,0.00000000,0.00000000,280.24023438); // d??nde i lobby
	CreateDynamicObject(977,253.25012207,110.08593750,1003.82263184,0.00000000,0.00000000,280.23925781); // d?? lobby
	CreateDynamicObject(977,253.25976562,126.25781250,1003.82263184,0.00000000,0.00000000,280.23925781); // d?? lobby
//========================================================================== Admin jail
	CreateDynamicObject(980,1052.65869141,1006.49645996,57.07807922,0.00000000,0.00000000,242.39025879); //
	CreateDynamicObject(980,1044.34472656,1001.70019531,57.07807922,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(980,1036.52343750,1006.98437500,57.07807922,0.00000000,0.00000000,292.23632812); //
	CreateDynamicObject(980,1037.03417969,1017.41992188,57.07807922,0.00000000,0.00000000,242.38586426); //
	CreateDynamicObject(980,1045.28613281,1021.75976562,57.07807922,0.00000000,0.00000000,172.59521484); //
	CreateDynamicObject(980,1053.17260742,1016.30535889,57.07807922,0.00000000,0.00000000,114.80529785); //
	CreateDynamicObject(980,1039.81005859,1012.35894775,57.07807922,0.00000000,0.00000000,178.55090332); //
	CreateDynamicObject(980,1049.63000488,1011.96441650,57.07807922,0.00000000,0.00000000,176.52001953); //
	CreateDynamicObject(980,1044.55847168,1006.54644775,57.07807922,0.00000000,0.00000000,88.81982422); //
	CreateDynamicObject(980,1044.80346680,1016.38970947,57.07807922,0.00000000,0.00000000,268.32580566); //
//========================================================================== SAN
 	sanroof2 = CreateObject(988, 1546.2689208984, -1365.2965087891, 325.2109375, 0.000000, 0.000000, 88.980010986328); //object (ws_apgate) (1)
//========================================================================== 3x ATM, vinewood gas og idlewood gas og dillimore gas -Carpark also included
	CreateDynamicObject(2942,661.37536621,-576.56329346,15.97883701,0.00000000,0.00000000,270.67541504); //
	CreateDynamicObject(2942,1928.60095215,-1786.01708984,13.18977451,0.00000000,0.00000000,91.30737305); //
	CreateDynamicObject(2942,1102.39379883,-1429.51391602,15.43977451,0.00000000,0.00000000,90.00000000); //object(kmb_atm1) (1)
	CreateDynamicObject(2942,2134.52734375,-1206.08593750,23.61124039,0.00000000,0.00000000,43.99475098); //object(kmb_atm1) (2)
	CreateDynamicObject(2942,1593.18945312,-1272.42773438,17.10892868,0.00000000,0.00000000,90.00000000); //object(kmb_atm1) (3)
//========================================================================== Blokeringer osv.
	CreateDynamicObject(10841,-1619.78247070,744.07635498,1.68719101,0.00000000,0.00000000,89.32449341); // blokering til san fierro underground parking
	CreateDynamicObject(986,966.34002686,-54.12430954,1001.29052734,0.00000000,0.00000000,270.67565918); // brothel
	CreateDynamicObject(4199,1601.86315918,-1618.53210449,14.59801674,0.00000000,0.00000000,180.00000000); // lspd garage
	CreateDynamicObject(3050,2271.33911133,1626.97277832,1084.96801758,0.00000000,0.00000000,1.98498535); //blokering til calligias roof top
	CreateDynamicObject(3050,2271.44531250,1668.53125000,1085.49865723,0.00000000,0.00000000,0.00000000); //blokering til calligias roof top
//==========================================================================Gates
	tugate = CreateObject(971, 1042.2530,-1026.0344,32.1016,0, 0.0000, 0.0000);
	pdjail = CreateObject( 974 , 259.159362 , 92.283248 , 1002.445312 , 0.000000 , 0.000000 , 94.000000 );
    gate = CreateObject(968, 1544.745605, -1630.961792, 13.177118, 0.0000, 269.7592, 270.0000); // Panser gate
//==========================================================================
	CreateDynamicObject(1663,1580.24000000,-1634.85000000,13.00000000,0.00000000,0.00000000,180.00000000); //
	CreateDynamicObject(1518,1580.24000000,-1633.35000000,13.93000000,0.00000000,0.00000000,0.00000000); //
	CreateDynamicObject(1566,1582.54553200,-1637.89135700,13.58087500,0.00000000,0.00000000,0.00000000); //
//===============================================================================================================//
	new string[MAX_PLAYER_NAME];
    new string1[MAX_PLAYER_NAME];
   	News[hTaken1] = 0; News[hTaken2] = 0; News[hTaken3] = 0; News[hTaken4] = 0; News[hTaken5] = 0;
	//==========================================================================
	format(string, sizeof(string), "Nothing");
	strmid(News[hAdd1], string, 0, strlen(string), 255);
	strmid(News[hAdd2], string, 0, strlen(string), 255);
	strmid(News[hAdd3], string, 0, strlen(string), 255);
	strmid(News[hAdd4], string, 0, strlen(string), 255);
	strmid(News[hAdd5], string, 0, strlen(string), 255);
	strmid(News[hAdd6], string, 0, strlen(string), 255);
	strmid(News[hAdd7], string, 0, strlen(string), 255);
	strmid(News[hAdd8], string, 0, strlen(string), 255);
	strmid(News[hAdd9], string, 0, strlen(string), 255);
	strmid(News[hAdd10], string, 0, strlen(string), 255);
	strmid(News[hAdd11], string, 0, strlen(string), 255);
	strmid(News[hAdd12], string, 0, strlen(string), 255);
	strmid(News[hAdd13], string, 0, strlen(string), 255);
	strmid(News[hAdd14], string, 0, strlen(string), 255);
	strmid(News[hAdd15], string, 0, strlen(string), 255);
	strmid(News[hAdd16], string, 0, strlen(string), 255);
	strmid(News[hAdd17], string, 0, strlen(string), 255);
	strmid(News[hAdd18], string, 0, strlen(string), 255);
	strmid(News[hAdd19], string, 0, strlen(string), 255);
	strmid(News[hAdd20], string, 0, strlen(string), 255);
	strmid(News[hAdd21], string, 0, strlen(string), 255);
	format(string1, sizeof(string1), "No-one");
	strmid(News[hContact1], string1, 0, strlen(string1), 255);
	strmid(News[hContact2], string1, 0, strlen(string1), 255);
	strmid(News[hContact3], string1, 0, strlen(string1), 255);
	strmid(News[hContact4], string1, 0, strlen(string1), 255);
	strmid(News[hContact5], string1, 0, strlen(string1), 255);
	strmid(News[hContact6], string1, 0, strlen(string1), 255);
	strmid(News[hContact7], string1, 0, strlen(string1), 255);
	strmid(News[hContact8], string1, 0, strlen(string1), 255);
	strmid(News[hContact9], string1, 0, strlen(string1), 255);
	strmid(News[hContact10], string1, 0, strlen(string1), 255);
	strmid(News[hContact11], string1, 0, strlen(string1), 255);
	strmid(News[hContact12], string1, 0, strlen(string1), 255);
	strmid(News[hContact13], string1, 0, strlen(string1), 255);
	strmid(News[hContact14], string1, 0, strlen(string1), 255);
	strmid(News[hContact15], string1, 0, strlen(string1), 255);
	strmid(News[hContact16], string1, 0, strlen(string1), 255);
	strmid(News[hContact17], string1, 0, strlen(string1), 255);
	strmid(News[hContact18], string1, 0, strlen(string1), 255);
	strmid(News[hContact19], string1, 0, strlen(string1), 255);
	strmid(News[hContact20], string1, 0, strlen(string1), 255);
	strmid(News[hContact21], string1, 0, strlen(string1), 255);
	format(crimestore, sizeof(crimestore), "[HQ] There is nothing in your vicinity, over");



	carslist = LoadModelSelectionMenu("carslist.txt");
	bikelist = LoadModelSelectionMenu("bikelist.txt");
	bicicletelist = LoadModelSelectionMenu("bicicletelist.txt");
	planelist = LoadModelSelectionMenu("planelist.txt");
	boatlist = LoadModelSelectionMenu("boatlist.txt");
	masklist = LoadModelSelectionMenu("masklist.txt");
	hatlist = LoadModelSelectionMenu("hatlist.txt");
	glasseslist = LoadModelSelectionMenu("glasseslist.txt");
	guitarlist = LoadModelSelectionMenu("guitarlist.txt");
	headphonelist = LoadModelSelectionMenu("headphonelist.txt");
	watchlist = LoadModelSelectionMenu("watchlist.txt");
	helmetlist = LoadModelSelectionMenu("helmetlist.txt");
	skinlist = LoadModelSelectionMenu("skinlist.txt");
	hairlist = LoadModelSelectionMenu("hairlist.txt");

	SetTimer("KiloSecTimers", 1000*30, 1);
	SetTimer("OneSecTimers", 1000, 1);	                                //1 secunda
	SetTimer("OneMinuteTimer", 60000, 1);
	SetTimer("CheckStatus", 10, 1); // 10 mili sekunder
	//SetTimer("CheckAirBreak",500, 1);

	if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour);
	}
	//=================================FURNITURE===============================//
    AddObjectFromFile(OBJECT_FILE_NAME);
	//=========================================================================//
	return 1;
}


public OnPlayerConnect(playerid)
{


    Spawned[playerid] = 0;
    CurrentCCTV[playerid] = -1;


	

// =========== SPAWN ==========
	RemoveBuildingForPlayer(playerid, 962, 825.0547, -1356.8828, 13.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 798.0781, -1337.8516, 15.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 802.7109, -1346.8359, 15.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 813.3359, -1331.8828, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 962, 827.5078, -1353.7266, 13.6016, 0.25);

// =============================== PRIMARIE ===================================
	RemoveBuildingForPlayer(playerid, 4024, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4044, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 1448.2344, -1755.8984, 14.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1407.1953, -1749.3125, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1405.2344, -1821.1172, 13.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1417.9766, -1832.5313, 11.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1405.5781, -1831.6953, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1447.1016, -1832.5000, 12.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 4174, 1435.7656, -1823.6641, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1456.3984, -1832.5313, 11.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1464.0938, -1831.8828, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1504.8438, -1832.5313, 11.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1499.0469, -1832.2734, 12.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1515.3828, -1850.0547, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1514.4219, -1850.0391, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1512.9453, -1832.3516, 13.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1516.6875, -1850.0547, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1404.9141, -1765.2656, 12.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 4173, 1427.2734, -1756.1797, 15.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1415.3125, -1748.5625, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1429.5313, -1748.4219, 12.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1438.0313, -1747.9375, 13.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1447.9063, -1748.2266, 12.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 4002, 1479.8672, -1790.3984, 56.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 3980, 1481.1875, -1785.0703, 22.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 4003, 1481.0781, -1747.0313, 33.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1516.0000, -1748.6016, 13.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1372, 1538.9453, -1849.2734, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1230, 1538.8359, -1847.6250, 13.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1538.3906, -1847.9297, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1539.1016, -1847.2969, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1549.5313, -1832.3125, 12.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1555.6641, -1830.5938, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4175, 1524.4141, -1823.8516, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1554.8203, -1816.1563, 13.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1553.2578, -1764.8125, 12.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 4172, 1534.7656, -1756.1797, 15.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1533.2656, -1749.0234, 12.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1522.1641, -1748.5703, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1553.7031, -1747.9375, 13.4063, 0.25);
		//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 4982, 1892.5391, -2012.8281, 21.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 5086, 1892.5391, -2012.8281, 21.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 671, 1907.0469, -2091.1172, 11.8906, 0.25);
	// From Romania-Roleplay
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 673, 2495.2656, -1538.0078, 22.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2495.2656, -1553.0781, 22.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 616, 2528.7109, -1556.6797, 21.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 17863, 2467.4609, -1538.2500, 27.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 6003, 954.6875, -1305.7734, 30.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 958.3359, -1377.3203, 24.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 958.3359, -1377.3203, 24.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 5818, 954.6875, -1305.7734, 30.1406, 0.25);

	//====Ghetto Ganton // Rydar House [Remove].----///
	RemoveBuildingForPlayer(playerid, 762, 2446.5547, -1681.0703, 12.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, 2457.8672, -1679.6719, 12.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 17879, 2484.5313, -1667.6094, 21.4375, 0.25);


	/////////


	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Low - factiune
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 2627, 759.6328, -48.1250, 999.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2629, 766.3047, -48.3047, 999.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2631, 756.4063, -47.9219, 999.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 14788, 754.6797, -40.3984, 1001.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 14786, 768.2109, -33.4219, 1003.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 14790, 768.2344, -33.3984, 1003.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 14787, 766.9844, -30.5859, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2755, 768.1406, -28.8047, 1001.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2755, 762.2188, -28.8047, 1001.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 14827, 763.8906, -26.4922, 1003.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 2630, 769.2422, -47.8984, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 2755, 774.1641, -28.8047, 1001.3125, 0.25);

    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Casino
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    RemoveBuildingForPlayer(playerid, 2188, 1125.1406, -3.4141, 1000.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1127.0781, -1.6797, 1000.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2188, 1125.1484, -0.0313, 1000.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 2964, 1119.2734, 7.6172, 1001.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2964, 1123.1484, 7.6172, 1001.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2964, 1127.0156, 7.6172, 1001.0703, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Job furnituer
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    RemoveBuildingForPlayer(playerid, 1226, 2135.2969, -2120.4141, 16.3516, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Prison LS-RP
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 3682, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1392.1563, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1390.5703, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1387.8516, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 203.9531, 1409.9141, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 199.3828, 1407.1172, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 204.6406, 1409.8516, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1404.2344, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1400.6563, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1409.0000, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 16086, 232.2891, 1434.4844, 13.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 183.0391, 1455.7500, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 198.0000, 1462.0156, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.2422, 1460.3203, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.3047, 1461.0078, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 199.5859, 1463.7266, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 181.1563, 1463.7266, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 185.9219, 1462.8750, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 202.3047, 1462.8750, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 189.5000, 1462.8750, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1451.8281, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1454.5469, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1456.1328, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1468.2109, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1464.6328, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 247.5547, 1471.0938, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1472.9766, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.8125, 1473.8281, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.1250, 1473.8906, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 16089, 342.1250, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16090, 315.7734, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16091, 289.7422, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16087, 358.6797, 1430.4531, 11.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 16088, 368.4297, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16092, 394.1563, 1431.0938, 5.2734, 0.25);

    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Parcare alhambra
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1694.4609, 21.3906, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Peco N & Peco S
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 5681, 1921.4844, -1778.9141, 18.5781, 0.25);

    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Impound
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 3290, 2503.1250, -2073.3750, 12.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 2515.4219, -2073.3750, 12.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 2432.7266, -2133.0234, 12.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3686, 2448.1328, -2075.6328, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3745, 2475.1016, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3745, 2482.0234, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3745, 2489.1016, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3745, 2496.0938, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 2432.7266, -2133.0234, 12.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3567, 2446.8281, -2075.8438, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3567, 2438.3594, -2075.8438, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3627, 2448.1328, -2075.6328, 16.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 3643, 2489.1016, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3643, 2482.0234, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3643, 2475.1016, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3643, 2496.0938, -2073.4766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 2515.4219, -2073.3750, 12.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 2503.1250, -2073.3750, 12.4297, 0.25);
    // Mecanics
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    RemoveBuildingForPlayer(playerid, 5134, 2045.4922, -1903.6172, 16.1875, 0.25);
    RemoveBuildingForPlayer(playerid, 5204, 2021.1563, -1893.2734, 15.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 1525, 2065.4375, -1897.2344, 13.6094, 0.25);
    RemoveBuildingForPlayer(playerid, 5321, 2045.4922, -1903.6172, 16.1875, 0.25);
    RemoveBuildingForPlayer(playerid, 5374, 2085.2813, -1909.7109, 23.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 5139, 2021.1563, -1893.2734, 15.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 955, 2060.1172, -1897.6406, 12.9297, 0.25);
    RemoveBuildingForPlayer(playerid, 5525, 2029.5000, -1819.2734, 14.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 5527, 2056.9844, -1830.5156, 20.6016, 0.25);
    RemoveBuildingForPlayer(playerid, 5417, 2029.5000, -1819.2734, 14.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 5532, 2056.9844, -1830.5156, 20.6016, 0.25);
    RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Primarie
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 16618, -117.7656, 1079.4609, 22.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 700, -160.5156, 1066.0703, 19.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 669, -164.3750, 1078.3906, 17.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 16386, -117.7656, 1079.4609, 22.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1345, -123.8125, 1079.3984, 19.5000, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Dealership
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 5951, 958.8203, -1359.8672, 17.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 6002, 931.2266, -1357.3281, 25.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 6003, 954.6875, -1305.7734, 30.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 932.5859, -1363.5156, 21.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1261, 958.3359, -1377.3203, 24.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 5783, 908.5391, -1384.3281, 24.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 932.5859, -1363.5156, 21.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 5814, 931.2266, -1357.3281, 25.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1522, 929.3281, -1352.1719, 12.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 716, 944.9063, -1389.3359, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 975.8125, -1391.0938, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 969.2734, -1385.3984, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, 981.8750, -1385.9922, 12.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1440, 948.7656, -1381.1641, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 958.3359, -1377.3203, 24.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 5813, 958.8203, -1359.8672, 17.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 5818, 954.6875, -1305.7734, 30.1406, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Parcare peco S
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 1412, 1917.3203, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1912.0547, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1906.7734, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1927.8516, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1922.5859, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1938.3906, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1933.1250, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1821.1250, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1815.8594, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1810.5938, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1805.3281, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1948.9844, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1943.6875, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1951.6094, -1800.0625, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1917.3203, -1797.4219, 13.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 1927.8516, -1797.4219, 13.8125, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    // Ganton Ghetto
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    RemoveBuildingForPlayer(playerid, 3662, 2142.7031, -1657.9297, 17.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 3662, 2164.9375, -1666.3047, 17.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 3662, 2141.8672, -1693.3516, 17.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 3662, 2154.3516, -1713.6641, 17.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 5633, 2089.3594, -1643.9297, 18.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 1501, 2138.3438, -1697.1094, 14.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 3661, 2141.8672, -1693.3516, 17.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 3661, 2154.3516, -1713.6641, 17.4844, 0.25);
    RemoveBuildingForPlayer(playerid, 1501, 2150.8281, -1717.4297, 14.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2138.8984, -1678.9688, 14.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 3661, 2142.7031, -1657.9297, 17.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 1501, 2142.8594, -1663.0859, 14.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 1501, 2165.1094, -1671.4531, 14.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 3661, 2164.9375, -1666.3047, 17.5547, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    // Park + biserica la gara
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
    RemoveBuildingForPlayer(playerid, 4070, 1719.7422, -1770.7813, 23.4297, 0.25);
    RemoveBuildingForPlayer(playerid, 1531, 1724.7344, -1741.5000, 14.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 3986, 1719.7422, -1770.7813, 23.4297, 0.25);
    RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);
    // Peco N & Peco S
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    RemoveBuildingForPlayer(playerid, 5681, 1921.4844, -1778.9141, 18.5781, 0.25);

    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Gara LS
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 1226, 1724.8750, -1859.5391, 16.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1808.1250, -1859.5391, 16.3516, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// Truck
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -79.2500, -1137.7188, 0.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 3285, -73.8047, -1141.4219, 1.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// DMV
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 1215, 1195.3594, -1820.2734, 13.1406, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	// San news - exterior
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	RemoveBuildingForPlayer(playerid, 1215, 616.7656, -1495.7734, 14.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 616.7656, -1492.0313, 14.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 616.7656, -1488.4766, 14.3203, 0.25);
    //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	//--------------------------------------------------------------------------
	InitSlots(playerid);
    OnlinePlayers++;
    if(IsPlayerNPC(playerid)) return 1;
    ResetPlayerVariables( playerid );
    SetPlayerColor(playerid,COLOR_WHITE);






    //--------------------------------------------------------------------------
	// Her er infobox
	//--------------------------------------------------------------------------
	InfoBox[playerid] = TextDrawCreate(36.000000, 144.000000, "_");
	TextDrawUseBox(InfoBox[playerid],1);
	TextDrawBoxColor(InfoBox[playerid],0x00000033);
	TextDrawTextSize(InfoBox[playerid], 180.000000, 5.000000);
	TextDrawAlignment(InfoBox[playerid],0);
	TextDrawBackgroundColor(InfoBox[playerid],0x000000ff);
	TextDrawFont(InfoBox[playerid],2);
	TextDrawLetterSize(InfoBox[playerid], 0.250000, 1.099999);
	TextDrawColor(InfoBox[playerid], -1);
	TextDrawSetOutline(InfoBox[playerid],1);
	TextDrawSetProportional(InfoBox[playerid],1);
	TextDrawSetShadow(InfoBox[playerid],1);
	//--------------------------------------------------------------------------
	// Achievement box
	//--------------------------------------------------------------------------
	InfoBoxer[playerid] = TextDrawCreate(18.000000,428.000000,"test");
	TextDrawUseBox(InfoBoxer[playerid],1);
	TextDrawBoxColor(InfoBoxer[playerid],0x00000033);
	TextDrawTextSize(InfoBoxer[playerid],217.000000,59.000000);
	TextDrawAlignment(InfoBoxer[playerid],0);
	TextDrawBackgroundColor(InfoBoxer[playerid],0x000000ff);
	TextDrawFont(InfoBoxer[playerid],2);
	TextDrawLetterSize(InfoBoxer[playerid],0.199999,0.899999);
	TextDrawColor(InfoBoxer[playerid],0xffffffff);
	TextDrawSetOutline(InfoBoxer[playerid],1);
	TextDrawSetProportional(InfoBoxer[playerid],1);
	TextDrawSetShadow(InfoBoxer[playerid],1);
	RemovePlayerAttachedObject(playerid, 0);
	RemovePlayerAttachedObject(playerid, 1);
	RemovePlayerAttachedObject(playerid, 2);
	RemovePlayerAttachedObject(playerid, 3);
	RemovePlayerAttachedObject(playerid, 4);

 
	Wounded[playerid] = 0;
	PlayerInfo[playerid][pReport] = -1;
	PlayerInfo[playerid][pQuestion] = -1;
	PlayerInfo[playerid][pRadioHandle] = -1;
	SetPlayerScore(playerid, 0);
	UsingPayphone[playerid] = 0;
	IsUsingAnim[playerid] = 0;
	gPlayerAnimLibsPreloaded[playerid] = 0;
	

    TextDrawShowForPlayer(playerid, logo); // server logo

	if (!IsValidName(playerid))
	{
	    SendClientMessage(playerid,COLOR_GRAD2,"Numele tau nu este roleplay, pune Nume_Prenume.");
    	SendClientMessage(playerid,COLOR_GRAD2,"Exemplu: Raffaelo_Gotti");
        Kick(playerid);
	    return 0;
	}
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 	new first[MAX_PLAYER_NAME], last[MAX_PLAYER_NAME];
	if(RPName(PlayerName(playerid),first,last))
	{
		InitPlayerConnection( playerid );
	 	SetSpawnInfo( playerid, 0, PlayerInfo[playerid][pSkin], 1958.33, 1343.12, 15.36, 269.15, 0, 0, 0, 0, 0, 0 );
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
	    foreach (Player, i)
		{
		    if(BlockPMPerson[playerid][i] == 1)
		    {
		        BlockPMPerson[playerid][i] = 0;
		    }
		}
	}
	else
	{
		SendClientMessage(playerid,0xA9C4E4AA,"Invalid Name, Correct Format: Firstname_Lastname (Kicked)");
		Kick(playerid);
	}
	//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	return 1;
}

// On Player Disconnect
public OnPlayerDisconnect(playerid, reason)
{
        TextDrawHideForPlayer(playerid, ssroleplay); // poze roleplay
		TextDrawHideForPlayer(playerid, logo); // server logo
// ----------- CCTV --
        if(CurrentCCTV[playerid] > -1)
        {
            KillTimer(KeyTimer[playerid]);
            TextDrawHideForPlayer(playerid, TD);
        }
        CurrentCCTV[playerid] = -1;
// --------------------------------------------------
		// Callsign
        new veh = GetPlayerVehicleID(playerid);
    	Delete3DTextLabel(vehicle_callsign[veh]);
        veicolo_callsign_status[veh] = 0;
        
				SetVehicleToRespawn(HireCar[playerid]);
				HireCar[playerid] = 999;
	OnlinePlayers--;
    if(gPlayerLogged[playerid])
	{
	    if(PlayerHasItem(playerid,"(O) strtok"))RemoveItem(playerid,"(freqx) freqx",10);
		if(PlayerHasItem(playerid,"(Weapon) Desert Eagle LSPD "))RemoveItem(playerid,"(Weapon) Desert Eagle LSPD",10);
		if(PlayerHasItem(playerid,"(Weapon) M4A1 LSPD"))RemoveItem(playerid,"(Weapon) M4A1 LSPD",10);
		if(PlayerHasItem(playerid,"(Weapon) MP5 LSPD"))RemoveItem(playerid,"(Weapon) MP5 LSPD",10);
		if(PlayerHasItem(playerid,"(Weapon) Shotgun LSPD"))RemoveItem(playerid,"(Weapon) Shotgun LSPD",10);
		if(PlayerHasItem(playerid,"(Weapon) Sniper LSPD"))RemoveItem(playerid,"(Weapon) Sniper LSPD",10);
		if(PlayerHasItem(playerid,"(Clip) Desert Eagle LSPD "))RemoveItem(playerid,"(Clip) Desert Eagle LSPD",10);
		if(PlayerHasItem(playerid,"(Clip) M4A1 LSPD"))RemoveItem(playerid,"(Clip) M4A1 LSPD",10);
		if(PlayerHasItem(playerid,"(Clip) MP5 LSPD"))RemoveItem(playerid,"(Clip) MP5 LSPD",10);
		if(PlayerHasItem(playerid,"(Clip) Shotgun LSPD"))RemoveItem(playerid,"(Clip) Shotgun LSPD",10);
		if(PlayerHasItem(playerid,"(Clip) Sniper LSPD"))RemoveItem(playerid,"(Clip) Sniper LSPD",10);
		if(PlayerHasItem(playerid,"(W) Desert Eagle LSPD "))RemoveItem(playerid,"(W) Desert Eagle LSPD",10);
		if(PlayerHasItem(playerid,"(W) M4A1 LSPD"))RemoveItem(playerid,"(W) M4A1 LSPD",10);
		if(PlayerHasItem(playerid,"(W) MP5 LSPD"))RemoveItem(playerid,"(We) MP5 LSPD",10);
		if(PlayerHasItem(playerid,"(W) Shotgun LSPD"))RemoveItem(playerid,"(W) Shotgun LSPD",10);
		if(PlayerHasItem(playerid,"(W) Sniper LSPD"))RemoveItem(playerid,"(W) Sniper LSPD",10);
		if(PlayerHasItem(playerid,"(C) Desert Eagle LSPD "))RemoveItem(playerid,"(C) Desert Eagle LSPD",10);
		if(PlayerHasItem(playerid,"(C) M4A1 LSPD"))RemoveItem(playerid,"(C) M4A1 LSPD",10);
		if(PlayerHasItem(playerid,"(C) MP5 LSPD"))RemoveItem(playerid,"(C) MP5 LSPD",10);
		if(PlayerHasItem(playerid,"(C) Shotgun LSPD"))RemoveItem(playerid,"(C) Shotgun LSPD",10);
		if(PlayerHasItem(playerid,"(C) Sniper LSPD"))RemoveItem(playerid,"(C) Sniper LSPD",10);
		if(SnowOn == 1) { DestroyPlayerObject(playerid,SnowObject[playerid]); }
		// Saving
	    SavePlayerAccount(playerid);
	    SaveInventoryMySQL(playerid);
	    if(PlayerInfo[playerid][pBizKey] != 255) { SaveBusinesses(PlayerInfo[playerid][pBizKey]); }
	    if(PlayerInfo[playerid][pHouseKey] != 0) { SaveHouses(PlayerInfo[playerid][pHouseKey]); }
	    if(PlayerInfo[playerid][pGarageKey] != 0) { SaveGarages(PlayerInfo[playerid][pGarageKey]); }
	    if (PlayerInfo[playerid][pDragged])
		{
     		KillTimer(PlayerInfo[playerid][pDragTimer]);
		}
		foreach (new i : Player)
	 	{
  			if (PlayerInfo[i][pDraggedBy] == playerid) {
      		KillTimer(PlayerInfo[i][pDragTimer]);

      		PlayerInfo[i][pDragged] = 0;
            PlayerInfo[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
 		}
	    new String[128];
		watch[playerid] = 0;
		helmet[playerid] = 0;
		DMVTest[playerid] = 0;
		graffity[playerid] = 0;
  		PlayerInfo[playerid][pDragged] = 0;
    	PlayerInfo[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		Hay[playerid] = 0;
		Pizza[playerid] = 0;
		Sweep[playerid] = 0;
		CopOnDuty[playerid] = 0;
	    LsvrOnDuty[playerid] = 0;
	    LsasOnDuty[playerid] = 0;
	    SwatOnDuty[playerid] = 0;
	    MedicOnDuty[playerid] = 0;
		Delete3DTextLabel(ShowMasca[playerid]);

		armapusa[playerid][1] = 0;
		armapusa[playerid][2] = 0;
		armapusa[playerid][3] = 0;
		armapusa[playerid][4] = 0;
		armapusa[playerid][5] = 0;
		armapusa[playerid][9] = 0;
		

		if(reason == 0)
		{
		    PlayerInfo[playerid][pCrashed] = 1;
	    	format( String, sizeof( String ), "UPDATE `Accounts` SET `Crashed` = '%d' WHERE `UserID` = '%d'",PlayerInfo[playerid][pCrashed], PlayerInfo[playerid][pDatabaseID] );
	    	mysql_query(String);
		}
	    format( String, sizeof( String ), "UPDATE `Accounts` SET `Online` = '0' WHERE `UserID` = '%d'",PlayerInfo[playerid][pDatabaseID] );
	    mysql_query(String);
	    new zone[MAX_ZONE_NAME];
	    GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
	    format( String, sizeof( String ), "UPDATE `Accounts` SET `LastPos` = '%s' WHERE `UserID` = '%d'",zone, PlayerInfo[playerid][pDatabaseID] );
	    mysql_query(String);
	    // Other Stuff
	    RemovePlayerAttachedObject(playerid, 0);
	    RemovePlayerAttachedObject(playerid, 1);
	    RemovePlayerAttachedObject(playerid, 2);
	    RemovePlayerAttachedObject(playerid, 3);
	    RemovePlayerAttachedObject(playerid, 4);
		Wounded[playerid] = 0;
		PlayerInfo[playerid][pMaskuse] = 0;
        PlayerInfo[playerid][pHospital] = 0;
        PlayerInfo[playerid][pGunPD] = 0;
        PlayerInfo[playerid][pRfreq] = 0;
        DestroyDynamicObject(PlayerInfo[playerid][pRoadblock]);
        DestroyDynamicObject(PlayerInfo[playerid][pRoadblock2]);
        DestroyDynamicObject(PlayerInfo[playerid][pRoadblock3]);
        DestroyDynamicObject(PlayerInfo[playerid][pRoadblock4]);
        DestroyDynamicObject(PlayerInfo[playerid][pRoadblock5]);
		TextDrawDestroy(CarInfo[playerid]);
			TextDrawDestroy(servername);
			
		new string[64];
	    new playername[MAX_PLAYER_NAME]; GetPlayerName(playerid,playername,sizeof(playername));
		switch(reason)
		{
			case 0: format(string, sizeof(string), "** %s a parasit serverul.(Crash) ", playername);
			case 1: format(string, sizeof(string), "** %s a parasit serverul.(Quit)", playername);
		 	case 2: format(string, sizeof(string), "** %s a parasit serverul.(Kick/Ban)",  playername);
		}
		ProxDetector(40.0, playerid, string, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE, COLOR_WHITE);
        DestroyDynamicObject(wplant[playerid]);
        if (PlayerInfo[playerid][pBoombox] > 0)
		{
			GetPlayerFacingAngle(playerid, BoomBox[PlayerInfo[playerid][pBoombox]][bPosAngle]);
			GetPlayerPos(playerid, BoomBox[PlayerInfo[playerid][pBoombox]][bPosx], BoomBox[PlayerInfo[playerid][pBoombox]][bPosy], BoomBox[PlayerInfo[playerid][pBoombox]][bPosz]);
			BoomBox[PlayerInfo[playerid][pBoombox]][bPosz] -= 1.0;
			BoomBox[PlayerInfo[playerid][pBoombox]][bObject] = CreateDynamicObject(2226, BoomBox[PlayerInfo[playerid][pBoombox]][bPosx], BoomBox[PlayerInfo[playerid][pBoombox]][bPosy], BoomBox[PlayerInfo[playerid][pBoombox]][bPosz], 0.0, 0.0, BoomBox[PlayerInfo[playerid][pBoombox]][bPosAngle], GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
			BoomBox[PlayerInfo[playerid][pBoombox]][bOwned] = 1;
			RemovePlayerAttachedObject(playerid, 5);
			PlayerInfo[playerid][pBoombox] = 0;
		}
		carsds[playerid] = 0;
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
            if(IsPlayerConnected(TransportDriver[playerid]))
			{
                TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
                TransportTime[TransportDriver[playerid]] = 0;
                TransportCost[TransportDriver[playerid]] = 0;
                format(string, sizeof(string), "~w~Passenger Left~n~~g~Earned $%d",TransportCost[playerid]);
                GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
            }
        }
        if(GotHit[playerid] > 0)
		{
            if(GetChased[playerid] < 999)
			{
                if(IsPlayerConnected(GetChased[playerid]))
				{
                    SendClientMessage(GetChased[playerid], COLOR_WHITE, "Your hit has left the server");
                    GoChase[GetChased[playerid]] = 999;
                }
            }
        }
        
	    gPlayerLogged[playerid] = 0;
    }
    return 1;
}


public OnPlayerRequestSpawn(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(gPlayerLogged[playerid] == 1)
	{ return 1; }
	else {
	    if(SpawnAttempts[playerid] >= MAX_SPAWN_ATTEMPTS)
	    {
	        KickPlayer(playerid,"the server","Repeated attempts to spawn without logging in");
			return 1;
	    }
		SpawnAttempts[playerid] ++;
		return 0;
	}
}

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid)) return 1;
	SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	if(RegistrationStep[playerid] == 0 && gPlayerLogged[playerid] != 1)
	{
        InitPlayerConnection( playerid );
	}
	else
	{
		SpawnPlayer(playerid);
	}
   	return 0;
}

public OnPlayerSpawn(playerid)
{
	
    Spawned[playerid] = 1; // CCTV
	KillTimer(MatarMotor[playerid]);
	SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
    SetPlayerPos(playerid, 1960.1999511719, 1343.0, 14.69999809265); //The player spawn position
    SetPlayerCameraPos(playerid, 1970, 1352.8000488281, 19.39999961853); //The camera position
    SetPlayerCameraLookAt(playerid, 1960.1999511719, 1343, 14.69999809265); //The position the camera is looking

   	if(PlayerInfo[playerid][pTut] == 0)
	{
		PlayerInfo[playerid][pLevel] = 1;
		PlayerInfo[playerid][pBank] = 500;
		PlayerInfo[playerid][pFight] = 0;
		PlayerInfo[playerid][pTalk] = 0;
		PlayerInfo[playerid][pBan] = 0;
		Wounded[playerid] = 0;
		IsUsingAnim[playerid] = 0;
		SetPlayerCash(playerid,PlayerInfo[playerid][pCash]);
		TogglePlayerControllable(playerid, 0);
		TutorialStage[playerid] = 1;
	}
	if(!gPlayerAnimLibsPreloaded[playerid])
	{
   		PreloadAnimLib(playerid,"BOMBER");
   		PreloadAnimLib(playerid,"RAPPING");
    	PreloadAnimLib(playerid,"SHOP");
    	PreloadAnimLib(playerid,"RIOT");
   		PreloadAnimLib(playerid,"BEACH");
   		PreloadAnimLib(playerid,"SMOKING");
    	PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS");
    	PreloadAnimLib(playerid,"DEALER");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"BEACH");
		PreloadAnimLib(playerid,"MISC");
		PreloadAnimLib(playerid,"OTB");
		PreloadAnimLib(playerid,"SWEET");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"HEIST9");
		PreloadAnimLib(playerid,"FOOD");
		PreloadAnimLib(playerid,"PED");
		PreloadAnimLib(playerid,"GHANDS");
		PreloadAnimLib(playerid,"FIGHT_D");
		PreloadAnimLib(playerid,"STRIP");
		PreloadAnimLib(playerid,"BLOWJOBZ");
		PreloadAnimLib(playerid,"BSKTBALL");
		PreloadAnimLib(playerid,"BASEBALL");
		PreloadAnimLib(playerid,"GRAVEYARD");
		PreloadAnimLib(playerid,"FAT");
		PreloadAnimLib(playerid,"GANGS");
		PreloadAnimLib(playerid,"COLT45");
		PreloadAnimLib(playerid,"TEC");
		PreloadAnimLib(playerid,"BOX");
		PreloadAnimLib(playerid,"SUNBATHE");
		PreloadAnimLib(playerid,"CAR");
		PreloadAnimLib(playerid,"BD_Fire");
		PreloadAnimLib(playerid,"BIKES");
		gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	if(gPlayerLogged[playerid])
	{
		SetPlayerSpawn(playerid);
		SetPlayerHealth(playerid,100);
	}
	return 1;
}
forward Audio_OnSetPack(audiopack[]);
public Audio_OnSetPack(audiopack[])
{
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        // Transfer the audio pack to all players when it is set
        Audio_TransferPack(i);
    }
}

public Audio_OnClientConnect(playerid)
{
    // Transfer the audio pack when the player connects
    Audio_TransferPack(playerid);
	//SendClientMessage(playerid,COLOR_WHITE,"Connected to the Audio Server");
}
public OnPlayerDeath(playerid, killerid, reason)
{
    Spawned[playerid] = 0; // CCTV
	new veh = GetPlayerVehicleID(playerid);
    Delete3DTextLabel(vehicle_callsign[veh]);
    veicolo_callsign_status[veh] = 0;
	Wounded[playerid] = 1;
	SetPlayerHealth(playerid, 100);
	GetPlayerPos(playerid, DeathDest[playerid][0],DeathDest[playerid][1],DeathDest[playerid][2]);
	DeathWorld[playerid] = GetPlayerVirtualWorld(playerid);
	DeathInterior[playerid] = GetPlayerInterior(playerid);
	SpawnPlayer(playerid);
	SetPlayerColor(playerid,COLOR_CIVILIAN);
	SetPlayerDrunkLevel(playerid, 0);
    WantedPoints[playerid] = 0;
   	InShamal[playerid] = 0;
    InAndrom[playerid] = 0;
    CopOnDuty[playerid] = 0;
    PlayerCuffed[playerid] = 0;
    TruckDelivering[playerid] = 0;
	PlayerTazed[playerid] = 0;
	PlayerTied[playerid] = 0;
	IsUsingAnim[playerid] = 0;
    SwatOnDuty[playerid] = 0;
    PlayerTazed[playerid] = 0;
    MedicOnDuty[playerid] = 0;
    IsSmoking[playerid] = 0;
    Seatbelt[playerid] = 0;
    GuardOnDuty[playerid] = 0;
   	if(PlayerInfo[playerid][pJailed] > 0)
	{
   		if(PlayerInfo[playerid][pJailed] == 1)
		{
		  	SetPlayerVirtualWorld(playerid,2);
		    SetPlayerInterior(playerid,6);
			SetPlayerPos(playerid,264.5743,77.5118,1001.0391);
			SetPlayerHealth(playerid,100);
		}
		else if(PlayerInfo[playerid][pJailed] == 2)
		{
			SetPlayerVirtualWorld(playerid,10);
			SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid,198.3940,162.0881,1003.0300);
		}
		else if(PlayerInfo[playerid][pJailed] == 3)
		{
			new CellArestPlayer = random(3);
			switch(CellArestPlayer)
			{
				case 0:
				{
					SetPlayerPos(playerid, 681.2795,1686.3510,-63.1080);
					SetPlayerFacingAngle(playerid, 180);
					SetPlayerInterior(playerid, 1);
				}
				case 1:
				{
					SetPlayerPos(playerid, 685.3552,1686.8888,-63.1080);
					SetPlayerFacingAngle(playerid, 180);
					SetPlayerInterior(playerid, 1);
				}
				case 2:
				{
					SetPlayerPos(playerid, 689.5175,1686.7542,-63.1080);
					SetPlayerFacingAngle(playerid, 180);
					SetPlayerInterior(playerid, 1);
				}
			}
		}
		else if(PlayerInfo[playerid][pJailed] == 4)
		{
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			new AjailRand = random(4);
			if(AjailRand == 0)
			{
				SetPlayerPos(playerid, 1040.6840,1017.3040,55.3047);
			}
			if(AjailRand == 1)
			{
				SetPlayerPos(playerid, 1048.6038,1016.7516,55.3047);
			}
			if(AjailRand == 2)
			{
				SetPlayerPos(playerid, 1048.0579,1007.3638,55.3047);
			}
			if(AjailRand == 3)
			{
				SetPlayerPos(playerid, 1040.3180,1007.6415,55.3047);
			}
			SetPlayerVirtualWorld(playerid,0);
		}
	}
   	if(Planted[playerid] == 1)
	{
	    DestroyObject(C4[playerid]);
	    Bomb[playerid] = 0;
	    Planted[playerid] = 0;
	}
	return 1;
}

public SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerInfo[playerid][pFaction] == 255) { PlayerInfo[playerid][pFaction] = 0;}
	    if(PlayerInfo[playerid][pFaction] == 12) { PlayerInfo[playerid][pFaction] = 9;}
	    if(PlayerInfo[playerid][pFaction] > 10) { PlayerInfo[playerid][pFaction] = 0;}

	    gPlayerUsingLoopingAnim[playerid] = 0;
	    gPlayerLogged[playerid] = 1;
	    TogglePlayerSpectating(playerid, 0);
	    ResetPlayerWeapons(playerid);
	    if(Wounded[playerid] == 0) { SetTimerEx("Unfreezeren", 4000, false, "i", playerid); }
		TogglePlayerControllable(playerid, 1);
	    if(PlayerInfo[playerid][pMoneyconvert] == 0)
	    {
			new divide = PlayerInfo[playerid][pCash] / 10;
			PlayerInfo[playerid][pCash] = divide;
			new divide2 = PlayerInfo[playerid][pSavings] / 10;
			PlayerInfo[playerid][pSavings] = divide2;
			new divide3 = PlayerInfo[playerid][pBank] / 10;
			PlayerInfo[playerid][pBank] = divide3;
			new divide4 = PlayerInfo[playerid][pCarCredit] / 10;
			PlayerInfo[playerid][pCarCredit] = divide4;
			PlayerInfo[playerid][pMoneyconvert] = 1;
		}
	    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
	    SetPlayerColor(playerid,COLOR_WHITE);
        SetPlayerCash(playerid,PlayerInfo[playerid][pCash]);
        SetPlayerWeapons(playerid);
        SetPlayerSkillLevel(playerid, 0, 5);
    	if(TakingDrivingTest[playerid] == 1)
		{
		    new tmpcar = GetPlayerVehicleID(playerid);
			SendClientMessage(playerid,COLOR_WHITE,"Ai murit, deci ai pierdut testul.");
			TakingDrivingTest[playerid] = 0;
			DrivingTestStep[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			ActiveCP[playerid] = 0;
			SetVehicleToRespawn(tmpcar);
		}
    	if(DrugStep[playerid] == 1)
		{
			DrugStep[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
			ActiveCP[playerid] = 0;
			DrugRunning[playerid] = 0;
		}
		if(PlayerInfo[playerid][pHospital] > 0 && PlayerInfo[playerid][pJailed] == 0)
	    {
	        SafeResetPlayerWeapons(playerid);
	        DoHospital(playerid);
	        return 1;
	    }
	    if(AdminDuty[playerid] == 1)
	    {
	    	SetPlayerColor(playerid,COLOR_ADMINDUTY);
			SetPlayerHealth(playerid,99999);
			PlayerInfo[playerid][pGotArmour] = 1;
	    }
	    if(TesterDuty[playerid] == 1) { SetPlayerColor(playerid,COLOR_TESTERDUTY); }
		new fightstyle = PlayerInfo[playerid][pFight];
	    if(fightstyle == 1) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL); }
		else if(fightstyle == 2) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING); }
		else if(fightstyle == 3) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU); }
		else if(fightstyle == 4) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD); }
		else if(fightstyle == 5) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);}
		else if(fightstyle == 6) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);}
   		if(PlayerInfo[playerid][pJailed] > 0)
	    {
   			if(PlayerInfo[playerid][pJailed] == 1) // Sheriff Arrest
			{
				SetPlayerVirtualWorld(playerid,10);
				if(PlayerInfo[playerid][pCell] == 0)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 1)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 2)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 3)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1770.0724,-1582.4852,1734.9430);
				}
				else if(PlayerInfo[playerid][pCell] == 4)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1766.1991,-1582.6992,1734.9430);
				}
				else if(PlayerInfo[playerid][pCell] == 5)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1761.6650,-1583.5319,1734.9430);
				}
				else if(PlayerInfo[playerid][pCell] == 6)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1757.6813,-1582.4612,1734.9430);
				}
				else if(PlayerInfo[playerid][pCell] == 7)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1778.6964,-1564.0168,1734.9430);
				}
				else if(PlayerInfo[playerid][pCell] == 8)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1774.5239,-1563.6443,1734.9430);
				}
				else if(PlayerInfo[playerid][pCell] == 9)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1770.0402,-1562.8829,1734.9430);
				}
				else if(PlayerInfo[playerid][pCell] == 10)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1766.0601,-1562.9995,1734.9430);
				}
				else if(PlayerInfo[playerid][pCell] == 11)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1761.3528,-1563.8990,1734.9430);
				}
				else if(PlayerInfo[playerid][pCell] == 12)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1757.2262,-1564.5308,1734.9430);
				}
				return 1;
			}
			else if(PlayerInfo[playerid][pJailed] == 2) // Prison
			{
				SetPlayerVirtualWorld(playerid,10);
				if(PlayerInfo[playerid][pCell] == 0)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 1)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 2)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 3)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 4)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 5)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 6)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 7)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 8)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 9)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 10)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 11)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				else if(PlayerInfo[playerid][pCell] == 12)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 1210.5415, -1337.5714, 797.8427);
				}
				new stringcell[128];
	            new stringcell2[256];
	            format(stringcell, sizeof(stringcell), "CELULA A0%d", PlayerInfo[playerid][pCell]);
                strcat(stringcell, stringcell2);

	            CelulaNumber[playerid] = Create3DTextLabel(stringcell, 0xFFFF00FF, 30.0, 40.0, 0.0, 20.0, 0, 0);
	            Attach3DTextLabelToPlayer(CelulaNumber[playerid], playerid, 0.0, 0.0, 0.0);
				return 1;
			}
			else if(PlayerInfo[playerid][pJailed] == 3) // Arrest
			{
				SetPlayerVirtualWorld(playerid,10);
				if(PlayerInfo[playerid][pCell] == 0)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 1)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 2)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 3)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 4)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 5)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 6)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 7)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 8)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 9)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 10)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 11)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				else if(PlayerInfo[playerid][pCell] == 12)
				{
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
					SetPlayerPos(playerid, 140.1540,1086.3965,523.9174);
				}
				return 1;
			}
			else if(PlayerInfo[playerid][pJailed] == 4)
			{
		    	SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid, 1040.6840,1017.3040,55.3047);
			    SetPlayerVirtualWorld(playerid,124000+playerid);
				return 1;
			}
		}
		if(Wounded[playerid] > 0)
		{
	   		if(PlayerInfo[playerid][pJailed] > 0)
		    {
				return 1;
			}
			else
			{
				if(PlayerHasItem(playerid,"(Weapon) Desert Eagle"))RemoveItem(playerid,"(Weapon) Desert Eagle",10);
				if(PlayerHasItem(playerid,"(Weapon) M4A1"))RemoveItem(playerid,"(Weapon) M4A1",10);
				if(PlayerHasItem(playerid,"(Weapon) AK47"))RemoveItem(playerid,"(Weapon) AK47",10);
				if(PlayerHasItem(playerid,"(Weapon) Tec9"))RemoveItem(playerid,"(Weapon) Tec9",10);
				if(PlayerHasItem(playerid,"(Weapon) Uzi"))RemoveItem(playerid,"(Weapon) Uzi",10);
				if(PlayerHasItem(playerid,"(Weapon) SD Pistol"))RemoveItem(playerid,"(Weapon) SD Pistol",10);
				if(PlayerHasItem(playerid,"(Weapon) MP5"))RemoveItem(playerid,"(Weapon) MP5",10);
				if(PlayerHasItem(playerid,"(Weapon) Shotgun"))RemoveItem(playerid,"(Weapon) Shotgun",10);
				if(PlayerHasItem(playerid,"(Weapon) Rifle"))RemoveItem(playerid,"(Weapon) Rifle",10);
				if(PlayerHasItem(playerid,"(W) Desert Eagle"))RemoveItem(playerid,"(W) Desert Eagle",10);
				if(PlayerHasItem(playerid,"(W) M4A1"))RemoveItem(playerid,"(W) M4A1",10);
				if(PlayerHasItem(playerid,"(W) AK47"))RemoveItem(playerid,"(W) AK47",10);
				if(PlayerHasItem(playerid,"(W) Tec9"))RemoveItem(playerid,"(W) Tec9",10);
				if(PlayerHasItem(playerid,"(W) Uzi"))RemoveItem(playerid,"(W) Uzi",10);
				if(PlayerHasItem(playerid,"(W) SD Pistol"))RemoveItem(playerid,"(W) SD Pistol",10);
				if(PlayerHasItem(playerid,"(W) MP5"))RemoveItem(playerid,"(W) MP5",10);
				if(PlayerHasItem(playerid,"(W) Shotgun"))RemoveItem(playerid,"(W) Shotgun",10);
				if(PlayerHasItem(playerid,"(W) Rifle"))RemoveItem(playerid,"(W) Rifle",10);
				DoDeath(playerid);
			}
			return 1;
		}
	  	if(PlayerInfo[playerid][pSpawnPoint] == 0)
		{
			Wounded[playerid] = 0;
   			SetPlayerPos(playerid,PlayerInfo[playerid][pLoadPosX],PlayerInfo[playerid][pLoadPosY],PlayerInfo[playerid][pLoadPosZ]);
			SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pLoadPosW]);
			SetPlayerInterior(playerid, PlayerInfo[playerid][pLoadPosInt]);
			SetPlayerFacingAngle(playerid,0);
			SetPlayerHealth(playerid,100);
			gPlayerLogged[playerid] = 1;
			if (PlayerInfo[playerid][pLoadPosInt] != 0 || PlayerInfo[playerid][pLoadPosW] !=0)
			{
				FreezePlayer(playerid,3);
			}
		}
		else if(PlayerInfo[playerid][pSpawnPoint] == 1)
		{
		  	new house = PlayerInfo[playerid][pHouseKey];
	   		if(house != 0)
			{
				Wounded[playerid] = 0;
				SetPlayerInterior(playerid,Houses[house][ExitInterior]);
				SetPlayerPos(playerid, Houses[house][ExitX], Houses[house][ExitY],Houses[house][ExitZ]);
				SetPlayerVirtualWorld(playerid,house);
				SetPlayerHealth(playerid,100);
				gPlayerLogged[playerid] = 1;
			} else {
       			SendClientMessage(playerid,COLOR_WHITE,"Since you do not have a house you have been spawned at the civillian spawn.");
				Wounded[playerid] = 0;
	   			SetPlayerPos(playerid,1742.8010,-1862.3251,13.5764);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
				SetPlayerFacingAngle(playerid,0);
				SetPlayerHealth(playerid,100);
				PlayerInfo[playerid][pSpawnPoint] = 0;
				gPlayerLogged[playerid] = 1;
			}
		}
		else if(PlayerInfo[playerid][pSpawnPoint] == 2 && PlayerInfo[playerid][pFaction] != 0)
		{
		    Wounded[playerid] = 0;
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,DynamicFactions[PlayerInfo[playerid][pFaction]][fX],DynamicFactions[PlayerInfo[playerid][pFaction]][fY],DynamicFactions[PlayerInfo[playerid][pFaction]][fZ]);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerHealth(playerid,100);
			gPlayerLogged[playerid] = 1;
		}
		if(PlayerInfo[playerid][pCrashed] == 1)
		{
		    if(PlayerInfo[playerid][pTut] == 1 && RegistrationStep[playerid] == 0)
		    {
		    
	    		TogglePlayerControllable(playerid, 0);
				Wounded[playerid] = 0;
				SetTimerEx("Unfreezeren", 2600, false, "i", playerid);
		        SetPlayerInterior(playerid,PlayerInfo[playerid][pLoadPosInt]);
		    	SetPlayerPos(playerid, PlayerInfo[playerid][pLoadPosX], PlayerInfo[playerid][pLoadPosY], PlayerInfo[playerid][pLoadPosZ] + 0.3);
		        SetPlayerVirtualWorld(playerid,PlayerInfo[playerid][pLoadPosW]);
	    		SetTimerEx("UnsetCrash", 2000, false, "i", playerid);
			}
		}
		if(PlayerInfo[playerid][pMaskID] == 0) { PlayerInfo[playerid][pMaskID] = 112899 + random (998123); }
		if(PlayerInfo[playerid][pHouseKey] == 999) { PlayerInfo[playerid][pHouseKey] = 0; }
		if(PlayerInfo[playerid][pJob] == 2 && PlayerInfo[playerid][pFaction] == 0)
		{
       		SendClientMessage(playerid,COLOR_RED,"  Your job has been resetted since you aren't in a faction.");
			PlayerInfo[playerid][pJob] = 0;
		}

		if(PlayerInfo[playerid][pJob] == 8 && PlayerInfo[playerid][pFaction] == 0)
		{
       		SendClientMessage(playerid,COLOR_RED,"  Your job has been resetted since you aren't in a faction.");
			PlayerInfo[playerid][pJob] = 0;
		}
		if(PlayerInfo[playerid][pAdministrator] > 0)
		{
			new string2[64];
			format(string2, sizeof(string2), "SERVER: You are logged in as a level %d admin",PlayerInfo[playerid][pAdministrator]);
			InfoForPlayer(playerid, string2);
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
    new sendername[MAX_PLAYER_NAME];
	new string[256];
	new tmp[256];
	if(PlayerInfo[playerid][pTut] == 0 && TutorialStage[playerid] != 0)
	{
		return 0;
	}
	if(gPlayerLogged[playerid] == 0)
	{
	    InitPlayerConnection( playerid );
	}

	/////////////////////////NAMELOCK///////////////////////////////
	if(PlayerInfo[playerid][pNameLocked] == 1 && gPlayerLogged[playerid] == 1)
	{
		if(strfind(text, "_", true) == -1)
		{
			SendErrorMessage(playerid, "Numele trebuie sa fie in format: Nume_Prenume");
			return Kick(playerid);
		}

		//Function will be made here that changes the name of a player//

		return 1;
	}
	////////////////////////////////////////////////////////////////



 	new idx;
	tmp = strtok(text, idx);
	if(TalkingLive[playerid] != 255)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pFaction] == SAN)
		{
		    new str[128];
			if(strlen(text) > MAXLEN)
			{
     			new pos = 87;
			    //while(result[--pos] < ' ') {}
			    if(pos < 87-1) pos = 87;
			    format(str, sizeof(str), "[INTERVIU] Reporter %s: %.*s ...", GetPlayerNameEx(playerid), pos, text);
                OOCNews(COLOR_NEWS,str);
			    format(str, sizeof(str), "[INTERVIU] Reporter %s: ... %s", GetPlayerNameEx(playerid), text[pos]);
			    OOCNews(COLOR_NEWS,str);
			}
			else
			{
				format(str, sizeof(str), "[INTERVIU] Reporter %s: %s", GetPlayerNameEx(playerid), text);
				OOCNews(COLOR_NEWS,str);
			}
		}
		else
		{
      		new str[128];
			if(strlen(text) > MAXLEN)
			{
     			new pos = 87;
			    //while(result[--pos] < ' ') {}
			    if(pos < 87-1) pos = 87;
			    format(str, sizeof(str), "[INTERVIU] Invitat %s: %.*s ...", GetPlayerNameEx(playerid), pos, text);
                OOCNews(COLOR_NEWS,str);
			    format(str, sizeof(str), "[INTERVIU] Invitat %s: ... %s", GetPlayerNameEx(playerid), text[pos]);
			    OOCNews(COLOR_NEWS,str);
			}
			else
			{
				format(str, sizeof(str), "[INTERVIU] Invitat %s: %s", GetPlayerNameEx(playerid), text);
				OOCNews(COLOR_NEWS,str);
			}
		}
		return 0;
	}
	if(Mobile[playerid] == 917)
	{
        new turner[MAX_PLAYER_NAME];
        new location[MAX_ZONE_NAME];
        GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
        GetPlayerName(playerid, turner, sizeof(turner));
        format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
        ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        SendClientMessage(playerid, COLOR_LIGHTRED, "URGENTE: Am alertat toate unitatile din zona. Te rugam sa astepti");
        strmid(PlayerCrimeReport[playerid], text, 0, strlen(text), 255);
        SendFactionMessage(1, COLOR_LIGHTBLUE, "|__________Apel 911__________|");
        SendFactionMessage(3, COLOR_LIGHTBLUE, "|__________Apel 911__________|");
        SendFactionMessage(2, COLOR_LIGHTBLUE, "|__________Apel 911__________|");
        format(string, sizeof(string), "Apelant: %s, Numar: %d",turner,PlayerInfo[playerid][pPhoneNumber]);
        SendFactionMessage(1, COLOR_LIGHTRED, string);
        SendFactionMessage(2, COLOR_LIGHTRED, string);
        SendFactionMessage(3, COLOR_LIGHTRED, string);
        format(string, sizeof(string), "Locatie: %s",PlayerCrimeLocation[playerid]);
        SendFactionMessage(1, COLOR_LIGHTRED, string);
        SendFactionMessage(2, COLOR_LIGHTRED, string);
        SendFactionMessage(3, COLOR_LIGHTRED, string);
        format(string, sizeof(string), "Situatie: %s",PlayerCrimeReport[playerid]);
        SendFactionMessage(1, COLOR_LIGHTRED, string);
        SendFactionMessage(2, COLOR_LIGHTRED, string);
        SendFactionMessage(3, COLOR_LIGHTRED, string);
        format(string, sizeof(string), "Localizare: %s",location);
        SendFactionMessage(1, COLOR_LIGHTRED, string);
        SendFactionMessage(2, COLOR_LIGHTRED, string);
        SendFactionMessage(3, COLOR_LIGHTRED, string);
        SendClientMessage(playerid, COLOR_GRAD2, "  Au inchis..");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 8);
        Mobile[playerid] = 255;
        return 0;
	}
	if(Mobile[playerid] == 916)
	{
	    if(!strlen(tmp))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "URGENTE: Sorry I don't understand?");
	        return 0;
	    }
	    strmid(PlayerCrimeLocation[playerid], text, 0, strlen(text), 255);
	    format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	    ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    SendClientMessage(playerid, COLOR_LIGHTRED, "URGENTE: Va rugam sa ne dati o descriere a situatiei dumneavoastra.");
	    Mobile[playerid] = 917;
	    return 0;
	}
	if(Mobile[playerid] == 915)
	{
	    new turner[MAX_PLAYER_NAME];
	    new location[MAX_ZONE_NAME];
	    GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
	    GetPlayerName(playerid, turner, sizeof(turner));
	    format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	    ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    SendClientMessage(playerid, COLOR_ALLDEPT, "LSEMS Dispatch: Am alertat toate unitatile din zona.");
	    strmid(PlayerCrimeReport[playerid], text, 0, strlen(text), 255);
	    SendFactionMessage(2, COLOR_LSPD, "|__________Apel 911__________|");
	    format(string, sizeof(string), "Apelant: %s, Numar: %d",turner,PlayerInfo[playerid][pPhoneNumber]);
	    SendFactionMessage(2, COLOR_ALLDEPT, string);
	    format(string, sizeof(string), "Locatie: %s",PlayerCrimeLocation[playerid]);
	    SendFactionMessage(2, COLOR_ALLDEPT, string);
	    format(string, sizeof(string), "Situatie: %s",PlayerCrimeReport[playerid]);
	    SendFactionMessage(2, COLOR_ALLDEPT, string);
	    format(string, sizeof(string), "Localizare: %s",location);
	    SendFactionMessage(2, COLOR_ALLDEPT, string);
	    SendClientMessage(playerid, COLOR_GRAD2, "  Au inchis..");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 8);
	    Mobile[playerid] = 255;
	    return 0;
	}


	if(Mobile[playerid] == 914)
	{
	    if(!strlen(tmp))
		{
	        SendClientMessage(playerid, COLOR_ALLDEPT, "LSEMS: Nu am inteles, te rog sa repeti.");
	        return 0;
	    }
	    strmid(PlayerCrimeLocation[playerid], text, 0, strlen(text), 255);
	    format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	    ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    SendClientMessage(playerid, COLOR_ALLDEPT, "URGENTE: Va rugam sa ne dati o descriere a situatiei dumneavoastra.");
	    Mobile[playerid] = 915;
	    return 0;
	}
	if(Mobile[playerid] == 913)
	{
	    new turner[MAX_PLAYER_NAME];
	    new location[MAX_ZONE_NAME];
	    GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
	    GetPlayerName(playerid, turner, sizeof(turner));
	    format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	    ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "URGENTE: Am alertat toate unitatile din zona.");
	    strmid(PlayerCrimeReport[playerid], text, 0, strlen(text), 255);
	    SendFactionMessage(1, COLOR_LIGHTBLUE, "|__________Apel 911__________|");
	    SendFactionMessage(3, COLOR_LIGHTBLUE, "|__________Apel 911__________|");
	    format(string, sizeof(string), "Apelant: %s, Numar: %d",turner,PlayerInfo[playerid][pPhoneNumber]);
	    SendFactionMessage(1, COLOR_ALLDEPT, string);
	    SendFactionMessage(3, COLOR_ALLDEPT, string);
	    format(string, sizeof(string), "Locatie: %s",PlayerCrimeLocation[playerid]);
	    SendFactionMessage(1, COLOR_ALLDEPT, string);
	    SendFactionMessage(3, COLOR_ALLDEPT, string);
	    format(string, sizeof(string), "Situatie: %s",PlayerCrimeReport[playerid]);
	    SendFactionMessage(1, COLOR_ALLDEPT, string);
	    SendFactionMessage(3, COLOR_ALLDEPT, string);
	    format(string, sizeof(string), "Localizare: %s",location);
	    SendFactionMessage(1, COLOR_ALLDEPT, string);
	    SendFactionMessage(3, COLOR_ALLDEPT, string);
		format(string, sizeof(string), "* Tasteaza /rne %d pentru a accepta apelul", playerid);
		SendFactionMessage(3, COLOR_ALLDEPT, string);
		emergencycall[playerid] = 1;
	    new query[1024];
        format(query, sizeof(query), "INSERT INTO `911Calls` (`Caller`, `Number`, `Location`, `Situation`, `Taken`) VALUES ('%s', '%d', '%s', '%s', '0');",turner, PlayerInfo[playerid][pPhoneNumber], PlayerCrimeLocation[playerid], PlayerCrimeReport[playerid]);
        mysql_query(query);
	    SendClientMessage(playerid, COLOR_GRAD2, "  They Hung Up..");
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		RemovePlayerAttachedObject(playerid, 8);
	    Mobile[playerid] = 255;
	    return 0;
	}
	if(Mobile[playerid] == 912)
	{
	    if(!strlen(tmp))
		{
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "URGENTE: Scuze, nu am inteles. Poti repeta?");
	        return 0;
	    }
	    strmid(PlayerCrimeLocation[playerid], text, 0, strlen(text), 255);
	    format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	    ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "URGENTE: Va rugam sa ne dati o descriere a situatiei dumneavoastra.");
	    Mobile[playerid] = 913;
	    return 0;
	}
	if(Mobile[playerid] == 911)
	{
	    if(!strlen(tmp))
		{
	        SendClientMessage(playerid, COLOR_ALLDEPT, "URGENTE: Te rog sa repeti. 'LSPD', 'EMS' sau 'Amandoua'?");
	        return 0;
	    }
	    else if ((strcmp("LSPD", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("LSPD")))
		{
	        format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	        ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        SendClientMessage(playerid, COLOR_ALLDEPT, "URGENTE: Redirectionare catre optiunea aleasa.");
	        Mobile[playerid] = 912;
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "URGENTE: Te rugam sa ne spui locatia ta.");
	        return 0;
	    }
	    else if ((strcmp("EMS", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("EMS")))
		{
	        format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	        ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        SendClientMessage(playerid, COLOR_ALLDEPT, "URGENTE: Redirectionare catre optiunea aleasa.");
	        Mobile[playerid] = 914;
	        SendClientMessage(playerid, COLOR_ALLDEPT, "URGENTE: Te rugam sa ne spui locatia ta.");
	        return 0;
	    }
	    else if ((strcmp("Amandoua", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Amandoua")))
		{
	        format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	        ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        SendClientMessage(playerid, COLOR_ALLDEPT, "URGENTE: Redirectionare catre optiunea aleasa.");
	        Mobile[playerid] = 916;
	        SendClientMessage(playerid, COLOR_LIGHTRED, "URGENTE: Te rugam sa ne spui locatia ta.");
	        return 0;
	    }
	    else if ((strcmp("NON-URGENTA", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("NON-URGENTA")))
		{
	        format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	        ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	        SendClientMessage(playerid, COLOR_ALLDEPT, "URGENTE: Redirectionare catre optiunea aleasa.");
	        Mobile[playerid] = 923;
	        SendClientMessage(playerid, COLOR_LIGHTRED, "NON-URGENTE: Te rugam sa ne transmiti mesajul tau");
	        return 0;
	    }
	    else
		{
	        SendClientMessage(playerid, COLOR_ALLDEPT, "NON-URGENTE: Te rog sa repeti. 'LSPD', 'EMS' sau 'Amandoua'?");
	        return 0;
	    }
	}
	if(Mobile[playerid] == 923)
	{
	    if(!strlen(tmp))
		{
	        SendClientMessage(playerid, COLOR_LIGHTRED, "NON-URGENTE: Te rog sa repeti din nou.");
	        return 0;
	    }
	    strmid(PlayerCrimeLocation[playerid], text, 0, strlen(text), 255);
	    format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	    ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	    SendClientMessage(playerid, COLOR_LIGHTRED, "NON-URGENTE: Te rugam sa lasi mesajul persoanei respective");
	    Mobile[playerid] = 924;
	    return 0;
	}
	if(Mobile[playerid] == 924)
	{
        format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
        ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
        SendClientMessage(playerid, COLOR_LIGHTRED, "NON-URGENTE:: Thank you for your call.");
        strmid(PlayerCrimeReport[playerid], text, 0, strlen(text), 255);
        SendFactionMessage(3, COLOR_LSPD, "|_______Linie NON-URGENTE________|");
        format(string, sizeof(string), "Mesaj pentru: %s, Numar: %d",PlayerCrimeLocation[playerid],PlayerInfo[playerid][pPhoneNumber]);
        SendFactionMessage(3, COLOR_ALLDEPT, string);
        format(string, sizeof(string), "Mesaj: %s",PlayerCrimeReport[playerid]);
        SendFactionMessage(3, COLOR_ALLDEPT, string);
        format(string, sizeof(string), "* Tasteaza /rnen %d pentru a accepta apelul", playerid);
		SendFactionMessage(3, COLOR_ALLDEPT, string);
		nonemergencycall[playerid] = 1;
        SendClientMessage(playerid, COLOR_GRAD2, "  They Hung Up..");
		RemovePlayerAttachedObject(playerid, 8);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
        Mobile[playerid] = 255;
        return 0;
	}
	if(Mobile[playerid] == 411)
	{
	    new location[MAX_ZONE_NAME];
	    GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
	    format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	    ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
  		SendTaxiMessage(COLOR_NEWS, "|_______TAXI CALL_______|");
		format(string, sizeof(string), "%s spune: %s",GetPlayerNameEx(playerid),text);
		SendTaxiMessage(COLOR_YELLOW, string);
		format(string, sizeof(string), "Location: %s",location);
		SendTaxiMessage(COLOR_YELLOW, string);
		SendClientMessage(playerid,COLOR_GRAD2,"[Operator] We have recorded your call, please standby");
		SendClientMessage(playerid, COLOR_GRAD2, "  They hung up..");
		RemovePlayerAttachedObject(playerid, 8);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		Mobile[playerid] = 255;
		return 0;
	}
	if(Mobile[playerid] == 522)
	{
	    new location[MAX_ZONE_NAME];
	    GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
	    format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	    ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
  		SendFactionMessage(7, COLOR_NEWS, "|_______Mecanic Apel_______|");
		format(string, sizeof(string), "%s: %s",GetPlayerNameEx(playerid),text);
		SendFactionMessage(7, COLOR_YELLOW, string);
		format(string, sizeof(string), "Numar de telefon:%d",PlayerInfo[playerid][pPhoneNumber]);
		SendFactionMessage(7, COLOR_YELLOW, string);
		format(string, sizeof(string), "Locatie: %s",location);
		SendFactionMessage(7, COLOR_YELLOW, string);
		SendClientMessage(playerid,COLOR_GRAD2,"[Operator] We have recorded your call, please standby");
		SendClientMessage(playerid, COLOR_GRAD2, "  They hung up..");
		RemovePlayerAttachedObject(playerid, 8);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		Mobile[playerid] = 255;
		return 0;
	}
	if(Mobile[playerid] == 688)
	{
	    new location[MAX_ZONE_NAME];
	    GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
	    format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	    ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
  		SendFactionMessage(6, COLOR_NEWS, "|_______Apel_______|");
		format(string, sizeof(string), "%s: %s",GetPlayerNameEx(playerid),text);
		SendFactionMessage(6, COLOR_YELLOW, string);
		format(string, sizeof(string), "Numar de telefon:%d",PlayerInfo[playerid][pPhoneNumber]);
		SendFactionMessage(6, COLOR_YELLOW, string);
		format(string, sizeof(string), "Locatie: %s",location);
		SendFactionMessage(6, COLOR_YELLOW, string);
		SendClientMessage(playerid,COLOR_GRAD2,"Operator: Am primit apelul dumneavoastra. Multumim pentru apel!");
		SendClientMessage(playerid, COLOR_GRAD2, "  A inchis...");
		RemovePlayerAttachedObject(playerid, 8);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		Mobile[playerid] = 255;
		return 0;
	}
	if(Mobile[playerid] == 211221)
	{
	    format(string, sizeof(string), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
	    ProxDetector(15.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
  		SendFactionMessage(4, COLOR_NEWS, "|___________SAN Apel___________|");
		format(string, sizeof(string), "Apelant: %s, Numar de telefon: %d",GetPlayerNameEx(playerid),PlayerInfo[playerid][pPhoneNumber]);
		SendFactionMessage(4, COLOR_WHITE, string);
		format(string, sizeof(string), "Mesaj: %s",text);
		SendFactionMessage(4, COLOR_WHITE, string);
		SendClientMessage(playerid,COLOR_YELLOW,"Am inregistrat apelul tau , multumim.");
		SendClientMessage(playerid, COLOR_GREY, "Au inchis..");
		RemovePlayerAttachedObject(playerid, 8);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		Mobile[playerid] = 255;
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
	    if(PlayerInfo[playerid][pInCall] != 1)
	    {
	        SendClientMessage(playerid, COLOR_YELLOW," Your phone is still calling..");
	        return 0;
	    }
      	new maskid = PlayerInfo[playerid][pMaskID];
       	new str[128];
		if(strlen(text) > MAXLEN)
		{
 			new pos = MAXLEN;
		    if(pos < MAXLEN-1) pos = MAXLEN;
		    if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(str, sizeof(str), "[Mask_%d] spune (cellphone): %.*s ...", maskid, pos, text);
				ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				format(str, sizeof(str), "[Mask_%d] spune (cellphone): ... %s", maskid, text[pos]);
				ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
			else
			{
			    format(str, sizeof(str), "%s spune (cellphone): %.*s ...", GetPlayerNameEx(playerid), pos, text);
			    ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				format(str, sizeof(str), "%s spune (cellphone): ... %s", GetPlayerNameEx(playerid), text[pos]);
				ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
		}
		else
		{
		    if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(str, sizeof(str), "[Mask_%d] spune (cellphone): %s", maskid, text);
				ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
			else
			{
			    format(str, sizeof(str), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
			    ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(PlayerInfo[Mobile[playerid]][pSpeaker] == 1)
			{
			    if(strlen(text) > 87) {
			        new pos = 87;
			        if(pos < 87-1) pos = 87;
			        if(PlayerInfo[playerid][pMaskuse] == 1) {
			            format(str, sizeof(str), "[Mask_%d] spune (speaker): %.*s ...", maskid, pos, text);
			            ProxDetector(20.0, Mobile[playerid], str,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			            format(str, sizeof(str), "[Mask_%d] spune (speaker): ... %s", maskid, text[pos]);
			            ProxDetector(20.0, Mobile[playerid], str,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			        } else {
			            format(str, sizeof(str), "%s spune (speaker): %.*s ...", GetPlayerNameEx(playerid), pos, text);
			            ProxDetector(20.0, Mobile[playerid], str,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			            format(str, sizeof(str), "%s spune (speaker): ... %s", GetPlayerNameEx(playerid), text[pos]);
			            ProxDetector(20.0, Mobile[playerid], str,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			        }
			    } else {
			        if(PlayerInfo[playerid][pMaskuse] == 1) {
			            format(str, sizeof(str), "[Mask_%d] spune (speaker): %s", maskid, text);
			            ProxDetector(20.0, Mobile[playerid], str,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			        } else {
			            format(str, sizeof(str), "%s spune (speaker): %s", GetPlayerNameEx(playerid), text);
			            ProxDetector(20.0, Mobile[playerid], str,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			        }
			    }
			} else {
			    if(strlen(text) > 87) {
			        new pos = 87;
			        if(pos < 87-1) pos = 87;
			        if(PlayerInfo[playerid][pMaskuse] == 1) {
			            format(str, sizeof(str), "[Mask_%d] spune (cellphone): %.*s ...", maskid, pos, text);
			            SendClientMessage(Mobile[playerid], COLOR_YELLOW,str);
			            format(str, sizeof(str), "[Mask_%d] spune (cellphone): ... %s", maskid, text[pos]);
			            SendClientMessage(Mobile[playerid], COLOR_YELLOW,str);
			        } else {
			            format(str, sizeof(str), "%s spune (cellphone): %.*s ...", GetPlayerNameEx(playerid), pos, text);
			            SendClientMessage(Mobile[playerid], COLOR_YELLOW,str);
			            format(str, sizeof(str), "%s spune (cellphone): ... %s", GetPlayerNameEx(playerid), text[pos]);
			            SendClientMessage(Mobile[playerid], COLOR_YELLOW,str);
			        }
			    } else {
			        if(PlayerInfo[playerid][pMaskuse] == 1) {
			            format(str, sizeof(str), "[Mask_%d] spune (cellphone): %s", maskid, text);
			            SendClientMessage(Mobile[playerid], COLOR_YELLOW,str);
			        } else {
			            format(str, sizeof(str), "%s spune (cellphone): %s", GetPlayerNameEx(playerid), text);
			            SendClientMessage(Mobile[playerid], COLOR_YELLOW,str);
			        }
			    }
			}
		} else {
			SendClientMessage(playerid, COLOR_GREY, "   Theres nobody on the line...");
			Mobile[playerid] = 255;
		}
		return 0;
	}
 	if (realchat)
	{
	    if(gPlayerLogged[playerid] == 0)
	    { return 0; }
      	new chatstyle = PlayerInfo[playerid][pTalk];
      	new maskid = PlayerInfo[playerid][pMaskID];
      	if(!IsPlayerInAnyVehicle(playerid) || !IsABike(GetPlayerVehicleID(playerid)))
      	{
      	    if(Wounded[playerid] == 1)
	    	{
				new str[128];
		    	if(strlen(text) > 87)
				{
			 		new pos = 87;
				    if(pos < 87-1) pos = 87;
				    if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "[Mask_%d] spune: %.*s ...", maskid, pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "[Mask_%d] spune: ... %s", maskid, text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "[Mask_%d] [Accent %s] spune: %.*s ...", maskid,PlayerInfo[playerid][pAccent], pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "[Mask_%d] [Accent %s] spune: ... %s", maskid,PlayerInfo[playerid][pAccent], text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
					else
					{
						if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "%s spune: %.*s ...", GetPlayerNameEx(playerid), pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "%s spune: ... %s", GetPlayerNameEx(playerid), text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "%s [Accent %s] spune: %.*s ...", GetPlayerNameEx(playerid),PlayerInfo[playerid][pAccent], pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "%s [Accent %s] spune: ... %s", GetPlayerNameEx(playerid),PlayerInfo[playerid][pAccent], text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
				}
				else
				{
					if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "[Mask_%d] spune: %s", maskid, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "[Mask_%d] [Accent %s] spune: %s", maskid,PlayerInfo[playerid][pAccent], text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
					else
					{
						if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "%s spune: %s", GetPlayerNameEx(playerid), text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "%s [Accent %s] spune: %s", GetPlayerNameEx(playerid),PlayerInfo[playerid][pAccent], text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
				}
			}
			else if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
			{
			    new str[128];
    			if(strlen(text) > 87)
				{
			 		new pos = 87;
				    if(pos < 87-1) pos = 87;
				    if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "[Mask_%d] spune: %.*s ...", maskid, pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "[Mask_%d] spune: ... %s", maskid, text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "[Mask_%d] [Accent %s] spune: %.*s ...", maskid,PlayerInfo[playerid][pAccent], pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "[Mask_%d] [Accent %s] spune: ... %s", maskid,PlayerInfo[playerid][pAccent], text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
					else
					{
					    if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "%s spune: %.*s ...", GetPlayerNameEx(playerid), pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "%s spune: ... %s", GetPlayerNameEx(playerid), text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "%s [Accent %s] spune: %.*s ...", GetPlayerNameEx(playerid),PlayerInfo[playerid][pAccent], pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "%s [Accent %s] spune: ... %s", GetPlayerNameEx(playerid),PlayerInfo[playerid][pAccent], text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
				}
				else
				{
					if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "[Mask_%d] spune: %s", maskid, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "[Mask_%d] [Accent %s] spune: %s", maskid,PlayerInfo[playerid][pAccent], text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
					else
					{
						if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "%s spune: %s", GetPlayerNameEx(playerid), text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "%s [Accent %s] spune: %s", GetPlayerNameEx(playerid),PlayerInfo[playerid][pAccent], text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
				}
			}
			else
			{
				new str[128];
				if(strlen(text) > 87)
				{
			 		new pos = 87;
				    if(pos < 87-1) pos = 87;
				    if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "[Mask_%d] spune: %.*s ...", maskid, pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "[Mask_%d] spune: ... %s", maskid, text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "[Mask_%d] [Accent %s] spune: %.*s ...", maskid,PlayerInfo[playerid][pAccent], pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "[Mask_%d] [Accent %s] spune: ... %s", maskid,PlayerInfo[playerid][pAccent], text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
					else
					{
					    if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "%s spune: %.*s ...", GetPlayerNameEx(playerid), pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "%s spune: ... %s", GetPlayerNameEx(playerid), text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "%s [Accent %s] spune: %.*s ...", GetPlayerNameEx(playerid),PlayerInfo[playerid][pAccent], pos, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
							format(str, sizeof(str), "%s [Accent %s] spune: ... %s", GetPlayerNameEx(playerid),PlayerInfo[playerid][pAccent], text[pos]);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
				}
				else
				{
					if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "[Mask_%d] spune: %s", maskid, text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "[Mask_%d] [Accent %s] spune: %s", maskid,PlayerInfo[playerid][pAccent], text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
					else
					{
						if(strcmp(PlayerInfo[playerid][pAccent], "Fara", true) == 0)
						{
							format(str, sizeof(str), "%s spune: %s", GetPlayerNameEx(playerid), text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
						else
						{
							format(str, sizeof(str), "%s [Accent %s] spune: %s", GetPlayerNameEx(playerid),PlayerInfo[playerid][pAccent], text);
							ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
						}
					}
				}
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && gPlayerUsingLoopingAnim[playerid] == 0)
				{
					if(chatstyle == 0) { ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,1,1); }
					else if(chatstyle == 1) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.0,0,0,0,1,1); }
					else if(chatstyle == 2) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.0,0,0,0,1,1); }
					else if(chatstyle == 3) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkC",4.0,0,0,0,1,1);}
					else if(chatstyle == 4) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,1,1);}
					else if(chatstyle == 5) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.0,0,0,0,1,1);}
					else if(chatstyle == 6) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.0,0,0,0,1,1);}
					else if(chatstyle == 7) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.0,0,0,0,1,1);}
					else if(chatstyle == 8) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.0,0,0,0,1,1);}
					SetTimerEx("StopTalking",floatround(strlen(text)/9)*1000, 0, "i", playerid);
				}
            }
		}
		else
		{
			new str[128];
			if(strlen(text) > 80)
			{
			    new pos = 80;
			    if(pos < 80-1) pos = 80;
			    if(PlayerInfo[playerid][pMaskuse] == 1) {
			        format(str, sizeof(str), "[Mask_%d] spune: %.*s ...", maskid, pos, text);
			        ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			        format(str, sizeof(str), "[Mask_%d] spune: ... %s", maskid, text[pos]);
			        ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			    } else {
			        format(str, sizeof(str), "%s spune: %.*s ...", GetPlayerNameEx(playerid), pos, text);
			        ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			        format(str, sizeof(str), "%s spune: ... %s", GetPlayerNameEx(playerid), text[pos]);
			        ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			    }
			} else {
			    if(PlayerInfo[playerid][pMaskuse] == 1) {
			        format(str, sizeof(str), "[Mask_%d] spune: %s", maskid, text);
			        ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			    } else {
			        format(str, sizeof(str), "%s spune: %s", GetPlayerNameEx(playerid), text);
			        ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			    }
			}
		}
		return 0;
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(Fuel[vehicleid] <= 0)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z+0.1);
		SendClientMessage(playerid, COLOR_WHITE, "This vehicle is out of fuel!");
		return 1;
	}
	if(VehicleInfo[vehicleid][vVerify] == 0 && vehicleid <= IBPCARS && GetPlayerState(playerid)==PLAYER_STATE_DRIVER)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Aceasta masina nu are inspectia tehnica! Du-te la cel mai apropiat service.");
		return 1;
	}
	//////////////////////////////AUDIO PLUGIN/////////////////////////////////
	if(vRadio[vehicleid][vVolume] != -1)
	{
		PlayerInfo[playerid][pRadioHandle] = Audio_PlayStreamed(playerid, vRadio[vehicleid][vChannel], false, false, false);
		Audio_SetVolume(playerid, PlayerInfo[playerid][pRadioHandle], vRadio[vehicleid][vVolume]);
	}

	//////////////////////////////////////////////////////////////////////////
	if(!ispassenger) { DisablePlayerSpeedCap(playerid); }
	if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 510)
 	{
        GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
        if(engine != VEHICLE_PARAMS_ON) { SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective); }
	}
	if(GetVehicleModel(vehicleid) == 509) // Bike
 	{
        GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
        if(engine != VEHICLE_PARAMS_ON) { SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective); }
       	SetPlayerSpeedCap( playerid, 0.3 );
	}
	if(Fuel[vehicleid] == 0 && !ispassenger) // Fuel
	{
		new Float:cx, Float:cy, Float:cz;
		GetPlayerPos(playerid, cx, cy, cz);
		SetPlayerPos(playerid, cx,  cy, cz);
		SendClientMessage(playerid,COLOR_GREY,"This vehicle is out of fuel.");
	}
	if(DynamicCars[vehicleid][FactionCar] != 0 && !ispassenger && vehicleid <= IBPCARS)
	{
	    if(PlayerInfo[playerid][pFaction] != DynamicCars[vehicleid][FactionCar])
	    {
	        new Float:playerposxva, Float:playerposyva, Float:playerposzva;
			GetPlayerPos(playerid, playerposxva, playerposyva, playerposzva);
			SetPlayerPos(playerid,playerposxva, playerposyva, playerposzva);
		}
	}
	if(DynamicCars[vehicleid][CarType] == 69)
	{
		if (DMVTest[playerid] == 0)
		{
			new Float:playerposxva, Float:playerposyva, Float:playerposzva;
			GetPlayerPos(playerid, playerposxva, playerposyva, playerposzva);
			SetPlayerPos(playerid,playerposxva, playerposyva, playerposzva);
			if (PlayerInfo[playerid][pCarLic] == 0)
			{
				//SendClientMessage(playerid, COLOR_WHITE, "Du-te in cladire si tasteaza {009900}/takedrivingtest{FFFFFF} pentru a incepe testul auto.");
			}
		}
		else
		{
			TakingDrivingTest[playerid] = 1;
			DrivingTestStep[playerid] = 1;
			SetPlayerCheckpoint(playerid, 1210.4828,-1841.8555,13.3828, 5.0);
			SendClientMessage(playerid, COLOR_WHITE, "Urmareste checkpointurile, tasteaza {009900}/engine{FFFFFF} pentru a porni motorul.");
		}
	}
	if(IsAPlane(vehicleid) || IsAHelicopter(vehicleid) && !ispassenger) { if(PlayerInfo[playerid][pFlyLic] == 0) { SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have a flying license"); } }
	if(Wounded[playerid] == 1)
	{
	    SetPlayerPos(playerid, DeathDest[playerid][0],DeathDest[playerid][1],DeathDest[playerid][2]);
	    SetPlayerVirtualWorld(playerid, DeathWorld[playerid]);
	    Wounded[playerid] = 1;
	}
	return 1;
}
public OnPlayerCommandReceived(playerid, cmdtext[])
{
	printf("[%d] %s",playerid,cmdtext);
	new string[128];
	new vehnamesplit[3][24];
	new cmd[256];
	new idx;
	cmd = strtok(cmdtext, idx);
	new tmp[256];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new giveplayerid;
	new idcar = GetPlayerVehicleID(playerid);
	new randpin = 1000 + random(9999-1000);
	if(gPlayerLogged[playerid] == 1)
	{
	if(PlayerInfo[playerid][pHospital] >= 1 && AdminDuty[playerid] < 1)
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Esti internat in spital momentan,asteapta cateva secunde.");
	    return 1;
	}
	if(strcmp(cmd, "/rne", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /rne [id apel]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pFaction] == 3)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(emergencycall[playa] == 1)
						{
							emergencycall[playa] = 0;
							format(string, sizeof(string), "HQ Announcement: Unitatea lui %s a preluat apelul cu numarul %d", sendername, playa);
							SendFactionMessage(3, COLOR_LSPD, string);
						}
						else
						{
							SendClientMessage(playerid,COLOR_LIGHTRED, "* Acest apel a fost preluat sau nu exista.");
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/businessradio", true) == 0 || strcmp(cmd, "/bizradio", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid,playername,sizeof(playername));
			new bouse = PlayerInfo[playerid][pBizKey];
			new work = PlayerInfo[playerid][pBizKey];
			if(PlayerInfo[playerid][pBizKey] == bouse)
			{
 				if(PlayerToPoint(70.0,playerid,Businesses[bouse][ExitX],Businesses[bouse][ExitY],Businesses[bouse][ExitZ]) || PlayerToPoint(1.0,playerid,Businesses[work][EnterX],Businesses[work][EnterY],Businesses[work][EnterZ]) || PlayerToPoint(20.0,playerid,Businesses[work][ExitX],Businesses[work][ExitY],Businesses[work][ExitZ]))
				{
					ShowPlayerDialog(playerid, 1244, DIALOG_STYLE_LIST, "BizRadio", "Pro FM\nTechno Base\nHot Jams\nRock\nGreu de difuzar\nTraditional\nSoma FM\nCustom URL\n\nOpreste", "Asculta", "Cancel");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti in business-ul tau.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu deti un business.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/tackle", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
			{
   				if(CopOnDuty[playerid] == 0)
			    {
			    	SendClientMessage(playerid, COLOR_GREY, "Nu esti on duty!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /tackle [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
		    			if(giveplayerid == playerid)
				    	{
        					SendClientMessage(playerid, COLOR_GREY, "Nu poti sari pe tine.");
        					return 1;
				    	}
						if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new Float:x, Float:y, Float:z;
	            			GetPlayerPos(giveplayerid, x, y, z);
							TogglePlayerControllable(giveplayerid,0);
							SetPlayerPos(playerid, x, y+0.5, z);
							ApplyAnimation(giveplayerid, "PARACHUTE","FALL_skyDive_DIE",4.0,0,1,1,1,-1);
							ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0);
							format(string, sizeof(string), "*** %s incearca sa sara pe %s si reuseste.", GetPlayerNameEx(playerid) ,GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine.");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rnen", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /rne [id apel]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pFaction] == 3)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(nonemergencycall[playa] == 1)
						{
							nonemergencycall[playa] = 0;
							format(string, sizeof(string), "HQ Announcement: Unitatea lui %s a preluat apelul non-urgenta cu numarul %d", sendername, playa);
							SendFactionMessage(3, COLOR_LSPD, string);
						}
						else
						{
							SendClientMessage(playerid,COLOR_LIGHTRED, "* Acest apel a fost preluat sau nu exista.");
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/attachweapons", true) == 0)
	{
	for(new i = 0; i < MAX_PLAYERS; i++)
    {
   		if (PlayerInfo[i][pFaction] == 3)
		{
		    armapusa[playerid][1] = 0;
	        armapusa[playerid][2] = 0;
	        armapusa[playerid][3] = 0;
	        armapusa[playerid][4] = 0;
	        armapusa[playerid][5] = 0;
	        armapusa[playerid][9] = 0;
		}
	}
	return 1;
	}
    if(strcmp(cmd, "/windows", true) == 0 || strcmp(cmdtext, "/wi", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new Chase_Windows[4], Chase_VehicleID = GetPlayerVehicleID(playerid);
 			tmp = strtok(cmdtext, idx);
 			//----------------------------------------------------------------------
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, 0xAFAFAFAA ,"Foloseste: /windows [id 1-5]");
				SendClientMessage(playerid,0xAFAFAFAA ,"1 - Geam sofer | 2 - Geam pasager fata | 3 - Geam pasager spate, stanga | 4 - Geam pasager spate, dreapta | 5 - Toate geamurile");
				return 1;
			}
			//----------------------------------------------------------------------
			if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xAFAFAFAA,"Nu esti intr-un vehicul!");
			//if(tmp > 5 || tmp < 1) return SendClientMessage(playerid,0xAFAFAFAA,"1 - Geam sofer | 2 - Geam pasager fata | 3 - Geam pasager spate, stanga | 4 - Geam pasager spate, dreapta | 5 - Toate geamurile");
			if (!IsAWindowCar(playerid)) return SendClientMessage(playerid,0xAFAFAFAA,"Acest vehicul nu detine geamuri");
        	//----------------------------------------------------------------------
			GetVehicleParamsCarWindows(Chase_VehicleID, Chase_Windows[0], Chase_Windows[1], Chase_Windows[2], Chase_Windows[3]);
			if(strcmp(tmp,"1",true) == 0)
			{
				Chase_Windows[0] = !Chase_Windows[0] ? (1) : (0);
				if(Chase_Windows[0] == 0)
				{
					PlayerActionMessage(playerid,15.0,"deschide geamul soferului.");
					format(string, sizeof(string), "~g~.");
				}
				else if(Chase_Windows[0] == 1)
				{
					PlayerActionMessage(playerid, 15.0, "inchide geamul soferului.");
					format(string, sizeof(string), "~r~.");
				}
			}
			else if(strcmp(tmp,"2",true) == 0)
			{
	 			Chase_Windows[1] = !Chase_Windows[1] ? (1) : (0);
				if(Chase_Windows[1] == 0)
				{
					PlayerActionMessage(playerid,15.0,"deschide geamul pasagerului din fata.");
                    format(string, sizeof(string), "~g~.");
				}
				else if(Chase_Windows[1] == 1)
				{
					PlayerActionMessage(playerid, 15.0, "inchide geamul pasagerului din fata.");
					format(string, sizeof(string), "~r~.");
				}
			}
			else if(strcmp(tmp,"3",true) == 0)
			{
	 			Chase_Windows[2] = !Chase_Windows[2] ? (1) : (0);
				if(Chase_Windows[2] == 0)
				{
					PlayerActionMessage(playerid,15.0,"deschide geamul pasagerului din spate, stanga.");
					format(string, sizeof(string), "~g~.");

				}
				else if(Chase_Windows[2] == 1)
				{
					PlayerActionMessage(playerid, 15.0, "inchide geamul pasagerului din spate, stanga.");
					format(string, sizeof(string), "~r~.");

				}
			}
			else if(strcmp(tmp,"4",true) == 0)
			{
	 			Chase_Windows[3] = !Chase_Windows[3] ? (1) : (0);
    			if(Chase_Windows[3] == 0)
				{
					PlayerActionMessage(playerid,15.0,"deschide geamul pasagerului din spate, dreapta.");
					format(string, sizeof(string), "~g~.");

				}
				else if(Chase_Windows[3] == 1)
				{
					PlayerActionMessage(playerid, 15.0, "inchide geamul pasagerului din spate, dreapta.");
					format(string, sizeof(string), "~r~.");

				}
			}
			else if(strcmp(tmp,"5",true) == 0)
			{
	 			Chase_Windows[0] = !Chase_Windows[0] ? (1) : (0);
	    		Chase_Windows[1] = !Chase_Windows[1] ? (1) : (0);
	      		Chase_Windows[2] = !Chase_Windows[2] ? (1) : (0);
	      		Chase_Windows[3] = !Chase_Windows[3] ? (1) : (0);
				if(Chase_Windows[0] == 0 || Chase_Windows[1] == 0 || Chase_Windows[2] == 0 || Chase_Windows[3] == 0)
				{
					PlayerActionMessage(playerid,15.0,"deschide geamurile vehiculului.");
					format(string, sizeof(string), "~g~.");

				}
				else if(Chase_Windows[0] == 1 || Chase_Windows[1] == 1 || Chase_Windows[2] == 1 || Chase_Windows[3] == 1)
				{
					PlayerActionMessage(playerid, 15.0, "inchide geamurile vehiculului.");
				}
			}
			//----------------------------------------------------------------------
			SetVehicleParamsCarWindows(Chase_VehicleID, Chase_Windows[0], Chase_Windows[1], Chase_Windows[2], Chase_Windows[3]);
			//----------------------------------------------------------------------
		}
	}
	if(strcmp(cmd, "/showpms", true) == 0)
	{
		if (PlayerInfo[playerid][pAdministrator] >= 1)
		{
            if(AscultaPM[playerid] == 0)
            {
                   SendClientMessage(playerid, COLOR_YELLOW, "Acum asculti PM-urile de pe server.");
                   AscultaPM[playerid] = 1;
			}
			else
            {
                   SendClientMessage(playerid, COLOR_YELLOW, "Acum nu mai asculti PM-urile de pe server.");
                   AscultaPM[playerid] = 0;
			}
	    }
    }
     if(strcmp(cmd, "/pdmask", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pFaction] != 3)
            {
                 SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din Los Santos Police Department!");
                 return 1;
            }
            if(PlayerInfo[playerid][pMaskuse] == 0)
            {
                for(new i = 0; i < MAX_PLAYERS; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        ShowPlayerNameTagForPlayer(i, playerid, 0);
                        PlayerInfo[playerid][pMaskuse] = 1;
                        if(PlayerInfo[playerid][pFaction] == 3)
                        GameTextForPlayer(playerid, "~p~Ti-ai pus masca.", 3000, 5);
                    }
                }
                new stringmask[128];
                format(stringmask, sizeof(stringmask), "Masca %d",PlayerInfo[playerid][pMaskID]);
                ShowMasca[playerid] = Create3DTextLabel(stringmask, 0xBFC0C2FF, 30.0, 40.0, 50.0, 20.0, 0);
                Attach3DTextLabelToPlayer(ShowMasca[playerid], playerid, 0.0, 0.0, 0.1);
            }
            else
            {
                for(new i = 0; i < MAX_PLAYERS; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        ShowPlayerNameTagForPlayer(i, playerid, 1);
                        PlayerInfo[playerid][pMaskuse] = 0;
                        GameTextForPlayer(playerid, "~p~Ti-ai dat jos masca.", 3000, 5);
                    }
                }
                Delete3DTextLabel(ShowMasca[playerid]);
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/tazer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
	   		{
				if(CopOnDuty[playerid] == 0)
				{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti duty.");
	      		return 1;
				}
			    if(JustTazed[playerid] == 1)
		        {
          		SendClientMessage(playerid, COLOR_GREY, "Nu poti pune asa repede electrosocul inapoi.");
          		return 1;
		        }
			    if(TazerActive[playerid] == 1)
			    {
			        TazerActive[playerid] = 0;
			        PlayerInfo[playerid][pEagle] = 1;
			        SafeGivePlayerWeapon(playerid, 24, 100);
					JustTazed[playerid] = 1;
					SetTimerEx("TazeReset", 5000, false, "i", playerid);
	          		if(PlayerInfo[playerid][pSex] == 1)
				    {
						PlayerActionMessage(playerid,15.0,"pune tazerul cu siguranta pe ON urmand sa il introduca in curea.");
					}
					else
					{
						PlayerActionMessage(playerid,15.0,"pune tazerul cu siguranta pe ON urmand sa il introduca in curea");
					}
			    }
			    else
			    {
			        PlayerInfo[playerid][pSilenced] = 1;
			        SafeGivePlayerWeapon(playerid, 23, 20);
			        TazerActive[playerid] = 1;
	          		if(PlayerInfo[playerid][pSex] == 1)
				    {
						PlayerActionMessage(playerid,15.0,"isi duce mana la cureaua de utilitati urmand sa apuce un tazer si sa ii seteze siguranta pe OFF.");
					}
					else
					{
						PlayerActionMessage(playerid,15.0,"isi duce mana la cureaua de utilitati urmand sa apuce un tazer si sa ii seteze siguranta pe OFF.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/beanbag", true) == 0)
 {
     if(IsPlayerConnected(playerid))
     {
         if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
      {
    if(CopOnDuty[playerid] == 0)
    {
       SendClientMessage(playerid, COLOR_GREY, "Nu esti duty.");
         return 1;
    }
       if(BeanBag[playerid] == 1)
       {
           BeanBag[playerid] = 0;
           PlayerInfo[playerid][pEagle] = 1;
           SafeGivePlayerWeapon(playerid, 24, 700);
             if(PlayerInfo[playerid][pSex] == 1)
        {
      PlayerActionMessage(playerid,15.0,"pune beanbag-ul in suportul de pe spate.");
     }
     else
     {
      PlayerActionMessage(playerid,15.0,"pune beanbag-ul in suportul de pe spate.");
     }
       }
       else
       {
           SafeGivePlayerWeapon(playerid, 25, 10);
           BeanBag[playerid] = 1;
             if(PlayerInfo[playerid][pSex] == 1)
        {
      PlayerActionMessage(playerid,15.0,"apuca beanbag-ul din suportul de pe spate.");
     }
     else
     {
      PlayerActionMessage(playerid,15.0,"apuca beanbag-ul din suportul de pe spate.");
     }
    }
   }
   else
   {
       SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
   }
  }
  return 1;
 }
//============================================ SISTEMUL DE BANCA - 14 FEBRUARIE   ==============================//
 	if(strcmp(cmd,"/savings",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerToPoint(10.0,playerid,BankPosition[X],BankPosition[Y],BankPosition[Z]) || PlayerToPoint(40.0,playerid,1430.2157,-981.3618,996.0681))
	        {
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr))
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "{AFAFAF}SYNTAX{FFFFFF}: /savings [deposit/withdraw]");
				    SendClientMessage(playerid, COLOR_LIGHTRED, "WARNING: '/savings withdraw' will withdraw all your savings");
				    format(string, sizeof(string), "You have $%d in your savings account", PlayerInfo[playerid][pSavings]);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					return 1;
				}
				if(strcmp(x_nr,"deposit",true) == 0)
				{
					tmp = strtok(cmdtext, idx);
			        if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /savings [deposit] [amount]");
					    format(string, sizeof(string), "You have $%d in your savings account", PlayerInfo[playerid][pSavings]);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						return 1;
					}
					new dmoneys;
					dmoneys = strval(tmp);
					if(dmoneys < 5000 || dmoneys > 10000)
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "The minim ammount to deposit is $5000 and maximum is $10000");
						return 1;
					}
					if(PlayerInfo[playerid][pSavings] >= 5000)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You already have money in your savings account, please withdraw this first");
						return 1;
					}
					if(GetPlayerCash(playerid) <= dmoneys)
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have the money");
					    return 1;
					}
					PlayerInfo[playerid][pFairMoney] = 1;
		        	SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
					PlayerInfo[playerid][pSavings] = dmoneys;
					GivePlayerCash(playerid,-dmoneys);
			    	format(string, sizeof(string), "You have successfully deposited $%d into your savings account", dmoneys);
			    	SendClientMessage(playerid, COLOR_WHITE, string);
			    	return 1;
				}
	            else if(strcmp(x_nr,"withdraw",true) == 0)
				{
					if(PlayerInfo[playerid][pSavings] >= 1)
					{
						PlayerInfo[playerid][pFairMoney] = 1;
		        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
					    GivePlayerCash(playerid, PlayerInfo[playerid][pSavings]);
	        			PlayerInfo[playerid][pSavings] = 0;
					    SendClientMessage(playerid, COLOR_WHITE, "You have successfully withdrawn all your savings");
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "You don't have any money in your savings account to withdraw");
				    	return 1;
					}
				}
			}
   			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "You are not at the bank");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/bank", true) == 0 || strcmp(cmd, "/deposit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerToPoint(10.0,playerid,BankPosition[X],BankPosition[Y],BankPosition[Z]) || PlayerToPoint(40.0,playerid,1430.2157,-981.3618,996.0681))
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /deposit [amount]");
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /deposit [amount]");
					return 1;
				}
				if(GetPlayerCash(playerid) >= cashdeposit)
				{
					if(PlayerInfo[playerid][pSavings] >= 5000)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You already have money in your savings account, please withdraw this first.");
						return 1;
					}
					if(cashdeposit < 0) { return 1; }
					PlayerInfo[playerid][pFairMoney] = 1;
	        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
					GivePlayerCash(playerid,-cashdeposit);
					PlayerInfo[playerid][pBank]=cashdeposit+PlayerInfo[playerid][pBank];
					format(string, sizeof(string), "Ai depozitat $%d, Balanta noua: $%d", cashdeposit,PlayerInfo[playerid][pBank]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
                    SavePlayerAccount(playerid);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu ai aceasta suma");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti la banca");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/buyfood", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 30, 2380.0637,-1909.4110,13.5469) || IsPlayerInRangeOfPoint(playerid, 30, 2409.7424,-1490.5242,24.0000))
	        {
	    		ShowPlayerDialog(playerid,169, DIALOG_STYLE_LIST, "{006DA3}Clucken Bell Willowfield", "Chicken Grill Burger\nCheeseBurger\nChickenBurger\nRoyalBurger\nBigTasty Burger\nFries", "Alege", "Respinge");
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREY,"Nu esti la un DRIVE-BY de la Clucken Bell");
			}
		}
	}
 	if(strcmp(cmd, "/withdraw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerToPoint(10.0,playerid,BankPosition[X],BankPosition[Y],BankPosition[Z]) || PlayerToPoint(40.0,playerid,1430.2157,-981.3618,996.0681))
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /withdraw [amount]");
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /withdraw [amount]");
					return 1;
				}
				if(PlayerInfo[playerid][pBank] >= cashdeposit)
				{
					if(PlayerInfo[playerid][pSavings] >= 5000)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "You already have money in your savings account, please withdraw this first.");
						return 1;
					}
					if(cashdeposit < 0) { SendClientMessage(playerid, COLOR_GRAD2, "   You cannot withdraw minus numbers"); return 1; }
					PlayerInfo[playerid][pFairMoney] = 1;
		        	SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
					GivePlayerCash(playerid,cashdeposit);
					PlayerInfo[playerid][pBank]=PlayerInfo[playerid][pBank]-cashdeposit;
					format(string, sizeof(string), "   You have withdrawn $%d, New Balance: $%d", cashdeposit,PlayerInfo[playerid][pBank]);
					SendClientMessage(playerid, COLOR_GREY, string);
			  		PlayerBubbleMessage(playerid,"a retras un pachet mare de bani de la bancher");
                 SavePlayerAccount(playerid);
					// Log it.
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new y, m, d;
					new h,mi,s;
					getdate(y,m,d);
					gettime(h,mi,s);
					format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /withdraw %d",d,m,y,h,mi,s,sendername, cashdeposit);
					PayLog(string);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu ai suma aceasta in contul tau bancar");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti la banca!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/atm", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		   if(BancaInfo[playerid][bCard] == 0)
		   {
			  SendClientMessage(playerid, COLOR_GREY, "Nu ai un card de credit. Du-te la banca si fa-ti unul");
		   }
		   else
		   {
			  if(IsAtATM(playerid))
			  {
				 ShowPlayerDialog(playerid, 7890,DIALOG_STYLE_INPUT,"ATM - Introdu PIN","{FFFFFF}Te rugam sa introduci codul PIN.","Ok","Refuza");
			  }
		   }
		}
		return 1;
	}
    if(strcmp(cmd, "/pincard", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		   if(BancaInfo[playerid][bCard] == 0)
		   {
			  SendClientMessage(playerid, COLOR_GREY, "Nu ai un card de credit. Du-te la banca si fa-ti unul");
		   }
		   else
		   {
 			  format(string, sizeof(string), "Codul PIN al card-ului tau este : %d",BancaInfo[playerid][bPin]);
    		  SendClientMessage(playerid, COLOR_WHITE, string);
		   }
		}
		return 1;
	}
	if(strcmp(cmd, "/makecard", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50, 1433.1531,-979.6608,996.0681))
	    {
	    	if(BancaInfo[playerid][bAccount] == 0)
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai un cont bancar! Fa-ti unul, apoi iti vei putea face un card.");
 			}
			if(BancaInfo[playerid][bCard] != 0)
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Ai deja un card de credit!");
 			}
 			if(BancaInfo[playerid][bCard] == 0 && BancaInfo[playerid][bAccount] != 0)
 			{
				 BancaInfo[playerid][bCard] = 1;
				 BancaInfo[playerid][bPin] = randpin;
				 SendClientMessage(playerid, COLOR_WHITE, "Felicitari! Cardul tau de credit a fost creeat.");
				 SendClientMessage(playerid, COLOR_GREY , "Iti vei putea vedea pin-ul tastand /pincard.");
 			}
			return 1;
		}
	}
    if(strcmp(cmd, "/credit", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 1433.1531,-979.6608,996.0681))
	    {
    		if(PlayerInfo[playerid][pImprumut] == 10000)
    		{
    		    SendClientMessage(playerid,COLOR_LIGHTRED,"Te-ai imprumutat deja de la banca , revino cand nu mai ai datorii");
    		}
    		else
			{
				SendClientMessage(playerid,COLOR_GREEN,"Ai facut un imprumut in cadrul bancii");
				GivePlayerCash(playerid, 10000);
				SendClientMessage(playerid,COLOR_WHITE,"Suma acreditata va fi achitata treptat la fiecare salariu");
				PlayerInfo[playerid][pImprumut] = 10000;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/revokecard", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50, 1433.1531,-979.6608,996.0681))
	    {
			if(BancaInfo[playerid][bCard] == 0)
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai un card de credit!");
 			}
 			if(BancaInfo[playerid][bCard] == 1)
 			{
				 BancaInfo[playerid][bCard] = 0;
				 BancaInfo[playerid][bPin] = 0;
				 SendClientMessage(playerid, COLOR_WHITE, "Cardul tau de credit a fost anulat!");
				 SendClientMessage(playerid, COLOR_WHITE, "De acum incolo nimeni nu-l v-a putea folosi!");
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/createbankaccount", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50, 1433.1531,-979.6608,996.0681))
	    {
	    	if(BancaInfo[playerid][bAccount] != 0)
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Ai deja un cont bancar.");
 			}
 			if (GetPlayerCash(playerid) < 500)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani pentru a creea un cont bancar.");
	            return 1;
			}
 			if(BancaInfo[playerid][bAccount] == 0)
 			{
				 new randac = 1000000000+random(9999999999);
				 BancaInfo[playerid][bAccount] = randac;
				 SendClientMessage(playerid, COLOR_WHITE, "Felicitari, ti-ai creat un cont bancar!");
				 SendClientMessage(playerid, COLOR_GREEN, "Ai platit pentru crearea contului bancar, 500$");
				 GivePlayerMoney(playerid, -500);
 			}
			return 1;
		}
	}
//============================================ SFARSIT SISTEM BANCAR BY MIRAGE $$ ==============================//

//============================================ INCEPUT COMENZI USI / PORTI PRISON ==============================//
	if(strcmp(cmd, "/prdoor1", true) == 0 || strcmp(cmd, "/pridoor1", true) == 0 || strcmp(cmd, "/prd1", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 1215.23035, -1312.07166, 795.78650))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
	            MoveObject(prisondoor1, 1215.23035, -1312.07166, 795.78650, 2.0);
	            SendClientMessage(playerid, COLOR_LSPD, "Usa de la intrare s-a deschis.");
	            PlayerActionMessage(playerid,15.0,"deschide usa cu ajutorul cardului sau.");
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/closelsvr", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 50, 2361.03564, -1365.57971, 22.99370))
	    {
			if(PlayerInfo[playerid][pFaction] == 8)
			{
	            SetTimer("LsvrDoorClose", 10, 0);
	            SendClientMessage(playerid, COLOR_LSPD, "Usa de la intrare a fost inchisa.");
	            PlayerActionMessage(playerid,15.0,"inchide usa cu ajutorul cardului sau.");
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/prdoor1c", true) == 0 || strcmp(cmd, "/pridoor1c", true) == 0 || strcmp(cmd, "/prd1c", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 1215.23035, -1312.07166, 795.78650))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
	            SetTimer("PrisonDoor1Close", 10, 0);
	            SendClientMessage(playerid, COLOR_LSPD, "Usa de la intrare a fost inchisa.");
	            PlayerActionMessage(playerid,15.0,"inchide usa cu ajutorul cardului sau.");
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/prdoor2", true) == 0 || strcmp(cmd, "/pridoor2", true) == 0 || strcmp(cmd, "/prd2", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 1225.38330, -1345.71472, 795.73999))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
	            MoveObject(prisondoor2, 1225.38330, -1345.71472, 795.73999, 2.0);
	            SendClientMessage(playerid, COLOR_LSPD, "Usa de la blocul detinutilor s-a deschis.");
	            PlayerActionMessage(playerid,15.0,"deschide usa cu ajutorul cardului sau.");
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
 			}
			return 1;
		}
    }
 	if(strcmp(cmd, "/prdoor2c", true) == 0 || strcmp(cmd, "/pridoor2c", true) == 0 || strcmp(cmd, "/prd2c", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 1225.38330, -1345.71472, 795.73999))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
				SetTimer("PrisonDoor2Close", 10, 0);
	            SendClientMessage(playerid, COLOR_LSPD, "Usa de la blocul detinutilor s-a inchis.");
	            PlayerActionMessage(playerid,15.0,"inchide usa cu ajutorul cardului sau.");
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
 			}
			return 1;
		}
    }
	if(strcmp(cmd, "/prdoor3", true) == 0 || strcmp(cmd, "/pridoor3", true) == 0 || strcmp(cmd, "/prd3", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 1225.34363, -1326.48352, 795.75000))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
	            MoveObject(prisondoor3, 1225.34363, -1326.48352, 795.75000, 2.0);
	            SendClientMessage(playerid, COLOR_LSPD, "Usa de la sala de asteptare s-a deschis.");
	            PlayerActionMessage(playerid,15.0,"deschide usa cu ajutorul cardului sau.");
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/prdoor3c", true) == 0 || strcmp(cmd, "/pridoor3c", true) == 0 || strcmp(cmd, "/prd3c", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 1225.34363, -1326.48352, 795.75000))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
	            SetTimer("PrisonDoor3Close", 10, 0);
	            SendClientMessage(playerid, COLOR_LSPD, "Usa de la sala de asteptare s-a inchis.");
	            PlayerActionMessage(playerid,15.0,"inchide usa cu ajutorul cardului sau.");
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/prisongateo", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 296.6932, 1408.7644, 13.5905))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
	            SendClientMessage(playerid, COLOR_WHITE, "Ai deschis poarta inchisoarii. Nu uita de /prisongatec!");
	            PlayerActionMessage(playerid,15.0,"isi foloseste telecomanda pentru a deschide poarta.");
	            MoveObject(prisongate1, 288.05850, 1406.97620, 17.17001, 2.0);
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/prisongatec", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 296.6932, 1408.7644, 13.5905))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
	            SendClientMessage(playerid, COLOR_WHITE, "Ai inchis poarta inchisorii!");
	            PlayerActionMessage(playerid,15.0,"isi foloseste telecomanda pentru a inchide poarta.");
	            MoveObject(prisongate1, 288.05850, 1406.97620, 12.11003, 2.0);
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
 			}
			return 1;
		}
	}
//============================================ SFARSIT COMENZI USI / PORTI PRISON ==============================//
	if(strcmp(cmd, "/buyskin", true) == 0)
	{
		if (IsPlayerConnected(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid, 20, 207.7826,-105.1595,1005.1328))
			{
				ShowModelSelectionMenu(playerid, skinlist, "Skin");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti la binco");
			}
		}
	}


	if(strcmp(cmd, "/buyphone", true) == 0)
	{
		if (IsPlayerConnected(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid, 20, 1006.4233,52.8812,55.3221))
			{
				if(PlayerInfo[playerid][pPhoneNumber] != 0)
		        {
		           SendClientMessage(playerid, COLOR_WHITE, "Ai deja un telefon.");
		           return 1;
		        }
				if(GetPlayerCash(playerid) >= 150)
		        {
		           SendClientMessage(playerid, COLOR_WHITE, "Felicitari! Ti-ai achizitionat un telefon mobil. (/phone)");
		           GivePlayerCash(playerid,-150);
		           PlayerActionMessage(playerid,15.0,"plateste $150 vanzatorului, urmand sa apuce o cutie de pe masa.");
		           new randphone = 9999 + random(99999);
		           PlayerInfo[playerid][pPhoneNumber] = randphone;
		           return 1;
		        }
		        else
		        {
		           SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
		           return 1;
	            }
              }

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti la magazinul de telefoane");
			}
		}

	if(strcmp(cmd, "/buycradio", true) == 0)
	{
		if (IsPlayerConnected(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid, 50, -2237.2124,131.1088,1035.4141))
			{
				if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] != 0)
		        {
		           SendClientMessage(playerid, COLOR_WHITE, "Ai deja un radio pentru masina.");
		           return 1;
		        }
				if(GetPlayerCash(playerid) >= 450)
		        {
		           SendClientMessage(playerid, COLOR_WHITE, "Felicitari! Ti-ai achizitionat un radio pentru masina.");
		           GivePlayerCash(playerid,-450);
		           PlayerActionMessage(playerid,15.0,"plateste $450 vanzatorului, urmand sa apuce o cutie de pe masa.");
		           VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = 1;
		           return 1;
		        }
		        else
		        {
		           SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
		           return 1;
	            }
              }

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti la magazinul de electronice");
			}
		}
//============================================ SFARSIT SISTEM MAGAZIN DE ELECTRONICE ==============================//

//============================================ JOB: VEHICLES THIEF - V0.01 ==============================//
	if(strcmp(cmd, "/stealradio", true) == 0)
	{
		if (IsPlayerConnected(playerid))
		{
			if(IsPlayerInVehicle(playerid, idcar))
			{
				if(cradio[playerid] != 0)
		        {
		           SendClientMessage(playerid, COLOR_WHITE, "Ai deja un radio.");
		           return 1;
		        }
				if(VehicleInfo[idcar][vRadiom] == 1)
		        {
		           SendClientMessage(playerid, COLOR_WHITE, "Ai reusit sa furi radio-ul acestei masini");
		           PlayerActionMessage(playerid,15.0,"desface radio-ul masinii cu ajutorul unei surubelnite si cativa clesti.");
		           cradio[playerid] = 1;
		           return 1;
		        }
		        else
		        {
		           SendClientMessage(playerid, COLOR_GREY, "Aceasta masina nu are un radio.");
		           return 1;
	            }
              }

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina.");
			}
		}
	if(strcmp(cmd, "/sellradio", true) == 0)
	{
		if (IsPlayerConnected(playerid))
		{
			if (PlayerToPoint(2.5, playerid,1333.2163, 285.8437, 20.4089))
			{
				if(cradio[playerid] != 1)
		        {
		           SendClientMessage(playerid, COLOR_WHITE, "Nu ai un radio.");
		           return 1;
		        }
          		if(DynamicFactions[PlayerInfo[playerid][pFaction]][fType] != 2)
		        {
		           SendClientMessage(playerid, COLOR_WHITE, "Nu faci parte dintr-o factiune officiala.");
		           return 1;
		        }
				if(IsPlayerInVehicle(playerid, idcar))
		        {
		           SendClientMessage(playerid, COLOR_WHITE, "Ai vandut radio-ul pe care il aveai asupra ta.");
		           GivePlayerCash(playerid,250);
		           PlayerActionMessage(playerid,15.0,"da radio-ul din sac unei persoane, urmand sa primeasca in schimb o suma de bani.");
		           cradio[playerid] = 1;
		           return 1;
		        }
		        else
		        {
		           SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina.");
		           return 1;
	            }
              }

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti la depozitul din Montgomery.");
			}
		}
	if(strcmp(cmd, "/takestealerjob", true) == 0)
	{
		if (IsPlayerConnected(playerid))
		{
			if (PlayerToPoint(2, playerid,1333.2163, 285.8437, 20.4089))
			{
		           PlayerInfo[playerid][pJob] = 13;
		           SendClientMessage(playerid, COLOR_GREY, "Felicitari: Acum esti hot de masini.");
		           SendClientMessage(playerid, COLOR_WHITE, "Comenzile acestui job sunt formate din comenzile de baza ale trusei de scule.");
		           SendClientMessage(playerid, COLOR_WHITE, "De asemenea ai comanda  /dropcar.");
		           PlayerInfo[playerid][pContractTime] = 12;

		           return 1;
              }

   }
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti la depozitul din Montgomery.");
			}
		}

	if(strcmp(cmd, "/dropcar", true) == 0)
	{
		if (IsPlayerConnected(playerid))
		{
			if (PlayerToPoint(2.5, playerid, 2183.3887,-1985.4818,13.5507))
			{
		        if(idcar <= IBPCARS)
		        {
		           SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti intr-o masina personala.");
		           return 1;
		        }
		        if(dropedcar[playerid] != 0)
		        {
		           SendClientMessage(playerid, COLOR_LIGHTRED, "Ai adus deja o masina, revino intr-o ora. (la payday)");
		           return 1;
		        }
				new Float:XX, Float:YY, Float:ZZ, Float:AA;
				if(idcar >= IBPCARS)
		        {
		           SendClientMessage(playerid, COLOR_WHITE, "Ai vandut masina pe care o aveai, si ai primit $500.");
		           GivePlayerCash(playerid,500);
		           dropedcar[playerid] = 1;
				   GetVehiclePos(idcar, XX, YY, ZZ);
				   GetVehicleZAngle(idcar, AA);
				   VehicleInfo[idcar][vX] = XX;
				   VehicleInfo[idcar][vY] = YY;
				   VehicleInfo[idcar][vZ] = ZZ;
				   PlayerInfo[VehicleInfo[idcar][vOwner]][pCarKey] = 0;
				   SpawnedCar[VehicleInfo[idcar][vOwner]][0] = 0;
				   SpawnedCar[VehicleInfo[idcar][vOwner]][1] = 0;
                   VehicleInfo[idcar][vOwned] = 0;
				   StopAudioStreamForPlayer(playerid);
		           PlayerInfo[playerid][pRadioHandle] = -1;
		           HandBrake[idcar][hActiv] = 0;
		           DestroyVehicle(idcar);

		           TogglePlayerControllable(playerid, 1);
		           return 1;
		        }
		        else
		        {
		           SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina.");
		           return 1;
	            }
              }

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti la depozitul din Los Santos.");
			}
		}
//============================================ SFARSIT JOB: VEHICLES THIEF - V0.01 ==============================//

	if(strcmp(cmd, "/hood", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			for (new i=0;i<MAX_VEHICLES;i++)
			{
				new Float:vehx, Float:vehy, Float:vehz;
				GetVehiclePos(i, vehx, vehy, vehz);
				if (PlayerToPoint(2.0,playerid,vehx, vehy, vehz))
				{
					if (!IsABike(i))
					{
						GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
						if(bonnet == 1) bonnet = 0; else bonnet = 1;
						SetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
					}
				}
			}
		}
	}
//============================================ FACTION: AIRPORT SYSTEM - V0.01 ==============================//
	if(strcmp(cmd, "/buyairticket", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			new servicecar = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Utilizare:{FFFFFF} /buyairticket [id-ul tipului reparatiei]");
            	SendClientMessage(playerid, COLOR_WHITE, "1. Bilet catre San Fierro ($210)");
            	SendClientMessage(playerid, COLOR_WHITE, "2. Bilet catre Las Venturas ($210)");
				return 1;
			}
			if (servicecar == 1)
			{
		        if(IsPlayerInRangeOfPoint(playerid,5,1735.9939,-710.1816,1082.5653))
		        {
		            if (AirTicket[playerid] == 0)
		            {
			            if(GetPlayerCash(playerid)>=210)
			            {
			                AirTicket[playerid] = 1;
			                SendClientMessage(playerid, COLOR_WHITE,"Ai cumparat un bilet spre San Fierro.");
							GivePlayerCash(playerid,-210);
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_WHITE,"Nu ai destui bani");
			            }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE,"Ai deja un bilet.");
					}
		        }
			}
			if (servicecar == 2)
			{
                if(IsPlayerInRangeOfPoint(playerid,5,1735.9939,-710.1816,1082.5653))
		        {
		            if (AirTicket[playerid] == 0)
		            {
			            if(GetPlayerCash(playerid)>=210)
			            {
                            AirTicket[playerid] = 1;
							SendClientMessage(playerid, COLOR_WHITE,"Ai cumparat un bilet spre Las Venturas.");
							GivePlayerCash(playerid,-210);
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_WHITE,"Nu ai destui bani");
			            }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE,"Ai deja un bilet.");
					}
		        }
			}
	    }
	    return 1;
	}

	if(strcmp(cmd, "/landingmessage", true) == 0)
	{
		if (PlayerInfo[playerid][pFaction] == 9)
		{
            for(new i = 0; i<MAX_PLAYERS; i++)
            {
                if(IsPlayerInRangeOfPoint(i, 50.0, 142.4189, 1664.5231, 1001.8046))
                {
                   SendClientMessage(i, COLOR_YELLOW, "[SPEAKER] Pilot: Avionul a aterizat pe aeroport. Indreptati-va civilizat spre iesire.");
			    }
		    }
	    }
    }

    if(strcmp(cmd, "/departuremessage", true) == 0)
	{
		if (PlayerInfo[playerid][pFaction] == 9)
		{
            for(new i = 0; i<MAX_PLAYERS; i++)
            {
                if(IsPlayerInRangeOfPoint(i, 50.0, 142.4189, 1664.5231, 1001.8046))
                {
                   SendClientMessage(i, COLOR_YELLOW, "[SPEAKER] Pilot: Avionul a decolat de pe aeroport. Va rugam sa va asezati, si sa va cuplati centurile de siguranta!");
			    }
		    }
	    }
    }

    if(strcmp(cmd, "/planedoor", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 9)
			{
			    if(statususa == 1)
			    {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai inchis usa avionului. Inseamna ca ai DECOLAT.");
					statususa = 0;
				}
				else
				{
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai deschis usa avionului. Inseamna ca ai ATERIZAT.");
					statususa = 1;
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/exitplane", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerInRangeOfPoint(playerid, 50.0, 142.4189, 1664.5231, 1001.8046))
			{
			    if(statususa == 1 && ZborSF[playerid] == 1)
			    {
                    SendClientMessage(playerid, COLOR_WHITE, "Ai ajuns la destinatie! Bine ai venit in San Fierro.");
                    ZborSF[playerid] = 0;
                    AirTicket[playerid] = 0;
                    SetPlayerPos(playerid, -1417.0,-295.8,14.1);
				}
			if(PlayerToPoint(9, playerid, 1145.0222,-1329.9402,13.5829))
		{
			SetPlayerPos(playerid, 1525.2831,-1550.7203,1970.7859);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerInterior(playerid,1);
		}
			    if(statususa == 1 && ZborLV[playerid] == 1)
			    {
                    SendClientMessage(playerid, COLOR_WHITE, "Ai ajuns la destinatie! Bine ai venit in Las Venturas.");
                    ZborLV[playerid] = 0;
                    AirTicket[playerid] = 0;
                    SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
				}
				if(statususa == 0)
			    {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Usa avionului este inchisa. Nu poti cobori.");
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/departsf", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 1699.7219,-684.4647,1083.3647))
		{
			if(AirTicket[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Stewardese: Te-ai imbarcat in avionul ce zboara catre San Fierro! Sa ai un zbor placut.");
                SetPlayerPos(playerid, 142.4700, 1654.5623, 1002.2091);
                ZborSF[playerid] = 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Stewardese: Nu ai un bilet de avion! Du-te la ghiseu si cumpara unul.");
			}
		}
	}

	if(strcmp(cmd, "/departlv", true) == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 20, 1682.4215,-684.1127,1083.2290))
		{
			if(AirTicket[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Stewardese: Te-ai imbarcat in avionul ce zboara catre San Fierro! Sa ai un zbor placut.");
                SetPlayerPos(playerid, 142.4700, 1654.5623, 1002.2091);
                ZborLV[playerid] = 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Stewardese: Nu ai un bilet de avion! Du-te la ghiseu si cumpara unul.");
			}
		}
	}
//============================================ SFARSIT FACTION: AIRPORT SYSTEM - V0.01 ==============================//
/*
	if(strcmp(cmd, "/location", true) == 0)
	{
		if (IsPlayerConnected(playerid))
		{
			ShowPlayerDialog(playerid,100, DIALOG_STYLE_LIST, "{D43E19}GPS- Locatii importante", "Dealership\nPrimarie\nAeroport\nLos Santos Police Department\nGym\nBanca Los Santos\nSan News\nSpital\nCompania de telefoane\nLos Santos Auto Services\nTrucker Job\nPizza Job\nSweep Job\n24/7 Los Santos\nBinco Haine\nCompania de asigurari\nDMV", "Select", "Cancel");
		}
		return 1;
	}
*/
if(strcmp(cmd, "/newspaper", true) == 0)
{
	if(GetPVarInt(playerid, "NewspaperPurchased") == 0)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 820.3905,-1356.0406,13.5427))
		{
		    if(GetPlayerCash(playerid) < 10) return SendClientMessage(playerid, COLOR_GREY, "Nu ai suficienti bani pentru a procura un ziar ($10).");
			GivePlayerCash(playerid, -10);
			SetPVarInt(playerid, "NewspaperPurchased", 1);
			SendClientMessage(playerid, COLOR_GREY, "Ai cumparat ultima editie a ziarului Los Santos.");
			SendClientMessage(playerid, COLOR_GREY, "[INFO]: Scrie /newspaper pentru a vedea continutul ziarului.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nu ai un ziar !");
		}
	} else {
		ShowPlayerDialog(playerid,100, DIALOG_STYLE_LIST, "{D43E19}Los Santos Media", "Dealership\nPrimarie\nAeroport\nLos Santos Police Department\nGym\nBanca Los Santos\nSan News\nSpital\nCompania de telefoane\nLos Santos Auto Services\nTrucker Job\nPizza Job\nSweep Job\n24/7 Los Santos\nBinco Haine\nCompania de asigurari\nDMV", "Select", "Cancel");
	}
	return 1;
}

	if(strcmp(cmd, "/warehousegate", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if(DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 2)
			{
				if (whmontstatus == 0)
				{
					if(PlayerToPoint(12.0,playerid,1332.85193, 278.87006, 18.62611))
					{
						MoveObject(whmont, 1330.83960, 274.33609, 18.62610, 1.0,0.0000, 0.0000, 90.0000);
						whmontstatus = 1;
					}
				}
				else
				{
					if(PlayerToPoint(12.0,playerid,1332.85193, 278.87006, 18.62611))
					{
						MoveObject(whmont, 1332.85193, 278.87006, 18.62611, 1.0,0.0000, 0.0000, 90.0000);
						whmontstatus = 0;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Nu faci parte dintr-o factiune officiala!");
		}
	}
	if(strcmp(cmd, "/newsgate", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if (PlayerInfo[playerid][pFaction] == 4)
			{
				if (newsgatestatus == 0)
				{
					if(PlayerToPoint(12.0,playerid,617.4034, -1506.3966, 13.1628))
					{
						MoveObject(newsgate, 617.4034, -1506.3966, 9.1628, 1.0,0.0000, 0.0000, 90.0000);
						newsgatestatus = 1;
					}
				}
				else
				{
					if(PlayerToPoint(12.0,playerid,617.4034, -1506.3966, 13.1628))
					{
						MoveObject(newsgate, 617.4034, -1506.3966, 13.1628, 1.0,0.0000, 0.0000, 90.0000);
						newsgatestatus = 0;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Nu esti membru SAN NEWS");
		}
	}
	if(strcmp(cmd, "/apb", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if (PlayerInfo[playerid][pFaction] == 3)
			{
				new x_apb[128];
				x_apb = strtok(cmdtext, idx);
				if(!strlen(x_apb))
				{
					SendClientMessage(playerid, COLOR_WHITE, "_____________________________________________");
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /apb [item]");
					SendClientMessage(playerid, COLOR_GRAD2, "[Actiune] list, create, delete");
					SendClientMessage(playerid, COLOR_WHITE, "_____________________________________________");
					return 1;
				}
				if(strcmp(x_apb, "create", true) == 0)
				{
					ShowPlayerDialog(playerid, 574, DIALOG_STYLE_INPUT, "APB Create", "Introdu apb-ul dorit:", "Ok", "Anuleaza");
				}
				else if(strcmp(x_apb, "list", true) == 0)
				{
					new stringapb[128];
					SendClientMessage(playerid, COLOR_WHITE, "{FF9100}_____________APB LIST____________");
					if (apbstatus1 == 1)
					{
						format(stringapb, sizeof(stringapb), "{FF9100}APB 1:{FFFFFF} %s",APB1);
						SendClientMessage(playerid, COLOR_WHITE, stringapb);
					}
					if (apbstatus2 == 1)
					{
						format(stringapb, sizeof(stringapb), "{FF9100}APB 2:{FFFFFF} %s",APB2);
						SendClientMessage(playerid, COLOR_WHITE, stringapb);
					}
					if (apbstatus3 == 1)
					{
						format(stringapb, sizeof(stringapb), "{FF9100}APB 3:{FFFFFF} %s",APB3);
						SendClientMessage(playerid, COLOR_WHITE, stringapb);
					}
					if (apbstatus4 == 1)
					{
						format(stringapb, sizeof(stringapb), "{FF9100}APB 4:{FFFFFF} %s",APB4);
						SendClientMessage(playerid, COLOR_WHITE, stringapb);
					}
					if (apbstatus5 == 1)
					{
						format(stringapb, sizeof(stringapb), "{FF9100}APB 5:{FFFFFF} %s",APB5);
						SendClientMessage(playerid, COLOR_WHITE, stringapb);
					}
				}
				else if(strcmp(x_apb, "delete", true) == 0)
				{
					new stringapb[128];
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /apb delete [id]");
						return 1;
					}
					new apbdelete;
					apbdelete = strval(tmp);
					switch(apbdelete)
					{
						case 1:
						{
							APB1 = "";
							apbstatus1 = 0;
							format(stringapb, sizeof(stringapb), "APB 1 a fost sters de catre %s", GetPlayerNameEx(playerid));
							SendFactionMessage(3,COLOR_RED,stringapb);
						}
						case 2:
						{
							APB2 = "";
							apbstatus2 = 0;
							format(stringapb, sizeof(stringapb), "APB 2 a fost sters de catre %s", GetPlayerNameEx(playerid));
							SendFactionMessage(3,COLOR_RED,stringapb);
						}
						case 3:
						{
							APB3 = "";
							apbstatus3 = 0;
							format(stringapb, sizeof(stringapb), "APB 3 a fost sters de catre %s", GetPlayerNameEx(playerid));
							SendFactionMessage(3,COLOR_RED,stringapb);
						}
						case 4:
						{
							APB4 = "";
							apbstatus4 = 0;
							format(stringapb, sizeof(stringapb), "APB 4 a fost sters de catre %s", GetPlayerNameEx(playerid));
							SendFactionMessage(3,COLOR_RED,stringapb);
						}
						case 5:
						{
							APB5 = "";
							apbstatus5 = 0;
							format(stringapb, sizeof(stringapb), "APB 5 a fost sters de catre %s", GetPlayerNameEx(playerid));
							SendFactionMessage(3,COLOR_RED,stringapb);
						}
					}
				}
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/lsfdgate", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if (PlayerInfo[playerid][pFaction] == 5)
			{
				if (lsfdgatestatus1 == 0)
				{
					if(PlayerToPoint(12.0,playerid,1803.3734, -1719.4023, 13.5342))
					{
						MoveObject(poarta1lsfd, 1803.1066, -1721.6240, 3.7608, 2.00);
						lsfdgatestatus1 = 1;
					}
				}
				else
				{
					if(PlayerToPoint(12.0,playerid,1803.3734, -1719.4023, 13.5342))
					{
						MoveObject(poarta1lsfd, 1803.1066, -1721.6240, 12.5442, 2.00);
						lsfdgatestatus1 = 0;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Nu esti membru LSFD");
		}
 	}
 	if(strcmp(cmd, "/lsfdgate2", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if (PlayerInfo[playerid][pFaction] == 5)
			{
				if (lsfdgatestatus2 == 0)
				{
					if(PlayerToPoint(12.0,playerid,1762.5273, -1700.2300, 13.4339))
					{
						MoveObject(poarta2lsfd, 1761.5427, -1700.3440, 3.5330, 2.00);
						lsfdgatestatus2 = 1;
					}
				}
				else
				{
					if(PlayerToPoint(12.0,playerid,1762.5273, -1700.2300, 13.4339))
					{
						MoveObject(poarta2lsfd, 1761.54272, -1700.34399, 12.42150, 2.00);
						lsfdgatestatus2 = 0;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Nu esti membru LSFD");
		}
 	}
 	if(strcmp(cmd, "/lsfdgate3", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if (PlayerInfo[playerid][pFaction] == 5)
			{
				if (lsfdgatestatus3 == 0)
				{
					if(PlayerToPoint(12.0,playerid,1802.8480, -1721.0253, 13.5333))
					{
						MoveObject(poarta3lsfd, 1761.5427, -1691.7930, 3.4794, 2.00);
						lsfdgatestatus3 = 1;
					}
				}
				else
				{
					if(PlayerToPoint(12.0,playerid,1802.8480, -1721.0253, 13.5333))
					{
						MoveObject(poarta3lsfd, 1761.54272, -1691.79297, 12.42150, 2.00);
						lsfdgatestatus3 = 0;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Nu esti membru LSFD");
		}
 	}
	if(strcmp(cmd, "/handbrake", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				if (HandBrake[vehicleid][hActiv] == 0)
				{
					HandBrake[vehicleid][hActiv] = 1;
					GetVehiclePos(vehicleid,HandBrake[vehicleid][hX],HandBrake[vehicleid][hY],HandBrake[vehicleid][hZ]);
					GetVehicleZAngle(vehicleid, HandBrake[vehicleid][hRZ]);
					if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(string, sizeof(string), "[Masca_%d] a tras frana de mana a vehiculului %s.", PlayerInfo[playerid][pMaskID], VehicleNames[GetVehicleModel(idcar)-400]);
						SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
						SendClientMessage(playerid, COLOR_PURPLE, string);
						format(string, sizeof(string), "~g~.");
						
					}
					else
					{
						format(string, sizeof(string), "%s a tras frana de mana a vehiculului %s.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(idcar)-400]);
						SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
						SendClientMessage(playerid, COLOR_PURPLE, string);
						format(string, sizeof(string), "~g~.");
						
					}
					EngineStatus[vehicleid] = 0;
					GetVehicleParamsEx(vehicleid ,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
				}
				else
				{
					HandBrake[vehicleid][hActiv] = 0;
					HandBrake[vehicleid][hX] = 0;
					HandBrake[vehicleid][hY] = 0;
					HandBrake[vehicleid][hZ] = 0;
					HandBrake[vehicleid][hRZ] = 0;
					if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(string, sizeof(string), "[Masca_%d] a eliberat frana de mana a vehiculului %s.", PlayerInfo[playerid][pMaskID], VehicleNames[GetVehicleModel(idcar)-400]);
						SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
						SendClientMessage(playerid, COLOR_PURPLE, string);
						format(string, sizeof(string), "~r~.");
						
					}
					else
					{
						format(string, sizeof(string), "%s a eliberat frana de mana a vehiculului %s.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(idcar)-400]);
						SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
						SendClientMessage(playerid, COLOR_PURPLE, string);
						format(string, sizeof(string), "~r~.");
						
					}
				}
			}
		}
	}

	if(strcmp(cmd, "/radar", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if (PlayerInfo[playerid][pFaction] == 3)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if (DynamicCars[vehicleid][FactionCar] == 3)
					{
						if (radar[playerid] == 0)
						{
							radar[playerid] = 1;
							SendClientMessage(playerid, COLOR_WHITE, "Ai pornit radarul.");
						}
						else
						{
							radar[playerid] = 0;
							SendClientMessage(playerid, COLOR_WHITE, "Ai oprit radarul.");
						}
					}
					else SendClientMessage(playerid, COLOR_WHITE, "Trebuie sa te afli in masina de la LSPD pentru a folosi comanda.");
				}
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Trebuie sa fii membru LSPD pentru a folosi comanda.");
		}
	}


	if(strcmp(cmd, "/lsasimpound", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if (PlayerInfo[playerid][pFaction] == 7)
			{
				if(PlayerToPoint(20.0,playerid,2424.3801, -2089.7151, 15.1924))
				{
					if (lsasimpoundstatus == 0)
					{
						MoveObject(impoundgate, 2424.3372, -2075.0945, 15.1924, 1.0,0.0000, 0.0000, 90.0000);
						MoveObject(impoundgate2, 2424.3118, -2104.0752, 15.1924, 1.0,0.0000, 0.0000, 90.0000);
						lsasimpoundstatus = 1;
					}
					else
					{
						MoveObject(impoundgate, 2424.3372, -2085.0945, 15.1924, 1.0,0.0000, 0.0000, 90.0000);
						MoveObject(impoundgate2, 2424.3118, -2096.5752, 15.1924, 1.0,0.0000, 0.0000, 90.0000);
						lsasimpoundstatus = 0;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Nu esti membru LSAS");
		}
	}

	if(strcmp(cmd, "/emsdoor", true) == 0)
	{
	if(PlayerInfo[playerid][pFaction] == 2)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3, 1500.7516, -1541.3116, 1969.8427))
		{
		    
			switch(HospitalDoor1Sate)
			{
				case 0:
				{
                    MoveDynamicObject(HospitalDoor1, 1500.7516 - 1.2, -1541.3116, 1969.8427, 0.50);

				   	HospitalDoor1Sate = 1;
				}
				default:
				{
				    MoveDynamicObject(HospitalDoor1, 1500.7516, -1541.3116, 1969.8427, 0.50);

				   	HospitalDoor1Sate = 0;
				}
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3, 1505.8879, -1545.5511, 1969.8398))
		{

			switch(HospitalDoor2Sate)
			{
				case 0:
				{
                    MoveDynamicObject(HospitalDoor2, 1505.8879, -1545.5511 + 1.2, 1969.8398, 0.50);

				   	HospitalDoor2Sate = 1;
				}
				default:
				{
				    MoveDynamicObject(HospitalDoor2, 1505.8879, -1545.5511, 1969.8398, 0.50);

				   	HospitalDoor2Sate = 0;
				}
			}
   			}
		}
		return 1;
	}
	
	
	if(strcmp(cmd, "/pdd", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if (PlayerInfo[playerid][pFaction] == 3)
			{
				 if(IsPlayerInRangeOfPoint(playerid, 30, -1123.96033, 2933.65601, 597.26660))
				{
				switch(pddoorstatus)
							{
								case 0:
								{
				                    MoveDynamicObject(pddoor, -1123.96033, 2934.97607, 597.26660, 0.50);

								   	pddoorstatus = 1;
								}
								default:
								{
								    MoveDynamicObject(pddoor, -1123.96033, 2933.65601, 597.26660, 0.50);

								   	pddoorstatus = 0;
								}
							}
				}

			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nu esti membru LSPD");
			}
		}
	}


	//========================================FURNITURE======================================//
	if(strcmp(cmd, "/objectplant", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if (PlayerInfo[playerid][pAdministrator] >= 5 || FurnitureMapper[playerid] == 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /objectplant [objectid]");
					return 1;
				}
				new objectid;
				objectid = strval(tmp);
				if(objectid >= 1 && objectid <= 20000)
				{
					new Float:OX, Float:OY, Float:OZ, Float:ORX, Float:ORY, Float:ORZ;
					GetPlayerPos(playerid, OX, OY, OZ);
					oModel = objectid;
					ORX = 0.0;
					ORY = 0.0;
					ORZ = 0.0;
					Object = CreateObject(oModel, OX, OY, OZ, ORX, ORY, ORZ);
					EditObject(playerid, Object);
					fplant[playerid] = 1;
					return 1;
				}
				else return SendClientMessage(playerid, 0xD8D8D8FF, "Poti pune un obiect intre 1 si 20000.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/makemapper", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
			if (PlayerInfo[playerid][pAdministrator] >= 5)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /makemapper [playerid]");
					return 1;
				}
				new playeracces;
				playeracces = strval(tmp);
				if (FurnitureMapper[playeracces] == 0)
				{
					FurnitureMapper[playeracces] = 1;
				}
				else
				{
					FurnitureMapper[playeracces] = 0;
				}
			}
		}
		return 1;
	}
	//=============================================================================================//

	if(strcmp(cmd, "/adisarm", true) == 0)
    {
		if(IsPlayerConnected(playerid))
      	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{00A1FF}Folosire{FFFFFF}: /adisarm [playerid/PartOfName]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
				if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
					{
						SafeResetPlayerWeapons(playa);
						SendClientMessage(playerid,COLOR_RED,"Tocmai i-ai luat armele");
					}
				}
			}
		}
		return 1;
    }
    if(!strcmp(cmdtext, "/knock", true)) // By Ellis
    {
        if(IsPlayerConnected(playerid))
        {
            PlayerBubbleMessage(playerid,"bate la usa.");
            new maskid = PlayerInfo[playerid][pMaskID];
            for(new s = 0; s < sizeof(Businesses); s++)
   			{
				if(PlayerToPoint(3, playerid,Businesses[s][EnterX], Businesses[s][EnterY], Businesses[s][EnterZ]))
	    		{
					for(new p = 0; p < MAX_PLAYERS; p++)
					{
		 				if(IsPlayerConnected(p))
						{
						    if(PlayerToPoint(60, p, Businesses[s][ExitX], Businesses[s][ExitY], Businesses[s][ExitZ]))
						    {
						        if(PlayerInfo[playerid][pMaskuse] == 1)
						        {
						        	format(string, sizeof(string), "[Usa] Cineva bate la usa(([Masca_%d]))", maskid);
		        					SendClientMessage(p, COLOR_PURPLE, string);
								}
								else
			   					{
			   					    format(string, sizeof(string), "[Usa]Cineva bate la usa! ((%s))", GetPlayerNameEx(playerid));
									SendClientMessage(p, COLOR_PURPLE, string);
								}
						    }
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Houses); i++)
			{
				if(PlayerToPoint(2.0,playerid,Houses[i][EnterX], Houses[i][EnterY], Houses[i][EnterZ]))
				{
					for(new p = 0; p < MAX_PLAYERS; p++)
					{
		 				if(IsPlayerConnected(p))
						{
						    if(PlayerToPoint(60, p, Houses[i][ExitX], Houses[i][ExitY], Houses[i][ExitZ]))
						    {
						        if(PlayerInfo[playerid][pMaskuse] == 1)
						        {
						        	format(string, sizeof(string), "[Usa] Cineva bate la usa.(([Masca_%d]))", maskid);
		       						SendClientMessage(p, COLOR_PURPLE, string);
								}
								else
			  					{
			  					    format(string, sizeof(string), "[Usa] Cineva bate la usa((%s))", GetPlayerNameEx(playerid));
		       						SendClientMessage(p, COLOR_PURPLE, string);
								}
						    }
						}
					}
				}
			}
        }
        return 1;
    }
	if(strcmp(cmd, "/operation", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	        if(MedicOnDuty[playerid] == 1)
			{
	            tmp = strtok(cmdtext, idx);
	            if(!strlen(tmp))
				{
	                SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /operation [playerid/partofname]");
	                return 1;
	            }
	            giveplayerid = ReturnUser(tmp);
	            if(IsPlayerConnected(giveplayerid))
				{
	                if(giveplayerid != INVALID_PLAYER_ID)
					{
	                    if(giveplayerid == playerid)
						{
	                        SendClientMessage(playerid, COLOR_GREY, "Nu te poti vindeca singur");
	                        return 1;
	                    }
	                    if(Wounded[giveplayerid] == 0)
						{
	                        SendClientMessage(playerid, COLOR_GREY, "Playerul nu are nevoie de operatie.");
	                        return 1;
	                    }
				        if (ProxDetectorS(2.5, playerid, giveplayerid))
				        {
		                    Wounded[giveplayerid] = 0;
		                    SendClientMessage(giveplayerid, COLOR_WHITE, "Un medic te opereaza, tu esti adormit cu somnifere.");
		                    TogglePlayerControllable(giveplayerid, 1);
		                    ApplyAnimation(giveplayerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
		                    TogglePlayerControllable(giveplayerid, 1);
		                    PlayerInfo[giveplayerid][pDeath] = 0;
		                    ResetDamages(giveplayerid);
		                    Wounded[giveplayerid] = 0;
						    Delete3DTextLabel(DamageShot[giveplayerid]);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Trebuie sa fi mai aproape de pacient pentru al opera.");
						    return 1;
						}
	                }
	            }
	            else
				{
	                SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
	            }
	        }
	        else
			{
	            SendClientMessage(playerid, COLOR_WHITE, "Nu esti medic duty!");
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/setstyle",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "1 - Stilul mersului | 2 - Stilul Chatului | 3 - Stiluri de lupta");
				return 1;
			}
			if(strcmp(x_nr,"1",true) == 0)
			{
		        tmp = strtok(cmdtext, idx);
		        if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GREEN, "{AFAFAF}SYNTAX{FFFFFF}: /setstyle 1 [StyleID]");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de mers: 1,2,3,4,5,6,7,8,9");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de mers: 10,11,12,13,14,15,16");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de mers: 17,18");
					return 1;
				}
				new walkstyle;
				walkstyle = strval(tmp);
				if(walkstyle < 1 || walkstyle > 18)
				{
					return 1;
				}
				if(walkstyle > 2 && PlayerInfo[playerid][pDonator] == 0)
				{
			    	SendClientMessage(playerid,COLOR_GREY,"Aceasta comanda este disponibila donatorilor!");
			    	return 1;
				}
				PlayerInfo[playerid][pWalk] = walkstyle;
		    	format(string, sizeof(string), "Ti-ai setat stilul de mers la: %d", walkstyle);
		    	SendClientMessage(playerid, COLOR_WHITE, string);
		    	return 1;
			}
            else if(strcmp(x_nr,"2",true) == 0)
			{
			    if(PlayerInfo[playerid][pDonator] == 0)
				{
			    	SendClientMessage(playerid,COLOR_GREY,"Aceasta comanda este disponibila donatorilor!");
			    	return 1;
				}
       			tmp = strtok(cmdtext, idx);
		        if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GREEN, "{AFAFAF}SYNTAX{FFFFFF}: /setstyle 2 [StyleID]");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de chat: 0,1,2,3,4,5,6,7,8");
					return 1;
				}
				new chatstyle;
				chatstyle = strval(tmp);
				if(chatstyle > 7)
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Trebuie sa alegi un stil de chat de la 1 la 8.");
					return 1;
				}
				PlayerInfo[playerid][pTalk] = chatstyle;
		    	format(string, sizeof(string), "Ti-ai setat stilul chatului %d", chatstyle);
		    	SendClientMessage(playerid, COLOR_WHITE, string);
		    	return 1;
			}
    		else if(strcmp(x_nr,"3",true) == 0)
			{
			    if(PlayerInfo[playerid][pDonator] == 0)
				{
			    	SendClientMessage(playerid,COLOR_GREY,"Aceasta comanda este disponibila donatorilor!");
			    	return 1;
				}
       			tmp = strtok(cmdtext, idx);
		        if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GREEN, "{AFAFAF}SYNTAX{FFFFFF}: /setstyle 3 [StyleID]");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de lupta: 0");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de lupta: 1");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de lupta: 2");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de lupta: 3");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de lupta: 4");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de lupta: 5");
					SendClientMessage(playerid, COLOR_WHITE, "Stiluri de lupta: 6");
					return 1;
				}
				new fightstyle;
				fightstyle = strval(tmp);
				if(fightstyle < 0 || fightstyle > 5)
				{
					return 1;
				}
				if(fightstyle == 1) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL); }
				else if(fightstyle == 2) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING); }
				else if(fightstyle == 3) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU); }
				else if(fightstyle == 4) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD); }
				else if(fightstyle == 5) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);}
				else if(fightstyle == 6) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);}
				PlayerInfo[playerid][pFight] = fightstyle;
				format(string, sizeof(string), "Ti-ai setat stilul de lupta: %d", fightstyle);
  				SendClientMessage(playerid, COLOR_WHITE, string);
  				return 1;
			}
		}
		return 1;
	}
	// ============= ANIMATIONS ==================================
	new animid;
	if(!strcmp(cmd, "/bj", true))
	{
	    if(IsJacking[playerid] == 1)
	    {
	    	return 1;
	    }
	    tmp = strtok(cmdtext, idx);
	    animid = strval(tmp);
	    if(!strlen(tmp)||animid < 1 || animid > 12)
		{
	        SendClientMessage(playerid,COLOR_WHITE,"{AFAFAF}SYNTAX{FFFFFF}: /bj [1-12]");
	        return 1;
		}
	    switch(animid) {
	        case 1: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1);
	        case 2: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1);
	        case 3: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,1);
	        case 4: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,1);
        	case 5: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,1);
        	case 6: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1);
        	case 7: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,1);
        	case 8: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,1);
        	case 9: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,0,1,1,1,1);
        	case 10: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,0,1,1,1,1);
        	case 11: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,1);
        	case 12: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
	    }
	    return 1;
	}
	if(strcmp(cmd, "/gsign", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[7])) return SendClientMessage(playerid,COLOR_GREY,"{AFAFAF}SYNTAX{FFFFFF}: /gsign [1-4]");
    	switch (cmdtext[7])
    	{
         	case '1': OnePlayAnim(playerid,"GHANDS","gsign1",4.1,0,1,1,1,1);
        	case '2': OnePlayAnim(playerid,"GHANDS","gsign2LH", 4.1,0,1,1,1,1);
        	case '3': OnePlayAnim(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1);
        	case '4': OnePlayAnim(playerid,"GHANDS","gsign4LH", 4.1,0,1,1,1,1);
        	default: SendClientMessage(playerid,COLOR_GREY,"/gsign [1-4]");
    	}
    	return 1;
    }
	if(strcmp(cmd, "/lookout", true) == 0)
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[9])) return SendClientMessage(playerid,COLOR_GREY," {AFAFAF}SYNTAX{FFFFFF}: /lookout [1-2]");
    	switch (cmdtext[9])
    	{
         	case '1': OnePlayAnim(playerid, "FOOD", "eat_vomit_sk", 4.0,0,0,0,0,0);
        	case '2': OnePlayAnim(playerid, "PED", "handscower", 4.0,0,1,1,1,1);
        	default: SendClientMessage(playerid,COLOR_GREY,"{AFAFAF}SYNTAX{FFFFFF}: /lookout [1-2]");
    	}
    	return 1;
    }
	if(strcmp(cmd, "/wave", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[6])) return SendClientMessage(playerid,COLOR_GREY,"{AFAFAF}SYNTAX{FFFFFF}:  /wave [1-5]");
    	switch (cmdtext[6])
    	{
         	case '1': LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
        	case '2': OnePlayAnim(playerid,"BD_Fire", "BD_GF_Wave", 4.0, 0, 0, 0, 0, 0);
        	case '3': LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
        	case '4': OnePlayAnim(playerid,"WUZI", "Wuzi_Follow", 5.0, 0, 0, 0, 0, 0);
        	case '5': OnePlayAnim(playerid,"KISSING", "gfwave2", 4.0, 0, 0, 0, 0, 0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /wave [1-5]");
    	}
    	return 1;
    }
	if(strcmp(cmd, "/crack", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[7])) return SendClientMessage(playerid,COLOR_GREY," {AFAFAF}SYNTAX{FFFFFF}: /crack [1-5]");
    	switch (cmdtext[7])
    	{
        	case '1': LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
        	case '2': LoopingAnim(playerid,"CRACK", "crckidle1", 4.0, 1, 0, 0, 0, 0);
        	case '3': LoopingAnim(playerid,"CRACK","crckidle2", 4.0, 1, 0, 0, 0, 0);
        	case '4': LoopingAnim(playerid,"CRACK","crckidle3", 4.0, 1, 0, 0, 0, 0);
        	case '5': LoopingAnim(playerid,"CRACK","crckidle4", 4.0, 1, 0, 0, 0, 0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /crack [1-5]");
    	}
    	return 1;
    }
	if(strcmp(cmd, "/crossarms", true) == 0)
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[11])) return SendClientMessage(playerid,COLOR_GREY,"{AFAFAF}SYNTAX{FFFFFF}:  /crossarms [1-2]");
    	switch (cmdtext[11])
    	{
         	case '1': LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
        	case '2': LoopingAnim(playerid,"OTB", "wtchrace_loop", 4.0, 1, 0, 0, 0, 0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /crossarms [1-2]");
    	}
    	return 1;
    }
    if(strcmp(cmd, "/tired", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[7])) return SendClientMessage(playerid,COLOR_GREY," {AFAFAF}SYNTAX{FFFFFF}: /tired [1-2]");
    	switch (cmdtext[7])
    	{
        	case '1': LoopingAnim(playerid,"PED","IDLE_tired",3.0,1,0,0,0,0);
        	case '2': OnePlayAnim(playerid,"FAT","Idle_Tired",3.0,1,0,0,0,0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /tired [1-2]");
    	}
    	return 1;
    }
   	if(strcmp(cmd, "/slapass", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[9])) return SendClientMessage(playerid,COLOR_GREY,"{AFAFAF}SYNTAX{FFFFFF}:  /slapass [1-2]");
    	switch (cmdtext[9])
    	{
         	case '1': OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
        	case '2': LoopingAnim(playerid,"MISC","Bitchslap",4.0,1,0,0,0,0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /slapass [1-2]");
    	}
    	return 1;
    }
	if(strcmp(cmd, "/lay", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[5])) return SendClientMessage(playerid,COLOR_GREY,"{AFAFAF}SYNTAX{FFFFFF}:  /lay [1-9]");
    	switch (cmdtext[5])
    	{
        	case '1': LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
        	case '2': LoopingAnim(playerid,"BEACH", "parksit_w_loop", 4.0, 1, 0, 0, 0, 0);
        	case '3': LoopingAnim(playerid,"BEACH","parksit_m_loop", 4.0, 1, 0, 0, 0, 0);
        	case '4': LoopingAnim(playerid,"BEACH","lay_bac_loop", 4.0, 1, 0, 0, 0, 0);
        	case '5': LoopingAnim(playerid,"BEACH","sitnwait_loop_w", 4.0, 1, 0, 0, 0, 0);
         	case '6': LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0, 1, 0, 0, 0, 0);
         	case '7': LoopingAnim(playerid,"SUNBATHE","batherdown",3.0, 1, 0, 0, 0, 0);
         	case '8': LoopingAnim(playerid,"SUNBATHE","parksit_m_in",3.0, 1, 0, 0, 0, 0);
         	case '9': LoopingAnim(playerid,"CAR", "Fixn_Car_Loop", 4.0, 1, 0, 0, 0, 0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /lay [1-9]");
    	}
    	return 1;
    }
	if (strcmp("/graffity", cmdtext, true) == 0)
	{
		if (DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 2 || DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 3)
		{
			ShowPlayerDialog(playerid,984, DIALOG_STYLE_INPUT, "Text-ul dumneavoastra", "Introduceti ce text doriti:", "Submit", "Cancel");
		}
	}
	if(strcmp(cmd, "/cellout", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		    return 1;
		}
		return 1;
	}
    if(strcmp(cmd, "/fucku", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[7])) return SendClientMessage(playerid,COLOR_GREY," {AFAFAF}SYNTAX{FFFFFF}: /fucku [1-2]");
    	switch (cmdtext[7])
    	{
        	case '1': OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
         	case '2': OnePlayAnim(playerid,"RIOT","RIOT_FUKU",5.0,0,0,0,0,0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /fucku [1-2]");
    	}
    	return 1;
    }
    if(strcmp(cmd, "/lean", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[6])) return SendClientMessage(playerid,COLOR_GREY," {AFAFAF}SYNTAX{FFFFFF}: /lean [1-3]");
    	switch (cmdtext[6])
    	{
        	case '1': LoopingAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
        	case '2': LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
        	case '3': OnePlayAnim(playerid,"BAR","BARman_idle",3.0,0,1,1,1,0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /lean [1-3]");
    	}
    	return 1;
    }
	if(strcmp(cmd, "/aim", true) == 0)
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[5])) return SendClientMessage(playerid,COLOR_GREY," {AFAFAF}SYNTAX{FFFFFF}: /aim [1-2]");
    	switch (cmdtext[5])
    	{
         	case '1': LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
        	case '2': LoopingAnim(playerid,"PED", "gang_gunstand", 4.0,1,0,0,0,0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /aim [1-2]");
    	}
    	return 1;
    }
    if(strcmp(cmd, "/tapcig", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    LoopingAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
		    gPlayerUsingLoopingAnim[playerid] = 1;
		    return 1;
		}
		return 1;
    }
    if(strcmp(cmd, "/drunk", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,0,1,1,1,1);
		    gPlayerUsingLoopingAnim[playerid] = 1;
		    return 1;
		}
		return 1;
    }
    	if(strcmp(cmd, "/motds", true) == 0)
    {
			if(IsPlayerConnected(playerid))
			{
			   SendClientMessage(playerid, COLOR_GREY, "Mesaje: Bine ati venit! Foloseste /donatii pentru a vedea cateva informatii despre donatii. Spor la roleplay!");
			   }

			   return 1;
		 }

    if(strcmp(cmd, "/wank", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    LoopingAnim(playerid,"PED", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
		    gPlayerUsingLoopingAnim[playerid] = 1;
		    return 1;
		}
		return 1;
    }
    if(strcmp(cmd, "/vomit", true) == 0)
	{
		if(Wounded[playerid] == 1)
		{
	        SendClientMessage(playerid, COLOR_WHITE, "Nu poti face acest lucru chiar acum.");
	        return 1;
	    }
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    LoopingAnim(playerid,"FOOD","EAT_Vomit_P",3.2,0,0,0,0,0);
		    gPlayerUsingLoopingAnim[playerid] = 1;
		    return 1;
		}
		return 1;
    }
    if (strcmp("/laugh", cmdtext, true) == 0)
	{
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
 		OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	  	return 1;
	}
   	if(strcmp(cmd, "/hide", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[6])) return SendClientMessage(playerid,COLOR_GREY," {AFAFAF}SYNTAX{FFFFFF}: /hide [1-2]");
    	switch (cmdtext[6])
    	{
         	case '1': LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
        	case '2': LoopingAnim(playerid,"ON_LOOKERS","panic_hide",3.0,1,0,0,0,0);
        	default: SendClientMessage(playerid,COLOR_GREY," {AFAFAF}SYNTAX{FFFFFF}: /hide [1-2]");
    	}
    	return 1;
    }
    if(strcmp(cmd, "/inbedright", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			LoopingAnim(playerid,"INT_HOUSE","BED_Loop_R",4.0,1,0,0,0,0);
	        return 1;
        }
    }
    if(strcmp(cmd, "/inbedleft", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			LoopingAnim(playerid,"INT_HOUSE","BED_Loop_L",4.0,1,0,0,0,0);
	        return 1;
		}
    }
    if(strcmp(cmd, "/getarrested", true) == 0) {
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
	        return 1;
		}
    }
    if(strcmp(cmd, "/stance", true) == 0)
    {
   		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
    	tmp = strtok(cmdtext,idx);
        if (!strlen(tmp))
		{
			SendClientMessage(playerid,COLOR_GREY," /stance [1-13]"); return 1;
		}
    	new anim = strval(tmp);
        if(anim == 1) { LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0); }
        else if(anim == 2) { LoopingAnim(playerid,"PED","WOMAN_IDLESTANCE",4.0,1,0,0,0,0); }
       	else if(anim == 3) { LoopingAnim(playerid,"PED","CAR_HOOKERTALK",4.0,1,0,0,0,0); }
       	else if(anim == 4) { LoopingAnim(playerid,"FAT","FatIdle",4.0,1,0,0,0,0); }
       	else if(anim == 5) { LoopingAnim(playerid,"WUZI","Wuzi_Stand_Loop",4.0,1,0,0,0,0); }
       	else if(anim == 6) { LoopingAnim(playerid,"GRAVEYARD","mrnf_loop",4.0,1,0,0,0,0); }
       	else if(anim == 7) { LoopingAnim(playerid,"GRAVEYARD","mrnm_loop",4.0,1,0,0,0,0); }
       	else if(anim == 8) { LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.0,1,0,0,0,0); }
       	else if(anim == 9) { LoopingAnim(playerid,"PED","idlestance_fat",4.0,1,0,0,0,0); }
       	else if(anim == 10) { LoopingAnim(playerid,"PED","idlestance_old",4.0,1,0,0,0,0); }
       	else if(anim == 11) { LoopingAnim(playerid,"PED","turn_l",4.0,1,0,0,0,0); }
       	else if(anim == 12) { LoopingAnim(playerid,"BAR","Barcustom_loop",4.0,1,0,0,0,0); }
       	else if(anim == 13) { LoopingAnim(playerid,"BAR","Barserve_loop",4.0,1,0,0,0,0); }
        else { SendClientMessage(playerid,COLOR_GREY," /stance [1-13]"); }
    	return 1;
    }
    if(strcmp(cmd, "/yell", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[6])) return SendClientMessage(playerid,COLOR_GREY,"{AFAFAF}SYNTAX{FFFFFF}:  /yell [1-3]");
    	switch (cmdtext[6])
    	{
         	case '1': LoopingAnim(playerid,"ON_LOOKERS","shout_loop",3.0,1,0,0,0,0);
        	case '2': LoopingAnim(playerid,"ON_LOOKERS","shout_01",3.0,1,0,0,0,0);
        	case '3': LoopingAnim(playerid,"ON_LOOKERS","shout_02",3.0,1,0,0,0,0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /yell [1-3]");
    	}
    	return 1;
    }
    if(strcmp(cmd, "/plant", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    LoopingAnim(playerid,"BOMBER","BOM_Plant",3.0,0,0,0,0,0);
		    gPlayerUsingLoopingAnim[playerid] = 1;
		    return 1;
		}
		return 1;
    }
    if(strcmp(cmd, "/deal", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    LoopingAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
		    gPlayerUsingLoopingAnim[playerid] = 1;
		    return 1;
		}
		return 1;
    }
    if(strcmp(cmd, "/fall", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    LoopingAnim(playerid,"PARACHUTE","FALL_skyDive_DIE",3.5,0,0,0,0,0);
		    gPlayerUsingLoopingAnim[playerid] = 1;
		    return 1;
		}
		return 1;
    }
    if(strcmp(cmd, "/basket", true) == 0)
    {
		if(Wounded[playerid] == 1)
		{
	        SendClientMessage(playerid, COLOR_WHITE, "Nu poti face asta chiar acum.");
	        return 1;
	    }
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
	        if (!strlen(cmdtext[8])) return SendClientMessage(playerid,0xEFEFF7AA,"{AFAFAF}SYNTAX{FFFFFF}: /basket [1-6]");
	        switch (cmdtext[8])
	        {
	                case '1': LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
	                case '2': OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
	                case '3': OnePlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
	                case '4': LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
	                case '5': LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
	                case '6': LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
	                default: SendClientMessage(playerid,0xEFEFF7AA,"{AFAFAF}SYNTAX{FFFFFF}: /basket [1-6]");
	        }
	    }
        return 1;
    }
    if(strcmp(cmd, "/bat", true) == 0)
	{
		if(Wounded[playerid] == 1)
		{
	        SendClientMessage(playerid, COLOR_WHITE, "Nu poti face acest lucru chiar acum.");
	        return 1;
	    }
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
		    LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
		    gPlayerUsingLoopingAnim[playerid] = 1;
		    return 1;
		}
		return 1;
    }
    if(strcmp(cmd, "/sit", true) == 0)
    {
    	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[5])) return SendClientMessage(playerid,COLOR_GREY,"  /sit [1-4]");
    	switch (cmdtext[5])
    	{
        	case '1': LoopingAnim(playerid,"PED","SEAT_down",4.1,0,1,1,1,0);
         	case '2': LoopingAnim(playerid,"MISC","seat_lr",2.0,1,0,0,0,0);
         	case '3': LoopingAnim(playerid,"MISC","seat_talk_01",2.0,1,0,0,0,0);
         	case '4': LoopingAnim(playerid,"MISC","seat_talk_02",2.0,1,0,0,0,0);
         	case '5': LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
         	case '6': LoopingAnim(playerid,"BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /sit [1-4]");
    	}
    	return 1;
    }

	if(!strcmp(cmd, "/strip", true))
	{
		if(IsPlayerInAnyVehicle(playerid) == 1) return SendClientMessage(playerid,COLOR_RED,"Animatiile nu merg in timp ce esti intr-un vehicul!");
	    if(Wounded[playerid] == 1)
		{
	        SendClientMessage(playerid, COLOR_WHITE, "Nu poti face asta chiar acum!");
	        return 1;
	    }
	    if(IsJacking[playerid] == 1)
	    {
	    	return 1;
	    }
		tmp = strtok(cmdtext, idx);
		animid = strval(tmp);
		if(!strlen(tmp)||animid < 1 || animid > 20)
		{
			SendClientMessage(playerid,COLOR_SYSTEM," {AFAFAF}SYNTAX{FFFFFF}: /strip [1-20]");
			return 1;
		}
		switch(animid)
		{
			case 1: LoopingAnim(playerid,"STRIP","PLY_CASH",4.1,1,1,1,1,1);
			case 2: LoopingAnim(playerid,"STRIP","PUN_CASH",4.1,1,1,1,1,1);
			case 3: LoopingAnim(playerid,"STRIP","PUN_HOLLER",4.1,1,1,1,1,1);
			case 4: LoopingAnim(playerid,"STRIP","PUN_LOOP",4.1,1,1,1,1,1);
			case 5: LoopingAnim(playerid,"STRIP","strip_A",4.1,1,1,1,1,1);
			case 6: LoopingAnim(playerid,"STRIP","strip_B",4.1,1,1,1,1,1);
			case 7: LoopingAnim(playerid,"STRIP","strip_C",4.1,1,1,1,1,1);
			case 8: LoopingAnim(playerid,"STRIP","strip_D",4.1,1,1,1,1,1);
			case 9: LoopingAnim(playerid,"STRIP","strip_E",4.1,1,1,1,1,1);
			case 10: LoopingAnim(playerid,"STRIP","strip_F",4.1,1,1,1,1,1);
			case 11: LoopingAnim(playerid,"STRIP","strip_G",4.1,1,1,1,1,1);
			case 12: LoopingAnim(playerid,"STRIP","STR_A2B",4.1,1,1,1,1,1);
			case 13: LoopingAnim(playerid,"STRIP","STR_B2A",4.1,1,1,1,1,1);
			case 14: LoopingAnim(playerid,"STRIP","STR_B2C",4.1,1,1,1,1,1);
			case 15: LoopingAnim(playerid,"STRIP","STR_C1",4.1,1,1,1,1,1);
			case 16: LoopingAnim(playerid,"STRIP","STR_C2",4.1,1,1,1,1,1);
			case 17: LoopingAnim(playerid,"STRIP","STR_C2B",4.1,1,1,1,1,1);
			case 18: LoopingAnim(playerid,"STRIP","STR_Loop_A",4.1,1,1,1,1,1);
			case 19: LoopingAnim(playerid,"STRIP","STR_Loop_B",4.1,1,1,1,1,1);
			case 20: LoopingAnim(playerid,"STRIP","STR_Loop_C",4.1,1,1,1,1,1);
		}
		return 1;
	}

	if(strcmp(cmd, "/dance", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid) == 1) return SendClientMessage(playerid,COLOR_RED,"Animatiile nu merg in timp ce esti intr-un vehicul!");
	    if(Wounded[playerid] == 1)
		{
	        SendClientMessage(playerid, COLOR_WHITE, "Nu poti face asta chiar acum.");
	        return 1;
	    }
	    if(IsJacking[playerid] == 1)
	    {
	    	return 1;
	    }
	// Get the dance style param
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp) || strlen(tmp) > 2) {
	        SendClientMessage(playerid,0xFF0000FF,"{AFAFAF}SYNTAX{FFFFFF}: /dance [style 1-4]");
	        return 1;
	    }
	    new dancestyle;
	    dancestyle = strval(tmp);
	    if(dancestyle < 1 || dancestyle > 4)
		{
	        SendClientMessage(playerid,0xFF0000FF,"{AFAFAF}SYNTAX{FFFFFF}: /dance [style 1-4]");
	        return 1;
	    }
	    if(dancestyle == 1)
		{
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
	        ImAabusingNoob[playerid] = 1;
			SetTimerEx("PleaseDontDetectMe", 300000, false, "i", playerid);
	    }
	    else if(dancestyle == 2)
		{
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
	        ImAabusingNoob[playerid] = 1;
			SetTimerEx("PleaseDontDetectMe", 300000, false, "i", playerid);
	    }
	    else if(dancestyle == 3)
		{
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
	        ImAabusingNoob[playerid] = 1;
			SetTimerEx("PleaseDontDetectMe", 300000, false, "i", playerid);
	    }
	    else if(dancestyle == 4) {
	        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
	        ImAabusingNoob[playerid] = 1;
			SetTimerEx("PleaseDontDetectMe", 300000, false, "i", playerid);
	    }
	    return 1;
	}

    if(strcmp(cmd, "/injured", true) == 0)
    {
	    if(Wounded[playerid] == 1) { SendClientMessage(playerid, COLOR_WHITE, "Nu poti face asta chiar acum."); return 1; }
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if (!strlen(cmdtext[9])) return SendClientMessage(playerid,COLOR_GREY,"  /injured [1-4]");
    	switch (cmdtext[9])
    	{
        	case '1': LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
         	case '2': LoopingAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 1);
         	case '3': LoopingAnim(playerid, "PED", "gas_cwr", 4.0, 1, 1, 1, 1, 1);
         	case '4': LoopingAnim(playerid, "FINALE", "FIN_Cop1_Loop", 4.0, 1, 0, 0, 0, 0);
        	default: SendClientMessage(playerid,COLOR_GREY,"  /injured [1-4]");
    	}
    	return 1;
    }

	if(strcmp(cmd, "/handsup", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	        if(Wounded[playerid] == 1)
			{
	            SendClientMessage(playerid, COLOR_WHITE, "Nu poti face asta chiar acum.");
	            return 1;
	        }
	        if(IsJacking[playerid] != 1)
			{
	            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
				gPlayerUsingLoopingAnim[playerid] = 1;
	            return 1;
	        }
	    }
	    return 1;
	}
    if(strcmp(cmd, "/jobpermission", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /jobpermission [playerid/partofname]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(PlayerInfo[playerid][pRank] == 1 && PlayerInfo[playerid][pFaction] != 0)
			{
				if (DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 2)
			    {
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        new form[128];
					        new faction = PlayerInfo[playerid][pFaction];
							if(gPlayerLogged[giveplayerid])
							{
						        if(DynamicFactions[faction][fJoinRank] == 0)
						        {
									//
						        }
						        else
						        {
									PlayerInfo[giveplayerid][pPermissionGundeal] = 1;
									format(form,sizeof(form),"* Ai primit o permisiune de la liderul factiunii %s (%s) pentru a avea un job ilegal.",DynamicFactions[faction][fName],GetPlayerNameEx(playerid));
									SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,form);
									format(form,sizeof(form),"* I-ai dat lui %s permisiunea de-a avea un job ilegal in factiunea ta.",GetPlayerNameEx(giveplayerid));
									SendClientMessage(playerid,COLOR_WHITE,form);
								}
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu exista pe server.");
							}
						}
					}
		 			else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este online.");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti leader intr-o mafie oficiala.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti leader.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/leadercmds", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pFaction] != 0 && PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2)
	    	{
				format(string, sizeof(string), "Comenzile liderului\n\n/invite /uninvite /setrank /ranks\n/factionspawn /fchat /jobpermission");
				ShowPlayerDialog(playerid, 99, DIALOG_STYLE_MSGBOX, "Comenzile liderului",string, "Ok","");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti lider.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fchat", true) == 0)
	{
	    new fac = PlayerInfo[playerid][pFaction];
		if(fac != 0)
		{
		    if(PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2)
		    {
			    if(DynamicFactions[fac][fChatON] == 0)
			    {
					format(string, sizeof(string), " ** %s a dezactivat chat-ul factiunii **", GetPlayerNameEx(playerid));
					SendFactionMessage(fac, COLOR_LIGHTBLUE, string);
					DynamicFactions[fac][fChatON] = 1;
			    }
			    else
			    {
					format(string, sizeof(string), " ** %s a activat chat-ul factiunii **", GetPlayerNameEx(playerid));
					SendFactionMessage(fac, COLOR_LIGHTBLUE, string);
					DynamicFactions[fac][fChatON] = 0;
			    }
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
		}
		return 1;
	}
 	if(strcmp(cmd, "/factionspawn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] != 0 && PlayerInfo[playerid][pRank] == 1)
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				DynamicFactions[PlayerInfo[playerid][pFaction]][fX] = x;
				DynamicFactions[PlayerInfo[playerid][pFaction]][fY] = y;
				DynamicFactions[PlayerInfo[playerid][pFaction]][fZ] = z;
				SaveFactions(PlayerInfo[playerid][pFaction]);
				format(string, sizeof(string), "Ai setat ca spawnul factiunii: %d sa fie la aceasta pozitie.", PlayerInfo[playerid][pFaction]);
				SendClientMessage(playerid, COLOR_ADMINCMD, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ranks", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] != 0 && PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2)
			{
			 	new wstring[256];
			    format(wstring, sizeof(wstring), "[Idul Factiunii:%d] Numele factiunii: %s - Rank: %d - Tipuri: %d",PlayerInfo[playerid][pFaction], DynamicFactions[PlayerInfo[playerid][pFaction]][fName],DynamicFactions[PlayerInfo[playerid][pFaction]][fJoinRank],DynamicFactions[PlayerInfo[playerid][pFaction]][fType]);
			    SendClientMessage(playerid,COLOR_INFO, wstring);
			    format(wstring, sizeof(wstring), "Rankuri: %d | R1: %s | R2: %s | R3: %s | R4: %s",DynamicFactions[PlayerInfo[playerid][pFaction]][fRankAmount],DynamicFactions[PlayerInfo[playerid][pFaction]][fRank1],DynamicFactions[PlayerInfo[playerid][pFaction]][fRank2],DynamicFactions[PlayerInfo[playerid][pFaction]][fRank3],DynamicFactions[PlayerInfo[playerid][pFaction]][fRank4]);
			    SendClientMessage(playerid,COLOR_INFO, wstring);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/phonecmds", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid,COLOR_WHITE,"- Comenzile telefonului -");
			SendClientMessage(playerid, COLOR_GRAD2, "[Telefon] /call /pickup /hangup /sms /listnumber /calllist");
		}
		return 1;
	}
	if(strcmp(cmd, "/businesscmds", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
	    	SendClientMessage(playerid,COLOR_WHITE,"- Comenzile businessului -");
			SendClientMessage(playerid, COLOR_GRAD2, "[Business] /buybiz /sellbiz /bizinfo /bizfee /bizname");
			SendClientMessage(playerid, COLOR_GRAD2, "[Business] /bizdeposit /bizwithdraw /lock /hire /fire");
		}
		return 1;
	}
 	if(strcmp(cmd, "/ahousecmds", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdministrator] >= 3)
			{
		    	SendClientMessage(playerid,COLOR_WHITE,"- Comenzile Adminilor pentru case");
				SendClientMessage(playerid, COLOR_GRAD2, "[Casa] /ahouseentrance /ahouseexit /ahousedescription ");
				SendClientMessage(playerid, COLOR_GRAD2, "[Casa] /ahouseprice /ahousesell /ahouseint /agotohouse");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
			return 1;
		}
	}
	if(strcmp(cmd, "/apositioncmds", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdministrator] >= 1)
			{
		    	SendClientMessage(playerid,COLOR_WHITE,"- Comenzile Adminului -");
				SendClientMessage(playerid, COLOR_GRAD2, "/agotobuilding /agotohouse /agotobusiness");
				SendClientMessage(playerid, COLOR_GRAD2, "/agotodrivingtestpos /agotobank /agotoweaponlicpos");
				SendClientMessage(playerid, COLOR_GRAD2, " /agotogovdutypos");
				if (PlayerInfo[playerid][pAdministrator] >= 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "/adrivingtestpos /abankpos /aweaponlicensepos");
					SendClientMessage(playerid, COLOR_GRAD2, "/agovdutypos");
				}
   			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat!");
			}
			return 1;
		}
	}
	//==========================================================================
 	if(strcmp(cmd, "/testerduty", true) == 0)
	{
		if(PlayerInfo[playerid][pTester] >= 1)
		{
		    if(TesterDuty[playerid] == 1)
		    {
			    format(string, sizeof(string), "[TESTER] %s (ID:%d) este acum indisponibil ca tester.", GetPlayerNameEx(playerid),playerid);
				TesterMessage(COLOR_LIGHTGREEN,string);
				SetPlayerColor(playerid,COLOR_WHITE);
				TesterDuty[playerid] = 0;
		    }
		    else
		    {
		    	format(string, sizeof(string), "[TESTER] %s (ID:%d) este acum disponibil ca tester.", GetPlayerNameEx(playerid),playerid);
				TesterMessage(COLOR_LIGHTGREEN,string);
				TesterDuty[playerid] = 1;
				SetPlayerColor(playerid,COLOR_GREEN);
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/donatii", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_RED, "Donatiile se fac la Hidden / Andrew Anderson pe discord (Hidden#1858). Puteti dona 3-5-10 euro. Succes la RolePlay!");
	        }
			 return 1;
	}
    if(strcmp(cmd, "/testercmds", true) == 0)
	{
		if(PlayerInfo[playerid][pTester] >= 1)
		{
  			SendClientMessage(playerid,COLOR_GREEN,"Comenzile tester-ului");
  			SendClientMessage(playerid,COLOR_WHITE,"/mute /masked /akick");
  			SendClientMessage(playerid,COLOR_WHITE,"/freeze /unfreeze /kickrp");
   		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	if(strcmp(cmd, "/unbanip", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /unbanip [players ip]");
		        return 1;
   			}
			format(string,sizeof(string),"unbanip %s",tmp);
			SendRconCommand(string);
			SendRconCommand("reloadbans");
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmWrn: %s a debanat IP-ul %s", sendername,tmp);
			AdministratorMessage(COLOR_LIGHTRED,string,1);
			BanLog(string);
		}
		return 1;
	}
	if(strcmp(cmd, "/unban", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
		    tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /unban [players name]");
		        return 1;
   			}
			format( string, sizeof( string ), "UPDATE `Accounts` SET `Banned` = '0' WHERE `Username` = '%s'",tmp);
			mysql_query(string);

			format( string, sizeof( string ), "DELETE FROM `banlist` WHERE `UserName` ='%s'",tmp);
			mysql_query(string);

			if(CheckInput(tmp)) { SendClientMessage(playerid, COLOR_GREY, "Numele nu exista in baza de date!"); return 1; }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmWrn: %s a debanat contul %s", sendername,tmp);
			AdministratorMessage(COLOR_LIGHTRED,string,1);
		}
		return 1;
	}
	if(strcmp(cmd, "/phone", true) == 0)
	{
	 	if(IsPlayerConnected(playerid))
	 	{
			if(PlayerInfo[playerid][pPhoneNumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Tu nu ai un telefon.");
				return 1;
			}
			if(PhoneOnline[playerid])
			{
			    ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau -","Suna\nContacte\nAdauga Contact\nSterge Contact\nDeschide telefonul","Select","Cancel");
			} else {
	 	    	ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau-","Suna\nContacte\nAdauga Contact\nSterge Contact\nInchide Telefonul","Select","Cancel");
	 	    }
			PlayerActionMessage(playerid,15.0,"isi scoate telefonul.");
		}
		return 1;
	}
	if(strcmp(cmd, "/casino", true) == 0)
	{
	 	if(IsPlayerConnected(playerid))
	 	{
   			for(new i = 0; i < sizeof(Businesses); i++)
			{
				{
					if(GetPlayerVirtualWorld(playerid) == i)
					{
			    		if(Businesses[i][BizType] == 2)
			    		{
			    		    if(JustCasinoed[playerid] == 1)
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Asteapta 3 secunde pentru a folosi din nou comanda. ");
					            return 1;
					        }
			    			new x_info[128];
							x_info = strtok(cmdtext, idx);

							if(!strlen(x_info))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /casino [item]");
								SendClientMessage(playerid, COLOR_WHITE, "bet | pull | roll");
								return 1;
							}
				        	if(Businesses[i][Products] != 0)
				        	{
        						if(strcmp(x_info, "bet", true) == 0)
								{
									if(GetPlayerCash(playerid) >= 50)
									{
										SendClientMessage(playerid, COLOR_GREY, "Pariul inca nu este pus.");
										JustCasinoed[playerid] = 1;
										PlayerInfo[playerid][pTurn1] = 0;
										PlayerInfo[playerid][pTurn2] = 0;
										PlayerInfo[playerid][pTurn3] = 0;
										//GivePlayerCash(playerid,-50);
							            new x_nr[256];
							            x_nr = strtok(cmdtext, idx);
										if(!strlen(x_nr))
										{
           									SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /casino bet [RED - BLACK - PURPLE - WHITE - BLUE - YELLOW]");
									        return 1;
										}

										// MISSING -
										// Something so the player can choose how much he wants to bet, and then it will double his betting or something ( depends on the color he wins on )
										if(strcmp(x_nr, "red", true) == 0)
										{
											PlayerInfo[playerid][pCasino] = 1; // Red
											//Casinobetting(playerid);
										}
										else if(strcmp(x_nr, "black", true) == 0)
										{
											PlayerInfo[playerid][pCasino] = 2; // Black
											//Casinobetting(playerid);
										}
										else if(strcmp(x_nr, "purple", true) == 0)
										{
											PlayerInfo[playerid][pCasino] = 3; // Purple
											//Casinobetting(playerid);
										}
										else if(strcmp(x_nr, "white", true) == 0)
										{
											PlayerInfo[playerid][pCasino] = 4; // White
											//Casinobetting(playerid);
										}
										else if(strcmp(x_nr, "blue", true) == 0)
										{
											PlayerInfo[playerid][pCasino] = 5; // Blue
											//Casinobetting(playerid);
										}
										else if(strcmp(x_nr, "yellow", true) == 0)
										{
											PlayerInfo[playerid][pCasino] = 6; // Yellow
											//Casinobetting(playerid);
										}
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
									    return 1;
									}
								}
        						if(strcmp(x_info, "roll", true) == 0)
								{
									if(GetPlayerCash(playerid) >= 35)
									{
									    ApplyAnimation(playerid,"HEIST9", "Use_SwipeCard", 1, 0, 1, 1, 1, 1);
										JustCasinoed[playerid] = 1;
										PlayerInfo[playerid][pTurn1] = 0;
										PlayerInfo[playerid][pTurn2] = 0;
										PlayerInfo[playerid][pTurn3] = 0;
										GivePlayerCash(playerid,-35);
										SetTimerEx("CasinoReset", 5000, false, "i", playerid);
										SetTimerEx("CasinoRolling", 500, false, "i", playerid);
										GameTextForPlayer(playerid, "~g~Starting to roll~w~...", 2500, 3);
										SendClientMessage(playerid, COLOR_GREEN, ">> Ai castigat 35$!Bravo! <<");
										Businesses[GetPlayerVirtualWorld(playerid)][Till]+=35;
										Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
									    return 1;
									}
								}
        						if(strcmp(x_info, "pull", true) == 0)
								{
									if(GetPlayerCash(playerid) >= 15)
									{
										if(Businesses[15][Till] == 0)
										{
											SendClientMessage(playerid, COLOR_GRAD2, "Cazinoul este pe cale de a da faliment.");
											return 1;
										}
										if(Businesses[15][Till] < 0)
										{
											SendClientMessage(playerid, COLOR_GRAD2, " Cazinoul este pe cale de a da faliment.");
											return 1;
										}
										if(PlayerToPoint(50.0,playerid,1126.3527,3.0120,1000.6797) || PlayerToPoint(50.0, playerid,1135.0892,0.6112,1000.6797))
										{
											JustCasinoed[playerid] = 1;
											SetTimerEx("CasinoReset", 3000, false, "i", playerid);
											new prize;
											new symb1[32]; new symb2[32]; new symb3[32];
											new randcard1 = random(10);//minimum 1000  max 9999
											new randcard2 = random(10);//minimum 1000  max 9999
											new randcard3 = random(10);//minimum 1000  max 9999
											if(randcard1 >= 5)
											{
												format(symb1, sizeof(symb1), "~b~]");
												randcard1 = 1;
											}
											else if(randcard1 <= 4 && randcard1 >= 2)
											{
												format(symb1, sizeof(symb1), "~g~]");
												randcard1 = 2;
											}
											else if(randcard1 < 2)
											{
												format(symb1, sizeof(symb1), "~y~]");
												randcard1 = 3;
											}
											else if(randcard1 <= 8 && randcard1 <= 7)
											{
												format(symb1, sizeof(symb1), "~p~]");
												randcard1 = 4;
											}
											//
											//
											if(randcard2 >= 5)
											{
												format(symb2, sizeof(symb2), "~b~]");
												randcard2 = 1;
											}
											else if(randcard2 <= 4 && randcard2 <= 2)
											{
												format(symb2, sizeof(symb2), "~g~]");
												randcard2 = 2;
											}
											else if(randcard2 < 2)
											{
												format(symb2, sizeof(symb2), "~y~]");
												randcard2 = 3;
											}
											else if(randcard2 <= 8 && randcard2 <= 7)
											{
												format(symb2, sizeof(symb2), "~p~]");
												randcard2 = 4;
											}
											//
											//
											if(randcard3 >= 5)
											{
												format(symb3, sizeof(symb3), "~b~]");
												randcard3 = 1;
											}
											else if(randcard3 <= 4 && randcard3 >= 2)
											{
												format(symb3, sizeof(symb3), "~g~]");
												randcard3 = 2;
											}
											else if(randcard3 < 2)
											{
												format(symb3, sizeof(symb3), "~y~]");
												randcard3 = 3;
											}
											else if(randcard3 <= 8 && randcard3 <= 7)
											{
												format(symb3, sizeof(symb3), "~p~]");
												randcard3 = 4;
											}
											if(randcard1 == randcard2 && randcard1 == randcard3)
											{
												if(randcard1 > 6)
												{
													prize = 2000;
													Jackpot[playerid] = 1;
												}
												if(randcard1 > 5)
												{
													prize = 500;
												}
												if(randcard1 <= 4 && randcard1 >= 2)
												{
													prize = 250;
												}
												if(randcard1 < 2)
												{
													prize = 50;
												}
												GivePlayerCash(playerid,prize);
												if(Jackpot[playerid] == 1)
												{
													format(string, sizeof(string), "~l~JACKPOT~n~ %s %s %s ~n~~n~~w~~g~$%d",symb1,symb2,symb3, prize);
												}
												else
												{
												    format(string, sizeof(string), "%s %s %s ~n~~n~~w~~g~$%d",symb1,symb2,symb3, prize);
												}
												Businesses[GetPlayerVirtualWorld(playerid)][Till]-=prize;
												Jackpot[playerid] = 0;
											}
											else
											{
												format(string, sizeof(string), "%s %s %s ~n~~n~~w~~r~$0",symb1,symb2,symb3);
											}
											GameTextForPlayer(playerid, string, 2500, 3);
											GivePlayerCash(playerid,-15);
											Businesses[GetPlayerVirtualWorld(playerid)][Till]+=10;
											Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
										}
										else
										{
										    SendClientMessage(playerid, COLOR_GREY, "Nu esti in apropierea unui aparat de pacanele.");
										    return 1;
										}
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
									    return 1;
									}
								}
							}
							else
							{
								SendClientMessage(playerid, COLOR_GRAD2, "Afacerea nu mai are produse.");
								return 1;
							}
						}
					}
				}
			}
		}
		return 1;
	}
	if (!strcmp("/fish", cmd, true))
	{
        if(IsAtFishPlace(playerid))
		{
		    if(JustFished[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Asteapta 4 secunde pana a folosi din nou comanda");
	            return 1;
	        }
		    if(PlayerInfo[playerid][pFish] == 20)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Ai atins limita de pesti,dute si dai /sellfish.");
	            return 1;
	        }
		    JustFished[playerid] = 1;
			SetTimerEx("FishReset", 4000, false, "i", playerid);
		    new FishRand = random(9);
			if(FishRand == 0)
			{
				PlayerActionMessage(playerid,15.0,"arunca undita si prinde un somn.");
				PlayerInfo[playerid][pFish] += 1;
			}
			if(FishRand == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai prins nimic.");
				PlayerActionMessage(playerid,15.0,"arunca undita dar nu prinde nimic.");
			}
			if(FishRand == 2)
			{
				PlayerActionMessage(playerid,15.0,"arunca undita si prinde o sardina.");
				PlayerInfo[playerid][pFish] += 1;
			}
			if(FishRand == 3)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai prins nimic.");
				PlayerActionMessage(playerid,15.0,"arunca undita dar nu prinde nimic.");
			}
			if(FishRand == 4)
			{
				PlayerActionMessage(playerid,15.0,"arunca undita si prinde un somon.");
				PlayerInfo[playerid][pFish] += 1;
			}
			if(FishRand == 5)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai prins nimic.");
				PlayerActionMessage(playerid,15.0,"arunca undita dar nu prinde nimic.");
			}
			if(FishRand == 6)
			{
				PlayerActionMessage(playerid,15.0,"arunca undita si prinde un somn");
				PlayerInfo[playerid][pFish] += 1;
			}
			if(FishRand == 7)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai prins nimic.");
				PlayerActionMessage(playerid,15.0,"arunca undita dar nu prinde nimic.");
			}
			if(FishRand == 8)
			{
				PlayerActionMessage(playerid,15.0,"arunca undita si prinde un biban.");
				PlayerInfo[playerid][pFish] += 1;
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai articole sportive de pescuit.");
			return 1;
		}
	}


	if (!strcmp("/sellfish", cmd, true))
	{
        if(PlayerToPoint(45.0,playerid,2474.2239,-2707.7681,3.0000))
		{
		    if(PlayerInfo[playerid][pFish] <= 17)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai suficienti pesti.");
	            return 1;
	        }
		    if(PlayerInfo[playerid][pFish] == 0)
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai nici un peste.");
	            return 1;
	        }
			if(PlayerInfo[playerid][pFish] > 17)
			{
				new rand = random(50)+45;
				new str[256];//string
				format(str,sizeof(str),"Ai vandut pestii pentru %i$.",rand);
				SendClientMessage(playerid,COLOR_WHITE,str);//send the string
				GivePlayerCash(playerid,rand);
				PlayerInfo[playerid][pFish]=0;
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti in Ocean Docks.");
			return 1;
		}
	}
	   if(!strcmp(cmdtext, "/uniform", true))
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pFaction] == 1) // SASD
            {
                if(IsPlayerInRangeOfPoint(playerid, 30, 618.7573,-594.5638,17.2330))
                {
                    ShowPlayerDialog(playerid, 260, DIALOG_STYLE_LIST, "Alege-ti uniforma", "FBI Agent \nStandard DUTY I \nStandard DUTY II \nSupervisor \nSupervisor \nSWAT  \nHainele tale", "Accept", "Cancel");
                    return 1;
                }
            }
            else if(PlayerInfo[playerid][pFaction] == 2) // EMS
            {
                if(IsPlayerInRangeOfPoint(playerid, 30, 1508.8766,-1551.8931,1970.8159))
                {
                    ShowPlayerDialog(playerid, 262, DIALOG_STYLE_LIST, "Emergency Medical Services Equipment", "Uniforma 1(barbat)\nMedic Uniforma 2(barbat)\nUniforma 3(barbat)\nUniforma 4(barbat) \nUniforma pompieri 1 \nUniforma pompieri 2\nUniforma pompieri 3 \nUniforma Feminina 1\nHainele tale", "Accept", "Cancel");
                    return 1;
                }
            }
            else if(PlayerInfo[playerid][pFaction] == 3) // Sheriff
            {
                if(PlayerToPoint(10.0,playerid,PoliceDutyPosition[X],PoliceDutyPosition[Y],PoliceDutyPosition[Z]))
                {
                    ShowPlayerDialog(playerid, 259, DIALOG_STYLE_LIST, "Los Santos Police Department Equipment", "Uniforma 1 \nUniforma 2 \nUniforma 3 \nUniforma 4 \nUniforma 5 \nUniforma 6 \nUniforma Feminina \nHainele tale", "Accept", "Cancel");
                    return 1;
                }
            }
            else if(PlayerInfo[playerid][pFaction] == 5) // LSFD
            {
                if(IsPlayerInRangeOfPoint(playerid, 30, 1238.5509,-977.4852,1090.1556))
                {
                    ShowPlayerDialog(playerid, 267, DIALOG_STYLE_LIST, "Los Santos Fire Department Equipment", "Uniforma 1 \nUniforma 2 \nUniforma 3 \nUniforma HighCommand \nUniforma Feminina 1 \nUniforma Feminina 2 \nUniforma de Cadet\n Hainele tale", "Accept", "Cancel");
                    return 1;
                }
            }
        }
        return 1;
    }
    if(!strcmp(cmdtext, "/locker", true))
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pFaction] == 1) // 1
            {
                if(PlayerToPoint(250.0,playerid,618.7573,-594.5638,17.2330))
                {
                    ShowPlayerDialog(playerid, 184, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\nGogosi\nDa jos echipamentul", "Echipare", "Cancel");
                    return 1;
                }
            }
            else if(PlayerInfo[playerid][pFaction] == 2) // EMS
            {
                if(IsPlayerInRangeOfPoint(playerid, 30, 1508.8766,-1551.8931,1970.8159))
                {
                    ShowPlayerDialog(playerid, 113, DIALOG_STYLE_LIST, "Echipare", "Extinctor\nLopata", "Echipare", "Cancel");
                    return 1;
                }
            }
            else if(PlayerInfo[playerid][pFaction] == 3) // Sheriff
            {
                if (CopOnDuty[playerid] == 0)
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu esti disponibil [On-Duty].");
                    return 1;
                }
                if(PlayerToPoint(10.0,playerid,PoliceDutyPosition[X],PoliceDutyPosition[Y],PoliceDutyPosition[Z]))
                {
                    ShowPlayerDialog(playerid, 112, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\n\nDa jos echipamentul", "Echipare", "Cancel");
                    return 1;
                }
            }
            else if(PlayerInfo[playerid][pFaction] == 5) // LSFD
            {
                if(LsfdOnDuty[playerid] == 0)
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu esti on duty.");
                    return 1;
                }
                if(IsPlayerInRangeOfPoint(playerid, 30, 1238.5509,-977.4852,1090.1556))
                {
                    ShowPlayerDialog(playerid, 116, DIALOG_STYLE_LIST, "Echipare", "Lopata\nExtintor\nSpray Can\nDa jos echipamentul", "Echipare", "Cancel");
                    return 1;
                }
            }
            else if(PlayerInfo[playerid][pFaction] == 6) // GOV
            {
                if(CopOnDuty[playerid] == 0)
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu esti on duty.");
                    return 1;
                }
                if(IsPlayerInRangeOfPoint(playerid, 30, 358.9484,206.6314,1008.3828))
                {
                    ShowPlayerDialog(playerid, 117, DIALOG_STYLE_LIST, "Echipare", "Armura\nTomfa\nSpray cu piper\nColt-45\nDa jos echipamentul", "Echipare", "Cancel");
                    return 1;
                }
            }
        }
        return 1;
    }
    if(!strcmp(cmdtext, "/equipcutter", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 15) // 1
			{
		        if(IsPlayerInRangeOfPoint(playerid, 20, -556.9951,-183.3872,78.4063))
			    {
			    	ShowPlayerDialog(playerid, 115, DIALOG_STYLE_LIST, "Jobul de taietor de lemne - Echipare", "Ranga\nCasca\nVesta", "Echipare", "Cancel");
			    	return 1;
	        	}
			}
		}
		return 1;
	}
    if(!strcmp(cmdtext, "/newsduty", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJob] == 16) // 1
			{
		        if(IsPlayerInRangeOfPoint(playerid, 50, 1582.3197,-1719.7463,13.5546))
			    {
			    	PlayerActionMessage(playerid,15.0,"isi ia echipamentul din dulap.");
			    	SetPlayerAttachedObject(playerid, 1, 3026,1,-0.15,-0.04,-0.01,0.0,0.0,0.0,1.00,1.00,1.00);
			    	SendClientMessage(playerid,COLOR_WHITE,"Te-ai echipat cu tot ce este necesar , foloseste /startnews pentru a incepe treaba");
			    	return 1;
	        	}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/givehealthinsurance", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pFaction] == 2)
		    {
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /givehealthinsurance [playerid/partofname]");
					SendClientMessage(playerid, COLOR_GRAD2, "Oferi asigurare de viata unui pacient.");
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				    PlayerInfo[giveplayerid][pLifeLic] = 1;
				    new give1[128];
				    format(give1, sizeof(give1), "I-ai dat lui %s o asigurare medicala.", GetPlayerNameEx(giveplayerid));
				    SendClientMessage(playerid, COLOR_WHITE, give1);
				    format(give1, sizeof(give1), "%s ti-a dat o asigurare medicala.", GetPlayerNameEx(giveplayerid));
				    SendClientMessage(giveplayerid, COLOR_WHITE, give1);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nu esti medic!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/giveweaponlicense", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pAdministrator] > 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /giveweaponlicense [playerid/partofname]");
					return 1;
				}
		        giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
						new wep1[128];
						PlayerInfo[giveplayerid][pWepLic] = 1;
						format(wep1, sizeof(wep1),"%s ti-a oferit licenta de port-arma",GetPlayerNameEx(giveplayerid));
						PlayerActionMessage(playerid,15.0,wep1);
						new give1[128];
						format(give1, sizeof(give1), "I-ai dat lui %s licenta de port-arma.", GetPlayerNameEx(giveplayerid));
						SendClientMessage(playerid, COLOR_WHITE, give1);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nu esti in LSPD sau nu ai rank 1.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "{AFAFAF}SYNTAX{FFFFFF}: /aban [playerid/PartOfName][motiv]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(PlayerInfo[giveplayerid][pAdministrator]>=1)
			{
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
                        result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_LIGHTRED, "{AFAFAF}SYNTAX{FFFFFF}: /aban [playerid/PartOfName] [reason]");
							return 1;
						}
						if(PlayerInfo[giveplayerid][pAdministrator] >= 1)
						{
							return 1;
						}
					    new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "[BAN] %s a fost banat de catre administratorul %s, Motiv: %s [%d/%d/%d]", giveplayer, sendername, (result), day, month, year);
						BanLog(string);
						format(string, sizeof(string), "AdmCmd: %s a fost banat de catre administratorul %s, Motiv: %s (%d/%d/%d)", giveplayer, sendername, (result), day, month, year);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pAdministrator] = 0;
						PlayerInfo[giveplayerid][pTester] = 0;
						new CQuery[1024];
						format(CQuery, sizeof(CQuery),"INSERT INTO `banlist`(`UserName`, `Data`, `Admin`, `Motiv`) VALUES ('%s','%d/%d/%d','%s','%s')",giveplayer,day,month,year,sendername,(result));
						mysql_query(CQuery);
						format(CQuery, sizeof(CQuery),"INSERT INTO `AdminRecord`(`NumeleTau`, `NumeAdmin`, `Motiv`, `Type`, `Timp`, `Data`) VALUES ('%s', '%s', '%s', 'Ban', 'Permanent', '%d/%d/%d' )",giveplayer,sendername,(result),day, month, year);
						mysql_query(CQuery);
						PlayerInfo[giveplayerid][pBan] = 1;
						SetTimerEx("BanPublic", 50, false, "d", giveplayerid);
						BanEx(giveplayerid, "[BAN] Ai fost banat de catre un administrator");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/oocstatus", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
			    if(OOCStatus)
			    {
			        OOCStatus = 0;
			        format(string, sizeof(string), "Canalul Global a fost dezactivat de catre %s", GetPlayerNameEx(playerid));
					SendClientMessageToAll(COLOR_GREY, string);
				}
				else
				{
					OOCStatus = 1;
					format(string, sizeof(string), "Canalul Global a fost activat de catre %s", GetPlayerNameEx(playerid));
					SendClientMessageToAll(COLOR_GREY, string);
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/bstatus", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
			    if(BStatus == 1)
			    {
			        BStatus = 0;
			        format(string, sizeof(string), "   Canalul local OOC (/b) a fost activat de catre administratorul %s", GetPlayerNameEx(playerid));
					SendClientMessageToAll(COLOR_GREY, string);
				}
				else
				{
					BStatus = 1;
					format(string, sizeof(string), "   Canalul local OOC (/b) a fost dezactivat de catre administratorul %s", GetPlayerNameEx(playerid));
					SendClientMessageToAll(COLOR_GREY, string);
				}
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/mute", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /muted [Id/ParteDinNume] [time(minutes)] [motiv]");
                return 1;
            }
            new playa;
            new time;
            playa = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
            time = strval(tmp);
            if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pTester] == 1)
            {
       		if(IsPlayerConnected(playa))
                {
                    if(playa != INVALID_PLAYER_ID)
                    {
                        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        new length = strlen(cmdtext);
                        while ((idx < length) && (cmdtext[idx] <= ' '))
                        {
                            idx++;
                        }
                        new offset = idx;
                        new result[64];
                        while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
                        {
                            result[idx - offset] = cmdtext[idx];
                            idx++;
                        }
   			            result[idx - offset] = EOS;
                        if(!strlen(result))
                        {
                            SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /muted [Id/ParteDinNume] [timp] [motiv]");
                            return 1;
                        }
                        if(Muted[playa] == 0)
						{
                            Muted[playa] = 1;
                            printf("AdmCmd: %s i-a dat mute lui %s pentru %d minute",sendername,  giveplayer ,time);
							SetTimerEx("MutePublic", 1000*60*time, false, "d", playa);
                            format(string, sizeof(string), "AdmCmd: %s a primit mute de la %s pentru %d minute. Motiv: %s",giveplayer,sendername ,time,(result));
                            SendClientMessageToAll(COLOR_LIGHTRED,string);
                        }
                        else
                        {
                            Muted[playa] = 0;
                            printf("[Server]: %s a primit unmute de la %s",giveplayer,  sendername);
                            format(string, sizeof(string), "AdmCmd: %s a primit un-mute de la %s",giveplayer ,sendername);
                            SendClientMessageToAll(COLOR_LIGHTRED,string);
                        }
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD1, "   Nu esti autorizat sa folosesti aceasta comanda.");
            }
        }
        return 1;
    }
	if(strcmp(cmd, "/mutedbug", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /mute [playerid/partofname]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pTester] == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(Muted[playa] == 0)
						{
							Muted[playa] = 1;
							format(string, sizeof(string), "Ai primit mute de la %s",sendername);
							SendClientMessage(playa,COLOR_WHITE,string);
							format(string, sizeof(string), "AdmCmd: %s a primit mute de la %s.", giveplayer, sendername);
							SendClientMessageToAll(COLOR_LIGHTRED,string);
						}
						else
						{
							Muted[playa] = 0;
							format(string, sizeof(string), "Ai primit Un-Mute de la %s",sendername);
							SendClientMessage(playa,COLOR_WHITE,string);
							format(string, sizeof(string), "AdmCmd: %s a primit un-mute de la %s.",giveplayer, sendername);
							SendClientMessageToAll(COLOR_LIGHTRED,string);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotopc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2150.7021,-89.5997,2.7243);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new Hour, Minute, Second;
					gettime(Hour, Minute, Second);
					new year, month,day;
					getdate(year, month, day);
					new CQuery[1024];
					format(CQuery, sizeof(CQuery),"INSERT INTO `adminlog`(`Admin`, `Actiune`, `Data`, `Ora`) VALUES ('%s', 'S-a teleportat la locatia PC', '%d/%d/%d', '%02d:%02d:%02d')", sendername, day, month, year, Hour, Minute, Second);
					mysql_query(CQuery);
				}
				else
				{
					SetPlayerPos(playerid, 2150.7021,-89.5997,2.7243);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new Hour, Minute, Second;
					gettime(Hour, Minute, Second);
					new year, month,day;
					getdate(year, month, day);
					new CQuery[1024];
					format(CQuery, sizeof(CQuery),"INSERT INTO `adminlog`(`Admin`, `Actiune`, `Data`, `Ora`) VALUES ('%s', 'S-a teleportat la locatia PC', '%d/%d/%d', '%02d:%02d:%02d')", sendername, day, month, year, Hour, Minute, Second);
					mysql_query(CQuery);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoadmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 3322.5542,966.5527,7.2378);
				}
				else
				{
					SetPlayerPos(playerid, 3322.5542,966.5527,7.2378);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/gotoprimarie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1478.4491,-1755.1925,13.5469);
				}
				else
				{
					SetPlayerPos(playerid, 1478.4491,-1755.1925,13.5469);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/gotobinco", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2245.2004,-1663.1329,15.4766);
				}
				else
				{
					SetPlayerPos(playerid, 2245.2004,-1663.1329,15.4766);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/gototruck", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -76.0788,-1129.3167,1.0781);
				}
				else
				{
					SetPlayerPos(playerid, -76.0788,-1129.3167,1.0781);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/gotosweep", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2298.5493,-2321.0227,13.3772);
				}
				else
				{
					SetPlayerPos(playerid, 2298.5493,-2321.0227,13.3772);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/gotopeco", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1948.6548,-1760.0782,13.5469);
				}
				else
				{
					SetPlayerPos(playerid, 1948.6548,-1760.0782,13.5469);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/pdup", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20, 2268.0955,2448.6697,3.5313))
				{
					SetPlayerPos(playerid, 1565.1647,-1666.8219,28.3956);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/emsup", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 2)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20, -204.3994,-1762.7860,675.7687))
				{
					SetPlayerPos(playerid, 1161.5634,-1328.8040,31.4972);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/pddown", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20, 1565.1647,-1666.8219,28.3956))
				{
					SetPlayerPos(playerid, 2268.0955,2448.6697,3.5313);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/emsdown", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 2)
			{
				if(IsPlayerInRangeOfPoint(playerid, 20, 1161.5634,-1328.8040,31.4972))
				{
					SetPlayerPos(playerid, -204.3994,-1762.7860,675.7687);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/gotodealer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 942.1686,-1387.5862,13.3960);
				}
				else
				{
					SetPlayerPos(playerid, 942.1686,-1387.5862,13.3960);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotols", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				}
				else
				{
					SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/gotolv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				}
				else
				{
					SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotosf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
				}
				else
				{
					SetPlayerPos(playerid, -1417.0,-295.8,14.1);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoprison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1764.5026,-1540.3701,9.3618);
				}
				else
				{
					SetPlayerPos(playerid, 1764.5026,-1540.3701,9.3618);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoidlewood", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2075.1555,-1718.9161,13.5469);
				}
				else
				{
					SetPlayerPos(playerid, 2075.1555,-1718.9161,13.5469);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotonews", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 629.1645,-1458.4966,14.2591);
				}
				else
				{
					SetPlayerPos(playerid, 629.1645,-1458.4966,14.2591);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotodill", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 687.2424,-507.5392,16.3359);
				}
				else
				{
					SetPlayerPos(playerid, 687.2424,-507.5392,16.3359);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotohospital", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1173.5459,-1323.8522,15.1953);
				}
				else
				{
					SetPlayerPos(playerid, 1173.5459,-1323.8522,15.1953);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotolsas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2473.3774,-1550.7030,24.0049);
				}
				else
				{
					SetPlayerPos(playerid, 2473.3774,-1550.7030,24.0049);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoinsula", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 774.3367,-2835.7698,4.2292);
				}
				else
				{
					SetPlayerPos(playerid, 774.3367,-2835.7698,4.2292);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/sang", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 4)
			{
			    if(sanroof == 0)
			    {
       				MoveObject(sanroof2, 1546.2685546875, -1365.2958984375, 320.2109375, 2.00);
	             	SendClientMessage(playerid, COLOR_LSPD, "Poarta SAN-ului este deschisa.");
	             	sanroof = 1;
       			}
       			else
       			{
       			    MoveObject(sanroof2, 1546.2689208984, -1365.2965087891, 325.2109375, 2.00);
	             	SendClientMessage(playerid, COLOR_LSPD, "Poarta SAN-ului este inchisa.");
	             	sanroof = 0;
				}
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/opengate", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
				if(PlayerToPoint(10, playerid,1548.7083,-1627.3934,13.3828) || PlayerToPoint(10, playerid,1538.0371,-1627.1071,13.3828)) // PD front gate barrier /pd
				{
		          	MoveObject(gate, 1544.746704, -1630.777222, 13.160947,0.8, 0.0000, 359.1406, 270.0000);
	           		SetTimer("GateClose", 8000, 0);
				}
			}
			return 1;
		}
	}
	if(strcmp(cmd, "/pdoor", true) == 0 || strcmp(cmd, "/pddoor", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 1)
			{
	            MoveObject(pdmain, 239.59156799316, 118.50074005127, 1006.3226318359, 2.0);
	            SendClientMessage(playerid, COLOR_LSPD, "Usile au fost deschise timp de 7 secunde.");
	            SetTimer("PdClose", 7000, 0);
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/sgate", true) == 0)
	{
   	if(PlayerInfo[playerid][pFaction] == 1)
    {
   		MoveObject(pdjail,259.159362,92.283248,1006.938049,2.00);
		SendClientMessage(playerid,COLOR_LSPD, "Ai deschis toate celulile inchisorii.");
         }
         else
         {
            SendClientMessage(playerid, COLOR_GRAD1, "Factiune invalida.");
         }
	return 1;
	}
	if(strcmp(cmd, "/cgate", true) == 0)
	{
   	if(PlayerInfo[playerid][pFaction] == 1)
    {
   		MoveObject(pdjail,259.159362,92.283248,1002.445312,2.00);
		SendClientMessage(playerid,COLOR_LSPD, "Ai inchis toate celulele inchisorii.");
         }
         else
         {
            SendClientMessage(playerid, COLOR_GRAD1, "Factiune invalida");
         }
	return 1;
	}
    if(!strcmp(cmdtext, "/sup", true))
 	{
		if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		            if(PlayerToPoint(5.0,playerid,242.7591,66.4315,1003.6406))
		            {
		            	SetPlayerPos(playerid, 619.0756,-566.6477,26.1432);
		            	GameTextForPlayer(playerid, "~b~Acoperisul 1",5000,1);
				        SetPlayerInterior(playerid,0);
			         	SetPlayerVirtualWorld(playerid,0);
					}
		        }
		    }
		return 1;
 	}
    if(!strcmp(cmdtext, "/sdown", true))
 	{
		if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		            if(PlayerToPoint(5.0,playerid,619.0756,-566.6477,26.1432))
		            {
		            	SetPlayerPos(playerid, 242.7591,66.4315,1003.6406);
		            	GameTextForPlayer(playerid, "~b~Sheriff Department",5000,1);
				        SetPlayerInterior(playerid,6);
			         	SetPlayerVirtualWorld(playerid,2);
					}
		        }
		    }
		return 1;
 	}
	if(strcmp(cmd, "/tod", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /tod [ora] (0-23)");
				return 1;
			}
			new hour;
			hour = strval(tmp);
			if (PlayerInfo[playerid][pAdministrator] >= 3)
			{
	            SetWorldTime(hour);
	            GetPlayerName(playerid, sendername, sizeof(sendername));
	            new Hour, Minute, Second;
	            gettime(Hour, Minute, Second);
	            new year, month,day;
	            getdate(year, month, day);
	            new CQuery[1024];
	            format(CQuery, sizeof(CQuery),"INSERT INTO `adminlog`(`Admin`, `Actiune`, `Data`, `Ora`) VALUES ('%s', 'A setat TOD la %d', '%d/%d/%d', '%02d:%02d:%02d')", sendername, hour, day, month, year, Hour, Minute, Second);
	            mysql_query(CQuery);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/setvw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /setvw [playerid/partofname] [virworldid]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			new virid;
			tmp = strtok(cmdtext, idx);
			virid = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			    		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerVirtualWorld(playa, virid);
						format(string, sizeof(string), "I-ai setat lui %s virtual world-ul %d", giveplayer, virid);
						SendClientMessage(playerid, COLOR_ADMINCMD, string);
						format(string, sizeof(string), "%s ti-a setat virtual world-ul %d", sendername, virid);
						SendClientMessage(playa, COLOR_WHITE, string);
						new Hour, Minute, Second;
                        gettime(Hour, Minute, Second);
                        new year, month,day;
						getdate(year, month, day);
						new CQuery[1024];
						format(CQuery, sizeof(CQuery),"INSERT INTO `adminlog`(`Admin`, `Actiune`, `Data`, `Ora`) VALUES ('%s', 'I-a setat VW-ul lui %s la %d', '%d/%d/%d', '%02d:%02d:%02d')", sendername, giveplayer, virid, day, month, year, Hour, Minute, Second);
						mysql_query(CQuery);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, " Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ahide", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
		{
	        if(Hide[playerid] == 0)
			{
	            SendClientMessage(playerid,COLOR_ADMINCMD,"Acum esti ascuns din lista administratorilor.");
	            Hide[playerid] = 1;
	        }
	        else
			{
	            SendClientMessage(playerid,COLOR_ADMINCMD,"Acum esti vizibil in lista administratorilor.");
	            Hide[playerid] = 0;
	        }
	    }
	    return 1;
	}
 	if (strcmp(cmd, "/mutes", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
	            return 1;
	        }
			SendClientMessage(playerid, COLOR_GREEN, "Playeri care au mute:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(Muted[i] == 1)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, sizeof(string), "* (ID:%d) %s", i, sendername);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "_______________________");
		}
		return 1;
	}
 	if (strcmp(cmd, "/masked", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pTester] == 1)
	        {
				SendClientMessage(playerid, COLOR_GREEN, "Playeri mascati:");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(PlayerInfo[i][pMaskuse] == 1)
						{
							GetPlayerName(i, sendername, sizeof(sendername));
							format(string, sizeof(string), "(ID:%d) %s (Masca: Masca_%d)", i, sendername, PlayerInfo[i][pMaskID]);
							SendClientMessage(playerid, COLOR_GRAD2, string);
						}
					}
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda");
		}
		return 1;
	}
	// D??bnere ----------------------------------------------------------------------------------------------------- //
    if(!strcmp(cmdtext, "/tuningopen", true)) // by Ellis
    {
    if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pAdministrator] == 4)
    {
        if (PlayerToPoint(30, playerid,1042.2530,-1026.0344,32.1016))
		{
      		MoveObject(tugate, 1049.2530,-1026.0344,31.1016, 3.5000);
      		SendClientMessage(playerid, COLOR_LSPD,"Poarta a fost deschisa.");
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Esti prea departe de poarta."); }
	}
    else return SendClientMessage(playerid, COLOR_GREY,"Nu poti deschide de la distanta poarta.");
    return 1;
    }
    if(!strcmp(cmdtext, "/tuningclose", true)) // by Ellis
    {
    if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pAdministrator] == 4)
    {
        if (PlayerToPoint(30, playerid,1042.2530,-1026.0344,32.1016))
		{
      		MoveObject(tugate, 1042.2530,-1026.0344,32.1016, 3.5000);
      		SendClientMessage(playerid, COLOR_LSPD,"Poarta a fost inchisa");
		}
		else { SendClientMessage(playerid, COLOR_GREY,"Esti prea departe!"); }
	}
	    else return SendClientMessage(playerid, COLOR_GREY,"Nu poti inchide de la distanta poarta.");
    return 1;
    }
    if (strcmp(cmdtext, "/pd", true)==0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 3)
			{
               DestroyObject(gate);
               gate = CreateObject(968, 1544.746704, -1630.777222, 13.160947, 0.0000, 359.1406, 270.0000);
               SendClientMessage(playerid, COLOR_LSPD, "Bariera este deschisa. Ai 5 secunde sa intri");
               SetTimer("GateClose", 5000, 0);
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
 			}
			return 1;
		}
	}
    if (strcmp(cmdtext, "/gatels", true)==0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(IsPlayerConnected(playerid))
			{
               DestroyObject(taxibarrier);
			   taxibarrier = CreateObject(968, 1951.68677, -1866.44617, 13.39740,   2.00000, 2.00000, 88.00000);
               SendClientMessage(playerid, COLOR_GREEN, "Bariera este deschisa. Ai 5 secunde sa intri");
               SetTimer("GateClose", 5000, 0);
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/clearwanted", true) == 0 || strcmp(cmd, "/clearrecord", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /clearrecord [playerid/partofname]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						ClearCrime(playa);
						format(string, sizeof(string), "Nu mai esti cautat de politie datorita lui %s.",GetPlayerNameEx(playerid));
						SendClientMessage(playa,COLOR_LSPD,string);
						format(string, sizeof(string), "I-ai sters cazierul lui %s.",GetPlayerNameEx(playa));
						SendClientMessage(playerid,COLOR_WHITE,string);
						format(string, sizeof(string), "Nu");
						strmid(PlayerInfo[playa][pWanted], string, 0, strlen(string), 255);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nu esti politist!");
			}
		}
		return 1;
	}
	// D??bnere lukker her- --------------------------------------------------------------------------------------------------------
	if(strcmp(cmd, "/freeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /freeze [playerid/partofname]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pTester] == 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			        	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 0);
						format(string, sizeof(string), "AdmCmd: %s a fost blocat de catre %s.",giveplayer, sendername);
						ProxDetector(20.0, playa, string,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
						format(string, sizeof(string), "L-ai blocat pe %s.",giveplayer);
						SendClientMessage(playerid,COLOR_WHITE,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unfreeze", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /unfreeze [playerid/partofname]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pTester] == 1 || PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TogglePlayerControllable(playa, 1);
						format(string, sizeof(string), "AdmCmd: %s a fost deblocat de catre %s.",giveplayer, sendername);
						ProxDetector(20.0, playa, string,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
						format(string, sizeof(string), "L-ai deblocat pe %s",giveplayer);
						SendClientMessage(playerid,COLOR_WHITE,string);
						Wounded[playa] = 0;
						PlayerInfo[playa][pDeath] = 0;
						Delete3DTextLabel(DamageShot[playa]);
				}
			}
        }
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/skydive", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
			    new Float:rx, Float:ry, Float:rz;
				GetPlayerPos(playerid, rx, ry, rz);
				if(IsPlayerConnected(playerid))
				{
				    PlayerInfo[playerid][pParachute] = 1;
					SafeGivePlayerWeapon(playerid, 46, 0);
					SetPlayerPos(playerid,rx, ry, rz+1500);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fourdive", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /fourdive [playerid1] [playerid2] [playerid3] [playerid4]");
				return 1;
			}
			new para1;
			new para2;
			new para3;
			new para4;
			para1 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para2 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para3 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			para4 = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
			    PlayerInfo[para1][pParachute] = 1;
			    PlayerInfo[para2][pParachute] = 1;
			    PlayerInfo[para3][pParachute] = 1;
			    PlayerInfo[para4][pParachute] = 1;
				if(IsPlayerConnected(para1)){ SafeGivePlayerWeapon(para1, 46, 0); SetPlayerPos(para1,1536.0, -1360.0, 1350.0);SetPlayerInterior(para1,0);SendClientMessage(para1, COLOR_LIGHTGREEN, "GO! GO! GO!");}
				if((IsPlayerConnected(para2)) && (para2>0)) { SafeGivePlayerWeapon(para2, 46, 0); SetPlayerPos(para2,1536.0, -1345.0, 1350.0);SetPlayerInterior(para2,0);SendClientMessage(para2, COLOR_LIGHTGREEN, "GO! GO! GO!");}
				if((IsPlayerConnected(para3)) && (para3>0)) { SafeGivePlayerWeapon(para3, 46, 0); SetPlayerPos(para3,1552.0, -1345.0, 1350.0);SetPlayerInterior(para3,0);SendClientMessage(para3, COLOR_LIGHTGREEN, "GO! GO! GO!");}
				if((IsPlayerConnected(para4)) && (para4>0)) { SafeGivePlayerWeapon(para4, 46, 0); SetPlayerPos(para4,1552.0, -1360.0, 1350.0);SetPlayerInterior(para4,0);SendClientMessage(para4, COLOR_LIGHTGREEN, "GO! GO! GO!");}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fixcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new tmpcar = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
				    new year, month,day;
					getdate(year, month, day);
				    format(string, sizeof(string), "Administratorul %s a reparat o masina!(/fixcar) (%d/%d/%d)", sendername, day, month, year);
	   				RepairVehicle(tmpcar);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rtc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
		 		new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+1);
				new tmpcar = GetPlayerVehicleID(playerid);
	        	RemovePlayerFromVehicle(playerid);
				TogglePlayerControllable(playerid, 1);
				SetVehicleToRespawn(tmpcar);
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/destroycar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
   				SetVehicleHealth(GetPlayerVehicleID(playerid), 0);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/killcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] < 2)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!!");
			    return 1;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
    			if(VehicleInfo[GetPlayerVehicleID(playerid)][vNeon] != 0) { DestroyObject(VehicleInfo[GetPlayerVehicleID(playerid)][vNeon2]); DestroyObject(VehicleInfo[GetPlayerVehicleID(playerid)][vNeon]); VehicleInfo[GetPlayerVehicleID(playerid)][vNeon2] = 0; VehicleInfo[GetPlayerVehicleID(playerid)][vNeon] = 0; }
                DestroyVehicle(GetPlayerVehicleID(playerid));
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/spec", true) == 0)
 	{
 	    if(IsPlayerConnected(playerid))
	    {
	  		if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
				tmp = adminspec_strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /spec [playerid]");
					return 1;
				}
				specplayerid = strval(tmp);
				new Pname[24];
				GetPlayerName(specplayerid, Pname, 24);
				if(!strcmp(Pname, "Beltramo_Cusimano", true)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are unable to spec this player");
				if(!IsPlayerConnected(specplayerid))
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
					return 1;
				}
				if(!IsPlayerInAnyVehicle(specplayerid))
				{
				    GetPlayerPos(playerid, SpecDest[playerid][0],SpecDest[playerid][1],SpecDest[playerid][2]);
					TogglePlayerSpectating(playerid, 1);
					PlayerSpectatePlayer(playerid, specplayerid);
					SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
					SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(specplayerid));
					gSpectateID[playerid] = specplayerid;
					gSpectateType[playerid] = ADMIN_SPEC_TYPE_VEHICLE;
					Spectating[playerid] = 1;
				}
				else
				{
				    new Float:slx, Float:sly, Float:slz,Float:health,Float:armor;
				    GetPlayerPos(playerid, slx,sly,slz);
					SpecDest[playerid][0] = slx;
					SpecDest[playerid][1] = sly;
					SpecDest[playerid][2] = slz;
					TogglePlayerSpectating(playerid, 1);
					new VID = GetPlayerVehicleID(specplayerid);
					PlayerSpectateVehicle(playerid,VID);
					SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
					SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(specplayerid));
					gSpectateID[playerid] = specplayerid;
					gSpectateType[playerid] = ADMIN_SPEC_TYPE_PLAYER;
					GetPlayerHealth(specplayerid, health);
					new name[MAX_PLAYER_NAME];
					GetPlayerName(specplayerid, name, sizeof(name));
					GetPlayerArmour(specplayerid, armor);
					new cash =  GetPlayerCash(specplayerid);
					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~y~(ID:%d)~n~~y~HP:%.1f - ~g~$%d",specplayerid,health,cash);
					GameTextForPlayer(playerid, string, 2500, 3);
					Spectating[playerid] = 1;
					return 1;
				}
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/specoff", true) == 0)
 	{
		if(!PlayerInfo[playerid][pDeveloper])
		{
			if(PlayerInfo[playerid][pAdministrator] == 0)
			{
				return 1;
			}
		}
 	    if(IsPlayerConnected(playerid))
	    {
			TogglePlayerSpectating(playerid, 0);
			SetCameraBehindPlayer( playerid );
			gSpectateID[playerid] = INVALID_PLAYER_ID;
			gSpectateType[playerid] = ADMIN_SPEC_TYPE_NONE;
			Spectating[playerid] = 0;
		    if(AdminDuty[playerid] == 1)
		    {
		    	SetPlayerColor(playerid,COLOR_ORANGE);
				SetPlayerHealth(playerid,100);
				PlayerInfo[playerid][pGotArmour] = 1;
			}
			else
			{
				SetPlayerArmour(playerid,100);
				SetPlayerColor(playerid,COLOR_WHITE);
				PlayerInfo[playerid][pGotArmour] = 0;
			}
			if(TesterDuty[playerid] == 1)
			{
			    SetPlayerColor(playerid,COLOR_GREEN);
			}
			else
			{
			    SetPlayerColor(playerid,COLOR_WHITE);
			}
			SetPlayerPos(playerid,SpecDest[playerid][0],SpecDest[playerid][1],SpecDest[playerid][2]);
		}
		return 1;
	}
	if(strcmp(cmd, "/weatherall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] < 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Nu esti autorizat sa folosesti comanda!");
			    return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /weatherall [weatherid]");
			    return 1;
			}
			new weather;
			weather = strval(tmp);
			if(weather < 0||weather > 45)
			{
				SendClientMessage(playerid, COLOR_GREY, "Poti schimba vremea de la 1 la 45!");
				return 1;
			}
			SetWeather(weather);
			GetPlayerName(playerid, sendername, sizeof(sendername));
       		format(string, sizeof(string), "AdmCmd: %s a schimbat vremea la %d.", GetPlayerNameEx(playerid),weather);
			AdministratorMessage(COLOR_YELLOW,string,1);
			Weather = weather;
		}
		return 1;
	}
	if(strcmp(cmd, "/kick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /akick [playerid/PartOfName] [Motiv]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(PlayerInfo[giveplayerid][pAdministrator]>=69)
			{
				return 1;
			}
			if (PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1 || PlayerInfo[playerid][pTester] == 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /kick [playerid/PartOfName] [reason]");
							return 1;
						}
				    	new year, month,day;
						getdate(year, month, day);
						format(string, sizeof(string), "AdmCmd: %s a primit kick de la %s, Motiv: %s [%d/%d/%d]", giveplayer, sendername, (result), day, month, year);
						KickLog(string);
						format(string, sizeof(string), "AdmCmd: %s a primit kick de la %s, Motiv: %s (%d/%d/%d)", giveplayer, sendername, (result), day, month, year);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						TogglePlayerControllable(giveplayerid, 0);
						SavePlayerAccount(giveplayerid);
						new CQuery[1024];
						format(CQuery, sizeof(CQuery),"INSERT INTO `AdminRecord`(`NumeleTau`, `NumeAdmin`, `Motiv`, `Type`, `Timp`, `Data`) VALUES ('%s', '%s', '%s', 'Kick', 'N/A', '%d/%d/%d' )",giveplayer,sendername,(result),day, month, year);
						mysql_query(CQuery);
						SetTimerEx("KickPublic", 50, false, "d", giveplayerid);
						return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/kickrp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			giveplayerid = ReturnUser(tmp);
			if(PlayerInfo[giveplayerid][pAdministrator]>=69)
			{
				return 1;
			}
			if(PlayerInfo[playerid][pTester] == 1 || PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
				    	new year, month,day;
						getdate(year, month, day);
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "AdmCmd: %s a primit kick de la %s, Motiv: Nume NON-RP (%d-%d-%d)", giveplayer,sendername,month,day,year);
      					KickLog(string);
						format(string, sizeof(string), "AdmCmd: %s a primit kick de la %s, Motiv: Nume NON-RP", giveplayer,sendername);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						format(string, sizeof(string), "Ai primit kick deoarece numele pe care l-ai folosit tu este unul NON-ROLEPLAY!");
						SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
						format(string, sizeof(string), "Schimba-ti numele si revino pe server! Un exemplu de nume: John_Williams");
						SendClientMessage(giveplayerid,COLOR_LIGHTRED,string);
						Kick(giveplayerid);
						return 1;
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d nu este activ.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/serverinfo", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			new form[128];
			SendClientMessage(playerid,COLOR_GREEN,"Statistici");
			format(form, sizeof form, "Obiecte: %d", GetObjectCount());
			SendClientMessage(playerid, COLOR_WHITE,form);
			format(form, sizeof form, "Vehicule: %d", GetVehicleCount());
			SendClientMessage(playerid, COLOR_WHITE,form);
			format(form, sizeof form, "Pickup-uri: %d", CountStreamPickups());
			SendClientMessage(playerid, COLOR_WHITE,form);
			format(form, sizeof form, "Checkpointuri: %d", CountDynamicCPs());
			SendClientMessage(playerid, COLOR_WHITE,form);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
 	if(strcmp(cmd, "/check", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /check [playerid/partofname]");
					return 1;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						ShowAStats(playerid,giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aunjail", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /aunjail [playerid/partofname]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			    	if(PlayerInfo[giveplayerid][pJailed] == 4)
			    	{
			    	    new year, month,day;
						getdate(year, month, day);
			        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "AdmCmd: %s a fost eliberat din admin-jail de catre %s.", giveplayer, sendername);
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						format(string, sizeof(string), "[A-UNJAIL] %s a fost scos din AdminJail de catre %s [%d/%d/%d]", giveplayer, sendername, day, month, year);
						AjailLog(string);
						SetPlayerVirtualWorld(giveplayerid,0);
						SetPlayerInterior(giveplayerid,0);
						SetPlayerPos(giveplayerid, 1541.2084,-1676.0785,13.5521);
						PlayerInfo[giveplayerid][pJailTime] = 0;
						PlayerInfo[giveplayerid][pJailed] = 0;
						// Put it into the playerprofile ajail log shit
					}
				}
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/aunprison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /aunprison [playerid/partofname]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pJailed] == 2)
			        {
			        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "You set %s free from prison.", giveplayer);
						SendClientMessage(playerid, COLOR_ADMINCMD, string);
						format(string, sizeof(string), "Ai fost eliberat din jail de catre %s.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						SetPlayerVirtualWorld(giveplayerid,0);
						SetPlayerInterior(giveplayerid,0);
						SetPlayerPos(giveplayerid, 1799.1274,-1578.3066,14.0801);
						PlayerInfo[giveplayerid][pJailTime] = 0;
						PlayerInfo[giveplayerid][pJailed] = 0;
					}
				}
			}
	    }
	    return 1;
	}
	if (strcmp(cmd, "/fon", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFaction] == 255)
	        {
	            SendClientMessage(playerid, COLOR_GREY, " Nu faci parte din nici o factiune.");
	            return 1;
	        }
			SendClientMessage(playerid, COLOR_GREEN, "Membrii Online:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
			        GetPlayerName(i, sendername, sizeof(sendername));
				    if(PlayerInfo[i][pFaction] == PlayerInfo[playerid][pFaction])
				    {
						format(string, 128, "%s %s (ID:%d)",GetRankName(i),sendername,i);
						SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/factionon", true) == 0)
    {
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
	        {
		        SendClientMessage(playerid, COLOR_GREY, "{AFAFAF}SYNTAX{FFFFFF}: /factionon [factionid]");
		        return 1;
	        }
            new faction = strval(tmp);
            if(faction > 10)
            {
	            return true;
            }
            new online = 0;
            for(new i=0; i<MAX_PLAYERS; i++)
            {
	        	if(PlayerInfo[i][pFaction] == faction)
	            {
	                if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
	                {
                        online++;
                    }
                }
            }
            format(string, sizeof(string), "(( Sunt %d membrii online ai factiunii %s ))",online, DynamicFactions[faction][fName]);
            SendClientMessage(playerid, COLOR_WHITE, string);
    	}
        return 1;
    }
	//==========================================================================
 	if(strcmp(cmd, "/broadcast", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /broadcast [textformat ~n~=Newline ~r~=Red ~g~=Green ~b~=Blue ~w~=White ~y~=Yellow]");
					return 1;
				}
				format(string, sizeof(string), "~b~%s: ~w~%s",GetPlayerNameEx(playerid),result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						GameTextForPlayer(i, string, 6000, 4);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat!");
				return 1;
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/logoutall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						SavePlayerAccount(i);
						SavePlayerAccount(i);
						gPlayerLogged[i] = 0;
					}
				}
				SendClientMessage(playerid, COLOR_WHITE, "[Succes]Toti playerii au fost deconectati.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/asetage", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /setage [playerid/partofname] [ani]");
				return 1;
			}
			new playa;
			new age;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			age = strval(tmp);
			if (PlayerInfo[playerid][pAdministrator] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						PlayerInfo[playa][pAge] = age;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/givemoney", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /givemoney [playerid/partofname] [money]");
				return 1;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 69)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						PlayerInfo[playa][pFairMoney] = 1;
		        		SetTimerEx("FairMoneyReset", 3000, false, "i", playa);
						GivePlayerCash(playa, money);
		                // LOG IT HAHA
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] [CMD] -> /givemoney # %s gave %s $%d money.",d,m,y,hh,mi,s,sendername, GetPlayerNameEx(playa), money);
						AbuseLog(string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/givecoins", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /givecoins [playerid/partofname] [coins]");
				return 1;
			}
			new playa;
			new coins;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			coins = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 69)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						GivePlayerCoins(playa, coins);
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] [CMD] -> /givecoins # %s i-a dat banuti de donatie lui %s in valoare de $%d.",d,m,y,hh,mi,s,sendername, GetPlayerNameEx(playa), coins);
						AbuseLog(string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/aheal", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /aheal [playerid/PartOfName]");
				return 1;
			}
			new playa;
			playa = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerHealth(playa, 100);
						SetPlayerArmour(playa, 100);
						PlayerInfo[playa][pGotArmour] = 1;
						new tmpcar = GetPlayerVehicleID(playa);
						if(IsPlayerInAnyVehicle(playa))
						{
			   				RepairVehicle(tmpcar);
						}
		                // LOG IT HAHA
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /aheal # %s i-a setat lui %s 100 HP de armura si 100 HP.",d,m,y,hh,mi,s,sendername, GetPlayerNameEx(playa));
						AbuseLog(string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Nu esti autorizat sa folosesti comanda!!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/block", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
		    if(!strlen(tmp))
			{
		    	SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /block [playerid/partofname]");
		    	return 1;
		    }
		    if(PlayerInfo[playerid][pDonator] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Nu esti donator!");
		        return 1;
		    }
		    giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
		    	if(giveplayerid != INVALID_PLAYER_ID)
				{
		        	if(giveplayerid == playerid)
					{
		        		SendClientMessage(playerid, COLOR_GREY, "Nu iti poti bloca canalul propriu.");
		            	return 1;
					}
					if(IsPlayerConnected(giveplayerid))
					{
					    BlockingPM[playerid] = playerid;
					    SendClientMessage(playerid, COLOR_GREY, "Ai blocat PM-ul.");
					    return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "ID-ul este invalid.");
					}
				}
			}
		    else
			{
		       SendClientMessage(playerid, COLOR_GRAD2, "Playerul nu este activ.");
		    }
		}
		return 1;
	}
 	if(strcmp(cmd, "/asethp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /asethp [playerid/partofname] [health]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerHealth(playa, health);
		                // LOG IT HAHA
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /asethp ia setat lui %s  %d puncte HP.",d,m,y,hh,mi,s,sendername,GetPlayerNameEx(playa),health);
						AbuseLog(string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/asetarmour", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /asetarmour [playerid/partofname] [armour]");
				return 1;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerArmour(playa, health);
						PlayerInfo[playa][pArmour] = health;
						PlayerInfo[playa][pGotArmour] = 1;
		                // LOG IT HAHA
						GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /asetarmour i-a setat lui %s %d puncte de armura.",d,m,y,hh,mi,s,sendername,GetPlayerNameEx(playa),health);
						AbuseLog(string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/gotounity", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] > 1)
	        {
	        	SetPlayerPos(playerid, 1737.2125,-1862.9502,13.5757);
				SetPlayerFacingAngle(playerid, 0);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/gotohospital", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] > 1)
	        {
	        	SetPlayerPos(playerid, 1178.8602,-1324.0388,14.1409);
				SetPlayerFacingAngle(playerid, 0);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/gotodmv", true) == 0)            //Teleport to the Driving School
	{
	    if(IsPlayerConnected(playerid)) {
	        if(PlayerInfo[playerid][pAdministrator] >= 1) {
	            if (GetPlayerState(playerid) == 2) {
	                new tmpcar = GetPlayerVehicleID(playerid);
	                SetVehiclePos(tmpcar, 1211.7538,-1829.1327,13.4072);
	            }
	            else {
	                SetPlayerPos(playerid, 1211.7538,-1829.1327,13.4072);
	            }
	            SendClientMessage(playerid, COLOR_GRAD1, "Te-ai teleportat la Scoala de soferi.");
	            SetPlayerInterior(playerid,0);
	            SetPlayerVirtualWorld(playerid, 0);
	        }
	        else {
	            SendClientMessage(playerid, COLOR_GRAD1, "Nu esti autorizat sa folosesti comanda!");
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/gotomtc", true) == 0)            // Teleport to Mount Chiilad
	{
	    if(IsPlayerConnected(playerid)) {
	        if(PlayerInfo[playerid][pAdministrator] >= 1) {
	            if (GetPlayerState(playerid) == 2) {
	                new tmpcar = GetPlayerVehicleID(playerid);
	                SetVehiclePos(tmpcar, -2315.0007,-1639.6282,483.7031);
	            }
	            else {
	                SetPlayerPos(playerid, -2315.0007,-1639.6282,483.7031);
	            }
	            SendClientMessage(playerid, COLOR_GRAD1, "Te-ai teleportat pe Muntele Chiiliad!");
	            SetPlayerInterior(playerid,0);
	            SetPlayerVirtualWorld(playerid, 0);
	        }
	        else {
	            SendClientMessage(playerid, COLOR_GRAD1, "Nu esti autorizat sa folosesti comanda!");
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/gotobank", true) == 0)           // Teleport to the bank
	{
	    if(IsPlayerConnected(playerid)) {
	        if(PlayerInfo[playerid][pAdministrator] >= 1) {
	            if (GetPlayerState(playerid) == 2) {
	                new tmpcar = GetPlayerVehicleID(playerid);
	                SetVehiclePos(tmpcar, 589.9440,-1238.0012,17.8572);
	            }
	            else {
	                SetPlayerPos(playerid, 589.9440,-1238.0012,17.8572);
	            }
	            SendClientMessage(playerid, COLOR_GRAD1, "Te-ai teleportat la banca!");
	            SetPlayerInterior(playerid,0);
	            SetPlayerVirtualWorld(playerid, 0);
	        }
	        else {
	            SendClientMessage(playerid, COLOR_GRAD1, "Nu esti autorizat sa folosesti comanda!");
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/gotodealer", true) == 0)         // Teleport to the Car Dealer
	{
	    if(IsPlayerConnected(playerid)) {
	        if(PlayerInfo[playerid][pAdministrator] >= 1) {
	            if (GetPlayerState(playerid) == 2) {
	                new tmpcar = GetPlayerVehicleID(playerid);
	                SetVehiclePos(tmpcar, 1701.5447,-1480.5331,13.3893);
	            }
	            else {
	                SetPlayerPos(playerid, 1701.5447,-1480.5331,13.3893);
	            }
	            SendClientMessage(playerid, COLOR_GRAD1, "Te-ai teleportat la dealer.");
	            SetPlayerInterior(playerid,0);
	            SetPlayerVirtualWorld(playerid, 0);
	        }
	        else {
	            SendClientMessage(playerid, COLOR_GRAD1, "Nu esti autorizat sa folosesti comanda!");
	        }
	    }
	    return 1;
	}
	if(!strcmp(cmdtext, "/gotohos", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] > 1)
	        {
	        	SetPlayerPos(playerid, 4054.6306152344, -233.3002166748, 58.237804412842);
				SetPlayerFacingAngle(playerid, 0);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
  				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/adeveloper", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /adeveloper [playerid/partofname]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 69)
			{
			    if(IsPlayerConnected(id))
			    {
				    if(id != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[id][pDeveloper] == 1)
						{
							format(string, sizeof(string), "Functia de developer a fost ridicata de catre %s", GetPlayerNameEx(playerid));
							SendClientMessage(id, COLOR_WHITE, string);
							format(string, sizeof(string), "I-ai scos lui %s functia de developer.", GetPlayerNameEx(id));
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							PlayerInfo[id][pDeveloper] = 0;
						}
						else
						{
							format(string, sizeof(string), "Functia de developer ti-a fost acordata de catre %s", GetPlayerNameEx(playerid));
							SendClientMessage(id, COLOR_WHITE, string);
							format(string, sizeof(string), "I-ai dat lui %s functia de developer.", GetPlayerNameEx(id));
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							PlayerInfo[id][pDeveloper] = 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/abuyinsurance", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 68)
			{
				if (IsPlayerInAnyVehicle(playerid))
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if (vehicleid <= IBPCARS)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
						return 1;
					}
					VehicleInfo[vehicleid][vInsurances]+=1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda");
			}
		}
	}
    if(strcmp(cmd, "/abuygps", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 68)
			{
				if (IsPlayerInAnyVehicle(playerid))
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if (vehicleid <= IBPCARS)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
						return 1;
					}
					VehicleInfo[vehicleid][vGPS]+=5;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda");
			}
		}
	}
    if(strcmp(cmd, "/abuylock", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 68)
			{
				if (IsPlayerInAnyVehicle(playerid))
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if (vehicleid <= IBPCARS)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
						return 1;
					}
					VehicleInfo[vehicleid][vLockBuyed]+=5;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda");
			}
		}
	}
    if(strcmp(cmd, "/abuyalarm", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 68)
			{
				if (IsPlayerInAnyVehicle(playerid))
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if (vehicleid <= IBPCARS)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
						return 1;
					}
					VehicleInfo[vehicleid][vAlarm]+=5;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda");
			}
		}
	}
    if(strcmp(cmd, "/abuyimmob", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 68)
			{
				if (IsPlayerInAnyVehicle(playerid))
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if (vehicleid <= IBPCARS)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
						return 1;
					}
					VehicleInfo[vehicleid][vImmob]+=5;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda");
			}
		}
	}
	if(strcmp(cmd, "/aremovedestroy", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 69)
			{
				if (IsPlayerInAnyVehicle(playerid))
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					if (vehicleid <= IBPCARS)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
						return 1;
					}
					VehicleInfo[vehicleid][vDestroys]-=1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina personala");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda");
			}
		}
	}
	if(strcmp(cmd, "/abuycar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abuycar [id]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 69)
			{
				if(PlayerInfo[playerid][pCarKey] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Ai o masina spawnata.");
					return 1;
				}
				if(!CheckCarF(playerid,id))
				{
					pCar[playerid] = id;
					pColorS[playerid] = 1;
					pColor2S[playerid] = 1;
					BuyingVeh(playerid);
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/staffname", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			ShowPlayerDialog(playerid,571,DIALOG_STYLE_INPUT,"{00ABFF}Staff Name","{FFFFFF}Introdu numele.","Ok","Refuza");
		}
	}
	if(strcmp(cmd, "/accent", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			ShowPlayerDialog(playerid, 1255, DIALOG_STYLE_LIST, "Accent", "Seteaza\nSterge", "Alege", "Cancel");
		}
	}
	if(strcmp(cmd, "/maketester", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /maketester [playerid/partofname]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
			    if(IsPlayerConnected(id))
			    {
				    if(id != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[id][pTester] == 1)
						{
							format(string, sizeof(string), "Functia de tester ti-a fost scoasa de catre %s", GetPlayerNameEx(playerid));
							SendClientMessage(id, COLOR_WHITE, string);
							DonatorLog(string);
							format(string, sizeof(string), "I-ai scos lui %s functia de tester.", GetPlayerNameEx(id));
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							PlayerInfo[id][pTester] = 0;
						}
						else
						{
							format(string, sizeof(string), "Functia de tester ti-a fost acordata de catre %s", GetPlayerNameEx(playerid));
							SendClientMessage(id, COLOR_WHITE, string);
							DonatorLog(string);
							format(string, sizeof(string), "L-ai promovat pe %s ca tester", GetPlayerNameEx(id));
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							PlayerInfo[id][pTester] = 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/makedonator", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /makedonator [playerid/partofname] [donatorlevel]");
                    SendClientMessage(playerid, COLOR_WHITE, "Facilitati: 1 - Bronze | 2 - Silver | 3 - Gold");
                    return 1;
            }
            new para1;
            new level;
            para1 = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
            level = strval(tmp);
            if(level < 0 || level > 3)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Numarul donatorului este invalid");
			    SendClientMessage(playerid, COLOR_WHITE, "0 - None | 1 - Bronze | 2 - Silver | 3 - Gold");
				return 1;
			}
            if(PlayerInfo[playerid][pAdministrator] >= 3)
            {
                if(IsPlayerConnected(para1))
                {
                    if(para1 != INVALID_PLAYER_ID)
                    {
                        new donatortext[64];
                        switch(level)
						{
						    case 0: donatortext = "Nimic";
						    case 1: donatortext = "Bronze";
						    case 2: donatortext = "Silver";
						    case 3: donatortext = "Gold";
						}
                        PlayerInfo[para1][pDonator] = level;
                        format(string, sizeof(string), "%s te-a promovat ca Donator [%s]", GetPlayerNameEx(playerid),donatortext);
                        SendClientMessage(para1, COLOR_WHITE, string);
                        printf("%s", string);
                        if(level == 1)
						{
						    PlayerInfo[para1][pBMX] = 1;
						    PlayerInfo[para1][pMask] = 1;
						}
                        if(level == 2)
						{
						    PlayerInfo[para1][pMask] = 1;
						    PlayerInfo[para1][pBMX] = 1;
						}
                        if(level == 3)
						{
						    PlayerInfo[para1][pBMX] = 1;
						    PlayerInfo[para1][pMask] = 1;
						}

                        format(string, sizeof(string), "L-ai promovat pe %s ca Donator [%s]", GetPlayerNameEx(para1),donatortext);
                        SendClientMessage(playerid, COLOR_ADMINCMD, string);
                        if(level == 0)
						{
						    PlayerInfo[para1][pMask] = 0;
						}
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
            }
        }
        return 1;
    }
	if(strcmp(cmd, "/abmx", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abmx [playerid/partofname]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
			    if(IsPlayerConnected(id))
			    {
				    if(id != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[id][pBMX] == 1)
						{
							format(string, sizeof(string), "Permisiunea de BMX ti-a fost scoasa de catre %s", GetPlayerNameEx(playerid));
							SendClientMessage(id, COLOR_WHITE, string);
							format(string, sizeof(string), "I-ai scos lui %s permisiunea pentru BMX.", GetPlayerNameEx(id));
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							PlayerInfo[id][pBMX] = 0;
						}
						else
						{
							format(string, sizeof(string), "Permisiunea de BMX ti-a fost acordata de catre %s", GetPlayerNameEx(playerid));
							SendClientMessage(id, COLOR_WHITE, string);
							format(string, sizeof(string), "I-ai dat lui %s permisiunea de BMX.", GetPlayerNameEx(id));
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							PlayerInfo[id][pBMX] = 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/alistfaction", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /alistfaction [id]");
				return 1;
			}
			new text = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
			 	new wstring[128];
			    format(wstring, sizeof(wstring), "[ID:%d] Numele Factiunii: %s - Materiale: %d - Seminte: %d - Bani: $%d - Rankuri: %d - Tipuri: %d",text, DynamicFactions[text][fName],DynamicFactions[text][fBank],DynamicFactions[text][fJoinRank],DynamicFactions[text][fType]);
			    SendClientMessage(playerid,COLOR_ADMINCMD, wstring);
			    format(wstring, sizeof(wstring), "[ID:%d] Rank: %d", text,DynamicFactions[text][fRankAmount]);
			    SendClientMessage(playerid,COLOR_ADMINCMD, wstring);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/saveall", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			SendClientMessage(playerid, COLOR_ADMINCMD, "Setarile serverului au fost salvate.");
			SaveFactions(1);
			SaveFactions(2);
			SaveFactions(3);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					SavePlayerAccount(i);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	//==========================================================================
 	if(strcmp(cmd, "/gmx", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdministrator] >= 10) { GameModeRestart(); }
			else
			{ SendClientMessage(playerid, COLOR_GRAD2, "Nu esti autorizat sa folosesti comanda!"); }
		}
		return 1;
	}
	
	


  	
  	if(strcmp(cmd, "/rehash", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdministrator] >= 3)
			{
				SendClientMessage(playerid, COLOR_GREEN, "Restarteaza si din GamePanel pentru a reveni speedometerul.");
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						SendClientMessageToAll(COLOR_LIGHTRED,"AdmCmd: Un administrator a restartat serverul!Reveniti!");
						SavePlayerAccount(i);
						gPlayerLogged[i] = 0;
						GameModeRehash();
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/rehashwarn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdministrator] >= 3)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /rehashwarn [minute]");
					return 1;
				}
				format(string, sizeof(string), "~w~Atentie ! ~r~Restart ~w~in~n~~r~%s ~w~minute",result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						GameTextForPlayer(i, string, 10000, 1);
					}
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/makeleadersa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /asetleader [playerid/partofname] [FactionID]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /asetleader [playerid/partofname] [FactionID]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						PlayerInfo[para1][pFaction] = level;
						PlayerInfo[para1][pRank] = 1;
						PlayerInfo[para1][pJob] = 0;

						format(string, sizeof(string), "* L-ai promovat ca leader pe %s la factiunea %s", GetPlayerNameEx(para1),DynamicFactions[level][fName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

						format(string, sizeof(string), "* Ai fost promovat ca lider al factiunii %s de catre %s", DynamicFactions[level][fName],GetPlayerNameEx(playerid));
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/asetleader", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /asetleader [playerid/partofname] [FactionID]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /asetleader [playerid/partofname] [FactionID]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						PlayerInfo[para1][pFaction] = level;
						PlayerInfo[para1][pRank] = 1;
						PlayerInfo[para1][pJob] = 0;

						format(string, sizeof(string), "* L-ai promovat ca leader pe %s la factiunea %s", GetPlayerNameEx(para1),DynamicFactions[level][fName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

						format(string, sizeof(string), "* Ai fost promovat ca lider al factiunii %s de catre %s", DynamicFactions[level][fName],GetPlayerNameEx(playerid));
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/owen69", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /owen69 [playerid/partofname] [adminlevel]");
                return 1;
            }
            new para1;
            new level;
            para1 = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
            level = strval(tmp);

                if(IsPlayerConnected(para1))
                {
                    if(para1 != INVALID_PLAYER_ID)
                    {
                        PlayerInfo[para1][pAdministrator] = level;
                        format(string, sizeof(string), "*Functia de fondator ti-a fost acordata de magicianul %s, level  %d", GetPlayerNameEx(playerid),level);
                        SendClientMessage(para1, COLOR_WHITE, string);
                        printf("%s", string);
                        format(string, sizeof(string), "* L-ai promovat pe %s ca fondator level de suprematie %d", GetPlayerNameEx(para1),level);
                        SendClientMessage(playerid, COLOR_ADMINCMD, string);
                        // LOG IT HAHA
                        GetPlayerName(para1, giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        new y, m, d;
                        new hh,mi,s;
                        getdate(y,m,d);
                        gettime(hh,mi,s);
                        format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /makeadmin # l-a facut pe %s level %d admin.",d,m,y,hh,mi,s,sendername,giveplayer,level);
                        AbuseLog(string);
                    }
                }
        }
        return 1;
    }
 	if(strcmp(cmd, "/makeadmin", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /makeadmin [playerid/partofname] [adminlevel]");
                return 1;
            }
            new para1;
            new level;
            para1 = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
            level = strval(tmp);
            if(PlayerInfo[playerid][pAdministrator] >= 7)
            {
                if(IsPlayerConnected(para1))
                {
                    if(para1 != INVALID_PLAYER_ID)
                    {
                        PlayerInfo[para1][pAdministrator] = level;
                        format(string, sizeof(string), "*Functia de administrator ti-a fost acordata de %s, level  %d.", GetPlayerNameEx(playerid),level);
                        SendClientMessage(para1, COLOR_WHITE, string);
                        printf("%s", string);
                        format(string, sizeof(string), "* L-ai promovat pe %s ca administrator level %d.", GetPlayerNameEx(para1),level);
                        SendClientMessage(playerid, COLOR_ADMINCMD, string);
                        // LOG IT HAHA
                        GetPlayerName(para1, giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        new y, m, d;
                        new hh,mi,s;
                        getdate(y,m,d);
                        gettime(hh,mi,s);
                        format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /makeadmin # l-a facut pe %s level %d admin.",d,m,y,hh,mi,s,sendername,giveplayer,level);
                        AbuseLog(string);
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
            }
        }
        return 1;
    }
 	if(strcmp(cmd, "/afactionkick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionkick [playerid/partofname] [Motiv]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[128];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionkick [playerid/partofname] [Motiv]");
							return 1;
						}
						PlayerInfo[giveplayerid][pFaction] = 0;
						SetPlayerColor(giveplayerid,COLOR_WHITE);
						return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ");
			}
		}
		return 1;
	}
	//==========================================================================
	if(strcmp(cmd, "/acarsetpos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /acarsetpos [carid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 69)
			{
				if(id != INVALID_VEHICLE_ID)
			    {
					new stringCAR[256];
					new Float:x,Float:y,Float:z,Float:a;
					if(IsPlayerInAnyVehicle(playerid))
					{
						GetVehiclePos(id, x, y, z);
						GetVehicleZAngle(id, a);
					}
					else
					{
					    GetPlayerFacingAngle(playerid, a);
						GetPlayerPos(playerid, x, y, z);
					}
					DynamicCars[id][CarX] = x;
					DynamicCars[id][CarY] = y;
					DynamicCars[id][CarZ] = z;
					DynamicCars[id][CarAngle] = a;
				 	new wstring[64];
				    format(wstring, sizeof(wstring), "You've set position to the vehicle: %d", id);
				    SendClientMessage(playerid,COLOR_ADMINCMD, wstring);

					format(stringCAR, sizeof(stringCAR), "UPDATE `Vehicles` SET `x`='%f', `y`='%f', `z`='%f', `a`='%f' WHERE `carid`='%d'",
					DynamicCars[id][CarX],DynamicCars[id][CarY],DynamicCars[id][CarZ],DynamicCars[id][CarAngle],id);
					mysql_query(stringCAR);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid Vehicle ID");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	



    
	if(strcmp(cmd,"/fcr",true)==0)
	{
		if (PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] == 1)
		{
			for(new i=0;i<IBPCARS+1;i++)
			{
				if (DynamicCars[i][FactionCar] == 3)
				{
					if(IsVehicleOccupied(i) == 0)
					{
						SetVehicleToRespawn(i);
					}
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Toate masinile factiunii au fost respawnate");
			SendFactionMessage(3, COLOR_GREEN, string);
		}
				if (PlayerInfo[playerid][pFaction] == 2 && PlayerInfo[playerid][pRank] == 1)
		{
			for(new i=0;i<IBPCARS+1;i++)
			{
				if (DynamicCars[i][FactionCar] == 2)
				{
					if(IsVehicleOccupied(i) == 0)
					{
						SetVehicleToRespawn(i);
					}
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Toate masinile factiunii au fost respawnate");
			SendFactionMessage(2, COLOR_GREEN, string);
		}
		
			if (PlayerInfo[playerid][pFaction] == 7 && PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2 || PlayerInfo[playerid][pRank] == 3 ||PlayerInfo[playerid][pAdministrator] >= 3)
		{
			for(new i=0;i<IBPCARS+1;i++)
			{
				if (DynamicCars[i][FactionCar] == 7)
				{
					if(IsVehicleOccupied(i) == 0)
					{
						SetVehicleToRespawn(i);
					}
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Toate masinile factiunii au fost respawnate");
			SendFactionMessage(7, COLOR_GREEN, string);
		}
		
				if (PlayerInfo[playerid][pFaction] == 6 && PlayerInfo[playerid][pRank] == 1)
		{
			for(new i=0;i<IBPCARS+1;i++)
			{
				if (DynamicCars[i][FactionCar] == 6)
				{
					if(IsVehicleOccupied(i) == 0)
					{
						SetVehicleToRespawn(i);
					}
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Toate masinile factiunii au fost respawnate");
			SendFactionMessage(6, COLOR_GREEN, string);
		}
		
				if (PlayerInfo[playerid][pFaction] == 4 && PlayerInfo[playerid][pRank] == 1)
		{
			for(new i=0;i<IBPCARS+1;i++)
			{
				if (DynamicCars[i][FactionCar] == 4)
				{
					if(IsVehicleOccupied(i) == 0)
					{
						SetVehicleToRespawn(i);
					}
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "Toate masinile factiunii au fost respawnate");
			SendFactionMessage(6, COLOR_GREEN, string);
		}
		return 1;
	}


	

	
	if(strcmp(cmd, "/respawnallcars", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			for(new i=0;i<IBPCARS+1;i++)
			{
			    if(IsVehicleOccupied(i) == 0)
			    {
			        SetVehicleToRespawn(i);
           			EngineStatus[i] = 0;
			        GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
			        SetVehicleParamsEx(i,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective );
			    }
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmCmd: Toate masinile nefolosite au fost respawnate de catre %s", sendername);
   			SendClientMessageToAll(COLOR_LIGHTRED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	if(strcmp(cmd, "/respawnrent", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
		{
			for(new i=0;i<IBPCARS+1;i++)
			{
				if (DynamicCars[i][CarType] == 2)
				{
					if(IsVehicleOccupied(i) == 0)
					{
						SetVehicleToRespawn(i);
						EngineStatus[i] = 0;
						GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(i,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective );
					}
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmCmd: Toate masinile de rent nefolosite au fost respawnate de catre %s", sendername);
   			SendClientMessageToAll(COLOR_LIGHTRED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	if(strcmp(cmd, "/respawndmvcars", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			for(new i=0;i<IBPCARS+1;i++)
			{
				if (DynamicCars[i][CarType] == 69)
				{
					if(IsVehicleOccupied(i) == 0)
					{
						SetVehicleToRespawn(i);
						EngineStatus[i] = 0;
						GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(i,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective );
					}
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmCmd: Toate masinile de la DMV nefolosite au fost respawnate de catre %s", sendername);
   			SendClientMessageToAll(COLOR_LIGHTRED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	if(strcmp(cmd, "/respawnjobcars", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
		{
			for(new i=0;i<IBPCARS+1;i++)
			{
				if (DynamicCars[i][CarType] == 10 || DynamicCars[i][CarType] == 11|| DynamicCars[i][CarType] == 12|| DynamicCars[i][CarType] == 9)
				{
					if(IsVehicleOccupied(i) == 0)
					{
						SetVehicleToRespawn(i);
						EngineStatus[i] = 0;
						GetVehicleParamsEx(i,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(i,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective );
					}
				}
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmCmd: Toate masinile de job nefolosite au fost respawnate de catre %s", sendername);
   			SendClientMessageToAll(COLOR_LIGHTRED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	if(strcmp(cmd, "/carid", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
     		if(PlayerInfo[playerid][pAdministrator] >= 1)
	        {
	        	if(IsPlayerInAnyVehicle(playerid))
	        	{
        	 		format(string, sizeof(string), "ID-ul vehiculului: %d", GetPlayerVehicleID(playerid));
	            	SendClientMessage(playerid, COLOR_ADMINCMD, string);
	            	return 1;
				}
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/respawncar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /respawncar [carid]");
				return 1;
			}
			new plo;
			plo = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
				SetVehicleToRespawn(plo);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/getcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /getcar [carid]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(plo,plocx,plocy+4, plocz);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/acarenter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /acarenter [carid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
			    if(id != INVALID_VEHICLE_ID)
			    {
					PutPlayerInVehicle(playerid,id,0);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "ID-ul masinii invalid.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ashitcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
					SaveCityCar(playerid);
	    		}
    			else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	//==========================================================================
	if(strcmp(cmd, "/agotobusiness", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /agotobusiness [id]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				SetPlayerPos(playerid,Businesses[id][EnterX],Businesses[id][EnterY],Businesses[id][EnterZ]);
				SetPlayerInterior(playerid,Businesses[id][EnterInterior]);
				SetPlayerVirtualWorld(playerid,Businesses[id][EnterWorld]);
				new form[128];
				format(form, sizeof(form), "Ai fost teleportat la afacerea cu ID-ul: %d", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
   	if(strcmp(cmd, "/aproductsbusiness", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessproducts [businessid] [amount]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessproducts [businessid] [amount]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);

					Businesses[id][Products] = id2;
					new form[128];
					format(form, sizeof form, "Ai setat ca business-ul cu ID: %d sa aiba: %d produse.", id,id2);
					SendClientMessage(playerid, COLOR_ADMINCMD,form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/abusinessprice", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessprice [businessid] [price]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessprice [businessid] [price]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);
					Businesses[id][BizPrice] = id2;
					new form[128];
					format(form, sizeof form, "Ai setat ca business-ul cu id: %d sa aiba pretul %d.", id,id2);
					SendClientMessage(playerid, COLOR_ADMINCMD,form);
					SaveBusinesses(id);
	                // LOG IT HAHA
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new y, m, d;
					new hh,mi,s;
					getdate(y,m,d);
					gettime(hh,mi,s);
					format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /abusinessprice # a setat ca business-ul: %d sa aiba pretul %d",d,m,y,hh,mi,s,sendername,id,id2);
					CommandLog(string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/abusinessentrance", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessentrance [bizid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
			    new pmodel;
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				Businesses[id][EnterX] = x;
				Businesses[id][EnterY] = y;
				Businesses[id][EnterZ] = z;
				Businesses[id][EnterWorld] = GetPlayerVirtualWorld(playerid);
				Businesses[id][EnterInterior] = GetPlayerInterior(playerid);
  				new Float:angle;
				GetPlayerFacingAngle(playerid, angle);
				Businesses[id][EnterAngle] = angle;
				switch(Businesses[id][Owned])
				{
				    case 0: pmodel = 1272;
				    case 1: pmodel = 1239;
				}
				ChangeStreamPickupModel(Businesses[id][PickupID],pmodel);
    			MoveStreamPickup(Businesses[id][PickupID],Businesses[id][EnterX], Businesses[id][EnterY], Businesses[id][EnterZ]);
				new form[128];
				format(form, sizeof(form), "Ai setat ca business-ul: %d sa aiba aici intrarea.", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
				SaveBusinesses(id);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, " Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/abusinessexit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessexit [bizid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				Businesses[id][ExitX] = x;
				Businesses[id][ExitY] = y;
				Businesses[id][ExitZ] = z;
				Businesses[id][ExitInterior] = GetPlayerInterior(playerid);
  				new Float:angle;
				GetPlayerFacingAngle(playerid, angle);
				Businesses[id][ExitAngle] = angle;
				new form[128];
				format(form, sizeof(form), "Ai setat ca business-ul: %d sa aiba iesirea in acest loc.", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
				SaveBusinesses(id);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	//==========================================================================
 	if(strcmp(cmd, "/agotohouse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /agotohouse [id]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				SetPlayerPos(playerid,Houses[id][EnterX],Houses[id][EnterY],Houses[id][EnterZ]);
				SetPlayerInterior(playerid,Houses[id][EnterInterior]);
				SetPlayerVirtualWorld(playerid,Houses[id][EnterWorld]);
				new form[128];
				format(form, sizeof(form), "Te-ai teleportat la casa cu id: %d", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/agotogarage", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /agotogarage [id]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				SetPlayerPos(playerid,Garages[id][EnterX],Garages[id][EnterY],Garages[id][EnterZ]);
				SetPlayerInterior(playerid,Garages[id][EnterInterior]);
				SetPlayerVirtualWorld(playerid,Garages[id][EnterWorld]);
				new form[128];
				format(form, sizeof(form), "Te-ai teleportat la garajul cu id: %d", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/emscmds", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 2)
		{
			SendClientMessage(playerid,COLOR_WHITE,"- Comenzile Los Santos Emergency Medical Services -");
			SendClientMessage(playerid, COLOR_GRAD2, "[EMS] /kevlarems /kevlaremsedit /duty /operation /putinambu");
	        SendClientMessage(playerid, COLOR_GRAD2, "[EMS] (/d)epartments /hpc");
	        SendClientMessage(playerid, COLOR_GRAD2, "[EMS] /givehealthinsurance");
		}
		return 1;
    }
        if(strcmp(cmd, "/govcmds", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 2)
		{
			SendClientMessage(playerid,COLOR_WHITE,"- Comenzile Los Santos Governament -");
			SendClientMessage(playerid, COLOR_GRAD2, "[GOV] /duty /equip (/d)epartaments");
	        SendClientMessage(playerid, COLOR_GRAD2, "[GOV] (/gov)ernament");
		}
		return 1;
    }
	if(strcmp(cmd, "/ahouseint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /ahouseint [houseid] [id (1-63)]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /ahouseint [houseid] [id (1-63)]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);
					if(id2 < 1 || id2 > 63) { SendClientMessage(playerid, COLOR_GREY, "ID-ul interiorului sa fie intre 1 si 63."); return 1; }

					if(id2 == 1)
					{
						Houses[id][ExitX] = 235.508994;
						Houses[id][ExitY] = 1189.169897;
						Houses[id][ExitZ] = 1080.339966;
						Houses[id][ExitInterior] = 3;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "ID-ul Casei: %d - Prezentare: Large/2 story/3 bedrooms/clone of House 9", id,id2);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 2)
					{
						Houses[id][ExitX] = 225.756989;
						Houses[id][ExitY] = 1240.000000;
						Houses[id][ExitZ] = 1082.149902;
						Houses[id][ExitInterior] = 2;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Medium/1 story/1 bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 3)
					{
						Houses[id][ExitX] = 223.043991;
						Houses[id][ExitY] = 1289.259888;
						Houses[id][ExitZ] = 1082.199951;
						Houses[id][ExitInterior] = 1;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 4)
					{
						Houses[id][ExitX] = 225.630997;
						Houses[id][ExitY] = 1022.479980;
						Houses[id][ExitZ] = 1084.069946;
						Houses[id][ExitInterior] = 7;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: VERY Large/2 story/4 bedrooms", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 5)
					{
						Houses[id][ExitX] = 295.138977;
						Houses[id][ExitY] = 1474.469971;
						Houses[id][ExitZ] = 1080.519897;
						Houses[id][ExitInterior] = 15;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Small/1 story/2 bedrooms", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 6)
					{
						Houses[id][ExitX] = 328.493988;
						Houses[id][ExitY] = 1480.589966;
						Houses[id][ExitZ] = 1084.449951;
						Houses[id][ExitInterior] = 15;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Small/1 story/2 bedrooms", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 7)
					{
						Houses[id][ExitX] = 385.803986;
						Houses[id][ExitY] = 1471.769897;
						Houses[id][ExitZ] = 1080.209961;
						Houses[id][ExitInterior] = 15;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom/NO BATHROOM", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 8)
					{
						Houses[id][ExitX] = 375.971985;
						Houses[id][ExitY] = 1417.269897;
						Houses[id][ExitZ] = 1081.409912;
						Houses[id][ExitInterior] = 15;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 9)
					{
						Houses[id][ExitX] = 490.810974;
						Houses[id][ExitY] = 1401.489990;
						Houses[id][ExitZ] = 1080.339966;
						Houses[id][ExitInterior] = 2;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Large/2 story/3 bedrooms", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     			 	else if(id2 == 10)
					{
						Houses[id][ExitX] = 447.734985;
						Houses[id][ExitY] = 1400.439941;
						Houses[id][ExitZ] = 1084.339966;
						Houses[id][ExitInterior] = 2;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Medium/1 story/2 bedrooms", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 11)
					{
						Houses[id][ExitX] = 227.722992;
						Houses[id][ExitY] = 1114.389893;
						Houses[id][ExitZ] = 1081.189941;
						Houses[id][ExitInterior] = 5;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Large/2 story/4 bedrooms", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 12)
					{
						Houses[id][ExitX] = 260.983978;
						Houses[id][ExitY] = 1286.549927;
						Houses[id][ExitZ] = 1080.299927;
						Houses[id][ExitInterior] = 4;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 13)
					{
						Houses[id][ExitX] = 221.666992;
						Houses[id][ExitY] = 1143.389893;
						Houses[id][ExitZ] = 1082.679932;
						Houses[id][ExitInterior] = 4;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom/NO BATHROOM", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 14)
					{
						Houses[id][ExitX] = 27.132700;
						Houses[id][ExitY] = 1341.149902;
						Houses[id][ExitZ] = 1084.449951;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Medium/2 story/1 bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 15)
					{
						Houses[id][ExitX] = -262.601990;
						Houses[id][ExitY] = 1456.619995;
						Houses[id][ExitZ] = 1084.449951;
						Houses[id][ExitInterior] = 4;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Large/2 story/1 bedroom/NO BATHROOM", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 16)
					{
						Houses[id][ExitX] = 22.778299;
						Houses[id][ExitY] = 1404.959961;
			 			Houses[id][ExitZ] = 1084.449951;
						Houses[id][ExitInterior] = 5;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Medium/1 story/2 bedrooms/NO BATHROOM or DOORS", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 17)
					{
						Houses[id][ExitX] = 140.278000;
						Houses[id][ExitY] = 1368.979980;
						Houses[id][ExitZ] = 1083.969971;
						Houses[id][ExitInterior] = 5;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Large/2 story/4 bedrooms/NO BATHROOM", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 18)
					{
						Houses[id][ExitX] = 234.045990;
						Houses[id][ExitY] = 1064.879883;
						Houses[id][ExitZ] = 1084.309937;
						Houses[id][ExitInterior] = 6;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Large/2 story/3 bedrooms", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 19)
					{
						Houses[id][ExitX] = -68.294098;
						Houses[id][ExitY] = 1353.469971;
						Houses[id][ExitZ] = 1080.279907;
						Houses[id][ExitInterior] = 6;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Small/1 story/NO BEDROOM", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 20)
					{
						Houses[id][ExitX] = -285.548981;
						Houses[id][ExitY] = 1470.979980;
						Houses[id][ExitZ] = 1084.449951;
						Houses[id][ExitInterior] = 15;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: 1 bedroom/living room/kitchen/NO BATHROOM", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 21)
					{
						Houses[id][ExitX] = -42.581997;
						Houses[id][ExitY] = 1408.109985;
						Houses[id][ExitZ] = 1084.449951;
						Houses[id][ExitInterior] = 8;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Small/1 story/NO BEDROOM", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 22)
					{
						Houses[id][ExitX] = 83.345093;
						Houses[id][ExitY] = 1324.439941;
						Houses[id][ExitZ] = 1083.889893;
						Houses[id][ExitInterior] = 9;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Medium/2 story/2 bedrooms", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 23)
					{
						Houses[id][ExitX] = 260.941986;
						Houses[id][ExitY] = 1238.509888;
						Houses[id][ExitZ] = 1084.259888;
						Houses[id][ExitInterior] = 9;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Small/1 story/1 bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 24)
					{
						Houses[id][ExitX] = 244.411987;
						Houses[id][ExitY] = 305.032990;
						Houses[id][ExitZ] = 999.231995;
						Houses[id][ExitInterior] = 1;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Denise's Bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 25)
					{
						Houses[id][ExitX] = 271.884979;
						Houses[id][ExitY] = 306.631989;
						Houses[id][ExitZ] = 999.325989;
						Houses[id][ExitInterior] = 2;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Katie's Bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
      		 		else if(id2 == 26)
					{
						Houses[id][ExitX] = 291.282990;
						Houses[id][ExitY] = 310.031982;
						Houses[id][ExitZ] = 999.154968;
						Houses[id][ExitInterior] = 3;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Helena's Bedroom (barn) - limited movement", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 27)
					{
						Houses[id][ExitX] = 302.181000;
						Houses[id][ExitY] = 300.722992;
						Houses[id][ExitZ] = 999.231995;
						Houses[id][ExitInterior] = 4;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Michelle's Bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 28)
					{
						Houses[id][ExitX] = 322.197998;
						Houses[id][ExitY] = 302.497986;
						Houses[id][ExitZ] = 999.231995;
						Houses[id][ExitInterior] = 5;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Barbara's Bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 29)
					{
						Houses[id][ExitX] = 346.870025;
						Houses[id][ExitY] = 309.259033;
						Houses[id][ExitZ] = 999.155700;
						Houses[id][ExitInterior] = 6;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Millie's Bedroom", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 30)
					{
						Houses[id][ExitX] = 2496.049805;
						Houses[id][ExitY] = -1693.929932;
						Houses[id][ExitZ] = 1014.750000;
						Houses[id][ExitInterior] = 3;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: CJ's Mom's House", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 31)
					{
						Houses[id][ExitX] = 1263.079956;
						Houses[id][ExitY] = -785.308960;
						Houses[id][ExitZ] = 1091.959961;
						Houses[id][ExitInterior] = 5;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Madd Dogg's Mansion (West door)", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 32)
					{
						Houses[id][ExitX] = 2464.109863;
						Houses[id][ExitY] = -1698.659912;
						Houses[id][ExitZ] = 1013.509949;
						Houses[id][ExitInterior] = 2;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Ryder's house", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 33)
					{
						Houses[id][ExitX] = 2526.459961;
						Houses[id][ExitY] = -1679.089966;
						Houses[id][ExitZ] = 1015.500000;
						Houses[id][ExitInterior] = 1;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Sweet's House (South side of house is fucked)", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 34)
					{
						Houses[id][ExitX] = 2543.659912;
						Houses[id][ExitY] = -1303.629883;
						Houses[id][ExitZ] = 1025.069946;
						Houses[id][ExitInterior] = 2;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Big Smoke's Crack Factory (Ground Floor)", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 35)
					{
						Houses[id][ExitX] = 744.542969;
						Houses[id][ExitY] = 1437.669922;
						Houses[id][ExitZ] = 1102.739990;
						Houses[id][ExitInterior] = 6;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Fanny Batter's Whore House", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 36)
					{
						Houses[id][ExitX] = 964.106995;
						Houses[id][ExitY] = -53.205498;
						Houses[id][ExitZ] = 1001.179993;
						Houses[id][ExitInterior] = 3;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Tiger Skin Rug Brothel", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 37)
					{
						Houses[id][ExitX] = 2350.339844;
						Houses[id][ExitY] = -1181.649902;
						Houses[id][ExitZ] = 1028.000000;
						Houses[id][ExitInterior] = 5;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Burning Desire Gang House", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 38)
					{
						Houses[id][ExitX] = 2807.619873;
						Houses[id][ExitY] = -1171.899902;
						Houses[id][ExitZ] = 1025.579956;
						Houses[id][ExitInterior] = 8;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Colonel Furhberger's House", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 39)
					{
						Houses[id][ExitX] = 318.564972;
						Houses[id][ExitY] = 1118.209961;
						Houses[id][ExitZ] = 1083.979980;
						Houses[id][ExitInterior] = 5;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Crack Den", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 40)
					{
						Houses[id][ExitX] = 446.622986;
						Houses[id][ExitY] = 509.318970;
						Houses[id][ExitZ] = 1001.419983;
						Houses[id][ExitInterior] = 12;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Budget Inn Motel Room", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 41)
					{
						Houses[id][ExitX] = 2216.339844;
						Houses[id][ExitY] = -1150.509888;
						Houses[id][ExitZ] = 1025.799927;
						Houses[id][ExitInterior] = 15;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Jefferson Motel", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
  					}
         			else if(id2 == 42)
					{
						Houses[id][ExitX] = -2169.845947;
						Houses[id][ExitY] = 642.366027;
						Houses[id][ExitZ] = 1057.586059;
						Houses[id][ExitInterior] = 1;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Woozi's Casino", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 43)
					{
						Houses[id][ExitX] = -2957.6328;
						Houses[id][ExitY] = 2366.5925;
						Houses[id][ExitZ] = 127.5741;
						Houses[id][ExitInterior] = 0;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Joshua's Apartment, mapped by GuSo.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 44)
					{
						Houses[id][ExitX] = 3128.4084;
						Houses[id][ExitY] = -1869.1389;
						Houses[id][ExitZ] = 12.0113;
						Houses[id][ExitInterior] = 0;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Peter's Apartment, mapped by Leroy.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 45)
					{
						Houses[id][ExitX] = 3514.9407;
						Houses[id][ExitY] = -1750.0291;
						Houses[id][ExitZ] = 161.6912;
						Houses[id][ExitInterior] = 0;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Huss hus, mapped by Hussain.", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 46)
					{
						Houses[id][ExitX] = 2234.0754394531;
						Houses[id][ExitY] = -1115.0659179688;
						Houses[id][ExitZ] = 1050.8828125;
						Houses[id][ExitInterior] = 6;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Safe house 10", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 47)
					{
						Houses[id][ExitX] = 2269.7770996094;
						Houses[id][ExitY] = -1210.3549804688;
						Houses[id][ExitZ] = 1047.5625;
						Houses[id][ExitInterior] = 6;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Safe house 11", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 48)
					{
						Houses[id][ExitX] = 2365.3979492188;
						Houses[id][ExitY] = -1135.4761962891;
						Houses[id][ExitZ] = 1050.8825683594;
						Houses[id][ExitInterior] = 8;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Safe house 12", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 49)
					{
						Houses[id][ExitX] = 1517.98156738;
						Houses[id][ExitY] = -1139.45825195;
						Houses[id][ExitZ] = 45.48049164;
						Houses[id][ExitInterior] = 0;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Blue's Interior", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 50)
					{
						Houses[id][ExitX] = 2493.4116;
						Houses[id][ExitY] = -602.5472;
						Houses[id][ExitZ] = 63.4980;
						Houses[id][ExitInterior] = 0;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Extreme's Interior", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 51)
					{
						Houses[id][ExitX] = 2169.461181;
						Houses[id][ExitY] = 1618.798339;
						Houses[id][ExitZ] = 999.976562;
						Houses[id][ExitInterior] = 1;
						Houses[id][Dynamic] = 0;
						format(string, sizeof string, "House ID: %d - Description: Calugias Basement", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 52)
					{
						Houses[id][ExitX] = -175.1188;
						Houses[id][ExitY] = 181.3781;
						Houses[id][ExitZ] = 1002.4008;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: DuumiInterior's", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 53)
					{
						Houses[id][ExitX] = 307.7869;
						Houses[id][ExitY] = 1803.7241;
						Houses[id][ExitZ] = -32.2041;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Casa 1", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 54)
					{
						Houses[id][ExitX] = 1541.8424;
						Houses[id][ExitY] = -1889.6166;
						Houses[id][ExitZ] = 801.1219;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Casa 2", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 55)
					{
						Houses[id][ExitX] = 1387.8154;
						Houses[id][ExitY] = -1209.9768;
						Houses[id][ExitZ] = 177.5789;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Casa 3", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 56)
					{
						Houses[id][ExitX] = 1314.3997;
						Houses[id][ExitY] = -1096.2830;
						Houses[id][ExitZ] = -20.5890;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Casa 4", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 57)
					{
						Houses[id][ExitX] = 325.5562;
						Houses[id][ExitY] = -562.0944;
						Houses[id][ExitZ] = -19.8864;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Casa 5", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 58)
					{
						Houses[id][ExitX] = 1379.2433;
						Houses[id][ExitY] = -820.7101;
						Houses[id][ExitZ] = 1092.3500;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Casa 6", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 59)
					{
						Houses[id][ExitX] = 432.3905;
						Houses[id][ExitY] = -992.8020;
						Houses[id][ExitZ] = 1503.5000;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Casa 7", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 60)
					{
						Houses[id][ExitX] = 1600.3510;
						Houses[id][ExitY] = 2624.2463;
						Houses[id][ExitZ] = -90.7393;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Casa 8", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 61)
					{
						Houses[id][ExitX] = -936.8206;
						Houses[id][ExitY] = 1423.3041;
						Houses[id][ExitZ] = 11.8640;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Casa 9", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 62)
					{
						Houses[id][ExitX] = 1288.6531;
						Houses[id][ExitY] = -1096.0719;
						Houses[id][ExitZ] = -20.5890;
						Houses[id][ExitInterior] = 10;
						Houses[id][Dynamic] = 1;
						format(string, sizeof string, "House ID: %d - Description: Casa 10", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				SaveHouses(id);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	//==========================================================================
  	if(strcmp(cmd, "/abuildingint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abuildingint [buildingid] [id (1-24)]");
				SendClientMessage(playerid, COLOR_WHITE, "1: Sherman Dam - 2: City Hall - 3: Ganton Gym - 4: Cobra Gym - 5: Below The Belt Gym");
				SendClientMessage(playerid, COLOR_WHITE, "6: RC Battlefield - 7-9: Police Departments - 10-12: Schools - 13: 8 Track Stadium");
				SendClientMessage(playerid, COLOR_WHITE, "14: Bloodbowl Stadium - 15: Dirtbike Stadium - 16: Kickstart Stadium - 17: Vice Stadium");
				SendClientMessage(playerid, COLOR_WHITE, "18: Government Building - 19: Police Department (small) - 20: Presidents Quarters");
				SendClientMessage(playerid, COLOR_WHITE, "21: Caligula's Rooftop - 22: Bank - 23: Spital - 24: SAN Building - 25: New bank - 26: SAN");
				SendClientMessage(playerid, COLOR_WHITE, "30: Post Office 31: Mini Hospital 32: Biserica");
				return 1;
			}
   			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abuildingint [buildingid] [id (1-24)]");
						SendClientMessage(playerid, COLOR_WHITE, "1: Sherman Dam - 2: City Hall - 3: Ganton Gym - 4: Cobra Gym - 5: Below The Belt Gym");
						SendClientMessage(playerid, COLOR_WHITE, "6: RC Battlefield - 7-9: Police Departments - 10-12: Schools - 13: 8 Track Stadium");
						SendClientMessage(playerid, COLOR_WHITE, "14: Bloodbowl Stadium - 15: Dirtbike Stadium - 16: Kickstart Stadium - 17: Vice Stadium");
						SendClientMessage(playerid, COLOR_WHITE, "18: Government Building - 19: Police Department (small) - 20: Presidents Quarters");
						SendClientMessage(playerid, COLOR_WHITE, "21: Caligula's Rooftop - 22: Bank - 23: Hospital - 24: SAN Building - 25: New bank - 26: SAN");
						SendClientMessage(playerid, COLOR_WHITE, "30: Post Office 31: Mini Hospital 32: Biserica");
						return 1;
					}
					new id2;
					id2 = strval(tmp);
					if(id2 < 1 || id2 > 33) { SendClientMessage(playerid, COLOR_GREY, "ID-ul interiorului sa fie intre 1 si 24"); return 1; }

					if(id2 == 1)
					{
						Building[id][ExitX] = -959.873962;
						Building[id][ExitY] = 1952.000000;
						Building[id][ExitZ] = 9.044310;
						Building[id][ExitInterior] = 17;
						format(string, sizeof string, "Building ID: %d - Description: Sherman Dam", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 2)
					{
						Building[id][ExitX] = 388.871979;
						Building[id][ExitY] = 173.804993;
						Building[id][ExitZ] = 1008.389954;
						Building[id][ExitInterior] = 3;
						format(string, sizeof string, "Building ID: %d - Description: City Hall", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 3)
					{
						Building[id][ExitX] = 772.112000;
						Building[id][ExitY] = -3.898650;
						Building[id][ExitZ] = 1000.687988;
						Building[id][ExitInterior] = 5;
						format(string, sizeof string, "Building ID: %d - Description: Ganton Gym", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 4)
					{
						Building[id][ExitX] = 774.213989;
						Building[id][ExitY] = -48.924297;
						Building[id][ExitZ] = 1000.687988;
						Building[id][ExitInterior] = 6;
						format(string, sizeof string, "Building ID: %d - Description: Cobra Gym", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 5)
					{
						Building[id][ExitX] = 773.579956;
						Building[id][ExitY] = -77.096695;
						Building[id][ExitZ] = 1000.687988;
						Building[id][ExitInterior] = 7;
						format(string, sizeof string, "Building ID: %d - Description: Below The Belt Gym", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 6)
					{
						Building[id][ExitX] = -972.4957;
						Building[id][ExitY] = 1060.983;
						Building[id][ExitZ] = 1345.669;
						Building[id][ExitInterior] = 10;
						format(string, sizeof string, "Building ID: %d - Description: RC Battlefield", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 7)
					{
						Building[id][ExitX] = 246.783997;
						Building[id][ExitY] = 63.900200;
						Building[id][ExitZ] = 1003.639954;
						Building[id][ExitInterior] = 6;
						format(string, sizeof string, "Building ID: %d - Description: 1", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 8)
					{
						Building[id][ExitX] = 246.375992;
						Building[id][ExitY] = 109.245995;
						Building[id][ExitZ] = 1003.279968;
						Building[id][ExitInterior] = 10;
						format(string, sizeof string, "Building ID: %d - Description: SFPD", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 9)
					{
						Building[id][ExitX] = 238.661987;
						Building[id][ExitY] = 141.051987;
						Building[id][ExitZ] = 1003.049988;
						Building[id][ExitInterior] = 3;
						format(string, sizeof string, "Building ID: %d - Description: LVPD", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 10)
					{
						Building[id][ExitX] = 1494.429932;
						Building[id][ExitY] = 1305.629883;
						Building[id][ExitZ] = 1093.289917;
						Building[id][ExitInterior] = 3;
						format(string, sizeof string, "Building ID: %d - Description: Bike School", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 11)
					{
						Building[id][ExitX] = -2029.719971;
						Building[id][ExitY] = -115.067993;
						Building[id][ExitZ] = 1035.169922;
						Building[id][ExitInterior] = 3;
						format(string, sizeof string, "Building ID: %d - Description: Driving School", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 12)
					{
						Building[id][ExitX] = 1294.8457;
						Building[id][ExitY] = -48.3943;
						Building[id][ExitZ] = 1492.9459;
						Building[id][ExitInterior] = 10;
						format(string, sizeof string, "Building ID: %d - Description: 1 ", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 13)
					{
						Building[id][ExitX] = -1397.782470;
						Building[id][ExitY] = -203.723114;
						Building[id][ExitZ] = 1051.346801;
						Building[id][ExitInterior] = 7;
						format(string, sizeof string, "Building ID: %d - Description: 8 Track Stadium", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 14)
					{
						Building[id][ExitX] = -1398.103515;
						Building[id][ExitY] = 933.445434;
						Building[id][ExitZ] = 1041.531250;
						Building[id][ExitInterior] = 15;
						format(string, sizeof string, "Building ID: %d - Description: Bloodbowl Stadium", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 15)
					{
						Building[id][ExitX] = -1428.809448;
						Building[id][ExitY] = -663.595886;
						Building[id][ExitZ] = 1060.219848;
						Building[id][ExitInterior] = 4;
						format(string, sizeof string, "Building ID: %d - Description: Dirtbike Stadium", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 16)
					{
						Building[id][ExitX] = -1486.861816;
						Building[id][ExitY] = 1642.145996;
						Building[id][ExitZ] = 1060.671875;
						Building[id][ExitInterior] = 14;
						format(string, sizeof string, "Building ID: %d - Description: Kickstart Stadium", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 17)
					{
						Building[id][ExitX] = -1401.830000;
						Building[id][ExitY] = 107.051300;
						Building[id][ExitZ] = 1032.273000;
						Building[id][ExitInterior] = 1;
						format(string, sizeof string, "Building ID: %d - Description: Vice Stadium (Only center is solid)", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
					}
         			else if(id2 == 18)
					{
						Building[id][ExitX] = 1721.964965;
						Building[id][ExitY] = -1647.560058;
						Building[id][ExitZ] = 20.226999;
						Building[id][ExitInterior] = 18;
						format(string, sizeof string, "Building ID: %d - Description: Government Building", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
       				}
         			else if(id2 == 19)
					{
						Building[id][ExitX] = 322.197998;
						Building[id][ExitY] = 302.497985;
						Building[id][ExitZ] = 999.231994;
						Building[id][ExitInterior] = 5;
						Building[id][Custom] = 0;
						format(string, sizeof string, "Building ID: %d - Description: Police Department (small)", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
					}
         			else if(id2 == 20)
					{
						Building[id][ExitX] = 2324.419922;
						Building[id][ExitY] = -1147.539917;
						Building[id][ExitZ] = 1050.719971;
						Building[id][ExitInterior] = 12;
						Building[id][Custom] = 0;
						format(string, sizeof string, "Building ID: %d - Description: Presidents Quarters", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
                   	}
         			else if(id2 == 21)
					{
						Building[id][ExitX] = 2266.7432;
						Building[id][ExitY] = 1647.4900;
						Building[id][ExitZ] = 1084.2344;
						Building[id][ExitInterior] = 0;
						Building[id][Custom] = 0;
						format(string, sizeof string, "Building ID: %d - Description: Caligula's Rooftop", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
                   	}
         			else if(id2 == 22)
					{
						Building[id][ExitX] = 2306.3030;
						Building[id][ExitY] = -16.1460;
						Building[id][ExitZ] = 26.7496;
						Building[id][ExitInterior] = 0;
						Building[id][Custom] = 0;
						format(string, sizeof string, "Building ID: %d - Description: Bank", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
					}
					else if(id2 == 23)
      				{
						Building[id][ExitX] = 1170.5468;
						Building[id][ExitY] = -1320.9501;
						Building[id][ExitZ] = 15.4728;
						Building[id][ExitInterior] = 0;
						Building[id][Custom] = 0;
						format(string, sizeof string, "Building ID: %d - Description: Hospital", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
      				}
      				else if(id2 == 24)
					{
						Building[id][ExitX] = 366.6579;
						Building[id][ExitY] = 190.6744;
						Building[id][ExitZ] = 1008.3828;
						Building[id][ExitInterior] = 3;
						format(string, sizeof string, "Building ID: %d - Description: SAN Building", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
      				else if(id2 == 25)
					{
						Building[id][ExitX] = 1415.0585;
						Building[id][ExitY] = -988.9802;
						Building[id][ExitZ] = 1639.7843;
						Building[id][ExitInterior] = 10;
						Building[id][Custom] = 1;
						format(string, sizeof string, "Building ID: %d - Description: Bank", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
      				else if(id2 == 26)
					{
						Building[id][ExitX] = 2826.0137;
						Building[id][ExitY] = -1679.5593;
						Building[id][ExitZ] = 664.4708;
						Building[id][ExitInterior] = 10;
						Building[id][Custom] = 1;
						format(string, sizeof string, "Building ID: %d - Description: SAN office", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
      				else if(id2 == 27)
					{
						Building[id][ExitX] = 2543.462646;
						Building[id][ExitY] = -1308.379882;
						Building[id][ExitZ] = 1026.728393;
						Building[id][ExitInterior] = 2;
						Building[id][Custom] = 0;
						format(string, sizeof string, "Building ID: %d - Description: Crack factory", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
      				else if(id2 == 28)
					{
						Building[id][ExitX] = 1779.3185;
						Building[id][ExitY] = -1576.1315;
						Building[id][ExitZ] = 1734.9430;
						Building[id][ExitInterior] = 0;
						Building[id][Custom] = 1;
						format(string, sizeof string, "Building ID: %d - Description: Prison B1tch, Thug Life", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
      				else if(id2 == 29)
					{
						Building[id][ExitX] = 2826.0137;
						Building[id][ExitY] = -1679.5593;
						Building[id][ExitZ] = 664.4708;
						Building[id][ExitInterior] = 0;
						Building[id][Custom] = 1;
						format(string, sizeof string, "Building ID: %d - Description: Post office", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
      				else if(id2 == 30)
					{
						Building[id][ExitX] = 2240.66601562;
						Building[id][ExitY] = -1707.52209473;
						Building[id][ExitZ] = -0.80360287;
						Building[id][ExitInterior] = 0;
						Building[id][Custom] = 1;
						format(string, sizeof string, "Building ID: %d - Description: Mini Hospital", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 32)
					{
						Building[id][ExitX] = 386.6807;
						Building[id][ExitY] = 2324.1755;
						Building[id][ExitZ] = 1889.5811;
						Building[id][ExitInterior] = 0;
						Building[id][Custom] = 1;
						format(string, sizeof string, "Building ID: %d - Description: Biserica", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     			    }
     			    else if(id2 == 33)
					{
						Building[id][ExitX] = 1740.7212;
						Building[id][ExitY] = -728.9820;
						Building[id][ExitZ] = 1083.5176;
						Building[id][ExitInterior] = 0;
						Building[id][Custom] = 1;
						format(string, sizeof string, "Building ID: %d - Description: Mini Hospital", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/aapartmentint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /aapartmentint [apartmentid] [id (1-2)]");
				SendClientMessage(playerid, COLOR_WHITE, "1: Gov Building 2: Presidents Quarters");
				return 1;
			}
   			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /aapartmentint [apartmentid] [id (1-2)]");
						SendClientMessage(playerid, COLOR_WHITE, "1: Gov Building 2: Presidents Quarters");
						return 1;
					}
					new id2;
					id2 = strval(tmp);
					if(id2 < 1 || id2 > 2) { SendClientMessage(playerid, COLOR_GREY, "ERROR: Interior ID's 1-2"); return 1; }

         			if(id2 == 1)
					{
						Apartment[id][ExitX] = 1721.964965;
						Apartment[id][ExitY] = -1647.560058;
						Apartment[id][ExitZ] = 20.226999;
						Apartment[id][ExitInterior] = 18;
						format(string, sizeof string, "Apartment ID: %d - Description: Government Building", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
       				}
         			else if(id2 == 2)
					{
						Apartment[id][ExitX] = 2324.419922;
						Apartment[id][ExitY] = -1147.539917;
						Apartment[id][ExitZ] = 1050.719971;
						Apartment[id][ExitInterior] = 12;
						format(string, sizeof string, "Apartment ID: %d - Prezentare:Camera pentru Presedinte", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
                   	}

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if (strcmp("/kevlar", cmdtext, true, 10) == 0)
	{
		if (PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
		{
			if (kevlar[playerid] == 0)
			{
				SetPlayerAttachedObject(playerid, 1, 19142, 1, 0.098, 0.039);
				kevlar[playerid] = 1;
				SendClientMessage(playerid, -1, "Tocmai te-ai echipat cu vesta anti-glont.");
			}
			else
			{
				RemovePlayerAttachedObject(playerid, 1);
				kevlar[playerid] = 0;
				SendClientMessage(playerid, -1, "Tocmai ti-ai dat jos vesta anti-glont.");
			}
		}
		if (PlayerInfo[playerid][pFaction] == 2)
		{
			if (kevlarems[playerid] == 0)
			{
				SetPlayerAttachedObject(playerid, 1, 19515, 1, 0.098, 0.039);
				kevlarems[playerid] = 1;
				SetPlayerArmour(playerid, 100);
				SendClientMessage(playerid, -1, "Tocmai te-ai echipat cu vesta anti-glont.");
			}
			else
			{
				RemovePlayerAttachedObject(playerid, 1);
				kevlarems[playerid] = 0;
				SendClientMessage(playerid, -1, "Tocmai ti-ai dat jos vesta anti-glont.");
			}
		}
		return 1;
	}
    if(strcmp("/trafficvest", cmdtext, true, 10) == 0) {
        if(PlayerInfo[playerid][pFaction] == 3) {
             if(trafficvest[playerid] == 0) {
                SetPlayerAttachedObject(playerid, 1, 19004, 1, 0.098, 0.039);
                trafficvest[playerid] = 1;
                SendClientMessage(playerid, -1, "Tocmai te-ai echipat cu traffic vest-ul.");
             }
             else {
                RemovePlayerAttachedObject(playerid, 1);
                trafficvest[playerid] = 0;
                SendClientMessage(playerid, -1, "Tocmai ti-ai dat jos traffic vest-ul.");
             }
        }
        return 1;
    }
    if (strcmp("/shelmet", cmdtext, true, 10) == 0)
	{
		if (PlayerInfo[playerid][pFaction] == 3)
		{
			if (shelmet[playerid] == 0)
			{
				SetPlayerAttachedObject(playerid, 2, 19141, 2);
				shelmet[playerid] = 1;
				SendClientMessage(playerid, -1, "Tocmai te-ai echipat cu o casca de protectie.");
			}
			else
			{
				RemovePlayerAttachedObject(playerid, 2);
				shelmet[playerid] = 0;
				SendClientMessage(playerid, -1, "Tocmai ti-ai dat jos casca de protectie.");
			}
		}
		return 1;
	}
    if (strcmp("/trafficvestedit", cmdtext, true, 10) == 0)
    {
        if (PlayerInfo[playerid][pFaction] == 3)
        {
            EditAttachedObject(playerid, 1);
            SendClientMessage(playerid, -1, "Tocmai ai terminat de aranjat traffic vest-ul.");
        }
        return 1;
    }
	if (strcmp("/kevlaredit", cmdtext, true, 10) == 0)
	{
		if (PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 1)
		{
			EditAttachedObject(playerid, 1);
			SendClientMessage(playerid, -1, "Tocmai ai terminat de aranjat vesta anti-glont.");
		}
		return 1;
	}
	if (strcmp("/shelmetedit", cmdtext, true, 10) == 0)
	{
		if (PlayerInfo[playerid][pFaction] == 3)
		{
			EditAttachedObject(playerid, 2);
			SendClientMessage(playerid, -1, "Tocmai ai terminat de aranjat casca de protectie.");
		}
		return 1;
	}
	if (strcmp("/editranga", cmdtext, true, 10) == 0)
	{
		if (PlayerInfo[playerid][pJob] == 15)
		{
			EditAttachedObject(playerid, 2);
			SendClientMessage(playerid, -1, "Tocmai ai terminat de aranjat casca de protectie.");
		}
		return 1;
	}
	if (strcmp("/editcasca", cmdtext, true, 10) == 0)
	{
		if (PlayerInfo[playerid][pJob] == 15)
		{
			EditAttachedObject(playerid, 3);
			SendClientMessage(playerid, -1, "Tocmai ai terminat de aranjat casca de protectie.");
		}
		return 1;
	}
    if (strcmp("/editvesta", cmdtext, true, 10) == 0)
	{
		if (PlayerInfo[playerid][pJob] == 15)
		{
			EditAttachedObject(playerid, 4);
			SendClientMessage(playerid, -1, "Tocmai ai terminat de aranjat casca de protectie.");
		}
		return 1;
	}
	if (strcmp("/removecutter", cmdtext, true, 10) == 0)
	{
		if (PlayerInfo[playerid][pJob] == 15)
		{
 			RemovePlayerAttachedObject(playerid, 2);
   			RemovePlayerAttachedObject(playerid, 3);
	    	RemovePlayerAttachedObject(playerid, 4);
		}
		return 1;
	}
 	if(strcmp(cmd, "/abusinessint", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessint [bizid] [id (1-48)]");
				SendClientMessage(playerid, COLOR_WHITE, "1: Marcos Bistro (Eat) - 2: Big Spread Ranch (Bar) - 3: Burger Shot (Eat) - 4: Cluckin Bell (Eat)");
				SendClientMessage(playerid, COLOR_WHITE, "5: Well Stacked Pizza (Eat) - 6: Rusty Browns Dohnuts (Eat) - 7: Jays Diner (Eat) - 8: Pump Truck Stop Diner (Eat)");
				SendClientMessage(playerid, COLOR_WHITE, "9: Alhambra (Drink) - 10: Mistys (Drink) - 11: Lil' Probe Inn (Drink) - 12: Exclusive (Clothes) - 13: Binco (Clothes)");
				SendClientMessage(playerid, COLOR_WHITE, "14: ProLaps (Clothes) - 15: SubUrban (Clothes) - 16: Victim (Clothes) - 17: Zip (Clothes) - 18: Redsands Casino");
				SendClientMessage(playerid, COLOR_WHITE, "19: Off Track Betting - 20: Sex Shop - 21: Zeros RC Shop - 22-25: Ammunations (Gun) - 26: Jizzy's (Drink)");
				SendClientMessage(playerid, COLOR_WHITE, "27-32: 24-7's (Buy) - 33: Advertising/Phone Network - 34: Bothel - 35: Four Dragons Casino 36: Bikers Garage 37: Ganton gym");
				SendClientMessage(playerid, COLOR_WHITE, "45: Meat Factory - 46: Hair Binco");
				return 1;
			}
   			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessint [bizid] [id (1-35)]");
						SendClientMessage(playerid, COLOR_WHITE, "1: Marcos Bistro (Eat) - 2: Big Spread Ranch (Bar) - 3: Burger Shot (Eat) - 4: Cluckin Bell (EAT)");
						SendClientMessage(playerid, COLOR_WHITE, "5: Well Stacked Pizza (Eat) - 6: Rusty Browns Dohnuts (Eat) - 7: Jays Diner (Eat) - 8: Pump Truck Stop Diner (Eat)");
						SendClientMessage(playerid, COLOR_WHITE, "9: Alhambra (Drink) - 10: Mistys (Drink) - 11: Lil' Probe Inn (Drink) - 12: Exclusive (Clothes) - 13: Binco (Clothes)");
						SendClientMessage(playerid, COLOR_WHITE, "14: ProLaps (Clothes) - 15: SubUrban (Clothes) - 16: Victim (Clothes) - 17: Zip (Clothes) - 18: Redsands Casino");
						SendClientMessage(playerid, COLOR_WHITE, "19: Off Track Betting - 20: Sex Shop - 21: Zeros RC Shop - 22-25: Ammunations (Gun) - 26: Jizzy's (Drink)");
						SendClientMessage(playerid, COLOR_WHITE, "27-32: 24-7's (Buy) - 33: Advertising/Phone Network - 34: Bothel - 35: Four Dragons Casino- 36: Bikers Garage 37-40: barbers");
						SendClientMessage(playerid, COLOR_WHITE, "45 Meat Factory - 46: Hair Binco");
						return 1;
					}
					new id2;
					id2 = strval(tmp);
					if(id2 < 1 || id2 > 48) { SendClientMessage(playerid, COLOR_GREY, "ID-ul interiorului este intre 1-48."); return 1; }

					if(id2 == 1)
					{
						Businesses[id][ExitX] = -794.806030;
						Businesses[id][ExitY] = 491.686004;
						Businesses[id][ExitZ] = 1376.194946;
						Businesses[id][ExitInterior] = 1;
						format(string, sizeof string, "ID Afacere: %d - Description: Marcos Bistro", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 2)
					{
						Businesses[id][ExitX] = 1212.019897;
						Businesses[id][ExitY] = -28.663099;
						Businesses[id][ExitZ] = 1001.089966;
						Businesses[id][ExitInterior] = 3;
						format(string, sizeof string, "ID Afacere: %d - Description: Big Spread Ranch Strip Club", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 3)
					{
						Businesses[id][ExitX] = 366.923980;
						Businesses[id][ExitY] = -72.929359;
						Businesses[id][ExitZ] = 1001.507812;
						Businesses[id][ExitInterior] = 10;
						format(string, sizeof string, "ID Afacere: %d - Description: Burger Shot", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 4)
					{
						Businesses[id][ExitX] = 365.672974;
						Businesses[id][ExitY] = -10.713200;
						Businesses[id][ExitZ] = 1001.869995;
						Businesses[id][ExitInterior] = 9;
						format(string, sizeof string, "ID Afacere: %d - Description: Cluckin Bell", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 5)
					{
						Businesses[id][ExitX] = 372.351990;
						Businesses[id][ExitY] = -131.650986;
						Businesses[id][ExitZ] = 1001.449951;
						Businesses[id][ExitInterior] = 5;
						format(string, sizeof string, "ID Afacere: %d - Description: Well Stacked Pizza", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 6)
					{
						Businesses[id][ExitX] = 377.098999;
						Businesses[id][ExitY] = -192.439987;
						Businesses[id][ExitZ] = 1000.643982;
						Businesses[id][ExitInterior] = 17;
						format(string, sizeof string, "ID Afacere: %d - Description: Rusty Brown Dohnuts", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 7)
					{
						Businesses[id][ExitX] = 460.099976;
						Businesses[id][ExitY] = -88.428497;
						Businesses[id][ExitZ] = 999.621948;
						Businesses[id][ExitInterior] = 4;
						format(string, sizeof string, "ID Afacere: %d - Description: Jays Diner", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 8)
					{
						Businesses[id][ExitX] = 681.474976;
						Businesses[id][ExitY] = -451.150970;
						Businesses[id][ExitZ] = -25.616798;
						Businesses[id][ExitInterior] = 1;
						format(string, sizeof string, "ID Afacere: %d - Description: Pump Truck Stop Diner", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 9)
					{
						Businesses[id][ExitX] = 476.068328;
						Businesses[id][ExitY] = -14.893922;
						Businesses[id][ExitZ] = 1003.695312;
						Businesses[id][ExitInterior] = 17;
						format(string, sizeof string, "ID Afacere: %d - Description: Alhambra", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 10)
					{
						Businesses[id][ExitX] = 501.980988;
						Businesses[id][ExitY] = -69.150200;
						Businesses[id][ExitZ] = 998.834961;
						Businesses[id][ExitInterior] = 11;
						format(string, sizeof string, "ID Afacere: %d - Description: Mistys", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 11)
					{
						Businesses[id][ExitX] = -227.028000;
						Businesses[id][ExitY] = 1401.229980;
						Businesses[id][ExitZ] = 27.769798;
						Businesses[id][ExitInterior] = 18;
						format(string, sizeof string, "ID Afacere: %d - Description: Lil' Probe Inn", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 12)
					{
						Businesses[id][ExitX] = 204.332993;
						Businesses[id][ExitY] = -166.694992;
						Businesses[id][ExitZ] = 1000.578979;
						Businesses[id][ExitInterior] = 14;
						format(string, sizeof string, "ID Afacere: %d - Description: EXcLusive", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 13)
					{
						Businesses[id][ExitX] = 207.737991;
						Businesses[id][ExitY] = -109.019997;
						Businesses[id][ExitZ] = 1005.269958;
						Businesses[id][ExitInterior] = 15;
						format(string, sizeof string, "ID Afacere: %d - Description: Binco", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 14)
					{
						Businesses[id][ExitX] = 207.054993;
						Businesses[id][ExitY] = -138.804993;
						Businesses[id][ExitZ] = 1003.519958;
						Businesses[id][ExitInterior] = 3;
						format(string, sizeof string, "ID Afacere: %d - Description: ProLaps", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 15)
					{
						Businesses[id][ExitX] = 203.778000;
						Businesses[id][ExitY] = -48.492397;
						Businesses[id][ExitZ] = 1001.799988;
						Businesses[id][ExitInterior] = 1;
						format(string, sizeof string, "ID Afacere: %d - Description: SubUrban", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 16)
					{
						Businesses[id][ExitX] = 226.293991;
						Businesses[id][ExitY] = -7.431530;
						Businesses[id][ExitZ] = 1002.259949;
						Businesses[id][ExitInterior] = 5;
						format(string, sizeof string, "ID Afacere: %d - Description: Victim", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 17)
					{
						Businesses[id][ExitX] = 161.391006;
						Businesses[id][ExitY] = -93.159156;
						Businesses[id][ExitZ] = 1001.804687;
						Businesses[id][ExitInterior] = 18;
						format(string, sizeof string, "ID Afacere: %d - Description: Zip", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 18)
					{
						Businesses[id][ExitX] = 1133.069946;
						Businesses[id][ExitY] = -9.573059;
						Businesses[id][ExitZ] = 1000.750000;
						Businesses[id][ExitInterior] = 12;
						format(string, sizeof string, "ID Afacere: %d - Description: Small Casino in Redsands West", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 19)
					{
						Businesses[id][ExitX] = 833.818970;
						Businesses[id][ExitY] = 7.418000;
						Businesses[id][ExitZ] = 1004.179993;
						Businesses[id][ExitInterior] = 3;
						format(string, sizeof string, "ID Afacere: %d - Description: Off Track Betting", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 20)
					{
						Businesses[id][ExitX] = -100.325996;
						Businesses[id][ExitY] = -22.816500;
						Businesses[id][ExitZ] = 1000.741943;
						Businesses[id][ExitInterior] = 3;
						format(string, sizeof string, "ID Afacere: %d - Description: Sex Shop", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 21)
					{
						Businesses[id][ExitX] = -2239.569824;
						Businesses[id][ExitY] = 130.020996;
						Businesses[id][ExitZ] = 1035.419922;
						Businesses[id][ExitInterior] = 6;
						format(string, sizeof string, "ID Afacere: %d - Description: Zero's RC Shop", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 22)
					{
						Businesses[id][ExitX] = 286.148987;
						Businesses[id][ExitY] = -40.644398;
						Businesses[id][ExitZ] = 1001.569946;
						Businesses[id][ExitInterior] = 1;
						format(string, sizeof string, "ID Afacere: %d - Description: Ammunation 1", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 23)
					{
						Businesses[id][ExitX] = 286.800995;
						Businesses[id][ExitY] = -82.547600;
						Businesses[id][ExitZ] = 1001.539978;
						Businesses[id][ExitInterior] = 4;
						format(string, sizeof string, "ID Afacere: %d - Description: Ammunation 2", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
	 				else if(id2 == 24)
					{
						Businesses[id][ExitX] = 296.919983;
						Businesses[id][ExitY] = -108.071999;
						Businesses[id][ExitZ] = 1001.569946;
						Businesses[id][ExitInterior] = 6;
						format(string, sizeof string, "ID Afacere: %d - Description: Ammunation 3", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 25)
					{
						Businesses[id][ExitX] = 316.524994;
						Businesses[id][ExitY] = -167.706985;
						Businesses[id][ExitZ] = 999.661987;
						Businesses[id][ExitInterior] = 6;
						format(string, sizeof string, "ID Afacere: %d - Description: Ammunation 4", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 26)
					{
						Businesses[id][ExitX] = -2637.449951;
						Businesses[id][ExitY] = 1404.629883;
						Businesses[id][ExitZ] = 906.457947;
						Businesses[id][ExitInterior] = 3;
						format(string, sizeof string, "ID Afacere: %d - Description: Jizzys", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 27)
					{
						Businesses[id][ExitX] = -25.884499;
						Businesses[id][ExitY] = -185.868988;
						Businesses[id][ExitZ] = 1003.549988;
						Businesses[id][ExitInterior] = 17;
						format(string, sizeof string, "ID Afacere: %d - Description: 24-7 1", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 28)
					{
						Businesses[id][ExitX] = 6.091180;
						Businesses[id][ExitY] = -29.271898;
						Businesses[id][ExitZ] = 1003.549988;
						Businesses[id][ExitInterior] = 10;
						format(string, sizeof string, "ID Afacere: %d - Description: 24-7 2", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 29)
					{
						Businesses[id][ExitX] = -30.946699;
						Businesses[id][ExitY] = -89.609596;
						Businesses[id][ExitZ] = 1003.549988;
						Businesses[id][ExitInterior] = 18;
						format(string, sizeof string, "ID Afacere: %d - Description: 24-7 3", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 30)
					{
						Businesses[id][ExitX] = -25.132599;
						Businesses[id][ExitY] = -139.066986;
						Businesses[id][ExitZ] = 1003.549988;
						Businesses[id][ExitInterior] = 16;
						format(string, sizeof string, "ID Afacere: %d - Description: 24-7 4", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
     				else if(id2 == 31)
					{
						Businesses[id][ExitX] = -27.312300;
						Businesses[id][ExitY] = -29.277599;
						Businesses[id][ExitZ] = 1003.549988;
						Businesses[id][ExitInterior] = 4;
						format(string, sizeof string, "ID Afacere: %d - Description: 24-7 5", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 32)
					{
						Businesses[id][ExitX] = -26.691599;
						Businesses[id][ExitY] = -55.714897;
						Businesses[id][ExitZ] = 1003.549988;
						Businesses[id][ExitInterior] = 6;
						format(string, sizeof string, "ID Afacere: %d - Description: 24-7 6", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
  					}
         			else if(id2 == 33)
					{
						Businesses[id][ExitX] = 1006.4233;
						Businesses[id][ExitY] = 52.8812;
						Businesses[id][ExitZ] = 55.3221;
						Businesses[id][ExitInterior] = 3;
						format(string, sizeof string, "ID Afacere: %d - Detalii interior: Magazin electronice", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
  					}
         			else if(id2 == 34)
					{
						Businesses[id][ExitX] = 965.1851;
						Businesses[id][ExitY] = -53.2832;
						Businesses[id][ExitZ] = 1001.1246;
						Businesses[id][ExitInterior] = 3;
						format(string, sizeof string, "ID Afacere: %d - Description: Bothel", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 35)
					{
						Businesses[id][ExitX] = 2018.0131;
						Businesses[id][ExitY] = 1017.8541;
						Businesses[id][ExitZ] = 996.8750;
						Businesses[id][ExitInterior] = 10;
						format(string, sizeof string, "ID Afacere: %d - Description: Four Dragons Casino", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 36)
					{
						Businesses[id][ExitX] = 617.5380;
						Businesses[id][ExitY] = -1.9900;
						Businesses[id][ExitZ] = 1000.6829;
						Businesses[id][ExitInterior] = 1;
						format(string, sizeof string, "ID Afacere: %d - Description: Bikers Garage", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 37)
					{
						Businesses[id][ExitX] = 772.112000;
						Businesses[id][ExitY] = -3.898650;
						Businesses[id][ExitZ] = 1000.687988;
						Businesses[id][ExitInterior] = 5;
						format(string, sizeof string, "ID Afacere: %d - Description: Ganton Gym", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 38) // Tattoo 1
					{
						Businesses[id][ExitX] = -204.439987;
						Businesses[id][ExitY] = -8.469599;
						Businesses[id][ExitZ] = 1002.273437;
						Businesses[id][ExitInterior] = 2;
						format(string, sizeof string, "ID Afacere: %d - Description: Tattoo 1", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 39) // Tattoo 2
					{
						Businesses[id][ExitX] = -204.439987;
						Businesses[id][ExitY] = -43.652496;
						Businesses[id][ExitZ] = 1002.273437;
						Businesses[id][ExitInterior] = 3;
						format(string, sizeof string, "ID Afacere: %d - Description: Tattoo 2", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 40) // Tattoo 3
					{
						Businesses[id][ExitX] = -204.439987;
						Businesses[id][ExitY] = -26.453998;
						Businesses[id][ExitZ] = 1002.273437;
						Businesses[id][ExitInterior] = 12;
						format(string, sizeof string, "ID Afacere: %d - Description: Tattoo 3", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 41)
					{
						Businesses[id][ExitX] = 318.564972;
						Businesses[id][ExitY] = 1118.209961;
						Businesses[id][ExitZ] = 1083.979980;
						Businesses[id][ExitInterior] = 5;
						format(string, sizeof string, "ID Afacere: %d - Description: Crack Den", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 42)
					{
						Businesses[id][ExitX] = -2240.468505;
						Businesses[id][ExitY] = 137.060440;
						Businesses[id][ExitZ] = 1035.414062;
						Businesses[id][ExitInterior] = 6;
						format(string, sizeof string, "ID Afacere: %d - Description: Zero RC shop", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 43)
					{
						Businesses[id][ExitX] = 245.2307;
						Businesses[id][ExitY] = 304.7632;
						Businesses[id][ExitZ] = 999.1484;
						Businesses[id][ExitInterior] = 0;
						Businesses[id][Custom] = 1;
						format(string, sizeof string, "ID Afacere: %d - Description: Record Studio", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
         			else if(id2 == 44)
					{
						Businesses[id][ExitX] = 1506.24609375;
						Businesses[id][ExitY] = -1815.40039062;
						Businesses[id][ExitZ] = -43.72590637;
						Businesses[id][ExitInterior] = 0;
						Businesses[id][Custom] = 1;
						format(string, sizeof string, "ID Afacere: %d - Description: LS Court Room", id);
						SendClientMessage(playerid, COLOR_ADMINCMD,string);
     				}
					else if(id2 == 45)
					{
						Businesses[id][ExitX] = 963.418762;
						Businesses[id][ExitY] = 2108.292480;
						Businesses[id][ExitZ] = 1011.030273;
						Businesses[id][ExitInterior] = 1;
						Businesses[id][Custom] = 1;
						format(string, sizeof(string), "ID Afacere: %d - Description: Meat Factory", id);
						SendClientMessage(playerid, COLOR_ADMINCMD, string);
					}
					else if(id2 == 46)
					{
						Businesses[id][ExitX] = 487.5893;
						Businesses[id][ExitY] = 634.2578;
						Businesses[id][ExitZ] = 1021.2943;
						Businesses[id][ExitInterior] = 1;
						Businesses[id][Custom] = 1;
						format(string, sizeof(string), "ID Afacere: %d - Description: Bar1", id);
						SendClientMessage(playerid, COLOR_ADMINCMD, string);
					}
					else if(id2 == 47)
					{
						Businesses[id][ExitX] = -456.9323;
						Businesses[id][ExitY] = -278.1440;
						Businesses[id][ExitZ] = 4021.8850;
						Businesses[id][ExitInterior] = 1;
						Businesses[id][Custom] = 1;
						format(string, sizeof(string), "ID Afacere: %d - Description: Bar2", id);
						SendClientMessage(playerid, COLOR_ADMINCMD, string);
					}
     				SaveBusinesses(id);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/ahouseprice", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /ahouseprice [houseid] [price]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /ahouseprice [houseid] [price]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);

					Houses[id][HousePrice] = id2;
					new form[128];
					format(form, sizeof form, "You have set House ID: %d's price to %d", id,id2);
					SendClientMessage(playerid, COLOR_ADMINCMD,form);
					Delete3DTextLabel(housetext[id]);
			    	new houselocation[MAX_ZONE_NAME];
					GetCoords2DZone(Houses[id][EnterX],Houses[id][EnterY], houselocation, MAX_ZONE_NAME);
					format(string, sizeof(string), "[Casa de vanzare]\nAdresa: %d %s\nPret: $%d",id,houselocation,Houses[id][HousePrice]);
    				housetext[id] = Create3DTextLabel(string,0xF0F8FFAA,Houses[id][EnterX],Houses[id][EnterY],Houses[id][EnterZ],5.0,0);
	                // LOG IT HAHA
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new y, m, d;
					new hh,mi,s;
					getdate(y,m,d);
					gettime(hh,mi,s);
					format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /ahouseprice # You have set House ID: %d's price to %d",d,m,y,hh,mi,s,sendername,id,id2);
					CommandLog(string);
					SaveHouses(id);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/abusinessname", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessname [bizid] [name]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessname [bizid] [name]");
					return 1;
				}
				if(strfind( result , "|" , true ) == -1)
    			{
		   			strmid(Businesses[id][BusinessName], (result), 0, strlen((result)), 128);
					format(string, sizeof(string), "You have set Business ID's: %d's name to %s", id,(result));
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
					SaveBusinesses(id);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid symbol, | is not allowed");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/abusinessowner", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessowner [bizid] [name]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinessowner [bizid] [name]");
					return 1;
				}
				if(strfind( result , "|" , true ) == -1)
    			{
		   			strmid(Businesses[id][Owner], (result), 0, strlen((result)), 128);
					format(string, sizeof(string), "You have set Business ID's: %d's owner to %s", id,(result));
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid symbol, | is not allowed");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/abusinesstype", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
	  			SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinesstype [businessid] [type]");
				SendClientMessage(playerid, COLOR_WHITE,BUSINESS_TYPES);
				SendClientMessage(playerid, COLOR_WHITE,BUSINESS_TYPES2);
				return 1;
			}
			if (PlayerInfo[playerid][pAdministrator] >= 4)
			{
					new id;
					new form[128];
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinesstype [businessid] [type]");
						SendClientMessage(playerid, COLOR_WHITE,BUSINESS_TYPES);
						SendClientMessage(playerid, COLOR_WHITE,BUSINESS_TYPES2);
						return 1;
					}
					new id2;
					id2 = strval(tmp);
					Businesses[id][BizType] = id2;
					SaveBusinesses(id);
					format(form, sizeof form, "You have set ID Afacere: %d to type %d", id,id2);
					SendClientMessage(playerid, COLOR_ADMINCMD,form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/abusinesssell", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abusinesssell [businessid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				Businesses[id][Locked] = 0;
				Businesses[id][Owned] = 0;
				strmid(Businesses[id][Owner], "None", 0, strlen("None"), 255);
				ChangeStreamPickupModel(Businesses[id][PickupID],1272);
    			MoveStreamPickup(Businesses[id][PickupID],Businesses[id][EnterX], Businesses[id][EnterY], Businesses[id][EnterZ]);
				new form[128];
				SaveBusinesses(id);
				format(form, sizeof(form), "Ai vandut Afacerea: %d", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/astocuri", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /astocuri [modelid] [number]");
				return 1;
			}
			if (PlayerInfo[playerid][pAdministrator] >= 10)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /astocuri [modelid] [number]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);
					Stocuri[id] = id2;
					SaveStocuri(id);
					new form[128];
					format(form, sizeof(form), "Ai setat pentru masina cu id %d numarul de stocuri %d", id,id2);
					SendClientMessage(playerid, COLOR_WHITE, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
	}
 	if(strcmp(cmd, "/ahousesell", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /ahousesell [houseid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
				Houses[id][Locked] = 1;
				Houses[id][Owned] = 0;
				strmid(Houses[id][Owner], "None", 0, strlen("None"), 255);
				new form[128];
				format(form, sizeof(form), "You have sold House ID: %d", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
				//
				Delete3DTextLabel(housetext[id]);
				Delete3DTextLabel(housetext2[id]);
		    	new houselocation[MAX_ZONE_NAME];
				GetCoords2DZone(Houses[id][EnterX],Houses[id][EnterY], houselocation, MAX_ZONE_NAME);
				format(string, sizeof(string), "[Casa de vanzare]\nAdresa: %d %s\nPret: $%d",id,houselocation,Houses[id][HousePrice]);
			    housetext2[id] = Create3DTextLabel(string,COLOR_BLACK,Houses[id][EnterX],Houses[id][EnterY],Houses[id][EnterZ],5.0,0, 0);
			    format(string, sizeof(string), "[Casa de vanzare]\nAdresa: %d %s\nPret: $%d",id,houselocation,Houses[id][HousePrice]);
			    housetext[id] = Create3DTextLabel(string,0xbec339ff,Houses[id][EnterX],Houses[id][EnterY],Houses[id][EnterZ],5.0,0, 0);
	            // LOG IT HAHA
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new y, m, d;
				new hh,mi,s;
				getdate(y,m,d);
				gettime(hh,mi,s);
				format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /ahousesell # Sold HouseID: %d",d,m,y,hh,mi,s,sendername,id);
				CommandLog(string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ahouseentrance", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /ahouseentrance [houseid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
			    //new pmodel;
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				Houses[id][EnterX] = x;
				Houses[id][EnterY] = y;
				Houses[id][EnterZ] = z;
				Houses[id][EnterWorld] = GetPlayerVirtualWorld(playerid);
				Houses[id][EnterInterior] = GetPlayerInterior(playerid);
  				new Float:angle;
				GetPlayerFacingAngle(playerid, angle);
				Houses[id][EnterAngle] = angle;
    			SaveHouses(id);
				new form[128];
				format(form, sizeof(form), "You have set House ID: %d's location", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
				Move3DTextLabel(housetext[id], string, 0xF0F8FFAA, x, y, z);
				SaveHouses(id);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/agarageentrance", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /agarageentrance [garageid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				Garages[id][EnterX] = x;
				Garages[id][EnterY] = y;
				Garages[id][EnterZ] = z;
				Garages[id][EnterWorld] = GetPlayerVirtualWorld(playerid);
  				new Float:angle;
				GetPlayerFacingAngle(playerid, angle);
				Garages[id][EnterAngle] = angle;
    			SaveGarages(id);
				new form[128];
				format(form, sizeof(form), "You have set Garage ID: %d's location", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ahouseexit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /ahouseexit [houseid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				Houses[id][ExitX] = x;
				Houses[id][ExitY] = y;
				Houses[id][ExitZ] = z;
				Houses[id][ExitInterior] = GetPlayerInterior(playerid);
  				new Float:angle;
				GetPlayerFacingAngle(playerid, angle);
				Houses[id][ExitAngle] = angle;
				new form[128];
				format(form, sizeof(form), "You have set House ID: %d's exit location", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
				SaveHouses(id);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/ahouseowner", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /ahouseowner [houseid]]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 4)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /ahouseowner [houseid]]");
					return 1;
				}
				if(strfind( result , "|" , true ) == -1)
    			{
		   			strmid(Houses[id][Owner], (result), 0, strlen((result)), 128);
					format(string, sizeof(string), "You have set House ID: %d's owner to %s", id,(result));
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
 				else
				{
					SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid symbol, | is not allowed");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
	//==========================================================================
	if(strcmp(cmd, "/aapartmententrance", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /aapartmententrance [apartmentid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				Apartment[id][EnterX] = x;
				Apartment[id][EnterY] = y;
				Apartment[id][EnterZ] = z;
				Apartment[id][EnterWorld] = GetPlayerVirtualWorld(playerid);
				Apartment[id][EnterInterior] = GetPlayerInterior(playerid);
  				new Float:angle;
				GetPlayerFacingAngle(playerid, angle);
				Apartment[id][EnterAngle] = angle;
				MoveStreamPickup(Apartment[id][PickupID],Apartment[id][EnterX], Apartment[id][EnterY], Apartment[id][EnterZ]);

				new form[128];
				format(form, sizeof(form), "Ai setat ca apartamentul : %d sa aiba aici intrarea.", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/aapartmentexit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /aapartmentexit [buildingid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				Apartment[id][ExitX] = x;
				Apartment[id][ExitY] = y;
				Apartment[id][ExitZ] = z;
				Apartment[id][ExitInterior] = GetPlayerInterior(playerid);
  				new Float:angle;
				GetPlayerFacingAngle(playerid, angle);
				Apartment[id][ExitAngle] = angle;

				new form[128];
				format(form, sizeof(form), "Ai setat ca apartamentul: %d sa aiba iesirea la aceasta locatie.", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/abuildingentrance", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abuildingentrance [buildingid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				Building[id][EnterX] = x;
				Building[id][EnterY] = y;
				Building[id][EnterZ] = z;
				Building[id][EnterWorld] = GetPlayerVirtualWorld(playerid);
				Building[id][EnterInterior] = GetPlayerInterior(playerid);
  				new Float:angle;
				GetPlayerFacingAngle(playerid, angle);
				Building[id][EnterAngle] = angle;
				MoveStreamPickup(Building[id][PickupID],Building[id][EnterX], Building[id][EnterY], Building[id][EnterZ]);
				SaveBuilding(id);
				new form[128];
				format(form, sizeof(form), "You have set Building ID: %d's location", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/agotobuilding", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /agotobuilding [buildingid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				SetPlayerPos(playerid,Building[id][EnterX],Building[id][EnterY],Building[id][EnterZ]);
				SetPlayerInterior(playerid,Building[id][EnterInterior]);
				SetPlayerVirtualWorld(playerid,Building[id][EnterWorld]);
				new form[128];
				format(form, sizeof(form), "You teleported to Building ID: %d", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/abuildinglock", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abuildinglock [buildingid]");
				return 1;
			}
			new id = strval(tmp);
			new form[128];
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
			    if(Building[id][Locked] == 0)
			    {
			    	Building[id][Locked] = 1;
   					format(form, sizeof(form), "You have locked Building ID: %d", id);
					SendClientMessage(playerid, COLOR_ADMINCMD, form);
			    }
			    else
			    {
			    	Building[id][Locked] = 0;
   					format(form, sizeof(form), "You have unlocked Building ID: %d", id);
					SendClientMessage(playerid, COLOR_ADMINCMD, form);
			    }

			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp("/truck", cmd, true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] == 9)
			{
				if(PlayerInfo[playerid][pCanJob] == 10)
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Ai facut o tura cu tirul.Asteapta sa iti vina salariul.");
				    return 1;
				}
			    if(TruckDelivering[playerid] == 0)
			    {
		        	TruckDelivering[playerid] = 2;
		        	OnPlayerEnterCheckpoint(playerid);
			    }
			    else
			    {
			        DisablePlayerCheckpoint(playerid);
			        TruckDelivering[playerid] = 0;
			        SendClientMessage(playerid,COLOR_GRAD2,"Ai oprit lucrul.");
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GRAD2,"Job invalid.");
			}
		}
	}
	if(strcmp("/startsweep", cmd, true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pJob] == 10)
			{
				new newcar = GetPlayerVehicleID(playerid);
				new modelcar = GetVehicleModel(newcar);
				if (modelcar == 574)
				{
					if(PlayerInfo[playerid][pCanJob] != 10)
					{
						if(Sweep[playerid] == 0)
						{
							DisablePlayerCheckpoint(playerid);
							SendClientMessage(playerid,COLOR_WHITE,"Ai inceput tura de Sweep.");
							Sweep[playerid] = 1;
							CPSweep[playerid] = 1;
							SetPlayerCheckpoint(playerid, 2300.6365,-2355.5398,13.1155, 3.0);
						}
						else SendClientMessage(playerid,COLOR_WHITE,"Deja faci tura de sweep.");
					}
					else SendClientMessage(playerid,COLOR_WHITE,"Ai facut tura de Sweep, asteapta pana la salariu si poti reveni.");
				}
			}
			else return SendClientMessage(playerid,COLOR_GRAD2, "Job invalid");
		}
	}
    if(strcmp("/startcutter", cmd, true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pJob] == 15)
			{
				if(PlayerInfo[playerid][pCanJob] != 15)
				{
					if(Cutter[playerid] == 0)
					{
						DisablePlayerCheckpoint(playerid);
						SendClientMessage(playerid,COLOR_WHITE,"Du-te si taie fiecare lemn pentru a-l incarca.");
						Cutter[playerid] = 1;
						CPCutter[playerid] = 1;
						SetPlayerCheckpoint(playerid, -529.2377,-193.5804,78.4063, 3.0);
					}
					else SendClientMessage(playerid,COLOR_WHITE,"Deja faci tura de lemne.");
				}
				else SendClientMessage(playerid,COLOR_WHITE,"Ai facut tura de lemne, asteapta pana la salariu si poti reveni.");
			}
			else return SendClientMessage(playerid,COLOR_GRAD2, "Job invalid");
		}
	}
    if(strcmp("/startnews", cmd, true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pJob] == 16)
			{
				if(PlayerInfo[playerid][pCanJob] != 16)
				{
					if(Boy[playerid] == 0)
					{
						DisablePlayerCheckpoint(playerid);
						SendClientMessage(playerid,COLOR_WHITE,"Imparte la fiecare casa cate un ziar.");
						Boy[playerid] = 1;
						CPBoy[playerid] = 1;
						SetPlayerCheckpoint(playerid, 2014.8727,-1732.5842,14.2344, 3.0);
					}
					else SendClientMessage(playerid,COLOR_WHITE,"Deja esti cu echipamentul in spate si iti faci tura.");
				}
				else SendClientMessage(playerid,COLOR_WHITE,"Tocmai ai impartit toate ziarele , revino la urmatorul salariu.");
			}
			else return SendClientMessage(playerid,COLOR_GRAD2, "Loc de munca invalid");
		}
	}
    if(strcmp("/startdelivery", cmd, true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pJob] == 14)
			{
				new newcar = GetPlayerVehicleID(playerid);
				new modelcar = GetVehicleModel(newcar);
				if (modelcar == 414)
				{
					if(PlayerInfo[playerid][pCanJob] != 14)
					{
						if(Mobilier[playerid] == 0)
						{
							DisablePlayerCheckpoint(playerid);
							SendClientMessage(playerid,COLOR_WHITE,"Tocmai ai inceput tura de livrator de mobilier.");
							SendClientMessage(playerid,COLOR_WHITE,"Trebuie sa duci fiecare mobila la cate un magazin.");
							Mobilier[playerid] = 1;
							CPMobilier[playerid] = 1;
							SetPlayerCheckpoint(playerid, 1848.0990,-2057.6438,13.5535, 3.0);
						}
						else SendClientMessage(playerid,COLOR_WHITE,"Deja esti pe tura de livrator de mobilier.");
					}
					else SendClientMessage(playerid,COLOR_WHITE,"Deja ti-ai facut tura de livrator de mobilier , asteapta pana la salariu.");
				}
			}
			else return SendClientMessage(playerid,COLOR_GRAD2, "Job invalid");
		}
	}
	if(strcmp("/starthay", cmd, true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pJob] == 12)
			{
				new newcar = GetPlayerVehicleID(playerid);
				new modelcar = GetVehicleModel(newcar);
				if (modelcar == 578)
				{
					if(PlayerInfo[playerid][pCanJob] != 10)
					{
						if(Hay[playerid] == 0)
						{
							DisablePlayerCheckpoint(playerid);
							SendClientMessage(playerid,COLOR_WHITE,"Dute si incarca baloti in masina.");
							Hay[playerid] = 1;
							CPHay[playerid] = 1;
							SetPlayerCheckpoint(playerid, -71.7345,21.5383,3.7406, 3.0);
						}
						else SendClientMessage(playerid,COLOR_WHITE,"Deja ai inceput munca.");
					}
					else SendClientMessage(playerid,COLOR_WHITE,"Ai livrat baloti, asteapta pana la salariu si poti reveni.");
				}
			}
			else return SendClientMessage(playerid,COLOR_GRAD2, "Job invalid");
		}
	}
	if(strcmp("/startpizza", cmd, true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pJob] == 11)
			{
				new newcar = GetPlayerVehicleID(playerid);
				new modelcar = GetVehicleModel(newcar);
				if (modelcar == 448)
				{
					if(PlayerInfo[playerid][pCanJob] != 10)
					{
						if(Pizza[playerid] == 0)
						{
							DisablePlayerCheckpoint(playerid);
							SendClientMessage(playerid,COLOR_WHITE,"Ai inceput tura de livrare Pizza.");
							Pizza[playerid] = 1;
							randpizza[playerid] = random(143);
							if (randpizza[playerid] == 0)
							{
								randpizza[playerid] = random(143);
							}
							CPPizza[playerid]++;
							SetPlayerCheckpoint(playerid, Houses[randpizza[playerid]][EnterX],Houses[randpizza[playerid]][EnterY],Houses[randpizza[playerid]][EnterZ], 3.0);
						}
						else SendClientMessage(playerid,COLOR_WHITE,"Deja faci livrare Pizza.");
					}
					else SendClientMessage(playerid,COLOR_WHITE,"Ai facut tura de livrare Pizza, asteapta pana la salariu si poti reveni.");
				}
			}
			else return SendClientMessage(playerid,COLOR_GRAD2, "Job invalid");
		}
	}
 	if(strcmp(cmd, "/abuildingexit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abuildingexit [buildingid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				Building[id][ExitX] = x;
				Building[id][ExitY] = y;
				Building[id][ExitZ] = z;
				Building[id][ExitInterior] = GetPlayerInterior(playerid);
  				new Float:angle;
				GetPlayerFacingAngle(playerid, angle);
				Building[id][ExitAngle] = angle;

				new form[128];
				format(form, sizeof(form), "You have set Building ID: %d's exit location", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/abuildingname", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abuildingname [buildingid] [name]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /abuildingname [buildingid] [name]");
					return 1;
				}
				if(strfind( result , "|" , true ) == -1)
    			{
		   			strmid(Building[id][BuildingName], (result), 0, strlen((result)), 128);
					format(string, sizeof(string), "You have set Building ID: %d's name to %s", id,(result));
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
					SaveBuilding(id);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid symbol, | is not allowed");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	//==========================================================================
	if(strcmp(cmd, "/agotobank", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			SetPlayerPos(playerid,BankPosition[X],BankPosition[Y],BankPosition[Z]);
			SetPlayerInterior(playerid,BankPosition[Interior]);
			SetPlayerVirtualWorld(playerid,BankPosition[World]);
			SetPlayerFacingAngle(playerid,BankPosition[Angle]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
   	if(strcmp(cmd, "/agotodrivingtestpos", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			SetPlayerPos(playerid,DrivingTestPosition[X],DrivingTestPosition[Y],DrivingTestPosition[Z]);
			SetPlayerInterior(playerid,DrivingTestPosition[Interior]);
			SetPlayerVirtualWorld(playerid,DrivingTestPosition[World]);
			SetPlayerFacingAngle(playerid,DrivingTestPosition[Angle]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
 	if(strcmp(cmd, "/agotopolicearrestpos", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			SetPlayerPos(playerid,PoliceArrestPosition[X],PoliceArrestPosition[Y],PoliceArrestPosition[Z]);
			SetPlayerInterior(playerid,PoliceArrestPosition[Interior]);
			SetPlayerVirtualWorld(playerid,PoliceArrestPosition[World]);
			SetPlayerFacingAngle(playerid,PoliceArrestPosition[Angle]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	if(strcmp(cmd, "/agotogovarrestpos", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			SetPlayerPos(playerid,GovernmentArrestPosition[X],GovernmentArrestPosition[Y],GovernmentArrestPosition[Z]);
			SetPlayerInterior(playerid,GovernmentArrestPosition[Interior]);
			SetPlayerVirtualWorld(playerid,GovernmentArrestPosition[World]);
			SetPlayerFacingAngle(playerid,GovernmentArrestPosition[Angle]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
  	if(strcmp(cmd, "/agotopolicedutypos", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			SetPlayerPos(playerid,PoliceDutyPosition[X],PoliceDutyPosition[Y],PoliceDutyPosition[Z]);
			SetPlayerInterior(playerid,PoliceDutyPosition[Interior]);
			SetPlayerVirtualWorld(playerid,PoliceDutyPosition[World]);
			SetPlayerFacingAngle(playerid,PoliceDutyPosition[Angle]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	if(strcmp(cmd, "/agotomedicdutypos", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			SetPlayerPos(playerid,MedicDutyPosition[X],MedicDutyPosition[Y],MedicDutyPosition[Z]);
			SetPlayerInterior(playerid,MedicDutyPosition[Interior]);
			SetPlayerVirtualWorld(playerid,MedicDutyPosition[World]);
			SetPlayerFacingAngle(playerid,MedicDutyPosition[Angle]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	if(strcmp(cmd, "/agotoguarddutypos", true) == 0)
	{
		if(PlayerInfo[playerid][pAdministrator] >= 1)
		{
			SetPlayerPos(playerid,GuardDutyPosition[X],GuardDutyPosition[Y],GuardDutyPosition[Z]);
			SetPlayerInterior(playerid,GuardDutyPosition[Interior]);
			SetPlayerVirtualWorld(playerid,GuardDutyPosition[World]);
			SetPlayerFacingAngle(playerid,GuardDutyPosition[Angle]);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
		}
		return 1;
	}
	//==========================================================================
 	if(strcmp(cmd, "/afactionspawn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionspawn [factionid]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x, y, z);
				DynamicFactions[id][fX] = x;
				DynamicFactions[id][fY] = y;
				DynamicFactions[id][fZ] = z;
				SaveFactions(id);
				format(string, sizeof(string), "Ai setat ca factiunea: %d sa se spawneze aici.", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/aresetfaction", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /aresetfaction [factionid]");
				return 1;
			}
			new factionid = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1)
			{
				new rank;
				format(string, sizeof(string), "Faction%d",factionid);
				strmid(DynamicFactions[factionid][fName], string, 0, strlen(string), 255);
				DynamicFactions[factionid][fX] = 0.0;
				DynamicFactions[factionid][fY] = 0.0;
				DynamicFactions[factionid][fZ] = 0.0;
				DynamicFactions[factionid][fBank] = 0;
				rank = 1; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank1], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank2], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank3], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank4], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank5], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank6], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank7], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank8], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank9], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank10], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank11], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank12], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank13], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank14], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank15], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank16], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank17], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank18], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank19], string, 0, strlen(string), 255);
				rank ++; format(string, sizeof(string), "Rank%d",rank); strmid(DynamicFactions[factionid][fRank20], string, 0, strlen(string), 255);
				DynamicFactions[factionid][fJoinRank] = 0;
				DynamicFactions[factionid][fType] = 0;
				DynamicFactions[factionid][fRankAmount] = 0;
				format(string, sizeof(string), "Ai resetat factiunea: %d", factionid);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SaveFactions(factionid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/showmenu",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pBizKey] == 45 || PlayerInfo[playerid][pWorkOn] == 45)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /showmenu [playerid/PartOfName]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(4.0, playerid, giveplayerid))
						{
							ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,1,1,1,1);
	                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerPlayerActionMessage(playerid,giveplayerid,15.0,"ia de pe tejghea un meniu si il arata lui");
						    SendClientMessage(giveplayerid, COLOR_RED, "|____________________ Meniu cu mancare _____________________|");
							SendClientMessage(giveplayerid, COLOR_WHITE, "           --- Specialitatea zilei ---               ");
							SendClientMessage(giveplayerid, COLOR_WHITE, "          Pui Kebab ($75) Salata ($45)             ");
					  		SendClientMessage(giveplayerid, COLOR_WHITE, "   Pizza cu peperony($200) Pui simplu ($100)              ");
					  		SendClientMessage(giveplayerid, COLOR_WHITE, "     Suc($50) Pizza Mare ($425)        ");
					  		SendClientMessage(giveplayerid, COLOR_RED, "|____________________________________________________|");
							SendClientMessage(giveplayerid, COLOR_GREY, string);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
	         			}
						else
		                {
		                    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine!");
		                    return 1;
		                }
		        	}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(strcmp(cmd, "/afactionname", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionname [factionid] [name]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionname [factionid] [name]");
					return 1;
				}
				if(strfind( result , "'" , true ) == -1)
    			{
		   			strmid(DynamicFactions[id][fName], (result), 0, strlen((result)), 128);
					format(string, sizeof(string), "Ai setat ca factiunea: %d sa se numeasca %s", id,(result));
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
					SaveFactions(id);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Simbol invalid.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/agotofaction", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /agotofaction [id]");
				return 1;
			}
			new id = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 2)
			{
				SetPlayerPos(playerid,DynamicFactions[id][fX],DynamicFactions[id][fY],DynamicFactions[id][fZ]);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
				new form[128];
				format(form, sizeof(form), "Te-ai teleportat factiunea: %d", id);
				SendClientMessage(playerid, COLOR_ADMINCMD, form);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/afactiontype", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactiontype [factionid] [type (Numeric)]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactiontype [factionid] [type (Numeric)]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);

					DynamicFactions[id][fType] = id2;
					new form[128];
					format(form, sizeof form, "Ai setat ca factiunea: %d sa aiba tipul %d", id,id2);
					SendClientMessage(playerid, COLOR_ADMINCMD,form);
					SaveFactions(id);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/afactionjoinrank", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionjoinrank [factionid] [2-20]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionjoinrank [factionid] [2-20]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);

					if(id2 >= 2 && id2 <= 20)
					{
	  					DynamicFactions[id][fJoinRank] = id2;
						new form[128];
						format(form, sizeof form, "Ai setat ca factiunea: %d sa aiba %d rankuri.", id,id2);
						SendClientMessage(playerid, COLOR_ADMINCMD,form);
						SaveFactions(id);
					}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/afactionbank", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionbank [factionid] [amount]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionbank [factionid] [amount]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);

					DynamicFactions[id][fBank] = id2;
					new form[128];
					format(form, sizeof form, "Ai setat ca factiunea: %d sa aiba %d bani in banca.", id,id2);
					SendClientMessage(playerid, COLOR_ADMINCMD,form);
					SaveFactions(id);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/afactionrankamount", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionrankamount [factionid] [2-10]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionrankamount [factionid] [2-20]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);

					if(id2 >= 2 && id2 <= 20)
					{
	  					DynamicFactions[id][fRankAmount] = id2;
						new form[128];
						format(form, sizeof form, "You have set Faction ID: %d's RankAmount to %d", id,id2);
						SendClientMessage(playerid, COLOR_ADMINCMD,form);
						SaveFactions(id);
					}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/afactionrankname", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionrankname [factionid] [Rank ID - 1-10] [Name]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionrankname [factionid] [Rank ID - 1-20] [Name]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);

					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /afactionrankname [factionid] [Rank ID - 1-20] [Name]");
						return 1;
					}
  					if(strfind( result , "|" , true ) == -1)
    				{
						if(id2 == 1)
						{
				   			strmid(DynamicFactions[id][fRank1], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 2)
						{
				   			strmid(DynamicFactions[id][fRank2], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 3)
						{
				   			strmid(DynamicFactions[id][fRank3], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 4)
						{
				   			strmid(DynamicFactions[id][fRank4], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 5)
						{
				   			strmid(DynamicFactions[id][fRank5], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 6)
						{
				   			strmid(DynamicFactions[id][fRank6], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 7)
						{
				   			strmid(DynamicFactions[id][fRank7], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 8)
						{
				   			strmid(DynamicFactions[id][fRank8], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 9)
						{
				   			strmid(DynamicFactions[id][fRank9], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 10)
						{
				   			strmid(DynamicFactions[id][fRank10], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 11)
						{
				   			strmid(DynamicFactions[id][fRank11], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 12)
						{
				   			strmid(DynamicFactions[id][fRank12], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 13)
						{
				   			strmid(DynamicFactions[id][fRank13], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 14)
						{
				   			strmid(DynamicFactions[id][fRank14], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 15)
						{
				   			strmid(DynamicFactions[id][fRank15], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 16)
						{
				   			strmid(DynamicFactions[id][fRank16], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 17)
						{
				   			strmid(DynamicFactions[id][fRank17], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 18)
						{
				   			strmid(DynamicFactions[id][fRank18], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 19)
						{
				   			strmid(DynamicFactions[id][fRank19], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
						else if(id2 == 20)
						{
				   			strmid(DynamicFactions[id][fRank20], (result), 0, strlen((result)), 128);
							format(string, sizeof(string), "Ai setat ca factiunea: %d care are rank-ul: %d sa aibe numele: %s", id,id2,result);
							SendClientMessage(playerid, COLOR_ADMINCMD, string);
							SaveFactions(id);
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Simbol invalid.");
					}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
/*	if(strcmp(cmd, "/gototest", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
	            SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /goto [playerid/partofname]");
	            return 1;
	        }
	        new Float:plocx,Float:plocy,Float:plocz;
	        new plo;
	        plo = ReturnUser(tmp);
	        if (IsPlayerConnected(plo))
			{
	            if(plo != INVALID_PLAYER_ID)
				{
	                if (PlayerInfo[playerid][pAdministrator] >= 1)
					{
	                    GetPlayerPos(plo, plocx, plocy, plocz);
	                    new interior = GetPlayerInterior(plo);
	                    new world = GetPlayerVirtualWorld(plo);

	                    if (GetPlayerState(playerid) == 2)
						{
	                        new tmpcar = GetPlayerVehicleID(playerid);
	                        SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
	                        SetPlayerVirtualWorld(playerid,world);
	                        SetPlayerInterior(playerid,interior);
	                        LinkVehicleToInterior(tmpcar, interior);
	                    }
	                    else
						{
	                        SetPlayerPos(playerid,plocx,plocy+2, plocz);
	                        SetPlayerVirtualWorld(playerid,world);
	                        SetPlayerInterior(playerid,interior);
	                    }
	                    format(string, sizeof(string), "Te-ai teleportat la %s", GetPlayerNameEx(plo));
	                    SendClientMessage(playerid, COLOR_ADMINCMD, string);
	                }
	                else
					{
	                    SendClientMessage(playerid, COLOR_GRAD2, "Nu esti autorizat sa folosesti comanda!");
	                }
	            }
	        }
	        else
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este online.);
	        }
	    }
	    return 1;
	}*/

	// Police kommandoer osv==========================================================================
  	if(strcmp(cmd, "/departments", true) == 0 || strcmp(cmd, "/d", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        new length = strlen(cmdtext);
	        while ((idx < length) && (cmdtext[idx] <= ' '))
			{
	            idx++;
	        }
	        new offset = idx;
	        new result[256];
	        while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
	            result[idx - offset] = cmdtext[idx];
	            idx++;
	        }
	        result[idx - offset] = EOS;
	        if(!strlen(result))
			{
	            SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: (/d)epartments [chat]");
	            return 1;
	        }
	        if(Muted[playerid] == 1)
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Momentan ai mute.");
	            return 1;
	        }
            new maskid = PlayerInfo[playerid][pMaskID];
	        new str[128];
	        new faction[128];
			if(PlayerInfo[playerid][pFaction] == 1) { faction = "SASD"; }
			if(PlayerInfo[playerid][pFaction] == 3) { faction = "LSPD"; }
			if(PlayerInfo[playerid][pFaction] == 5) { faction = "LSFD"; }
			if(PlayerInfo[playerid][pFaction] == 6) { faction = "GOUVERMENT"; }
	        if(PlayerInfo[playerid][pFaction] == 2) { faction = "EMS"; }
			if(PlayerInfo[playerid][pFaction] == 7) { faction = "LSAS"; }
	        if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 7)
			{
				if(strlen(result) > MAXLEN)
				{
	     			new pos = MAXLEN;
				    //while(result[--pos] < ' ') {}
				    if(pos < MAXLEN-1) pos = MAXLEN;
				    if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(str, sizeof(str), "** [%s] %s [Masca_%d]: %.*s ...", faction, GetRankName(playerid), maskid, pos, result);
						SendFactionMessage(3, COLOR_ALLDEPT, str);
						SendFactionMessage(5, COLOR_ALLDEPT, str);
			            SendFactionMessage(1, COLOR_ALLDEPT, str);
			            SendFactionMessage(2, COLOR_ALLDEPT, str);
			            SendFactionMessage(7, COLOR_ALLDEPT, str);
			            SendFactionMessage(6, COLOR_ALLDEPT, str);
						format(str, sizeof(str), "** [%s] %s [Masca_%d]: ... %s **", faction, GetRankName(playerid), maskid, result[pos]);
						SendFactionMessage(3, COLOR_ALLDEPT, str);
						SendFactionMessage(5, COLOR_ALLDEPT, str);
			            SendFactionMessage(1, COLOR_ALLDEPT, str);
			            SendFactionMessage(2, COLOR_ALLDEPT, str);
			            SendFactionMessage(7, COLOR_ALLDEPT, str);
			            SendFactionMessage(6, COLOR_ALLDEPT, str);
					}
					else
					{
					    format(str, sizeof(str), "** [%s] %s %s: %.*s ...", faction, GetRankName(playerid), GetPlayerNameEx(playerid), pos, result);
						SendFactionMessage(3, COLOR_ALLDEPT, str);
						SendFactionMessage(5, COLOR_ALLDEPT, str);
			            SendFactionMessage(1, COLOR_ALLDEPT, str);
			            SendFactionMessage(2, COLOR_ALLDEPT, str);
			            SendFactionMessage(7, COLOR_ALLDEPT, str);
			            SendFactionMessage(6, COLOR_ALLDEPT, str);
						format(str, sizeof(str), "** [%s] %s %s: ... %s **", faction, GetRankName(playerid), GetPlayerNameEx(playerid), result[pos]);
						SendFactionMessage(3, COLOR_ALLDEPT, str);
						SendFactionMessage(5, COLOR_ALLDEPT, str);
			            SendFactionMessage(1, COLOR_ALLDEPT, str);
			            SendFactionMessage(2, COLOR_ALLDEPT, str);
			            SendFactionMessage(7, COLOR_ALLDEPT, str);
			            SendFactionMessage(6, COLOR_ALLDEPT, str);
					}
				}
				else
				{
				    if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(str, sizeof(str), "** [%s] %s [Masca_%d]: %s **", faction, GetRankName(playerid), maskid, result);
						SendFactionMessage(3, COLOR_ALLDEPT, str);
						SendFactionMessage(5, COLOR_ALLDEPT, str);
			            SendFactionMessage(1, COLOR_ALLDEPT, str);
			            SendFactionMessage(2, COLOR_ALLDEPT, str);
			            SendFactionMessage(7, COLOR_ALLDEPT, str);
			            SendFactionMessage(6, COLOR_ALLDEPT, str);
					}
					else
					{
					    format(str, sizeof(str), "** [%s] %s %s: %s **", faction, GetRankName(playerid), GetPlayerNameEx(playerid), result);
						SendFactionMessage(3, COLOR_ALLDEPT, str);
						SendFactionMessage(5, COLOR_ALLDEPT, str);
			            SendFactionMessage(1, COLOR_ALLDEPT, str);
			            SendFactionMessage(2, COLOR_ALLDEPT, str);
			            SendFactionMessage(7, COLOR_ALLDEPT, str);
			            SendFactionMessage(6, COLOR_ALLDEPT, str);
					}
				}
	    		if(strlen(result) > MAXLEN)
				{
	     			new pos = MAXLEN;
				    //while(result[--pos] < ' ') {}
				    if(pos < MAXLEN-1) pos = MAXLEN;
				    if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(str, sizeof(str), "(Radio) [Masca_%d] spune: %.*s ...", maskid, pos, result);
						SendProxRadioMessage(playerid, str);
						format(str, sizeof(str), "(Radio) [Masca_%d] spune: ... %s", maskid, result[pos]);
						SendProxRadioMessage(playerid, str);
					}
					else
					{
						format(str, sizeof(str), "(Radio) %s spune: %.*s ...", GetPlayerNameEx(playerid), pos, result);
						SendProxRadioMessage(playerid, str);
						format(str, sizeof(str), "(Radio) %s spune: ... %s", GetPlayerNameEx(playerid), result[pos]);
						SendProxRadioMessage(playerid, str);
		    			return 1;
					}
				}
				else
				{
	    			if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(str, sizeof(str), "(Radio) [Masca_%d] spune: %s", maskid, result);
						SendProxRadioMessage(playerid, str);
					}
					else
					{
						format(str, sizeof(str), "(Radio) %s spune: %s", GetPlayerNameEx(playerid), result);
						SendProxRadioMessage(playerid, str);
					}
				}
				return 1;
			}
	        else
	        {
                SendClientMessage(playerid, COLOR_LIGHTRED, "Factiune invalida.");
			    return 1;
			}
	    }
	    return 1;
	}

	if(strcmp(cmd, "/r", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
		    if(Muted[playerid] == 1) { SendClientMessage(playerid, COLOR_LIGHTRED, "Ai primit mute."); return 1; }
       		if(PlayerInfo[playerid][pRadio] == 0) { SendClientMessage(playerid, COLOR_GREY,"Nu ai o statie radio."); return 1; }
			if(PlayerInfo[playerid][pJailed] != 0) { SendClientMessage(playerid, COLOR_LIGHTRED,"Ti s-a confiscat statia radio.."); return 1; }
			if(PlayerInfo[playerid][pRfreq] == 0) { SendClientMessage(playerid, COLOR_WHITE,"Te rog selecteaza o frecventa!(/setfreq)"); return 1; }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
 			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
 				idx++;
   			}
    		new offset = idx;
    		new result[256];
    		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    		{
   				result[idx - offset] = cmdtext[idx];
    			idx++;
    		}
   			result[idx - offset] = EOS;
   			if(!strlen(result))
   			{
    			SendClientMessage(playerid, COLOR_GRAD2, "Foloseste: (/r)adio [radio chat]");
              	return 1;
       		}
       		new str[128];
			new maskid = PlayerInfo[playerid][pMaskID];
			if(RadioStatus[playerid] == 1)
			{
			    if(PlayerInfo[playerid][pRfreq] == 911999 || PlayerInfo[playerid][pRfreq] == 911910 || PlayerInfo[playerid][pRfreq] == 911912 || PlayerInfo[playerid][pRfreq] == 911911 || PlayerInfo[playerid][pRfreq] == 911913)
   				{
	   			    if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 7)
	   			    {
		   			    if(strlen(result) > MAXLEN)
						{
			     			new pos = MAXLEN;
						    //while(result[--pos] < ' ') {}
						    if(pos < MAXLEN-1) pos = MAXLEN;
						    if(PlayerInfo[playerid][pMaskuse] == 1)
							{
								format(str, sizeof(str), "**[CH: %d] %s [Masca_%d]: %.*s ...", PlayerInfo[playerid][pRfreq], GetRankName(playerid), maskid, pos, result);
								SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
								format(str, sizeof(str), "**[CH: %d] %s [Masca_%d]: ... %s", PlayerInfo[playerid][pRfreq], GetRankName(playerid), maskid, result[pos]);
								SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
							}
							else
							{
							    format(str, sizeof(str), "**[CH: %d] %s %s: %.*s ...", PlayerInfo[playerid][pRfreq], GetRankName(playerid), GetPlayerNameEx(playerid), pos, result);
							    SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
								format(str, sizeof(str), "**[CH: %d] %s %s: ... %s", PlayerInfo[playerid][pRfreq], GetRankName(playerid), GetPlayerNameEx(playerid), result[pos]);
								SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
							}
						}
						else
						{
						    if(PlayerInfo[playerid][pMaskuse] == 1)
							{
								format(str, sizeof(str), "**[CH: %d] %s [Masca_%d]: %s", PlayerInfo[playerid][pRfreq], GetRankName(playerid), maskid, result);
								SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
							}
							else
							{
							    format(str, sizeof(str), "**[CH: %d] %s %s: %s", PlayerInfo[playerid][pRfreq], GetRankName(playerid), GetPlayerNameEx(playerid), result);
						    	SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
							}
						}
		      			if(strlen(result) > MAXLEN)
						{
				 			new pos = MAXLEN;
						    //while(result[--pos] < ' ') {}
						    if(pos < MAXLEN-1) pos = MAXLEN;
						    if(PlayerInfo[playerid][pMaskuse] == 1)
							{
								format(str, sizeof(str), "(Radio) [Masca_%d] spune: %.*s ...", maskid, pos, result);
								SendProxRadioMessage(playerid, str);
								format(str, sizeof(str), "(Radio) [Masca_%d] spune: ... %s", maskid, result[pos]);
								SendProxRadioMessage(playerid, str);
							} else {
								format(str, sizeof(str), "(Radio) %s spune: %.*s ...", GetPlayerNameEx(playerid), pos, result);
								SendProxRadioMessage(playerid, str);
								format(str, sizeof(str), "(Radio) %s spune: ... %s", GetPlayerNameEx(playerid), result[pos]);
								SendProxRadioMessage(playerid, str);
				    			return 1;
							}
						}
						else
						{
							if(PlayerInfo[playerid][pMaskuse] == 1)
							{
								format(str, sizeof(str), "(Radio) [Masca_%d] spune: %s", maskid, result);
								SendProxRadioMessage(playerid, str);
							}
							else
							{
								format(str, sizeof(str), "(Radio) %s spune: %s", GetPlayerNameEx(playerid), result);
								SendProxRadioMessage(playerid, str);
							}
						}
					}
					return 1;
				}
				else
				{
	    			if(strlen(result) > MAXLEN)
					{
		     			new pos = MAXLEN;
					    //while(result[--pos] < ' ') {}
					    if(pos < MAXLEN-1) pos = MAXLEN;
					    if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(str, sizeof(str), "**[CH: %d] [Masca_%d]: %.*s ...", PlayerInfo[playerid][pRfreq], maskid, pos, result);
							SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
							format(str, sizeof(str), "**[CH: %d] [Masca_%d]: ... %s", PlayerInfo[playerid][pRfreq], maskid, result[pos]);
							SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
						}
						else
						{
						    format(str, sizeof(str), "**[CH: %d] %s: %.*s ...", PlayerInfo[playerid][pRfreq], GetPlayerNameEx(playerid), pos, result);
						    SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
							format(str, sizeof(str), "**[CH: %d] %s: ... %s", PlayerInfo[playerid][pRfreq], GetPlayerNameEx(playerid), result[pos]);
							SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
						}
					}
					else
					{
					    if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(str, sizeof(str), "**[CH: %d] [Masca_%d]: %s", PlayerInfo[playerid][pRfreq], maskid, result);
							SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
						}
						else
						{
						    format(str, sizeof(str), "**[CH: %d] %s: %s", PlayerInfo[playerid][pRfreq], GetPlayerNameEx(playerid), result);
					    	SendRadioMessage(playerid,PlayerInfo[playerid][pRfreq], COLOR_RADIO,str);
						}
					}
					if(strlen(result) > MAXLEN)
					{
			 			new pos = MAXLEN;
					    //while(result[--pos] < ' ') {}
					    if(pos < MAXLEN-1) pos = MAXLEN;
					    if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(str, sizeof(str), "(Radio) [Masca_%d] spune: %.*s ...", maskid, pos, result);
							SendProxRadioMessage(playerid, str);
							format(str, sizeof(str), "(Radio) [Masca_%d] spune: ... %s", maskid, result[pos]);
							SendProxRadioMessage(playerid, str);
						}
						else
						{
							format(str, sizeof(str), "(Radio) %s spune: %.*s ...", GetPlayerNameEx(playerid), pos, result);
							SendProxRadioMessage(playerid, str);
							format(str, sizeof(str), "(Radio) %s spune: ... %s", GetPlayerNameEx(playerid), result[pos]);
							SendProxRadioMessage(playerid, str);
			    			return 1;
						}
					}
					else
					{
						if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(str, sizeof(str), "(Radio) [Masca_%d] spune: %s", maskid, result);
							SendProxRadioMessage(playerid, str);
						}
						else
						{
							format(str, sizeof(str), "(Radio) %s spune: %s", GetPlayerNameEx(playerid), result);
							SendProxRadioMessage(playerid, str);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Statia ta radio este oprita.");
		      	return 1;
			}
		}
		return 1;
    }

	if (strcmp("/setfreq", cmd, true) == 0)  // By hollywood
    {
        tmp = strtok(cmdtext, idx);
        new freqx;
        if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GREY, "Nu te-ai setat inca o frecventa.");
        freqx = strval(tmp);
       	if(PlayerInfo[playerid][pRadio] == 0)
		{
 	  		SendClientMessage(playerid, COLOR_GREY,"Nu ai o state radio.");
    		return 1;
		}
        if(freqx == 911112 && PlayerInfo[playerid][pFaction] != 2)
        {
        	SendClientMessage(playerid, COLOR_GREY, "Nu te poti alatura acestei frecvente!");
         	return 1;
		}
        if(freqx == 911910 && PlayerInfo[playerid][pFaction] != 3)
        {
        	SendClientMessage(playerid, COLOR_GREY, "Nu te poti alatura acestei frecvente!");
         	return 1;
		}
        if(freqx == 911510 && PlayerInfo[playerid][pFaction] != 1)
        {
        	SendClientMessage(playerid, COLOR_GREY, "Nu te poti alatura acestei frecvente!");
         	return 1;
		}
		if(freqx > 99999999 || freqx < 1000)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Poti alege orice canal cuprins intre 999 - 99999999");
 		} else {
			PlayerInfo[playerid][pRfreq] = freqx;
			format(string, sizeof(string), "Ti-ai setat statia radio la frecventa: %d", freqx);
			SendClientMessage(playerid, COLOR_RADIO, string);
 		}
        return 1;
    }
	if(strcmp(cmd, "/airradio", true) == 0)
	{
		new vehicleida = GetPlayerVehicleID(playerid);
		if(IsPlayerConnected(playerid))
		{
            if(IsAPlane(vehicleida) || IsAHelicopter(vehicleida)) { SendClientMessage(playerid, COLOR_WHITE,"Nu esti intr-un aeroplan (elicopter, avion, dispozitive militare etc.)"); return 1; }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
 			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
 				idx++;
   			}
    		new offset = idx;
    		new result[256];
    		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    		{
   				result[idx - offset] = cmdtext[idx];
    			idx++;
    		}
   			result[idx - offset] = EOS;
   			if(!strlen(result))
   			{
    			SendClientMessage(playerid, COLOR_GRAD2, "FOLOSIRE: /airradio [radio chat]");
              	return 1;
       		}
       		new str[128];
			new maskid = PlayerInfo[playerid][pMaskID];
			if(RadioStatus[playerid] == 1)
			{
	   			    if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2)
	   			    {
		   			    if(strlen(result) > MAXLEN)
						{
			     			new pos = MAXLEN;
						    //while(result[--pos] < ' ') {}
						    if(pos < MAXLEN-1) pos = MAXLEN;
						    if(PlayerInfo[playerid][pMaskuse] == 1)
							{
								format(str, sizeof(str), "**[AIR RADIO] %s [Masca_%d]: %.*s ...",GetRankName(playerid), maskid, pos, result);
								SendAirMessage(playerid, COLOR_RADIO,str);
								format(str, sizeof(str), "**[AIR RADIO] %s [Masca_%d]: ... %s",GetRankName(playerid), maskid, result[pos]);
								SendAirMessage(playerid, COLOR_RADIO,str);
							}
							else
							{
							    format(str, sizeof(str), "**[AIR RADIO] %s %s: %.*s ...",  GetRankName(playerid), GetPlayerNameEx(playerid), pos, result);
							    SendAirMessage(playerid, COLOR_RADIO,str);
								format(str, sizeof(str), "**[AIR RADIO] %s %s: ... %s",  GetRankName(playerid), GetPlayerNameEx(playerid), result[pos]);
								SendAirMessage(playerid, COLOR_RADIO,str);
							}
						}
						else
						{
						    if(PlayerInfo[playerid][pMaskuse] == 1)
							{
								format(str, sizeof(str), "**[AIR RADIO] %s [Masca_%d]: %s",  GetRankName(playerid), maskid, result);
								SendAirMessage(playerid, COLOR_RADIO,str);
							}
							else
							{
							    format(str, sizeof(str), "**[AIR RADIO] %s %s: %s",  GetRankName(playerid), GetPlayerNameEx(playerid), result);
						    	SendAirMessage(playerid, COLOR_RADIO,str);
							}
						}
		      			if(strlen(result) > MAXLEN)
						{
				 			new pos = MAXLEN;
						    //while(result[--pos] < ' ') {}
						    if(pos < MAXLEN-1) pos = MAXLEN;
						    if(PlayerInfo[playerid][pMaskuse] == 1)
							{
								format(str, sizeof(str), "(Air Radio) [Masca_%d] spune: %.*s ...", maskid, pos, result);
								SendProxRadioMessage(playerid, str);
								format(str, sizeof(str), "(Air Radio) [Masca_%d] spune: ... %s", maskid, result[pos]);
								SendProxRadioMessage(playerid, str);
							} else {
								format(str, sizeof(str), "(Air Radio) %s spune: %.*s ...", GetPlayerNameEx(playerid), pos, result);
								SendProxRadioMessage(playerid, str);
								format(str, sizeof(str), "(Air Radio) %s spune: ... %s", GetPlayerNameEx(playerid), result[pos]);
								SendProxRadioMessage(playerid, str);
				    			return 1;
							}
						}
						else
						{
							if(PlayerInfo[playerid][pMaskuse] == 1)
							{
								format(str, sizeof(str), "(Air Radio) [Masca_%d] spune: %s", maskid, result);
								SendProxRadioMessage(playerid, str);
							}
							else
							{
								format(str, sizeof(str), "(Air Radio) %s spune: %s", GetPlayerNameEx(playerid), result);
								SendProxRadioMessage(playerid, str);
							}
						}
					}
					return 1;
				}
				else
				{
	    			if(strlen(result) > MAXLEN)
					{
		     			new pos = MAXLEN;
					    //while(result[--pos] < ' ') {}
					    if(pos < MAXLEN-1) pos = MAXLEN;
					    if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(str, sizeof(str), "**[AIR RADIO] [Masca_%d]: %.*s ...",  maskid, pos, result);
							SendAirMessage(playerid, COLOR_RADIO,str);
							format(str, sizeof(str), "**[AIR RADIO] [Masca_%d]: ... %s",  maskid, result[pos]);
							SendAirMessage(playerid, COLOR_RADIO,str);
						}
						else
						{
						    format(str, sizeof(str), "**[AIR RADIO] %s: %.*s ...",  GetPlayerNameEx(playerid), pos, result);
						    SendAirMessage(playerid, COLOR_RADIO,str);
							format(str, sizeof(str), "**[AIR RADIO] %s: ... %s",  GetPlayerNameEx(playerid), result[pos]);
							SendAirMessage(playerid, COLOR_RADIO,str);
						}
					}
					else
					{
					    if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(str, sizeof(str), "**[AIR RADIO] [Masca_%d]: %s",  maskid, result);
							SendAirMessage(playerid, COLOR_RADIO,str);
						}
						else
						{
						    format(str, sizeof(str), "**[AIR RADIO] %s: %s",  GetPlayerNameEx(playerid), result);
					    	SendAirMessage(playerid, COLOR_RADIO,str);
						}
					}
					if(strlen(result) > MAXLEN)
					{
			 			new pos = MAXLEN;
					    //while(result[--pos] < ' ') {}
					    if(pos < MAXLEN-1) pos = MAXLEN;
					    if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(str, sizeof(str), "(Radio) [Masca_%d] spune: %.*s ...", maskid, pos, result);
							SendProxRadioMessage(playerid, str);
							format(str, sizeof(str), "(Radio) [Masca_%d] spune: ... %s", maskid, result[pos]);
							SendProxRadioMessage(playerid, str);
						}
						else
						{
							format(str, sizeof(str), "(Radio) %s spune: %.*s ...", GetPlayerNameEx(playerid), pos, result);
							SendProxRadioMessage(playerid, str);
							format(str, sizeof(str), "(Radio) %s spune: ... %s", GetPlayerNameEx(playerid), result[pos]);
							SendProxRadioMessage(playerid, str);
			    			return 1;
						}
					}
					else
					{
						if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(str, sizeof(str), "(Radio) [Masca_%d] spune: %s", maskid, result);
							SendProxRadioMessage(playerid, str);
						}
						else
						{
							format(str, sizeof(str), "(Radio) %s spune: %s", GetPlayerNameEx(playerid), result);
							SendProxRadioMessage(playerid, str);
						}
					}
				}
		}
		return 1;
	}
	if(strcmp(cmd, "/duty", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            switch(PlayerInfo[playerid][pFaction])
            {
                case 1: // SASD
                {
                    if(PlayerToPoint(15.0,playerid,618.7573,-594.5638,17.2330))
                    {
                        if(FbiOnDuty[playerid] == 0)
                        {
                            PlayerActionMessage(playerid,15.0,"isi ia echipamentul din dulap.");
                            FbiOnDuty[playerid] = 1;
                            format(string, sizeof(string), "** HQ: %s %s este disponibil acum pentru asistenta. **",GetRankName(playerid), GetPlayerLastName(playerid));
                            SendFactionMessage(1, COLOR_LSPDNEW, string);
                            return 1;
                        }
                        else
                        {
                            PlayerActionMessage(playerid,15.0,"isi lasa echipamentul in dulap");
                            FbiOnDuty[playerid] = 0;
                            format(string, sizeof(string), "** HQ: %s %s nu mai este disponibil ! **",GetRankName(playerid), GetPlayerLastName(playerid));
                            SendFactionMessage(1, COLOR_LSPDNEW, string);
                            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara!");
                    }
                }
                case 2: // Medic
                {
                    if(PlayerToPoint(35.0,playerid,1508.8766,-1551.8931,1970.8159))
                    {
                        if(MedicOnDuty[playerid] == 0)
                        {
                            PlayerActionMessage(playerid,15.0,"isi ia echipamentul din dulap.");
                            MedicOnDuty[playerid] = 1;
                            SetPlayerColor(playerid, COLOR_REDEMS);
                            format(string, sizeof(string), "** HQ: %s %s este acum disponibil. **",GetRankName(playerid), GetPlayerLastName(playerid));
                            SendFactionMessage(2, COLOR_LSPDNEW, string);
                            return 1;
                        }
                        else
                        {
                            PlayerActionMessage(playerid,15.0,"isi lasa echipamentul in dulap");
                            MedicOnDuty[playerid] = 0;
                            SetPlayerColor(playerid, COLOR_WHITE);
                            format(string, sizeof(string), "** HQ: %s %s este acum indisponibil! **",GetRankName(playerid), GetPlayerLastName(playerid));
                            SendFactionMessage(2, COLOR_LSPDNEW, string);
                            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara!");
                        return 1;
                    }
                }
                case 3: // Sheriff
                {
                    if(PlayerToPoint(10.0,playerid,PoliceDutyPosition[X],PoliceDutyPosition[Y],PoliceDutyPosition[Z]))
                    {
                        if(CopOnDuty[playerid] == 0)
                        {
                            PlayerActionMessage(playerid,15.0,"isi ia echipamentul din dulap");
                            PlayerInfo[playerid][pGotArmour] = 1;
                            CopOnDuty[playerid] = 1;
                            SetPlayerColor(playerid, COLOR_LSPDNEW);
                            format(string, sizeof(string), "** HQ: %s %s este acum disponibil. **",GetRankName(playerid),GetPlayerLastName(playerid));
                            SendFactionMessage(3, COLOR_LSPDNEW, string);
                            SendClientMessage(playerid, COLOR_LSPDNEW, "Nu uita sa folosesti /changeunit pentru a schimba unitatea.");
                            return 1;
                        }
                        else
                        {
                            PlayerActionMessage(playerid,15.0,"isi lasa echipamentul in dulap");
                            SetPlayerArmour(playerid,0);
                            PlayerInfo[playerid][pGotArmour] = 0;
                            CopOnDuty[playerid] = 0;
                            SetPlayerColor(playerid, COLOR_WHITE);
                            SafeResetPlayerWeapons(playerid);
                            format(string, sizeof(string), "** HQ: %s %s este acum indisponibil. **",GetRankName(playerid),GetPlayerNameEx(playerid));
                            SendFactionMessage(3, COLOR_LSPDNEW, string);
                            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara!");
                        return 1;
                    }
                }
                case 4: // San news
                {
                    if(PlayerToPoint(35.0,playerid,709.6110,-570.8275,-52.2113))
                    {
                        if(CopOnDuty[playerid] == 0)
                        {
                            CopOnDuty[playerid] = 1;
                            GivePlayerWeapon(playerid, 43, 500);
                            SetPlayerSkin(playerid, 147);
                            PlayerActionMessage(playerid,15.0,"isi ia echipamentul din dulap");
                            format(string, sizeof(string), "{0096d2}[ONDUTY] %s este acum disponibil.",GetPlayerNameEx(playerid));
                            SendFactionMessage(4, COLOR_LSPDNEW, string);
                        }
                        else
                        {
                            CopOnDuty[playerid] = 0;
                            PlayerActionMessage(playerid,15.0,"isi lasa echipamentul in dulap");
                            format(string, sizeof(string), "{ff5500}[OFFDUTY] %s este acum indisponibil.",GetPlayerNameEx(playerid));
                            SendFactionMessage(4, COLOR_LSPDNEW, string);
                            SetPlayerAmmo(playerid, 43, 0);
                            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara!");
                    }
                }
                case 5: // LSFD
                {
                    if(PlayerToPoint(250.0,playerid,1717.0570,-1130.3566,24.0859))
                    {
                        if(LsfdOnDuty[playerid] == 0)
                        {
                            PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);
                            SetPlayerSkin(playerid, 278);
                            LsfdOnDuty[playerid] = 1;
                            format(string, sizeof(string), "[ONDUTY] %s este acum de serviciu.",GetPlayerNameEx(playerid));
                            SendFactionMessage(5, COLOR_ORANGE, string);
                        }
                        else
                        {
                            LsfdOnDuty[playerid] = 0;
                            format(string, sizeof(string), "[OFFDUTY] %s este acum liber.",GetPlayerNameEx(playerid));
                            SendFactionMessage(5, COLOR_LIGHTBLUE, string);
                            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara!");
                    }
                }
                case 6: // GOUVERMENT
                {
                    if(PlayerToPoint(35.0,playerid,360.3853,207.1223,1008.3828))
                    {
                        if(CopOnDuty[playerid] == 0)
                        {
                            PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);
                            CopOnDuty[playerid] = 1;
                            PlayerActionMessage(playerid,15.0,"isi ia echipamentul din dulap");
                            format(string, sizeof(string), "{0096d2}[ONDUTY] %s este acum disponibil.",GetPlayerNameEx(playerid));
                            SendFactionMessage(6, COLOR_LSPDNEW, string);
                        }
                        else
                        {
                            SafeResetPlayerWeapons(playerid);
                            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                            CopOnDuty[playerid] = 0;
                            PlayerActionMessage(playerid,15.0,"isi lasa echipamentul in dulap");
                            format(string, sizeof(string), "{ff5500}[OFFDUTY] %s este acum indisponibil.",GetPlayerNameEx(playerid));
                            SendFactionMessage(6, COLOR_LSPDNEW, string);
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara!");
                    }
                }
                case 7: // LSAS
                {
                    if(PlayerToPoint(135.0,playerid,1988.8748,-1879.3447,13.5504))
                    {
                        if(LsasOnDuty[playerid] == 0)
                        {
                            PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);
                            SetPlayerSkin(playerid, 50);
                            LsasOnDuty[playerid] = 1;
                            PlayerActionMessage(playerid,15.0,"isi ia echipamentul din dulap");
                            format(string, sizeof(string), "{0096d2}[ONDUTY] %s este acum de serviciu.",GetPlayerNameEx(playerid));
                            SendFactionMessage(7, COLOR_ORANGE, string);
                        }
                        else
                        {
                            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                            LsasOnDuty[playerid] = 0;
                            PlayerActionMessage(playerid,15.0,"isi lasa echipamentul in dulap");
                            format(string, sizeof(string), "{ff5500}[OFFDUTY] %s este acum liber.",GetPlayerNameEx(playerid));
                            SendFactionMessage(7, COLOR_LIGHTBLUE, string);
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara!");
                    }
                }
                case 8: // LSVR
                {
                    if(PlayerToPoint(250.0,playerid,2348.86426, -1360.09363, 23.01621))
                    {
                        if(LsvrOnDuty[playerid] == 0)
                        {
                            PlayerInfo[playerid][pSkin] = GetPlayerSkin(playerid);
                            SetPlayerSkin(playerid, 46);
                            LsvrOnDuty[playerid] = 1;
                            format(string, sizeof(string), "[ONDUTY] %s este acum de serviciu.",GetPlayerNameEx(playerid));
                            SendFactionMessage(8, COLOR_ORANGE, string);
                        }
                        else
                        {
                            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                            LsvrOnDuty[playerid] = 0;
                            format(string, sizeof(string), "[OFFDUTY] %s este acum liber.",GetPlayerNameEx(playerid));
                            SendFactionMessage(8, COLOR_LIGHTBLUE, string);
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara!");
                    }
                }
            }
        }
        return 1;
    }
	if(strcmp(cmd, "/acu", true) == 0 || strcmp(cmd, "/pacu", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 1||PlayerInfo[playerid][pFaction] == 3)
			{
				if(PlayerToPoint(2.5,playerid,120.5238,1080.0529,523.9174))
				{
				    if(PlayerToPoint(10.0,playerid,PoliceDutyPosition[X],PoliceDutyPosition[Y],PoliceDutyPosition[Z]))
				    {
						if(CopOnDuty[playerid] == 0)
				        {
							PlayerInfo[playerid][pGotArmour] = 1;
							SetPlayerArmour(playerid,100);
							CopOnDuty[playerid] = 1;
							PlayerInfo[playerid][pMaskuse] = 1;
                            SafeGivePlayerWeapon(playerid, 24, 125);
                            SafeGivePlayerWeapon(playerid, 43, 80);
				            if(PlayerInfo[playerid][pSex] == 0)
				            {
							    SetPlayerSkin(playerid, 211);
							}
							format(string, sizeof(string), "** HQ: %s %s este disponibil ca ACU! **",GetRankName(playerid), GetPlayerLastName(playerid));
		    				SendFactionMessage(3, COLOR_LSPDNEW, string);
					    	if(PlayerInfo[playerid][pMaskuse] == 0)
					    	{
								for(new i = 0; i < MAX_PLAYERS; i++)
				   				{
				   		    		if(IsPlayerConnected(i))
				   		    		{
				        				ShowPlayerNameTagForPlayer(i, playerid, 0);
				        				PlayerInfo[playerid][pMaskuse] = 1;
				        				GameTextForPlayer(playerid, "~p~Ti-ai pus masca", 3000, 5);
									}
								}
							} 
							else
							{
								for(new i = 0; i < MAX_PLAYERS; i++)
								{
				   		    		if(IsPlayerConnected(i))
				   		    		{
				        				ShowPlayerNameTagForPlayer(i, playerid, 1);
				        				PlayerInfo[playerid][pMaskuse] = 0;
				        				GameTextForPlayer(playerid, "~p~Ti-ai dat masca jos.", 3000, 5);
									}
								}
							}
							return 1;
						}
						else
						{
      						if(PlayerInfo[playerid][pSex] == 1)
				            {
								PlayerActionMessage(playerid,15.0,"Scoate hainele sale,urmand sa se imbrace cu ele.");
							}
							else
							{
							    PlayerActionMessage(playerid,15.0,"scoate hainele sale urmand sa se imbrace cu ele.");
							}
							format(string, sizeof(string), "** HQ: %s %s nu mai este disponibil ca ACU! **",GetRankName(playerid), GetPlayerLastName(playerid));
	    					SendFactionMessage(3, COLOR_LSPDNEW, string);
							CopOnDuty[playerid] = 0;
							SafeResetPlayerWeapons(playerid);
							SetPlayerArmour(playerid,0);
							PlayerInfo[playerid][pGotArmour] = 0;
							SetPlayerArmour(playerid,PlayerInfo[ playerid ][ pArmour ]);
							SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
					    	if(PlayerInfo[playerid][pMaskuse] == 0)
					    	{
								for(new i = 0; i < MAX_PLAYERS; i++)
				   				{
				   		    		if(IsPlayerConnected(i))
				   		    		{
				        				ShowPlayerNameTagForPlayer(i, playerid, 0);
				        				PlayerInfo[playerid][pMaskuse] = 1;
				        				GameTextForPlayer(playerid, "~p~Ti-ai pus masca.", 3000, 5);
									}
								}
							}
							else
							{
								for(new i = 0; i < MAX_PLAYERS; i++)
								{
				   		    		if(IsPlayerConnected(i))
				   		    		{
				        				ShowPlayerNameTagForPlayer(i, playerid, 1);
				        				PlayerInfo[playerid][pMaskuse] = 0;
				        				GameTextForPlayer(playerid, "~p~Ti-ai dat masca jos.", 3000, 5);
									}
								}
							}
							return 1;
						}
					}
				}
    			else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara.");
					return 1;
				}
			}
   			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/backup", true) == 0 || strcmp(cmd, "/bk", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
   			{
				if(CopOnDuty[playerid] == 0)
				{
 					SendClientMessage(playerid, COLOR_GREY, "Nu esti on duty.");
   					return 1;
  				}
				if(PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new Float:bkX, Float:bkY, Float:bkZ;
					GetPlayerPos(playerid, bkX, bkY, bkZ);
					format(string, sizeof(string), "** HQ Announcement: Catre toate unitatile, %s a apasat butonul de panica!Va transmit coordonatele! **", sendername);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pFaction] == 3 || PlayerInfo[i][pFaction] == 1)
							{
								SetPlayerCheckpoint(i, bkX, bkY, bkZ-10, 1.0);
								ActiveCP[i] = 1;
								SendClientMessage(i, COLOR_LSPDNEW, string);
							}
						}
					}
					SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}SYNTAX{FFFFFF}: Scrie /backupclear sau /bkc pentru a anula asistenta.");
					SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Ai activat deja butonul de panica.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/backupclear", true) == 0 || strcmp(cmd, "/bkc", true) == 0)
	{
		BackupClear(playerid, 0);
		return 1;
	}
	if(strcmp(cmd, "/putinambu", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == EMS)
   			{
		   		tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /putinambu [playerid/partofname] [loc]");
					return 1;
				}
			    giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
						new carid = gLastCar[playerid];
	    				if(giveplayerid == playerid)
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu esti destul de aproape de ambulanta!");
							return 1;
						}
						if(!ProxDetectorS(12.0, playerid, giveplayerid))
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu esti destul de aproape!.");
							return 1;
						}
                        tmp = strtok(cmdtext, idx);
						new seat = strval(tmp);
						if(seat < 1 || seat > 3) { SendClientMessage(playerid, COLOR_GREY, "Locurile sunt de la 1 la 3."); return 1; }
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /putinambu [playerid/partofname] [seatid]");
							return 1;
						}
						if(Wounded[giveplayerid] > 0)
						{
							format(string, sizeof(string), "* %s il pune pe %s pe targa dupa care il urca in ambulanta.", GetPlayerNameEx(playerid) ,GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GameTextForPlayer(giveplayerid, "~r~Esti in ambulanta", 2500, 1);
							ClearAnimations(giveplayerid);
							PutPlayerInVehicle(giveplayerid,carid,seat);
		            	}
						else
						{
					    	SendClientMessage(playerid, COLOR_GREY, "Nu ai voie sa injuri!");
					    	return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}//not connected
	    return 1;
    }
	if(strcmp(cmd, "/detain", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
   			{
				if(CopOnDuty[playerid] == 0)
				{
 					SendClientMessage(playerid, COLOR_GREY, "Nu esti on-duty");
   					return 1;
  				}
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Nu esti langa masina");
			        return 1;
			    }
		   		tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /detain [playerid/partofname] [seatid]");
					return 1;
				}
				new carid = gLastCar[playerid];
			    giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
	    				if(giveplayerid == playerid)
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu il poti obliga.");
							return 1;
						}
						if(!ProxDetectorS(8.0, playerid, giveplayerid))
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai cum sa il bagi in masina daca nu esti aproape de player.");
							return 1;
						}
                        tmp = strtok(cmdtext, idx);
						new seat = strval(tmp);
						if(seat < 1 || seat > 3) { SendClientMessage(playerid, COLOR_GREY, "Id-ul trebuie sa fie intre 1 si 3."); return 1; }
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /detain [playerid/partofname] [seatid]");
							return 1;
						}
						if(PlayerCuffed[giveplayerid] > 0)
						{
							format(string, sizeof(string), "* %s il taraste cu forta pe %s urmand sa il introduca in masina.", GetPlayerNameEx(playerid) ,GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GameTextForPlayer(giveplayerid, "~r~Capturat", 2500, 1);
							ClearAnimations(giveplayerid);
							TogglePlayerControllable(giveplayerid, 0);
							PutPlayerInVehicle(giveplayerid,carid,seat);
							PlayerCuffed[giveplayerid] = 1;
		            	}
						else
						{
					    	SendClientMessage(playerid, COLOR_GREY, "Playerul nu este incatusat.");
					    	return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}//not connected
	    return 1;
    }
   	if(strcmp(cmd, "/undetain", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
   			{
				if(CopOnDuty[playerid] == 0)
				{
 					SendClientMessage(playerid, COLOR_GREY, "Nu esti duty.");
   					return 1;
  				}
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /undetain [playerid/partofname]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if(giveplayerid == playerid)
						{
							SendClientMessage(playerid, COLOR_GREY, "");
							return 1;
						}
					    if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
							if(PlayerCuffed[giveplayerid] == 1)
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "Ai fost scos din masina de %s", sendername);
								SendClientMessage(giveplayerid, COLOR_WHITE, string);
								format(string, sizeof(string), "L-ai scos pe %s din masina.", giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								TogglePlayerControllable(giveplayerid, 1);
								RemovePlayerFromVehicle(giveplayerid);
								TogglePlayerControllable(playerid, 1);
								PlayerCuffed[giveplayerid] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este in masina.");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}//not connected
		return 1;
	}
	if(strcmp(cmd, "/ram", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
            {
                for(new i = 0; i < sizeof(Houses); i++)
				{
					if(PlayerToPoint(3.2,playerid,Houses[i][EnterX], Houses[i][EnterY], Houses[i][EnterZ]))
					{
						SetPlayerInterior(playerid,Houses[i][ExitInterior]);
						SetPlayerPos(playerid,Houses[i][ExitX],Houses[i][ExitY],Houses[i][ExitZ]);
						SetPlayerVirtualWorld(playerid,i);
						SetPlayerFacingAngle(playerid,Houses[i][ExitAngle]);
						GameTextForPlayer(playerid, "~r~Usa sparta!", 3000, 1);
					}
					else if(PlayerToPoint(10.0,playerid,Houses[GetPlayerVirtualWorld(playerid)][ExitX], Houses[GetPlayerVirtualWorld(playerid)][ExitY], Houses[GetPlayerVirtualWorld(playerid)][ExitZ]))
					{
						SetPlayerInterior(playerid,0);
						SetPlayerPos(playerid,Houses[GetPlayerVirtualWorld(playerid)][EnterX], Houses[GetPlayerVirtualWorld(playerid)][EnterY], Houses[GetPlayerVirtualWorld(playerid)][EnterZ]);
						SetPlayerVirtualWorld(playerid,0);
					}
				}
                for(new h = 0; h < sizeof(Businesses); h++)
				{
					if(PlayerToPoint(3.2,playerid,Businesses[h][EnterX], Businesses[h][EnterY], Businesses[h][EnterZ]))
					{
						SetPlayerInterior(playerid,Houses[h][ExitInterior]);
						SetPlayerPos(playerid,Houses[h][ExitX],Houses[h][ExitY],Houses[h][ExitZ]);
						SetPlayerVirtualWorld(playerid,h);
						SetPlayerFacingAngle(playerid,Houses[h][ExitAngle]);
						GameTextForPlayer(playerid, "~r~Usa Sparta!", 3000, 1);
					}
					else if(PlayerToPoint(10.0,playerid,Businesses[GetPlayerVirtualWorld(playerid)][ExitX], Businesses[GetPlayerVirtualWorld(playerid)][ExitY], Businesses[GetPlayerVirtualWorld(playerid)][ExitZ]))
					{
						SetPlayerInterior(playerid,0);
						SetPlayerPos(playerid,Businesses[GetPlayerVirtualWorld(playerid)][EnterX], Businesses[GetPlayerVirtualWorld(playerid)][EnterY], Businesses[GetPlayerVirtualWorld(playerid)][EnterZ]);
						SetPlayerVirtualWorld(playerid,0);
					}
				}
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
			    return 1;
            }
		}
		return 1;
	}
	if(strcmp(cmd, "/swatduty", true) == 0 || strcmp(cmd, "/swat", true) == 0)
	{
	    if(authorizeswat == 1)
	    {
			if(PlayerInfo[playerid][pFaction] == 1 ||PlayerInfo[playerid][pFaction] == 3)
			{
				if(PlayerToPoint(10.0,playerid,PoliceDutyPosition[X],PoliceDutyPosition[Y],PoliceDutyPosition[Z]))
				{
				    {
						if(CopOnDuty[playerid] == 0)
				        {
							PlayerActionMessage(playerid,15.0,"isi ia echipamentul SWAT din dulap si niste arme.");
				    		CopOnDuty[playerid] = 1;
					     	SetPlayerArmour(playerid,500);
					     	PlayerInfo[playerid][pM4] = 1;
					     	PlayerInfo[playerid][pEagle] = 1;
					     	PlayerInfo[playerid][pMP5] = 1;
					     	TazerActive[playerid] = 0;
					     	PlayerInfo[playerid][pShotgun] = 1;
					     	SafeGivePlayerWeapon(playerid, 31, 500);
				    		SafeGivePlayerWeapon(playerid, 29, 500);
				    		SafeGivePlayerWeapon(playerid, 24, 350);
				    		SafeGivePlayerWeapon(playerid, 17, 10);
				    		SafeGivePlayerWeapon(playerid, 25, 250);
				    		SafeGivePlayerWeapon(playerid, 34, 50);
							SetPlayerSkin(playerid, 285);
							format(string, sizeof(string), "** HQ: %s %s s-a echipat ca SWAT. **",GetRankName(playerid), GetPlayerNameEx(playerid));
		    				SendFactionMessage(3, COLOR_LSPDNEW, string);
							return 1;
						}
						else
						{
							PlayerActionMessage(playerid,15.0,"isi pune echipamentul SWAT in dulap si pune armele.");
							format(string, sizeof(string), "** HQ: %s %s nu mai este disponibil ca SWAT. **",GetRankName(playerid), GetPlayerNameEx(playerid));
		    				SendFactionMessage(3, COLOR_LSPDNEW, string);
							CopOnDuty[playerid] = 0;
							SetPlayerArmour(playerid,0);
							SetPlayerArmour(playerid,PlayerInfo[playerid][pArmour]);
							SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
							return 1;
						}
					}
				}
    			else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara.");
					return 1;
				}
			}
   			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/csdduty", true) == 0 || strcmp(cmd, "/csd", true) == 0)
	{
	    if(authorizeswat == 1)
	    {
			if(PlayerInfo[playerid][pFaction] == 1 ||PlayerInfo[playerid][pFaction] == 3)
			{
				if(PlayerToPoint(10.0,playerid,PoliceDutyPosition[X],PoliceDutyPosition[Y],PoliceDutyPosition[Z]))
				{
				    {
						if(CopOnDuty[playerid] == 0)
				        {
							PlayerActionMessage(playerid,15.0,"isi ia echipamentul CSD din dulap si niste arme.");
				    		CopOnDuty[playerid] = 1;
					     	SetPlayerArmour(playerid,450);
					     	PlayerInfo[playerid][pEagle] = 1;
					     	PlayerInfo[playerid][pMP5] = 1;
					     	TazerActive[playerid] = 0;
					     	PlayerInfo[playerid][pShotgun] = 1;
				    		SafeGivePlayerWeapon(playerid, 29, 500);
				    		SafeGivePlayerWeapon(playerid, 24, 350);
				    		SafeGivePlayerWeapon(playerid, 17, 10);
				    		SafeGivePlayerWeapon(playerid, 25, 250);
							SetPlayerSkin(playerid, 285);
							format(string, sizeof(string), "** HQ: %s %s s-a echipat ca CSD. **",GetRankName(playerid), GetPlayerNameEx(playerid));
		    				SendFactionMessage(3, COLOR_LSPDNEW, string);
							return 1;
						}
						else
						{
							PlayerActionMessage(playerid,15.0,"isi pune echipamentul CSD in dulap si pune armele.");
							format(string, sizeof(string), "** HQ: %s %s nu mai este disponibil ca CSD. **",GetRankName(playerid), GetPlayerNameEx(playerid));
		    				SendFactionMessage(3, COLOR_LSPDNEW, string);
							CopOnDuty[playerid] = 0;
							SetPlayerArmour(playerid,0);
							SetPlayerArmour(playerid,PlayerInfo[playerid][pArmour]);
							SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
							return 1;
						}
					}
				}
    			else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti la pozitia necesara.");
					return 1;
				}
			}
   			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/checkseatbelt", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp)) {
	        SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /checkseatbelt [playerid]");
	        return 1;
	    }
	    giveplayerid = ReturnUser(tmp);
	    if(IsPlayerConnected(giveplayerid)) {
	        if(giveplayerid != INVALID_PLAYER_ID) {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(giveplayerid, x, y, z);
	            GetPlayerName(playerid, sendername, sizeof(sendername));
	            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	            if(PlayerToPoint(6.0, playerid, x, y, z) && Seatbelt[giveplayerid] == 1) {
	                format(string, sizeof(string), "%s are centura pusa.", giveplayer);
	                SendClientMessage(playerid, COLOR_WHITE, string);
	                PlayerBubbleMessage(playerid,"se intinde usor urmand sa se uite la sofer daca poarta centura");
	                return 1;
	            }
	            else if(PlayerToPoint(6.0, playerid, x, y, z) && Seatbelt[giveplayerid] == 0) {
	                format(string, sizeof(string), "%s nu are centura pusa.", giveplayer);
	                SendClientMessage(playerid, COLOR_WHITE, string);
	                PlayerBubbleMessage(playerid,"se intinde usor urmand sa se uite la sofer daca poarta centura");
	                return 1;
	            }
	            else {
	                SendClientMessage(playerid, COLOR_GREY, "");
	                return 1;
	            }
	        }
	        else {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "");
	            return 1;
	        }
	    }
	}
	if(strcmp(cmd, "/seatbelt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	        if(IsPlayerInAnyVehicle(playerid) == 1)
			{
			    if(IsAPlane(GetPlayerVehicleID(playerid)) || IsABike(GetPlayerVehicleID(playerid)) || IsAHelicopter(GetPlayerVehicleID(playerid)) || IsABoat(GetPlayerVehicleID(playerid)))
               	{
               		return 1;
               	}
	            if(Seatbelt[playerid] == 0)
				{
					Seatbelt[playerid] = 1;
	                PlayerActionMessage(playerid,15.0,"isi pune centura de siguranta.");
	                format(string, sizeof(string), "~g~.");
				    
	                return 1;
	            }
	            else
				{
	                Seatbelt[playerid] = 0;
	                PlayerActionMessage(playerid,15.0,"isi da jos centura de siguranta.");
	                format(string, sizeof(string), "~r~.");
				    
	                return 1;
	            }
	        }
	        else
			{
	            SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina.");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/helmet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pHelmet] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu ai o casca de motor, dute si cumparati de la binco.");
				return 1;
			}
			if (helmet[playerid] == 0)
			{
				helmet[playerid] = 1;
				PlayerActionMessage(playerid,15.0,"isi pune casca pe cap.");
				if(IsValidPlayerObject(playerid, 9))
				{
					RemovePlayerAttachedObject(playerid, 9);
				}
				SetPlayerAttachedObject(playerid, 9, PlayerInfo[playerid][pHelmet], 2, 0.079577, 0.016865, 0.005709, 171.620758, 93.131149, 280.057983, 1.000000, 1.000000, 1.000000 );
				EditAttachedObject(playerid, 9);
				return 1;
			}
			else
			{
				helmet[playerid] = 0;
				PlayerActionMessage(playerid,15.0,"isi da jos casca de pe cap.");
				RemovePlayerAttachedObject(playerid, 9);
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ciocan", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pFaction] == 7 || PlayerInfo[playerid][pToolkit] == 1)
			{
				if (hammer[playerid] == 0)
				{
					if(IsValidPlayerObject(playerid, 8))
					{
						RemovePlayerAttachedObject(playerid, 8);
					}
					SetPlayerAttachedObject(playerid, 8, 18635, 6, 0.00,0.01,0.00,0.0,0.0,0.0,1.00,1.00,1.00);
					hammer[playerid] = 1;
				}
				else
				{
					RemovePlayerAttachedObject(playerid, 8);
					hammer[playerid] = 0;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/editradio", true) == 0)
	{
	 	if(IsPlayerConnected(playerid))
	 	{
			ShowPlayerDialog(playerid, 1243, DIALOG_STYLE_LIST, "Casetofon", "Pro FM\nTechno Base\nHot Jams\nRock\nGreu de difuzar\nTraditional\nSoma FM\nCustom URL\n\nOpreste", "Asculta", "Cancel");
		}
	}
	if(strcmp(cmd, "/boombox", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pBoombox] > 0)
			{
				GetPlayerFacingAngle(playerid, BoomBox[PlayerInfo[playerid][pBoombox]][bPosAngle]);
				GetPlayerPos(playerid, BoomBox[PlayerInfo[playerid][pBoombox]][bPosx], BoomBox[PlayerInfo[playerid][pBoombox]][bPosy], BoomBox[PlayerInfo[playerid][pBoombox]][bPosz]);
				BoomBox[PlayerInfo[playerid][pBoombox]][bPosz] -= 1.0;
				BoomBox[PlayerInfo[playerid][pBoombox]][bObject] = CreateDynamicObject(2226, BoomBox[PlayerInfo[playerid][pBoombox]][bPosx], BoomBox[PlayerInfo[playerid][pBoombox]][bPosy], BoomBox[PlayerInfo[playerid][pBoombox]][bPosz], 0.0, 0.0, BoomBox[PlayerInfo[playerid][pBoombox]][bPosAngle], GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
				BoomBox[PlayerInfo[playerid][pBoombox]][bOwned] = 1;
				RemovePlayerAttachedObject(playerid, 5);
				PlayerInfo[playerid][pBoombox] = 0;
			}
			else
			{
				for (new i=0;i<3000;i++)
				{
					if (BoomBox[i][bOwned] == 1)
					{
						if (PlayerToPoint(5.0, playerid, BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz]))
						{
							DestroyDynamicObject(BoomBox[i][bObject]);
							if(IsValidPlayerObject(playerid, 5))
							{
								RemovePlayerAttachedObject(playerid, 5);
							}
							SetPlayerAttachedObject(playerid, 5, 2226, 5, 0.41,0.01,0.00,0.0,-94.0,11.0,1.00,1.00,1.00);
							PlayerInfo[playerid][pBoombox] = i;
							BoomBox[i][bOwned] = 0;
							BoomBox[i][bObject] = 0;
							for (new k=0;k<MAX_PLAYERS;k++)
							{
								if (boomboxmusic[k] == i)
								{
									boomboxmusic[k] = 0;
									StopAudioStreamForPlayer(k);
								}
							}
						}
					}
				}
			}
		}
	}
	if(strcmp(cmd, "/myclothes", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			ShowPlayerDialog(playerid, 1229, DIALOG_STYLE_LIST, "Hainele mele", "Imbraca\nEditeaza\nSterge", "Alege", "Cancel");
		}
	}
	if(strcmp(cmd, "/tattoo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid, 20, -202.0134,-42.0945,1002.2734))
			{
				ShowPlayerDialog(playerid, 1254, DIALOG_STYLE_LIST, "Tatuaj", "Brat Stang\nBrat Drept\nPiept\nSpate\nPicior Drept\nPicior Stang", "Alege", "Cancel");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti in interiorul bizului de tatuaje.");
			}
		}
	}
	if(strcmp(cmd, "/tattoos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
	 	    if(!strlen(tmp))
	 	    {
				SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}FOLOSIRE:{FFFFFF} /tattoos [playerid/partofname]");
				return 1;
		    }
		    new playa;
		    playa = ReturnUser(tmp);
			new string2[128];
			new string3[128];
			format(string2, sizeof(string2),"Tatuajele lui %s", GetPlayerNameEx(playa));
			format(string3, sizeof(string2),"Brat Drept: %s\nBrat Stang: %s\nPiept: %s\nSpate: %s\nPicior Drept: %s\nPicior Stang: %s", Tattoo[playa][tBratDrept], Tattoo[playa][tBratStang], Tattoo[playa][tPiept], Tattoo[playa][tSpate], Tattoo[playa][tPiciorDrept], Tattoo[playa][tPiciorStang]);
			ShowPlayerDialog(playerid, 1252, DIALOG_STYLE_MSGBOX, string2, string3, "Ok", "Iesi");
		}
	}
	if(strcmp(cmd, "/myhair", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			ShowPlayerDialog(playerid, 1251, DIALOG_STYLE_LIST, "Par", "Editeaza\nTunde", "Alege", "Cancel");
		}
	}
	if(strcmp(cmd, "/hair", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid, 20, 414.8249,-52.2858,1001.8984))
			{
				ShowModelSelectionMenu(playerid, hairlist, "Par");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY,"Trebuie sa fii in interiorul frizeriei.");
			}
		}
	}
	if(strcmp(cmd, "/buyclothes", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(IsPlayerInRangeOfPoint(playerid, 20, 207.7826,-105.1595,1005.1328))
			{
				ShowPlayerDialog(playerid, 1225, DIALOG_STYLE_LIST, "{137132}Accesori", "Palarii\nBandane\nOchelari\nChitari\nCasti\nCeasuri\nCasti motor\nLaser", "Alege", "Cancel");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un binco.");
			}
		}
	}
/*	if(strcmp(cmd, "/furniture", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(GetPlayerVirtualWorld(playerid) != PlayerInfo[playerid][pHouseKey])
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti in casa ta.");
				return 1;
			}
			ShowPlayerDialog(playerid, 1223, DIALOG_STYLE_LIST, "Furniture", "Creeaza\nEditeaza\nSterge", "Alege", "Cancel");
		}
	} */
	if(strcmp(cmd, "/briefcase", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (briefcase[playerid] == 0)
			{
				if(IsValidPlayerObject(playerid, 8))
				{
					RemovePlayerAttachedObject(playerid, 8);
				}
				SetPlayerAttachedObject(playerid, 8, 1210, 6,0.28,0.09,0.03,0.0,-100.0,0.0,1.00,1.00,1.00);
				briefcase[playerid] = 1;
			}
			else
			{
				RemovePlayerAttachedObject(playerid, 8);
				briefcase[playerid] = 0;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/backpack", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (backpack[playerid] == 0)
			{
				if(IsValidPlayerObject(playerid, 1))
				{
					RemovePlayerAttachedObject(playerid, 1);
				}
				SetPlayerAttachedObject(playerid, 1, 3026,1,-0.15,-0.04,-0.01,0.0,0.0,0.0,1.00,1.00,1.00);
				backpack[playerid] = 1;
			}
			else
			{
				RemovePlayerAttachedObject(playerid, 1);
				backpack[playerid] = 0;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/flashlight", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
			{
				if (flash[playerid] == 0)
				{
					if(IsValidPlayerObject(playerid, 8))
					{
						RemovePlayerAttachedObject(playerid, 8);
					}
					SetPlayerAttachedObject(playerid, 8, 18641, 6, 0.06,0.03,0.00,888.0,8.0,-32.0,0.98,0.96,1.00);
					flash[playerid] = 1;
				}
				else
				{
					RemovePlayerAttachedObject(playerid, 8);
					flash[playerid] = 0;
				}
			}
		}
		return 1;
	}
    if(strcmp(cmd,"/givebadge",true)==0)
    {
        if(IsPlayerConnected(playerid))
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /givebadge [playerid/partofname] [number]");
                return 1;
            }
            new moneys;
            moneys = strval(tmp);
            giveplayerid = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /givebadge [playerid/partofname] [number]");
                return 1;
            }
            moneys = strval(tmp);
            if(PlayerInfo[playerid][pRank] == 1 && PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == EMS || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 6)
            {
                if(IsPlayerConnected(giveplayerid))
                {
                    if(giveplayerid != INVALID_PLAYER_ID)
                    {
                        PlayerInfo[giveplayerid][pBadgeNumber] = moneys;
                        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "Noua ta insigna este %d",moneys);
                        SendClientMessage(giveplayerid,COLOR_LSPD, string);
                        format(string, sizeof(string), "Ai dat o insigna lui %s cu numarul %d",sendername,moneys);
                        SendClientMessage(playerid,COLOR_GREEN, string);
                    }
                }
            }
        }
        return 1;
    }
	if(strcmp(cmd, "/impound", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste:{696969}: /impound [carid]");
				return 1;
			}
			new caridd;
			caridd = strval(tmp);
			if(PlayerInfo[playerid][pFaction] != 7)
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
				return 1;
			}
		    if(IsAtImpound(playerid))
            {
				if(ProxDetectorV(10, playerid, caridd))
				{
					if (VehicleInfo[caridd][vImpound] == 0)
					{
						new Float:XX, Float:YY, Float:ZZ, Float:AA;
						GetVehiclePos(caridd, XX, YY, ZZ);
						GetVehicleZAngle(caridd, AA);
						VehicleInfo[caridd][vX] = XX;
						VehicleInfo[caridd][vY] = YY;
						VehicleInfo[caridd][vZ] = ZZ;
						VehicleInfo[caridd][vAngle] = AA;
						VehicleInfo[caridd][vImpound] = 1;
						SaveVehiclesViaDesc(VehicleInfo[caridd][vDescription],caridd);
						EngineStatus[caridd] = 0;
						GetVehicleParamsEx(caridd,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(caridd,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);

						GameTextForPlayer(playerid, "~w~Vehicul ~g~Blocat", 10000, 1);
						TogglePlayerControllable(playerid, 1);
					}
					else
					{
						VehicleInfo[caridd][vImpound] = 0;
						SaveVehiclesViaDesc(VehicleInfo[caridd][vDescription],caridd);
						GameTextForPlayer(playerid, "~w~Vehicul ~g~Eliberat", 10000, 1);
						TogglePlayerControllable(playerid, 1);
					}
				}
				else SendClientMessage(playerid, COLOR_WHITE, "Nu te afli langa masina pe care vrei sa o blochezi sau sa o deblochezi.");
			}
		}
		return 1;
	}
/////////////////////////////////// ROAD BLOCK SHIZZLE //////////////////////////////////////////////////////////
	if(strcmp(cmd, "/roadblockhelp", true) == 0 || strcmp(cmd, "/rb", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 1)
			{
	    		SendClientMessage(playerid, COLOR_LSPD, "| Road Block Help |");
	    		SendClientMessage(playerid, COLOR_WHITE, "/RB1-8 (Roadblock) | /RRB1-8 (Removeroadblock)");
	    		SendClientMessage(playerid, COLOR_WHITE, "/RB1-8 va crea un roadblock");
	    		SendClientMessage(playerid, COLOR_WHITE, "/RRB1-8 va sterge un roadblock");
 			}
 			else
 			{
 	    		SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
 			}
			return 1;
		}
	}
	if(strcmp(cmd, "/rb1", true) == 0 || strcmp(cmd, "/roadblock1", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5)
		{
			if(CopOnDuty[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti duty.");
				return 1;
			}
			if(RoadBlock1[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "You have already deployed this roadblock.");
				return 1;
			}
			new Float:rbX, Float:rbY, Float:rbZ, Float:rbA;
			GetPlayerPos(playerid, rbX, rbY, rbZ);
			GetPlayerFacingAngle(playerid, rbA);
			PlayerInfo[playerid][pRoadblock] = CreateDynamicObject(978, rbX, rbY, rbZ, 0.0, 0.0, rbA+180);
			SetPlayerPos(playerid, rbX, rbY, rbZ+4);
			RoadBlock1[playerid] += 1;
			SendClientMessage(playerid, COLOR_LSPD, "Roadblock #1 Successfully Deployed, please remember to remove it.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
		}
		return 1;
	}

	if(strcmp(cmd, "/roadunblock1", true) == 0 || strcmp(cmd, "/rrb1", true) == 0)
	{
		if (RoadBlock1[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You have not deployed a roadblock");
			return 1;
		}
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock]);
		PlayerInfo[playerid][pRoadblock] = 0;
    	RoadBlock1[playerid] -= 1;
		SendClientMessage(playerid, COLOR_LSPD, "Roadblock #1 removed");
		return 1;
	}

	if(strcmp(cmd, "/rb2", true) == 0 || strcmp(cmd, "/roadblock2", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 1)
		{
			if(CopOnDuty[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not on duty");
				return 1;
			}
   			if(RoadBlock2[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "You have already deployed this roadblock.");
   				return 1;
			}
			new Float:rbX, Float:rbY, Float:rbZ, Float:rbA;
			GetPlayerPos(playerid, rbX, rbY, rbZ);
			GetPlayerFacingAngle(playerid, rbA);
			PlayerInfo[playerid][pRoadblock2] = CreateDynamicObject(978, rbX, rbY, rbZ, 0.0, 0.0, rbA+180);
			SetPlayerPos(playerid, rbX, rbY, rbZ+4);
			RoadBlock2[playerid] += 1;
		    SendClientMessage(playerid, COLOR_LSPD, "Roadblock #2 Successfully Deployed, please remember to remove it.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
		}
		return 1;
	}

	if(strcmp(cmd, "/roadunblock2", true) == 0 || strcmp(cmd, "/rrb2", true) == 0)
	{
		if (RoadBlock2[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You have not deployed a roadblock");
			return 1;
		}
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock2]);
		PlayerInfo[playerid][pRoadblock2] = 0;
    	RoadBlock2[playerid] -= 1;
		SendClientMessage(playerid, COLOR_LSPD, "Roadblock #2 removed");
		return 1;
	}

	if(strcmp(cmd, "/rb3", true) == 0 || strcmp(cmd, "/roadblock3", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 1)
		{
			if(CopOnDuty[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not on duty");
				return 1;
			}
   			if(RoadBlock3[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "You have already deployed this roadblock.");
   				return 1;
			}
			new Float:rbX, Float:rbY, Float:rbZ, Float:rbA;
			GetPlayerPos(playerid, rbX, rbY, rbZ);
			GetPlayerFacingAngle(playerid, rbA);
			PlayerInfo[playerid][pRoadblock3] = CreateDynamicObject(978, rbX, rbY, rbZ, 0.0, 0.0, rbA+180);
			SetPlayerPos(playerid, rbX, rbY, rbZ+4);
			RoadBlock3[playerid] += 1;
		    SendClientMessage(playerid, COLOR_LSPD, "Roadblock #3 Successfully Deployed, please remember to remove it.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
		}
		return 1;
	}

	if(strcmp(cmd, "/roadunblock3", true) == 0 || strcmp(cmd, "/rrb3", true) == 0)
	{
		if (RoadBlock3[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You have not deployed a roadblock");
			return 1;
		}
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock3]);
		PlayerInfo[playerid][pRoadblock3] = 0;
    	RoadBlock3[playerid] -= 1;
		SendClientMessage(playerid, COLOR_LSPD, "Roadblock #3 removed");
		return 1;
	}

	if(strcmp(cmd, "/rb4", true) == 0 || strcmp(cmd, "/roadblock4", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 1)
		{
			if(CopOnDuty[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not on duty");
				return 1;
			}
   			if(RoadBlock4[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "You have already deployed this roadblock.");
   				return 1;
			}
			new Float:rbX, Float:rbY, Float:rbZ, Float:rbA;
			GetPlayerPos(playerid, rbX, rbY, rbZ);
			GetPlayerFacingAngle(playerid, rbA);
			PlayerInfo[playerid][pRoadblock4] = CreateDynamicObject(978, rbX, rbY, rbZ, 0.0, 0.0, rbA+180);
			SetPlayerPos(playerid, rbX, rbY, rbZ+4);
			RoadBlock4[playerid] += 1;
		    SendClientMessage(playerid, COLOR_LSPD, "Roadblock #4 Successfully Deployed, please remember to remove it.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
		}
		return 1;
	}

	if(strcmp(cmd, "/roadunblock4", true) == 0 || strcmp(cmd, "/rrb4", true) == 0)
	{
		if (RoadBlock4[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You have not deployed a roadblock");
			return 1;
		}
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock4]);
		PlayerInfo[playerid][pRoadblock4] = 0;
    	RoadBlock4[playerid] -= 1;
		SendClientMessage(playerid, COLOR_LSPD, "Roadblock #4 removed");
		return 1;
	}

	if(strcmp(cmd, "/rb5", true) == 0 || strcmp(cmd, "/roadblock5", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 1)
		{
			if(CopOnDuty[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not on duty");
				return 1;
			}
   			if(RoadBlock5[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "You have already deployed this roadblock.");
   				return 1;
			}
			new Float:rbX, Float:rbY, Float:rbZ, Float:rbA;
			GetPlayerPos(playerid, rbX, rbY, rbZ);
			GetPlayerFacingAngle(playerid, rbA);
			PlayerInfo[playerid][pRoadblock5] = CreateDynamicObject(981, rbX, rbY, rbZ, 0.0, 0.0, rbA+180);
			SetPlayerPos(playerid, rbX, rbY, rbZ+4);
			RoadBlock5[playerid] += 1;
		    SendClientMessage(playerid, COLOR_LSPD, "Roadblock #5 Successfully Deployed, please remember to remove it.");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
		}
		return 1;
	}
    if(strcmp(cmd, "/rb6", true) == 0 || strcmp(cmd, "/roadblock6", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 1)
		{
			if(CopOnDuty[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not on duty");
				return 1;
			}
   			if(RoadBlock6[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "You have already deployed this roadblock.");
   				return 1;
			}
			new Float:rbX, Float:rbY, Float:rbZ, Float:rbA;
			GetPlayerPos(playerid, rbX, rbY, rbZ);
			GetPlayerFacingAngle(playerid, rbA);
			PlayerInfo[playerid][pRoadblock6] = CreateDynamicObject(981, rbX, rbY, rbZ, 0.0, 0.0, rbA+180);
			SetPlayerPos(playerid, rbX, rbY, rbZ+4);
			RoadBlock6[playerid] += 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
		}
		return 1;
	}
    if(strcmp(cmd, "/rb7", true) == 0 || strcmp(cmd, "/roadblock7", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 1)
		{
			if(CopOnDuty[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not on duty");
				return 1;
			}
   			if(RoadBlock7[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "You have already deployed this roadblock.");
   				return 1;
			}
			new Float:rbX, Float:rbY, Float:rbZ, Float:rbA;
			GetPlayerPos(playerid, rbX, rbY, rbZ);
			GetPlayerFacingAngle(playerid, rbA);
			PlayerInfo[playerid][pRoadblock7] = CreateDynamicObject(19834, rbX, rbY, rbZ, 0.0, 0.0, rbA+180);
			SetPlayerPos(playerid, rbX, rbY, rbZ+4);
			RoadBlock7[playerid] += 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
		}
		return 1;
	}
    if(strcmp(cmd, "/rb8", true) == 0 || strcmp(cmd, "/roadblock8", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5 || PlayerInfo[playerid][pFaction] == 1)
		{
			if(CopOnDuty[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not on duty");
				return 1;
			}
   			if(RoadBlock8[playerid] == 1)
			{
   				SendClientMessage(playerid, COLOR_GREY, "You have already deployed this roadblock.");
   				return 1;
			}
			new Float:rbX, Float:rbY, Float:rbZ, Float:rbA;
			GetPlayerPos(playerid, rbX, rbY, rbZ);
			GetPlayerFacingAngle(playerid, rbA);
			PlayerInfo[playerid][pRoadblock8] = CreateDynamicObject(19834, rbX, rbY, rbZ, 0.0, 0.0, rbA+180);
			SetPlayerPos(playerid, rbX, rbY, rbZ+4);
			RoadBlock8[playerid] += 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
		}
		return 1;
	}
	if(strcmp(cmd, "/roadunblock5", true) == 0 || strcmp(cmd, "/rrb5", true) == 0)
	{
		if (RoadBlock5[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You have not deployed a roadblock");
			return 1;
		}
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock5]);
		PlayerInfo[playerid][pRoadblock5] = 0;
    	RoadBlock5[playerid] -= 1;
		SendClientMessage(playerid, COLOR_LSPD, "Roadblock #5 removed");
		return 1;
	}
    if(strcmp(cmd, "/roadunblock6", true) == 0 || strcmp(cmd, "/rrb6", true) == 0)
	{
		if (RoadBlock6[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You have not deployed a roadblock");
			return 1;
		}
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock6]);
		PlayerInfo[playerid][pRoadblock6] = 0;
    	RoadBlock6[playerid] -= 1;
		SendClientMessage(playerid, COLOR_LSPD, "Roadblock #6 removed");
		return 1;
	}
    if(strcmp(cmd, "/roadunblock7", true) == 0 || strcmp(cmd, "/rrb7", true) == 0)
	{
		if (RoadBlock7[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You have not deployed a roadblock");
			return 1;
		}
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock7]);
		PlayerInfo[playerid][pRoadblock7] = 0;
    	RoadBlock7[playerid] -= 1;
		SendClientMessage(playerid, COLOR_LSPD, "Roadblock #7 removed");
		return 1;
	}
    if(strcmp(cmd, "/roadunblock8", true) == 0 || strcmp(cmd, "/rrb8", true) == 0)
	{
		if (RoadBlock8[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "You have not deployed a roadblock");
			return 1;
		}
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock8]);
		PlayerInfo[playerid][pRoadblock8] = 0;
    	RoadBlock8[playerid] -= 1;
		SendClientMessage(playerid, COLOR_LSPD, "Roadblock #8 removed");
		return 1;
	}
	if(strcmp(cmd, "/roadunblockall", true) == 0 || strcmp(cmd, "/rball", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 5)
		{
			SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			return 1;
		}
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock8]);
		RoadBlock8[playerid] -= 1;
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock7]);
		RoadBlock7[playerid] -= 1;
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock6]);
		RoadBlock6[playerid] -= 1;
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock5]);
		RoadBlock1[playerid] -= 1;
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock4]);
		RoadBlock2[playerid] -= 1;
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock3]);
		RoadBlock3[playerid] -= 1;
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock2]);
		RoadBlock4[playerid] -= 1;
		DestroyDynamicObject(PlayerInfo[playerid][pRoadblock]);
		RoadBlock5[playerid] -= 1;
		SendClientMessage(playerid, COLOR_LSPD, "Roadblocks removed");
		return 1;
	}
	if(strcmp(cmd, "/removeweed", true) == 0)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
	  			if(PlayerInfo[playerid][pFaction] != 0 && DynamicFactions[PlayerInfo[playerid][pFaction]][fType] != 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
					return 1;
				}
				if(CopOnDuty[playerid] == 0)
				{
		 			SendClientMessage(playerid, COLOR_GREY, "You are not on duty");
					return 1;
				}
				if(IsPlayerInAnyVehicle(playerid))
				{
					return 1;
				}
	   			if(PlayerToPoint(4, playerid, PlayerInfo[i][pWeedX], PlayerInfo[i][pWeedY],PlayerInfo[i][pWeedZ]))
				{
				   	LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,1000);
					SendClientMessage(playerid, COLOR_WHITE, "You have removed the weed plant.");
					DestroyDynamicObject(PlayerInfo[i][pPlant]);
					PlayerInfo[i][pWeedTimer] = 0;
					PlayerInfo[i][pPlant] = 0;
	  			}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "You are not in range of a plant");
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/defuse", true) == 0)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
	  			if(PlayerInfo[playerid][pFaction] != 0 && DynamicFactions[PlayerInfo[playerid][pFaction]][fType] != 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
					return 1;
				}
				if(CopOnDuty[playerid] == 0)
				{
		 			SendClientMessage(playerid, COLOR_GREY, "You are not on duty");
					return 1;
				}
				if(IsPlayerInAnyVehicle(playerid))
				{
					return 1;
				}
	           	new Float:bx[MAX_PLAYERS], Float:by[MAX_PLAYERS], Float:bz[MAX_PLAYERS];
				GetObjectPos(C4[i], bx[playerid], by[playerid], bz[playerid]);
	   			if(PlayerToPoint(2, playerid, bx[playerid], by[playerid],bz[playerid]))
				{
					new rand = random(2)+1;
					if(rand == 1)
					{
				   		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				   		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,1000);
						SendClientMessage(playerid, COLOR_WHITE, "You have defused the bomb safely");
						format(string, sizeof(string), "%s successfully cuts the wires and defuses the bomb", giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						TextDrawHideForPlayer(playerid, Meter1[playerid]);
						TextDrawHideForPlayer(playerid, Meter2[playerid]);
						TextDrawHideForPlayer(playerid, Meter3[playerid]);
						KillTimer(UpdateMeterTimer[playerid]);
						DestroyObject(C4[playerid]);
						Planted[playerid] = 0;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Wrong Wire!", 2000, 1);
						CreateExplosion(bx[playerid], by[playerid], bz[playerid], 6, ExplosionRadius);
						TextDrawHideForPlayer(playerid, Meter1[playerid]);
						TextDrawHideForPlayer(playerid, Meter2[playerid]);
						TextDrawHideForPlayer(playerid, Meter3[playerid]);
						KillTimer(UpdateMeterTimer[playerid]);
						DestroyObject(C4[playerid]);
						Planted[playerid] = 0;
					}
	  			}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "You are not in range of a bomb");
				}
			}
		}// not connected
		return 1;
	}

	if (strcmp(cmdtext, "/opentoll", true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (barierablocata == 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 5.0, 53.1484,-1538.4218,4.9090))
				{
					if (GetPlayerCash(playerid) <10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						return 1;
					}
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul intinde mana si apuca cei 10$.");
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul apasa butonul panoului, pentru a deschide bariera.");
					MoveObject(barieraLS, 57.6492, -1535.4741, 5.1398, 1.0,0.0000, 20.0000, -98.2800);
					timergate[playerid] = SetTimerEx("barieraLSclose",6000,false,"i",playerid);
					GivePlayerMoney(playerid, -10);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, 67.9915,-1526.5282,4.8541))
				{
					if (GetPlayerCash(playerid) <10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						return 1;
					}
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul intinde mana si apuca cei 10$.");
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul apasa butonul panoului, pentru a deschide bariera.");
					MoveObject(barieraLS2,63.4019, -1522.2883, 5.1398, 1.0,0.0000, -20.0000, 90.0000);
					timergate[playerid] = SetTimerEx("barieraLSclose2",6000,false,"i",playerid);
					GivePlayerMoney(playerid, -10);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1784.2859,642.8638,19.1061))
				{
					if (GetPlayerCash(playerid) <10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						return 1;
					}
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul intinde mana si apuca cei 10$.");
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul apasa butonul panoului, pentru a deschide bariera.");
					MoveObject(barieraLV, 1789.43347, 647.66431, 18.65376, 1.0, 0.00000, -20.00000, -11.88000);
					timergate[playerid] = SetTimerEx("barieraLVclose",6000,false,"i",playerid);
					GivePlayerMoney(playerid, -10);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1769.3663,657.2005,18.3461))
				{
					if (GetPlayerCash(playerid) <10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						return 1;
					}
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul intinde mana si apuca cei 10$.");
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul apasa butonul panoului, pentru a deschide bariera.");
					MoveObject(barieraLV2,1764.49365, 653.49512, 18.65380, 1.0,0.00000, 20.00000, -11.88000);
					timergate[playerid] = SetTimerEx("barieraLVclose2",6000,false,"i",playerid);
					GivePlayerMoney(playerid, -10);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, -1658.1737,565.3509,38.9349))
				{
					if (GetPlayerCash(playerid) <10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						return 1;
					}
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul intinde mana si apuca cei 10$.");
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul apasa butonul panoului, pentru a deschide bariera.");
					MoveObject(barieraSF, -1664.53113, 563.42999, 38.44354, 1.0, 0.00000, -20.00000, 135.96001);
					timergate[playerid] = SetTimerEx("barieraSFclose",6000,false,"i",playerid);
					GivePlayerMoney(playerid, -10);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, -1655.1168,545.7979,38.4153))
				{
					if (GetPlayerCash(playerid) <10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						return 1;
					}
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul intinde mana si apuca cei 10$.");
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul apasa butonul panoului, pentru a deschide bariera.");
					MoveObject(barieraSF2,-1648.99268, 547.42462, 38.44350, 1.0,0.00000, 20.00000, 135.96001);
					timergate[playerid] = SetTimerEx("barieraSFclose2",6000,false,"i",playerid);
					GivePlayerMoney(playerid, -10);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2686.0928,1278.7544,55.4297))
				{
					if (GetPlayerCash(playerid) <10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						return 1;
					}
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul intinde mana si apuca cei 10$.");
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul apasa butonul panoului, pentru a deschide bariera.");
					MoveObject(barieraSF3,  -2689.76294, 1274.25537, 55.60280, 1.0, 0.00000, 20.00000, 0.00000);
					timergate[playerid] = SetTimerEx("barieraSFclose3",6000,false,"i",playerid);
					GivePlayerMoney(playerid, -10);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2695.0969,1278.9453,55.4297))
				{
					if (GetPlayerCash(playerid) <10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						return 1;
					}
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul intinde mana si apuca cei 10$.");
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul apasa butonul panoului, pentru a deschide bariera.");
					MoveObject(barieraSF4, -2691.18042, 1274.25537, 55.60283, 1.0,0.00000, -20.00000, 0.00000);
					timergate[playerid] = SetTimerEx("barieraSFclose4",6000,false,"i",playerid);
					GivePlayerMoney(playerid, -10);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2668.2317,1269.8975,55.4297))
				{
					if (GetPlayerCash(playerid) <10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						return 1;
					}
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul intinde mana si apuca cei 10$.");
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul apasa butonul panoului, pentru a deschide bariera.");
					MoveObject(barieraSF5,-2671.58496, 1274.25537, 55.60283, 1.0,0.00000, 20.00000, 0.00000);
					timergate[playerid] = SetTimerEx("barieraSFclose5",6000,false,"i",playerid);
					GivePlayerMoney(playerid, -10);
				}
				else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2677.2605,1270.0555,55.4297))
				{
					if (GetPlayerCash(playerid) <10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						return 1;
					}
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul intinde mana si apuca cei 10$.");
					SendClientMessage(playerid, COLOR_PURPLE, "*Gardianul apasa butonul panoului, pentru a deschide bariera.");
					MoveObject(barieraSF6,-2673.17847, 1274.25537, 55.60283, 1.0,0.00000, -20.00000, 0.00000);
					timergate[playerid] = SetTimerEx("barieraSFclose6",6000,false,"i",playerid);
					GivePlayerMoney(playerid, -10);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE,"Barierele sunt blocate de catre LSPD, nu le poti deschide.");
			}
		}
    	return 1;
	}
	if (strcmp(cmd, "/tolls", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Comenzile barierelor");
		  		SendClientMessage(playerid, COLOR_WHITE, "lock/release - Deschide/Inchide toate barierele");
		  		SendClientMessage(playerid, COLOR_WHITE, "flint - Deschide/Inchide barierele din Flint Country");
		  		SendClientMessage(playerid, COLOR_WHITE, "lv - Deschide/Inchide barierele de pe autostrada LS-LV");
				return 1;
			}
			if (PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
			{
			    if(strcmp(x_nr,"lock",true) == 0)
				{
				    if(barierablocata == 0)
				    {
						barierablocata = 1;
						format(string, sizeof(string), "** HQ Announcement : Toate barierele au fost blocate de catre %s %s **",GetRankName(playerid), GetPlayerLastName(playerid));
		    			SendFactionMessage(1, COLOR_LSPDNEW, string);
		    		}
				    if(barierablocata == 0)
				    {
						barierablocata = 1;
						format(string, sizeof(string), "** HQ Announcement : Toate barierele au fost blocate de catre %s %s **",GetRankName(playerid), GetPlayerLastName(playerid));
		    			SendFactionMessage(3, COLOR_LSPDNEW, string);
		    		}
		    		return 1;
				}
				if(strcmp(x_nr,"release",true) == 0)
				{
				    if(barierablocata == 1 )
				    {
						barierablocata = 0;
						format(string, sizeof(string), "** HQ Announcement : Toate barierele au fost deblocate de catre  %s %s **",GetRankName(playerid), GetPlayerLastName(playerid));
		    			SendFactionMessage(3, COLOR_LSPDNEW, string);
		    		}
				    if(barierablocata == 1 )
				    {
						barierablocata = 0;
						format(string, sizeof(string), "** HQ Announcement : Toate barierele au fost deblocate de catre  %s %s **",GetRankName(playerid), GetPlayerLastName(playerid));
		    			SendFactionMessage(1, COLOR_LSPDNEW, string);
		    		}
				}
				if(strcmp(x_nr,"flint",true) == 0)
				{
				    if(barierablocata == 0)
				    {
						barierablocata = 1;
						format(string, sizeof(string), "** HQ Announcement : Toate barierele din Flint Country au fost blocate de catre %s %s **",GetRankName(playerid), GetPlayerLastName(playerid));
		    			SendFactionMessage(3, COLOR_LSPDNEW, string);
		    		}
				    if(barierablocata == 0)
				    {
						barierablocata = 1;
						format(string, sizeof(string), "** HQ Announcement : Toate barierele din Flint Country au fost blocate de catre %s %s **",GetRankName(playerid), GetPlayerLastName(playerid));
		    			SendFactionMessage(1, COLOR_LSPDNEW, string);
		    		}
		    		return 1;
				}
				if(strcmp(x_nr,"lv",true) == 0)
				{
				    if(barierablocata == 0)
				    {
						barierablocata = 1;
						format(string, sizeof(string), "** HQ Announcement : Toate barierele de pe autostrada LV au fost blocate de catre %s %s **",GetRankName(playerid), GetPlayerLastName(playerid));
		    			SendFactionMessage(3, COLOR_LSPDNEW, string);
		    		}
				    if(barierablocata == 0)
				    {
						barierablocata = 1;
						format(string, sizeof(string), "** HQ Announcement : Toate barierele de pe autostrada LV au fost blocate de catre %s %s **",GetRankName(playerid), GetPlayerLastName(playerid));
		    			SendFactionMessage(1, COLOR_LSPDNEW, string);
		    		}
		    		return 1;
				}
			}
		}
		return 1;
	}
    if (strcmp(cmd, "/takegun", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_GREY, "Foloseste: /takegun [slot]");
				SendClientMessage(playerid, COLOR_GREY, "[SYNTAX-INFO] 1: Remington-178 | 2: MP5 | 3: M4A1");
				return 1;
			}
			if (!IsPlayerInAnyVehicle(playerid))
		    {
                SendClientMessage(playerid,COLOR_GREY," Nu esti in masina !");
                return 1;

            }
			if (PlayerInfo[playerid][pFaction] == 3)
			{
			    if(strcmp(x_nr,"1",true) == 0)
				{
				    if(takegun == 0)
				    {
				        if(PlayerInfo[playerid][pRank] <= 14)
				    	{
							takegun = 1;
							PlayerActionMessage(playerid,15.0,"apuca din suportul special un Remington-178 urmand sa ii seteze siguranta pe OFF.");
							SafeGivePlayerWeapon(playerid, 25, 150);
		    			}
		    			return 1;
					}
		    		else
		    		{
		    		    SendClientMessage(playerid,COLOR_YELLOW,"Deja detii o arma in mana . Foloseste /place [slot] pentru a lua alta arma");
		    		}
		    		return 1;
				}
				if(strcmp(x_nr,"2",true) == 0)
				{
				    if(takegun == 0)
					{
					    if(PlayerInfo[playerid][pRank] <= 5)
				    	{
							takegun = 1;
                        	PlayerActionMessage(playerid,15.0,"apuca din suportul special un MP5 urmand sa ii seteze siguranta pe OFF.");
							SafeGivePlayerWeapon(playerid, 29, 250);
		    			}
		    			return 1;
					}
		    		else
		    		{
		    		    SendClientMessage(playerid,COLOR_YELLOW,"Deja detii o arma in mana . Foloseste /place [slot] pentru a lua alta arma");
		    		}
		    		return 1;
				}
				if(strcmp(x_nr,"3",true) == 0)
				{
				    if(takegun == 0)
				    {
				        if(PlayerInfo[playerid][pRank] <= 7)
				    	{
							takegun = 1;
							PlayerActionMessage(playerid,15.0,"apuca din suportul special un M4A1 urmand sa ii seteze siguranta pe OFF.");
							SafeGivePlayerWeapon(playerid, 31, 250);
						}
		    		}
		    		else
		    		{
		    		    SendClientMessage(playerid,COLOR_YELLOW,"Deja detii o arma in mana . Foloseste /place [slot] pentru a lua alta arma");
		    		}
		    		return 1;
				}
				else
				{
			    	SendClientMessage(playerid,COLOR_GREY,"Nu esti in LSPD");
				}
			}
		}
		return 1;
	}
    if (strcmp(cmd, "/place", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		    new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_GREY, "Foloseste: /place [slot]");
				SendClientMessage(playerid, COLOR_GREY, "[SYNTAX-INFO] 1: Remington-178 | 2: MP5 | 3: M4A1");
				return 1;
			}
			if (!IsPlayerInAnyVehicle(playerid))
		    {
                SendClientMessage(playerid,COLOR_GREY," Nu esti in masina !");
                return 1;

            }
			if (PlayerInfo[playerid][pFaction] == 3)
			{
			    if(strcmp(x_nr,"1",true) == 0)
				{
				    if(takegun == 1)
				    {
				        if(PlayerInfo[playerid][pRank] <= 14)
				    	{
							takegun = 0;
							SafeResetPlayerWeapons(playerid);
							PlayerActionMessage(playerid,15.0,"seteaza siguranta Remington-ului pe ON urmand sa il puna in suportul special.");
						}
		    		}
		    		else
		    		{
		    		    SendClientMessage(playerid,COLOR_YELLOW,"Nu detii o arma . Foloseste /takegun [slot] pentru a lua alta arma");
		    		}
		    		return 1;
				}
				if(strcmp(x_nr,"2",true) == 0)
				{
				    if(takegun == 1)
				    {
				        if(PlayerInfo[playerid][pRank] <= 5)
				    	{
						takegun = 0;
						SafeResetPlayerWeapons(playerid);
						PlayerActionMessage(playerid,15.0,"seteaza siguranta MP5-ului pe ON urmand sa il puna in suportul special.");
						}
		    		}
		    		else
		    		{
		    		    SendClientMessage(playerid,COLOR_YELLOW,"Nu detii o arma . Foloseste /takegun [slot] pentru a lua alta arma");
		    		}
		    		return 1;
				}
				if(strcmp(x_nr,"3",true) == 0)
				{
				    if(takegun == 1)
				    {
				        if(PlayerInfo[playerid][pRank] <= 7)
				        {
						takegun = 0;
						SafeResetPlayerWeapons(playerid);
						PlayerActionMessage(playerid,15.0,"seteaza siguranta M4A1-ului pe ON urmand sa il puna in suportul special.");
						}
		    		}
                    else
		    		{
		    		    SendClientMessage(playerid,COLOR_YELLOW,"Nu detii o arma . Foloseste /takegun [slot] pentru a lua alta arma");
		    		}
		    		return 1;
				}
				if(strcmp(x_nr,"4",true) == 0)
				{
				    if(takegun == 1)
				    {
						takegun = 0;
						SafeResetPlayerWeapons(playerid);
						PlayerActionMessage(playerid,15.0,"seteaza siguranta Colt 47-ului pe ON urmand sa il puna in suportul special.");
		    		}
		    		else
		    		{
		    		    SendClientMessage(playerid,COLOR_YELLOW,"Nu detii o arma . Foloseste /takegun [slot] pentru a lua alta arma");
		    		}
		    		return 1;
				}
				else
				{
			    	SendClientMessage(playerid,COLOR_GREY,"Nu esti in LSPD");
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/suspect", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /suspect [playerid/partofname] [crime]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[256];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /suspect [playerid/partofname] [crime]");
							return 1;
						}

      					if(CopOnDuty[playerid])
						{
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
	 						if(WantedPoints[giveplayerid] == 0) { WantedPoints[giveplayerid] = 3; }
							else { WantedPoints[giveplayerid]+= 2; }
							SetPlayerCriminalEx(giveplayerid,playerid,result);
							SuspectLog(result);
							strmid(PlayerInfo[giveplayerid][pWanted], (result), 0, strlen((result)), 256);
						}
      					else
						{
      						SendClientMessage(playerid, COLOR_GRAD2, "You are not on duty");
      						return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
				return 1;
			}
		}
  		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
			return 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/demerit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /demerit [playerid]");
				return 1;
			}
			new giveplayerid2;
			giveplayerid2 = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid2))
		    {
		        if(giveplayerid2 != INVALID_PLAYER_ID)
		        {
		            if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
		            {
		                if(PlayerInfo[giveplayerid2][pDemerits] >= 4 && PlayerInfo[giveplayerid2][pCarLic] > 0)
		                {
		                    SendClientMessage(giveplayerid2, COLOR_RED, "Licenta ti-a fost confiscata deoarece ai prea multe antecedente penale!");
		                    PlayerInfo[giveplayerid2][pCarLic] = 0;
		                    PlayerInfo[giveplayerid2][pDemerits] = 0;
		                    SendClientMessage(playerid, COLOR_WHITE, "You've taken away that person's license as they reached the maximun demerits.");
		                }
		                else
		                {
		                    PlayerInfo[giveplayerid2][pDemerits]++;
		                    format(string, sizeof(string), "You have demerited %s, they're now at %d demerits.", GetPlayerNameEx(giveplayerid2), PlayerInfo[giveplayerid2][pDemerits]);
		                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		                    format(string, sizeof(string), "Your license has been demerited by Officer %s, you have %d demerits.", GetPlayerNameEx(playerid), PlayerInfo[giveplayerid2][pDemerits]);
		                    SendClientMessage(giveplayerid2, COLOR_LIGHTBLUE, string);
		                }
		            }
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Factiune invalida!");
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/cuff", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
			{
   				if(CopOnDuty[playerid] == 0)
			    {
			    	SendClientMessage(playerid, COLOR_GREY, "Nu esti on duty!");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Folosire{696969}: /cuff [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    if(PlayerCuffed[giveplayerid] == 1)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Playerul este deja incatusat!");
					        return 1;
					    }
		    			if(giveplayerid == playerid)
				    	{
        					SendClientMessage(playerid, COLOR_GREY, "");
        					return 1;
				    	}
						if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
        					format(string, sizeof(string), "Ai fost incatusat de catre %s", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							format(string, sizeof(string), "L-ai incatusat pe %s", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_WHITE, string);
							PlayerCuffed[giveplayerid] = 1;
							SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
							if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 5))
							{
								RemovePlayerAttachedObject(giveplayerid, 5);
							}
							SetPlayerAttachedObject(giveplayerid, 5, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
							PlayerPlayerActionMessage(playerid,giveplayerid,15.0,"l-a incatusat");
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine.");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/uncuff", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 1|| PlayerInfo[playerid][pFaction] == 3)
			{
   				if(CopOnDuty[playerid] == 0)
			    {
			    	SendClientMessage(playerid, COLOR_GREY, "Nu esti duty.");
			        return 1;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Folosire{696969}: /uncuff [playerid]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    if(PlayerCuffed[giveplayerid] == 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Playerul nu este incatusat.");
					        return 1;
					    }
 			    		if(giveplayerid == playerid)
				    	{
        					SendClientMessage(playerid, COLOR_GREY, "");
        					return 1;
				    	}
						if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
        					format(string, sizeof(string), "Ai fost descatusat de catre %s", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
							format(string, sizeof(string), "L-ai descatusat pe %s", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_WHITE, string);
							PlayerCuffed[giveplayerid] = 0;
							if(IsPlayerAttachedObjectSlotUsed(giveplayerid, 5))
							{
								RemovePlayerAttachedObject(giveplayerid, 5);
							}
							SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
							PlayerPlayerActionMessage(playerid,giveplayerid,15.0,"l-a descatusat");
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine.");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/revoke", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFaction] == 1 ||PlayerInfo[playerid][pFaction] == 3)
	        {
  			    if(CopOnDuty[playerid] == 0)
			    {
			    	SendClientMessage(playerid, COLOR_GREY, "You are not on duty");
			        return 1;
			    }
	            new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /revoke [item] [playerid/partofname]");
			  		SendClientMessage(playerid, COLOR_WHITE, "[Item] driverslicense | flyinglicense | weaponlicense | materials | weapons");
					return 1;
				}
			    if(strcmp(x_nr, "driverslicense", true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /revoke driverslicense [playerid/partofname]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "Licenta lui %s de condus a fost confiscata .", GetPlayerNameEx(giveplayerid));
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "%s ti-a confiscat icenta de condus.", GetPlayerNameEx(playerid));
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pCarLic] = 0;
								// File
  								/*new year, month,day;
								getdate(year,month,day);
								new string3[256];
								format(string3, sizeof(string3), "IBP/MDC/%s.log", giveplayer);
								if(fexist(string3))
								{
									format(string, sizeof(string), "[REVOKE] %s got his drivers license revoked by %s. (%d-%d-%d)",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid),day,month,year);
									CrimeRecord(string,giveplayer);
									printf("[REVOKE] Succesfully gave %s his revoke text",GetPlayerNameEx(giveplayerid));
								}
								else
								{
									fcreate(string3);
									printf("Successfully created suspect file");
									format(string, sizeof(string), "[REVOKE] %s got his drivers license revoked by %s. (%d-%d-%d)",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid),day,month,year);
									CrimeRecord(string,giveplayer);
									printf("[REVOKE] Succesfully created file and gave %s his revoke text",GetPlayerNameEx(giveplayerid));
								}*/
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "That player is not in range");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
					    return 1;
					}
				}
				else if(strcmp(x_nr, "flyinglicense", true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /revoke flyinglicense [playerid/partofname]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(ProxDetectorS(8.0, playerid, giveplayerid))
							{
              					format(string, sizeof(string), "Licenta lui %s de zbor a fost confiscata", GetPlayerNameEx(giveplayerid));
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "%s ti-a confiscat licenta de zbor.", GetPlayerNameEx(playerid));
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pFlyLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "That player is not in range");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
					    return 1;
					}
				}
				else if(strcmp(x_nr, "weaponlicense", true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /revoke weaponlicense [playerid/partofname]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(ProxDetectorS(8.0, playerid, giveplayerid))
							{
								GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "Licenta de port-arma al lui %s a fost confiscata.", GetPlayerNameEx(giveplayerid));
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "%s ti-a confiscat licenta de port-arma.", GetPlayerNameEx(playerid));
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pWepLic] = 0;
								// File
								/*new year, month,day;
								getdate(year,month,day);
								new string3[256];
								format(string3, sizeof(string3), "IBP/MDC/%s.log", giveplayer);
								if(fexist(string3))
								{
									format(string, sizeof(string), "[REVOKE] %s got his weapon license revoked by %s. (%d-%d-%d)",giveplayer,sendername,day,month,year);
									CrimeRecord(string,giveplayer);
									printf("[REVOKE] Succesfully gave %s his weapon license revoke text",GetPlayerNameEx(giveplayerid));
								}
								else
								{
									fcreate(string3);
									printf("Successfully created suspect file");
									format(string, sizeof(string), "[REVOKE] %s got his weapon license revoked by %s. (%d-%d-%d)",giveplayer,sendername,day,month,year);
									CrimeRecord(string,giveplayer);
									printf("[REVOKE] Succesfully gave %s his weapon license revoke text",GetPlayerNameEx(giveplayerid));
								}*/
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "That player is not in range");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
					    return 1;
					}
				}
				else if(strcmp(x_nr, "materials", true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /revoke materials [playerid/partofname]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    format(string, sizeof(string), "Materialele lui %s au fost confiscate.", GetPlayerNameEx(giveplayerid));
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "%s ti-a confiscat materialele", GetPlayerNameEx(playerid));
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        PlayerInfo[giveplayerid][pMaterials] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "That player is not in range");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
					    return 1;
					}
				}
				else if(strcmp(x_nr, "weapons", true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /revoke weapons [playerid/partofname]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if(ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    format(string, sizeof(string), "Armele lui %s au fost confiscate.", GetPlayerNameEx(giveplayerid));
						        SendClientMessage(playerid, COLOR_WHITE, string);
						        format(string, sizeof(string), "%s ti-a confiscat armele", GetPlayerNameEx(playerid));
						        SendClientMessage(giveplayerid, COLOR_WHITE, string);
						        SafeResetPlayerWeapons(giveplayerid);
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "That player is not in range");
							    return 1;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
					    return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
					return 1;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd,"/settax",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFaction] == 6 && PlayerInfo[playerid][pRank] == 1)
	        {
		        tmp = strtok(cmdtext, idx);
		        if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}SYNTAX{FFFFFF}: /settax [ammount]");
					return 1;
				}
				new moneys;
				moneys = strval(tmp);
				if(moneys < 1 || moneys > 250) { SendClientMessage(playerid, COLOR_GREY, "  The tax may not be below 1 or above 250"); return 1; }
				Tax = moneys;
				SaveStuff();
				format(string, sizeof(string), "* The Tax is $%d per civillian, from now on.", Tax);
				SendClientMessage(playerid, COLOR_WHITE, string);
	            GetPlayerName(playerid, sendername, sizeof(sendername));
			    new y, m, d;
				new h,mi,s;
				getdate(y,m,d);
				gettime(h,mi,s);
				format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /settax %d",d,m,y,h,mi,s,sendername, moneys);
				CommandLog(string);
			}
	    }
	    return 1;
	}
 	if(strcmp(cmd, "/government", true) == 0 || strcmp(cmd, "/gov", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pFaction] == 5)
			{
				if(PlayerInfo[playerid][pRank] >= 2)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat!");
				    return 1;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[256];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: (/gov)ernment [text]");
					return 1;
				}
				if(PlayerInfo[playerid][pFaction] == 1|| PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 6 || PlayerInfo[playerid][pFaction] == 5)
				{
	 				new str[128];
					if(strlen(result) > MAXLEN)
					{
		     			new pos = MAXLEN;
					    //while(result[--pos] < ' ') {}
					    if(pos < MAXLEN-1) pos = MAXLEN;
					    format(str, sizeof(str), "[Anunt guvernamental] %.*s ...", pos, result);
		                SendClientMessageToAll(COLOR_LSPDNEW, str);
					    format(str, sizeof(str), "[Anunt guvernamental] ... %s", result[pos]);
					    SendClientMessageToAll(COLOR_LSPDNEW, str);
					}
					else
					{
						format(str, sizeof(str), "[Anunt guvernamental] %s", result);
						SendClientMessageToAll(COLOR_LSPDNEW, str);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/suspendlicense", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /suspendlicense [playerid/PartOfName]");
					return 1;
				}
				new bums = ReturnUser(tmp);
				if(IsPlayerConnected(bums))
				{
					if(GetDistanceBetweenPlayers(playerid,bums) < 5)
					{
						GetPlayerName(bums, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[bums][pCarLic] == 0)
						{
						    SendClientMessage(playerid, COLOR_GREY, "   This person does not have a license.");
						    return 1;
						}
						if(PlayerInfo[bums][pCarLic] == 2)
						{
						    SendClientMessage(playerid, COLOR_GREY, "   This persons License is already suspended.");
						    return 1;
						}
						format(string, sizeof(string), "* Ai suspendat licenta lui %s", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Licenta ta a fost suspendata de catre %s", sendername);
						SendClientMessage(bums, COLOR_LIGHTBLUE, string);
			            PlayerInfo[bums][pCarLic] = 2;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   No-one close enough suspend license.");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Factiune invalida!");
			    return 1;
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/prison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /prison [playerid/PartOfName] [price] [1 to 24 hours]");
				return 1;
			}
			new world;
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /prison [playerid/PartOfName] [price] [1 to 24 hours]");
				return 1;
			}
	        if(!PlayerToPoint(150.0, playerid,1210.5415, -1337.5714, 797.8427) && GetDistanceBetweenPlayers(playerid,giveplayerid) < 30)
			{
			    SendClientMessage(playerid, COLOR_GREY, "  You are not at the office, or that player is not there !");
			    return 1;
			}
			new moneys;
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 5000)
			{
				SendClientMessage(playerid, COLOR_GREY, "Jail price can not be below $1 or above $5000");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /prison [playerid/PartOfName] [price] [1 to 24 hours]");
				return 1;
			}
         	world = strval(tmp);
			if(world > 24 || world < 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Minimum is 1 hour and the maximum is 24 hours !");
				return 1;
			}
			if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
			{
			    if(CopOnDuty[playerid] == 1)
			    {
					if(IsPlayerConnected(giveplayerid))
			    	{
			       		if(giveplayerid != INVALID_PLAYER_ID)
			     		{
				            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "Ai fost inchis de catre %s in Los Santos Prison.", GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid, COLOR_LIGHTRED, string);
							format(string, sizeof(string), "Timp: %d ani | Pret: $%d", world, moneys);
							SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
							PlayerInfo[giveplayerid][pJailed] = 2;
							PlayerInfo[giveplayerid][pJailTime] = world*3600;
				            GivePlayerCash(giveplayerid, -moneys);
				            DynamicFactions[1][fBank] += moneys;
				            ResetPlayerWeapons(giveplayerid);
				            PlayerInfo[giveplayerid][pArrested] += 1;
				            PlayerInfo[giveplayerid][pMaterials] = 0;
							format(string, sizeof(string), "[Inchisoare] %s %s l-a inchis pe %s pentru %d ani [suma: %d]", GetRankName(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), world, moneys);
							SendFactionMessage(3,COLOR_LIGHTRED, string);
							format(string, sizeof(string), "[PRISON] %s la inchis pe %s [Ani: %d] [Pret: %d]", sendername, giveplayer, world, moneys);
							ArrestLog(string);
							strmid(PlayerInfo[giveplayerid][pWanted], "None", 0, strlen("None"), 255);
				            new randcell = random(12);
				            if(randcell == 0)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 1;
				            }
				            else if(randcell == 1)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 1;
				            }
				            else if(randcell == 2)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 2;
				            }
				            else if(randcell == 3)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 3;
				            }
				            else if(randcell == 4)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 4;
				            }
				            else if(randcell == 5)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 5;
				            }
				            else if(randcell == 6)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 6;
				            }
				            else if(randcell == 7)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 7;
				            }
				            else if(randcell == 8)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 8;
				            }
				            else if(randcell == 9)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 9;
				            }
				            else if(randcell == 10)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 10;
				            }
				            else if(randcell == 11)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 11;
				            }
				            else if(randcell == 12)
				            {
				            	SetPlayerPos(giveplayerid, 1210.5415, -1337.5714, 797.8427);
				            	SetTimerEx("Unfreezeren", 3100, false, "i", giveplayerid);
				            	PlayerInfo[giveplayerid][pCell] = 12;
				            }
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "Nu esti duty!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You are not a cop!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unprison", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(CopOnDuty[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "Nu esti duty.");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pFaction] != 1 || PlayerInfo[playerid][pFaction] != 3)
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "  Factiune invalida!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /unprison [playerid/partofname]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pJailed] == 2)
			        {
			        	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s te-a eliberat din inchisoare.", giveplayer);
						SendClientMessage(playerid, COLOR_ADMINCMD, string);
						format(string, sizeof(string), "L-ai eliberat pe %s din inchisoare.", sendername);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						SetPlayerVirtualWorld(giveplayerid,0);
						SetPlayerInterior(giveplayerid,0);
						SetPlayerPos(giveplayerid, 1828.9702,-1539.9502,13.3828);
						PlayerInfo[giveplayerid][pJailTime] = 0;
						PlayerInfo[giveplayerid][pJailed] = 0;
						// File
						/*new year, month,day;
						getdate(year,month,day);
						new string3[256];
						format(string3, sizeof(string3), "IBP/MDC/%s.log", giveplayer);
						if(fexist(string3))
						{
							format(string, sizeof(string), "[PRISON] %s released from prison by %s. (%d-%d-%d)",giveplayer,sendername,day,month,year);
							CrimeRecord(string,giveplayer);
							printf("[UNJAIL] Succesfully gave %s his unjail text",giveplayer);
						}
						else
						{
							fcreate(string3);
							printf("Successfully created suspect file");
							format(string, sizeof(string), "[PRISON] %s released from prison by %s. (%d-%d-%d)",giveplayer,sendername,day,month,year);
							CrimeRecord(string,giveplayer);
							printf("[UNJAIL] Succesfully gave %s his unjail text",giveplayer);
						}*/
					}
				}
			}
	    }
	    return 1;
	}
    if(strcmp(cmd, "/penter", true) == 0)
	{
		if (PlayerToPoint(4, playerid,1827.5867,-1539.4821,13.5402))
	    {
			if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pJob] == 7)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1818.0632,-1536.7803,13.3585);
				}
				else
				{
					SetPlayerPos(playerid, 1818.0632,-1536.7803,13.3585);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/pexit", true) == 0)
    {
	    if (PlayerToPoint(4, playerid,1818.0632,-1536.7803,13.3585))
	    {
			if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pJob] == 7)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1828.6519,-1538.5758,13.5402);
				}
				else
				{
					SetPlayerPos(playerid, 1828.6519,-1538.5758,13.5402);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/trainenter", true) == 0)
	{
		if (PlayerToPoint(4, playerid,2494.3628,2773.1377,10.8126))
	    {
			if(PlayerInfo[playerid][pFaction] == 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2499.6089,2773.0068,10.8203);
				}
				else
				{
					SetPlayerPos(playerid, 2499.6089,2773.0068,10.8203);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/trainexit", true) == 0)
	{
		if (PlayerToPoint(4, playerid,2499.6089,2773.0068,10.8203))
	    {
			if(PlayerInfo[playerid][pFaction] == 1)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2494.3628,2773.1377,10.8126);
				}
				else
				{
					SetPlayerPos(playerid, 2494.3628,2773.1377,10.8126);
				}
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/prisonexite", true) == 0 || strcmp(cmd, "/pexit", true) == 0)
 	{
	    if(PlayerInfo[playerid][pFaction] != 0 && DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 1)
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		            if(PlayerToPoint(1.0,playerid,1818.0632,-1536.7803,13.3585))
		            {
					    new tmpcar = GetPlayerVehicleID(playerid);
					    SetVehiclePos(tmpcar, 1826.6522,-1538.7426,13.5469);
		            	SetPlayerPos(playerid, 1826.6522,-1538.7426,13.5469);
					}
		        }
		    }
		return 1;
 	}
	if(strcmp(cmd, "/prisongate", true) == 0 || strcmp(cmd, "/pgate", true) == 0)
	{
  		if(PlayerInfo[playerid][pAdministrator] < 2||PlayerInfo[playerid][pFaction] != 0 && DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 1)
		{
			if(PlayerToPoint(10.0, playerid, 1781.0179,-1536.1569,9.4752))
 			{
  				MoveObject( EntranceGate[1], 1781.0179,-1536.1569,9.4752, 1);
  				KillTimer(MainGate);
 				MainGate = SetTimer("MainGateClose", 10000, 0);
  			}
  			else if(PlayerToPoint(10.0, playerid, 3277.6838, -1963.6320, 10.9218))
   			{
    			MoveObject( EntranceGate[2], 3278.235596, -1959.720581+7, 11.702776, 1);
				MoveObject( EntranceGate[3], 3278.365479, -1974.658569, 11.702776, 1);
    			KillTimer(MainGate);
   				MainGate = SetTimer("MainGateClose", 10000, 0);
   			}
			else if(PlayerToPoint(1.0, playerid, 3358.572754, -1939.875244, 9.990665))
        	{
	            MoveObject(CellGate[1], 3358.572754+2, -1939.875244, 9.990665, 1);
	            KillTimer(CellGateCancel);
	            CellGateCancel = SetTimer("CellGateClose", 5000, 0);
	            ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 1, 1, 0,2000);
        	}
        	else if(PlayerToPoint(1.0, playerid, 3358.554443, -1944.814087, 9.984414))
        	{
	            MoveObject(CellGate[2], 3358.554443+2, -1944.814087, 9.984414, 1);
	            KillTimer(CellGateCancel);
	            CellGateCancel = SetTimer("CellGateClose", 5000, 0);
	            ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 1, 1, 0,2000);
			}
        	else if(PlayerToPoint(1.0, playerid, 3343.325195, -1939.901245, 9.989415))
        	{
	            MoveObject(CellGate[3], 3343.325195+2, -1939.901245, 9.989415, 1);
	            KillTimer(CellGateCancel);
	            CellGateCancel = SetTimer("CellGateClose", 5000, 0);
	            ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 1, 1, 0,2000);
        	}
        	else if(PlayerToPoint(1.0, playerid, 3343.327393, -1944.817505, 9.985664))
        	{
	            MoveObject(CellGate[4], 3343.327393+2, -1944.817505, 9.985664, 1);
	            KillTimer(CellGateCancel);
	            CellGateCancel = SetTimer("CellGateClose", 5000, 0);
	            ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 1, 1, 0,2000);
        	}
        	else if(PlayerToPoint(1.0, playerid, 3328.084473, -1944.812256, 9.985664))
        	{
	            MoveObject(CellGate[5], 3328.084473+2, -1944.812256, 9.985664, 1);
	            KillTimer(CellGateCancel);
	            CellGateCancel = SetTimer("CellGateClose", 5000, 0);
	            ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 1, 1, 0,2000);
	        }
	        else if(PlayerToPoint(1.0, playerid, 3328.089600, -1939.895386, 9.986915))
        	{
	            MoveObject(CellGate[6], 3328.089600+2, -1939.895386, 9.986915, 1);
	            KillTimer(CellGateCancel);
	            CellGateCancel = SetTimer("CellGateClose", 5000, 0);
	            ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 1, 1, 0,2000);
        	}
        	else if(PlayerToPoint(1.0, playerid, 3312.842285, -1944.804565, 9.971911))
        	{
	            MoveObject(CellGate[7], 3312.842285+2, -1944.804565, 9.971911, 1);
	            KillTimer(CellGateCancel);
	            CellGateCancel = SetTimer("CellGateClose", 5000, 0);
	            ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 1, 1, 0,2000);
        	}
        	else if(PlayerToPoint(1.0, playerid, 3312.847900, -1939.903687, 9.955658))
        	{
	            MoveObject(CellGate[8], 3312.847900+2, -1939.903687, 9.955658, 1);
	            KillTimer(CellGateCancel);
	            CellGateCancel = SetTimer("CellGateClose", 5000, 0);
	            ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 1, 1, 0,2000);
        	}
        }
		return 1;
	}
	// #################################################### Rocker Borg ##########################################
    if(!strcmp(cmdtext, "/tenter", true))
 	{
		if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		            if(PlayerToPoint(1.0,playerid,661.2469,-573.4905,16.3359))
		            {
		            	SetPlayerPos(playerid, 663.0609,-573.2282,16.3359);
		            	SendClientMessage(playerid, COLOR_GREY, "You entered Dillimore tank shop ((/texit to exit))");
					}
		        }
		    }
		return 1;
 	}
 	if(!strcmp(cmdtext, "/texit", true))
 	{
		if(IsPlayerConnected(playerid))
		{
		    if(GetPlayerState(playerid) == 1)
		    {
		            if(PlayerToPoint(1.0,playerid,663.0609,-573.2282,16.3359))
		            {
		            SetPlayerPos(playerid, 661.2469,-573.4905,16.3359);
		            SendClientMessage(playerid, COLOR_GREY, "You exited Dillimore tank shop ((/tenter to enter))");
					}
		        }
		    }
		return 1;
	}
 	if(strcmp(cmd, "/megaphone", true) == 0 || strcmp(cmd, "/m", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new tmpcar = GetPlayerVehicleID(playerid);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: (/m)egaphone [message]");
				return 1;
			}
			if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 2 || PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 5)
			{
				if (IsPlayerInAnyVehicle(playerid))
				{
					if(DynamicCars[tmpcar][FactionCar] == 1 || DynamicCars[tmpcar][FactionCar] == 2 || DynamicCars[tmpcar][FactionCar] == 3 || DynamicCars[tmpcar][FactionCar] == 5)
					{
						new maskid = PlayerInfo[playerid][pMaskID];
						if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(string, sizeof(string), "[ %s [Masca_%d] :o< %s ]", GetRankName(playerid),maskid, result);
							ProxDetector(100.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						else
						{
							format(string, sizeof(string), "[ %s %s :o< %s ]", GetRankName(playerid),GetPlayerNameEx(playerid), result);
							ProxDetector(100.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
							return 1;
						}
					}
					else SendClientMessage(playerid, COLOR_GREY, "Aceasta masina nu are megafon.");
				}
				else SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina.");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/hpc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFaction] == EMS)
	        {
				new x_nr[256];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr))
				{
        			SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /hpc [value] [social number]");
					SendClientMessage(playerid, COLOR_WHITE, "check |");
					return 1;
				}
				if(strcmp(x_nr,"check",true) == 0)
				{
				    if(IsPlayerConnected(playerid))
					{
					    tmp = strtok(cmdtext, idx);
			    		if(!strlen(tmp))
					    {
							SendClientMessage(playerid,COLOR_GRAD2,"{AFAFAF}SYNTAX{FFFFFF}: /hpc check [social number]");
			   		     	return 1;
			    		}
			    		new social = strval(tmp);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if(PlayerInfo[i][pSocial] == social && social != 0)
							{
								giveplayerid = i;
								if(IsPlayerConnected(giveplayerid))
								{
									if(giveplayerid != INVALID_PLAYER_ID)
									{
										if(GetVehicleModel(GetPlayerVehicleID(playerid) == 558) || PlayerToPoint(2, playerid,2522.5095,-4669.8359,52.1360))
										{
											new text2[20];
						                    if(PlayerInfo[giveplayerid][pLifeLic] == 1)
											{
												text2 = "Yes";
											} else {
												text2 = "No";
											}
									        GetPlayerName(playerid, sendername, sizeof(sendername));
									        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            	//SendClientMessage(playerid, COLOR_WHITE, string);
							            	SendClientMessage(playerid, COLOR_GREEN, "[MDC Search] result -");
							            	format(string, sizeof(string), "Nume: %s, Ani: %d, PH: %d", GetPlayerNameEx(giveplayerid),PlayerInfo[giveplayerid][pAge],PlayerInfo[giveplayerid][pPhoneNumber]);
							            	SendClientMessage(playerid, COLOR_WHITE, string);
											if(PlayerInfo[giveplayerid][pHouseKey] != 0)
											{
												new houselocation[MAX_ZONE_NAME];
												GetCoords2DZone(Houses[PlayerInfo[giveplayerid][pHouseKey]][EnterX],Houses[PlayerInfo[giveplayerid][pHouseKey]][EnterY], houselocation, MAX_ZONE_NAME);
								      			format(string, sizeof(string), "Adresa: %d %s", PlayerInfo[giveplayerid][pHouseKey], houselocation);
												SendClientMessage(playerid, COLOR_WHITE, string);
											} else {
												SendClientMessage(playerid, COLOR_WHITE, "Adresa:Nu are");
											}
						                    format(string, sizeof(string), "Asigurari pe viata: %s",text2);
						                    SendClientMessage(playerid, COLOR_WHITE, string);
											if(strcmp(PlayerInfo[giveplayerid][pWanted], "None",true))
											{
								            	format(string, sizeof(string), "%s este cautat pentru detinere de arme.",GetPlayerFirstName(giveplayerid));
								            	SendClientMessage(playerid, COLOR_LIGHTRED, string);
							                    format(string, sizeof(string), "%s", PlayerInfo[giveplayerid][pWanted]);
							                    SendClientMessage(playerid, COLOR_LIGHTRED, string);
											}
											return 1;
										}
										else
										{
										    SendClientMessage(playerid, COLOR_GREY, "You are not in a ambulance or near the computer.");
											return 1;
										}
									}
								}
							}
						}
						SendClientMessage(playerid, COLOR_LIGHTRED, "[MDC] Search failed.");
					}
				}
				else
				{
        			SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /hpc [value] [social number]");
					SendClientMessage(playerid, COLOR_WHITE, "check | ");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "ERROR: Factiune invalida!");
				return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/checkplate", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        {
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(5.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "No vehicles in range.");
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi comanda din masina.");
			            	return 1;
               			}
               			if(IsAPlane(result) || IsAdonatebike(result) || IsABoat(result))
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "Aceasta masina nu are numar de inmatriculare.");
               			    return 1;
               			}
					    ReduceTime[playerid] = 1;
					    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						// /me
						PlayerActionMessage(playerid,15.0,"se apleaca urmand sa se uite la numarul de inmatriculare");
					    // Now the plate
				        if(result <= IBPCARS)
				        {
				            SendClientMessage(playerid,COLOR_GREY, "Numar de inmatriculare: | LS: Fara numar");
					        return 1;
				        }
						format(string, sizeof(string), "Numar de inmatriculare: %s",VehicleInfo[result][vPlate]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Sunt prea multe masini in jurul tau.");
			            return 1;
			        }
			    }
			    return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/pticket", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
	        {
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "No vehicles in range.");
			        }

			        case 1:
			        {
				        tmp = strtok(cmdtext, idx);
				        if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}SYNTAX{FFFFFF}: /pticket [ammount]");
							return 1;
						}
						new moneys;
						moneys = strval(tmp);
						if(moneys < 9 || moneys > 650) { SendClientMessage(playerid, COLOR_GRAD2, "  Ticket price must be between 10 and 650"); return 1; }
					    // Now the plate
				        if(result <= IBPCARS)
				        {
				            SendClientMessage(playerid,COLOR_GRAD2, "You cannot ticket a city car.");
					        return 1;
				        }
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GRAD2, "You cannot place a ticket on a car whilst you are inside a vehicle.");
			            	return 1;
               			}
               			if(IsAPlane(result))
               			{
               			    SendClientMessage(playerid, COLOR_GRAD2, "This vehicle cannot receive a ticket.");
               			    return 1;
               			}
						// /me
						PlayerActionMessage(playerid,15.0,"leans over to the vehicles front window and places a ticket.");
						VehicleInfo[result][vTicket] = moneys;
				        // LOG IT HAHA
						new playername[MAX_PLAYER_NAME]; GetPlayerName(playerid,playername,sizeof(playername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s placed a ticket on %s' vehicle price [%d].",d,m,y,hh,mi,s,playername,VehicleInfo[result][vOwner],moneys);
						CommandLog(string);
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Found more then one car in range");
			            return 1;
			        }
			    }
			    return 1;
			}
		}
		return 1;
	}


	if(strcmp(cmd, "/getownership", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdministrator] == 4)
	        {
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(5.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "No vehicles in range.");
			        }

			        case 1:
			        {
					    ReduceTime[playerid] = 1;
					    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
					    // Now the plate
				        if(result <= IBPCARS)
				        {
				            SendClientMessage(playerid,COLOR_INFO, "Vehicle Plate: | LS: Fara numar |");
					        return 1;
				        }
						format(string, sizeof(string), "Vehicle Owner: | %s |",VehicleInfo[result][vOwner]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Found more then one car in range");
			            return 1;
			        }
			    }
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/disablecp",true) == 0)
 	{
		if(IsPlayerConnected(playerid))
		{
			DisablePlayerCheckpoint(playerid);
			ActiveCP[playerid] = 0;
		}
		return 1;
	}
 	if(strcmp(cmd, "/authorizeswat", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 1 && PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2 || PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] == 4)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			authorizeswat = 1;
			format(string, sizeof(string), "** HQ: %s a autorizat interventia SWAT. **", sendername);
			SendFactionMessage(3, COLOR_LSPDNEW, string);
			SendFactionMessage(1, COLOR_LSPDNEW, string);
		}
		else if(PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2 || PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] == 4)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			authorizeswat = 1;
			format(string, sizeof(string), "** HQ: %s a autorizat interventia SWAT. **", sendername);
			SendFactionMessage(3, COLOR_LSPDNEW, string);
			SendFactionMessage(1, COLOR_LSPDNEW, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/authorizecsd", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 1 && PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2 || PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] == 4)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			authorizeswat = 1;
			format(string, sizeof(string), "** HQ: %s a autorizat interventia CSD. **", sendername);
			SendFactionMessage(3, COLOR_LSPDNEW, string);
			SendFactionMessage(1, COLOR_LSPDNEW, string);
		}
		else if(PlayerInfo[playerid][pFaction] == 3 && PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2 || PlayerInfo[playerid][pRank] == 3 || PlayerInfo[playerid][pRank] == 4)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			authorizeswat = 1;
			format(string, sizeof(string), "** HQ: %s a autorizat interventia CSD. **", sendername);
			SendFactionMessage(3, COLOR_LSPDNEW, string);
			SendFactionMessage(1, COLOR_LSPDNEW, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/palarm", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "** HQ: %s a pornit alarma inchisorii. **", sendername);
			SendFactionMessage(3,COLOR_LSPD, string);
			SendFactionMessage(1,COLOR_LSPD, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/deauthorizeswat", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pRank] == 1)
		{
			authorizeswat = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "** HQ: %s a dezautorizat interventia SWAT. **",sendername);
			SendFactionMessage(3, COLOR_LSPD, string);
			SendFactionMessage(1, COLOR_LSPD, string);
		}
		return 1;
	}if(strcmp(cmd, "/deauthorizecsd", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pRank] == 1)
		{
			authorizeswat = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "** HQ: %s a dezautorizat interventia SWAT. **",sendername);
			SendFactionMessage(3, COLOR_LSPD, string);
			SendFactionMessage(1, COLOR_LSPD, string);
		}
		return 1;
	}
	//==========================================================================
	if(strcmp(cmd, "/news", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 4)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[256];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /news [newstext]");
					return 1;
				}
				new str[128];
				if(strlen(result) > MAXLEN)
				{
	     			new pos = MAXLEN;
				    //while(result[--pos] < ' ') {}
				    if(pos < MAXLEN-1) pos = MAXLEN;
				    format(str, sizeof(str), "[Stiri] %s: %.*s ...", GetPlayerNameEx(playerid), pos, result);
	                OOCNews(COLOR_NEWS,str);
				    format(str, sizeof(str), "[Stiri] %s: ... %s", GetPlayerNameEx(playerid), result[pos]);
				    OOCNews(COLOR_NEWS,str);
				}
				else
				{
					format(str, sizeof(str), "[Stiri] %s: %s", GetPlayerNameEx(playerid), result);
					OOCNews(COLOR_NEWS,str);
				}
			}
			else
			{
  				SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/live", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pFaction] == 4)
			{
			    if(TalkingLive[playerid] != 255)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Conversatie incheiata.");
			        SendClientMessage(TalkingLive[playerid], COLOR_WHITE, "Conversatie incheiata.");
			        TogglePlayerControllable(playerid, 1);
			        TogglePlayerControllable(TalkingLive[playerid], 1);
		            TalkingLive[TalkingLive[playerid]] = 255;
			        TalkingLive[playerid] = 255;
			        return 1;
			    }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /live [playerid/partofname]");
					return 1;
				}
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
			    		if(giveplayerid == playerid)
				    	{
        					SendClientMessage(playerid, COLOR_GREY, "Nu poti vorbi cu tine insuti la interviu.");
        					return 1;
				    	}
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* I-ai oferit lui %s o invitatie live.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s ti-a oferit o invitatie live.(Scrie /accept live) pentru a accepta", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							LiveOffer[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Acest player nu este langa tine.");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Acest player nu este activ.");
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/disguise", true) == 0)
	{
		if(IsPlayerConnected(playerid))
        {
     		if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
			{
                new x_nr[256];
                x_nr = strtok(cmdtext, idx);
                if(!strlen(x_nr))
                {
                	SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /disguise [id-ul din lista]");
                    return 1;
                }
				if (PlayerToPoint(10.0, playerid,PoliceDutyPosition[X],PoliceDutyPosition[Y],PoliceDutyPosition[Z]))
                {
                  	if(strcmp(x_nr,"list",true) == 0)
                   	{
              			SendClientMessage(playerid, COLOR_BLACK, "_________Skin List_________");
                  	    SendClientMessage(playerid, COLOR_WHITE, "1: Cadet           2: Triad");
                  	    SendClientMessage(playerid, COLOR_WHITE, "3: MonTrez         4: Azteca");
                  	    SendClientMessage(playerid, COLOR_WHITE, "5: Random Male     6: Swampy Hippy");
                   	    SendClientMessage(playerid, COLOR_WHITE, "7: Hotel Waitress  8: Random Female");
                        SendClientMessage(playerid, COLOR_WHITE, "9: Michelle Cannes 10: Katie Zhan");
                        SendClientMessage(playerid, COLOR_WHITE, "11: News Guy       12: Pricy Girl");
                        SendClientMessage(playerid, COLOR_WHITE, "13: Badass Mofo    14: Cons. Girl");
                        SendClientMessage(playerid, COLOR_WHITE, "15: Asian          16: Skater Kid");
                        SendClientMessage(playerid, COLOR_WHITE, "17: Indian Guy     18: Tattoo Guy");
                       	SendClientMessage(playerid, COLOR_WHITE, "19: Whore          20: Priest");
                    	return 1;
                    }
                    else if(strcmp(x_nr,"1",true) == 0)
                    {
                        SetPlayerSkin(playerid, 280);
                        SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Cadet");
                    	return 1;
					}
                    else if(strcmp(x_nr,"2",true) == 0)
					{
                        SetPlayerSkin(playerid, 118);
                        SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Triad");
						return 1;
					}
            		else if(strcmp(x_nr,"3",true) == 0)
					{
						SetPlayerSkin(playerid, 104);
                		SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Balla");
     	                return 1;
     			 	}
                    else if(strcmp(x_nr,"4",true) == 0)
                    {
                        SetPlayerSkin(playerid, 116);
                        SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Azteca");
                        return 1;
                    }
                    else if(strcmp(x_nr,"5",true) == 0)
                    {
                        SetPlayerSkin(playerid, 127);
                        SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Mafia Member");
                    	return 1;
					}
                    else if(strcmp(x_nr,"6",true) == 0)
                    {
                        SetPlayerSkin(playerid, 287);
                        SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum inrmy Personnel");
                    	return 1;
                    }
                    else if(strcmp(x_nr,"7",true) == 0)
                    {
                        SetPlayerSkin(playerid, 107);
                        SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Grove Street Family Member");
                        //SetPlayerColor(playerid,COLOR_GROVE);
                    	return 1;
                    }
                    else if(strcmp(x_nr,"8",true) == 0)
					{
                        SetPlayerSkin(playerid, 247);
                        SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Biker");
                        //SetPlayerColor(playerid,COLOR_BIKER);
                    	return 1;
                    }
                    else if(strcmp(x_nr,"9",true) == 0)
                    {
                        SetPlayerSkin(playerid, 192);
                        SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Michelle Cannes");
                        //SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"10",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 193);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Katie Zahn");
                    	//SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"11",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 188);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in News Guy");
                    	//SetPlayerColor(playerid,COLOR_WHITE);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"12",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 12);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Pricy Girl");
                    	//SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"13",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 206);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Badass Mofo");
                    	//SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"14",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 233);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Conservative Chick");
                    	//SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"15",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 121);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Asian");
                    	//SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"16",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 23);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Skater Kid");
                    	//SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"17",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 128);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Indian Guy");
                    	//SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"18",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 180);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Tattoo Guy");
                    	//SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"19",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 85);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Whore");
                    	//SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
         			else if(strcmp(x_nr,"20",true) == 0)
                    {
                	    SetPlayerSkin(playerid, 68);
                    	SendClientMessage(playerid, COLOR_WHITE, "Tu esti deghizat acum in Priest");
                    	//SetPlayerColor(playerid,COLOR_CIVILIAN);
                    	return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "You are not in the designated area");
            	    return 1;
                }
            }
    	    else
            {
                SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
                return 1;
        	}
		}
		return 1;
    }
 	if(strcmp(cmd, "/faction", true) == 0 || strcmp(cmd, "/f", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: (/f)action");
				return 1;
			}
			if(Muted[playerid])
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "You are currently muted.");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new str[128];
	        if(PlayerInfo[playerid][pFaction] != 0)
	        {
				if(DynamicFactions[PlayerInfo[playerid][pFaction]][fChatON] == 1)
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Canalul /f este dezactivat.");
				    return 1;
				}
				if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
				{
	                if(strlen(result) > MAXLEN)
					{
		     			new pos = MAXLEN;
					    //while(result[--pos] < ' ') {}
					    if(pos < MAXLEN-1) pos = MAXLEN;
						format(str, sizeof(str), "**(( %s %s: %.*s ... ))**", GetRankName(playerid),sendername, pos, result);
						SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, str);
						format(str, sizeof(str), "**(( %s %s: ... %s ))**", GetRankName(playerid),sendername, result[pos]);
						SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, str);
					}
					else
					{
					    format(str, sizeof(str), "**(( %s %s: %s ))**", GetRankName(playerid),sendername, result);
				    	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LSPDNEW, str);
					}
				    FactionChatLog(str);
				}
	   			else if(PlayerInfo[playerid][pFaction] == EMS)
				{
			 		if(strlen(result) > MAXLEN)
					{
		     			new pos = MAXLEN;
					    //while(result[--pos] < ' ') {}
					    if(pos < MAXLEN-1) pos = MAXLEN;
						format(str, sizeof(str), "**(( %s %s: %.*s ... ))**", GetRankName(playerid),sendername, pos, result);
						SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, str);
						format(str, sizeof(str), "**(( %s %s: ... %s ))**", GetRankName(playerid),sendername, result[pos]);
						SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, str);
					}
					else
					{
					    format(str, sizeof(str), "**(( %s %s: %s ))**", GetRankName(playerid),sendername, result);
				    	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, str);
					}
				    FactionChatLog(str);
				}
				else if(PlayerInfo[playerid][pFaction] != 10)
				{
	       			if(strlen(result) > MAXLEN)
					{
		     			new pos = MAXLEN;
					    //while(result[--pos] < ' ') {}
					    if(pos < MAXLEN-1) pos = MAXLEN;
						format(str, sizeof(str), "**(( %s %s: %.*s ... ))**", GetRankName(playerid),sendername, pos, result);
						SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, str);
						format(str, sizeof(str), "**(( %s %s: ... %s ))**", GetRankName(playerid),sendername, result[pos]);
						SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, str);
					}
					else
					{
					    format(str, sizeof(str), "**(( %s %s: %s ))**", GetRankName(playerid),sendername, result);
				    	SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, str);
					}
				    FactionChatLog(str);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu faci parte dintr-o factiune.");
				return 1;
			}
		}
		return 1;
	}
    if(strcmp(cmd, "/invite", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /invite [playerid/partofname]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2 || PlayerInfo[playerid][pRank] == 3 && PlayerInfo[playerid][pFaction] != 0)
			{
			    if(PlayerInfo[giveplayerid][pFaction] != 0 || PlayerInfo[giveplayerid][pFaction] != 255)
			    {
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        new form[128];
					        new faction = PlayerInfo[playerid][pFaction];
							if(gPlayerLogged[giveplayerid])
							{
						        if(DynamicFactions[faction][fJoinRank] == 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "");
						        }
						        else
						        {
									FactionRequest[giveplayerid] = faction;
									format(form,sizeof(form),"* Ai fost invitat in %s de catre %s !(Scrie /accept faction)",DynamicFactions[faction][fName],GetPlayerNameEx(playerid));
									SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,form);
									format(form,sizeof(form),"* L-ai invitat pe %s in %s",GetPlayerNameEx(giveplayerid),DynamicFactions[faction][fName]);
									SendClientMessage(playerid,COLOR_WHITE,form);
								}
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_LIGHTRED, "Acest jucator nu este activ");
							}
						}
					}
		 			else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Acest jucator nu este activ");
					}
				}
 				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Playerul este deja intr-o factiune.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti leader.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/uninvite", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /uninvite [playerid/partofname]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2 || PlayerInfo[playerid][pRank] == 3 && PlayerInfo[playerid][pFaction] != 0)
			{
			    if(PlayerInfo[giveplayerid][pFaction] == PlayerInfo[playerid][pFaction])
				{
					if(PlayerInfo[giveplayerid][pRank] == 1)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu poti demite directorul.");
						return 1;
					}
					if(IsPlayerConnected(giveplayerid))
					{
     					if(gPlayerLogged[giveplayerid])
     					{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        new form[128];
						        new faction = PlayerInfo[playerid][pFaction];
								format(form,sizeof(form),"* Ai fost concediat din  %s de catre %s",DynamicFactions[faction][fName],GetPlayerNameEx(playerid));
								SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,form);
								format(form,sizeof(form),"* L-ai concediat pe %s din %s",GetPlayerNameEx(giveplayerid),DynamicFactions[faction][fName]);
								SendClientMessage(playerid,COLOR_LIGHTBLUE,form);
								PlayerInfo[giveplayerid][pFaction] = 0;
								PlayerInfo[giveplayerid][pRank] = 0;
								if (PlayerInfo[giveplayerid][pFaction] == 3)
								{
									ResetPlayerInventory(giveplayerid);
									SafeResetPlayerWeapons(giveplayerid);
									SetPlayerArmour(playerid,0);
									RemovePlayerAttachedObject(giveplayerid,0);
									RemovePlayerAttachedObject(giveplayerid,6);
									RemovePlayerAttachedObject(giveplayerid,9);
									RemovePlayerAttachedObject(giveplayerid,2);
									RemovePlayerAttachedObject(giveplayerid,3);
									RemovePlayerAttachedObject(giveplayerid,1);
									RemovePlayerAttachedObject(giveplayerid,5);
									RemovePlayerAttachedObject(giveplayerid,24);
									RemovePlayerAttachedObject(giveplayerid,25);
									RemovePlayerAttachedObject(giveplayerid,29);
									RemovePlayerAttachedObject(giveplayerid,31);
									RemovePlayerAttachedObject(giveplayerid,34);
									RemovePlayerAttachedObject(giveplayerid,41);
								}
								format(form, sizeof(form), "** [Factiune] %s a fost concediat de catre %s din factiune!",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
								SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_LIGHTBLUE, form);
						        if(PlayerInfo[giveplayerid][pSpawnPoint] == 2)
								{
								    PlayerInfo[giveplayerid][pSpawnPoint] = 0;
								}
								return 1;
							}
						}
	      				else
						{
							SendClientMessage(playerid, COLOR_LIGHTRED, "Acest player nu este logat.");
						}
					}
		 			else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Acest player nu este activ.");
					}
				}
 				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Playerul nu este in factiunea ta.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti lider.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/setrank", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /setrank [playerid/partofname] [newrank]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(PlayerInfo[playerid][pRank] == 1 || PlayerInfo[playerid][pRank] == 2 && PlayerInfo[playerid][pFaction] != 0)
			{
				if(PlayerInfo[para1][pFaction] == PlayerInfo[playerid][pFaction])
				{
					new faction = PlayerInfo[playerid][pFaction];
					if(level)
					{
		   				if(level > 1 && level <= DynamicFactions[faction][fRankAmount])
					    {
		  					if(IsPlayerConnected(para1))
			    			{
								if(gPlayerLogged[para1])
								{
									if(para1 != INVALID_PLAYER_ID)
									{
										PlayerInfo[para1][pRank] = level;
										format(string, sizeof(string), "*  %s,ti-a setat rank-ul. Noul tau rank este: %d", GetPlayerNameEx(playerid),level);
										SendClientMessage(para1, COLOR_LIGHTBLUE, string);
										format(string, sizeof(string), "* I-ai dat lui  %s rank: %d", GetPlayerNameEx(para1),level);
										SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
									}
								}
								else
								{
									SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este logat.");
								}
							}
							else
							{
								SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Playerul nu este in factiunea ta..");
				}
			}
			else
   			{

				SendClientMessage(playerid, COLOR_GREY, "Nu esti leader.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fbalance", true) == 0)
	{
		if(PlayerInfo[playerid][pFaction] != 0)
	    {
	 		if(PlayerToPoint(10.0,playerid,BankPosition[X],BankPosition[Y],BankPosition[Z]) || PlayerToPoint(40.0,playerid,1430.2157,-981.3618,996.0681))
			{
				format(string, sizeof(string), "   Faction Balance: $%d", DynamicFactions[PlayerInfo[playerid][pFaction]][fBank]);
				SendClientMessage(playerid, COLOR_GREY, string);
	   			PlayerActionMessage(playerid,15.0,"receives a mini-bank statement from the bank");
			}
			else
			{
	  			SendClientMessage(playerid, COLOR_GREY, "You are not at the bank");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
		}
		return 1;
	}
	if(strcmp(cmd, "/fwithdraw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFaction] != 0)
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /fwithdraw [amount]");
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /fwithdraw [amount]");
					return 1;
				}
				if(PlayerToPoint(10.0,playerid,BankPosition[X],BankPosition[Y],BankPosition[Z]) || PlayerToPoint(50.0,playerid,1433.1531,-979.6608,996.0681))
				{
				    if(PlayerInfo[playerid][pRank] == 1)
				    {
						if(DynamicFactions[PlayerInfo[playerid][pFaction]][fBank] >= cashdeposit)
						{
						    if(cashdeposit < 0) { return 1; }
							PlayerInfo[playerid][pFairMoney] = 1;
			        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
							GivePlayerCash(playerid,cashdeposit);
							DynamicFactions[PlayerInfo[playerid][pFaction]][fBank]=DynamicFactions[PlayerInfo[playerid][pFaction]][fBank]-cashdeposit;
							format(string, sizeof(string), "   You have withdrawn $%d from the faction bank, New Balance: $%d", cashdeposit,DynamicFactions[PlayerInfo[playerid][pFaction]][fBank]);
							SendClientMessage(playerid, COLOR_GREY, string);
		                    PlayerActionMessage(playerid,15.0,"receives a package full of money from the bank");

 							format(string, sizeof(string), "** [Faction] %s withdrew $%d from the faction bank",GetPlayerNameEx(playerid),cashdeposit);
							SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_WHITE, string);
							new y, m, d;
							new hh,mi,s;
							getdate(y,m,d);
							gettime(hh,mi,s);
							format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s withdrew $%d from the faction bank [%d]",d,m,y,hh,mi,s,GetPlayerNameEx(playerid),cashdeposit,PlayerInfo[playerid][pFaction]);
							PayLog(string);
		                    SaveFactions(PlayerInfo[playerid][pFaction]);
							return 1;
						}
	 					else
						{
							SendClientMessage(playerid, COLOR_GREY, "You do not have that much in your faction bank");
						}
					}
 					else
					{
						SendClientMessage(playerid, COLOR_GREY, "You are not the leader of this faction");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "You are not at the bank");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fdeposit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFaction] != 0)
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /fdeposit [amount]");
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /fdeposit [amount]");
					return 1;
				}
				if(PlayerToPoint(10.0,playerid,BankPosition[X],BankPosition[Y],BankPosition[Z]) || PlayerToPoint(50.0,playerid,1433.1531,-979.6608,996.0681))
				{
					if(GetPlayerCash(playerid) >= cashdeposit)
					{
					    if(cashdeposit < 0) { return 1; }
						PlayerInfo[playerid][pFairMoney] = 1;
			        	SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
						GivePlayerCash(playerid,-cashdeposit);
						DynamicFactions[PlayerInfo[playerid][pFaction]][fBank]=cashdeposit+DynamicFactions[PlayerInfo[playerid][pFaction]][fBank];
						format(string, sizeof(string), "   You have deposited $%d into the faction bank, New Balance: $%d", cashdeposit,DynamicFactions[PlayerInfo[playerid][pFaction]][fBank]);
						SendClientMessage(playerid, COLOR_GREY, string);
	                    PlayerActionMessage(playerid,15.0,"takes out some money and hands it to the bank");
						format(string, sizeof(string), "** [Faction] %s deposited $%d into the faction bank",GetPlayerNameEx(playerid),cashdeposit);
						SendFactionMessage(PlayerInfo[playerid][pFaction], COLOR_WHITE, string);
	                    SaveFactions(PlayerInfo[playerid][pFaction]);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "You do not have that amount of money");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "You are not at the bank");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "You are not in a faction");
			}
		}
		return 1;
	}
	//==========================================================================
	if(strcmp(cmd, "/enter", true) == 0)
	{
		if(PlayerToPoint(10, playerid,1178.2443,-1308.6156,13.5601)) //garaj ems
		{
			if(GetPlayerState(playerid) == 2)
			{
				if (PlayerInfo[playerid][pFaction] == 2)
				{
					SetVehiclePos(idcar, -1616.2078,742.9830,-5.2422);
					SetVehicleZAngle(idcar, 270);
				}
			}
			else
			{
				if (PlayerInfo[playerid][pFaction] == 2)
				{
					SetPlayerPos(playerid, -1616.2078,742.9830,-5.2422);
				}
			}
		}
		if(PlayerToPoint(9, playerid,2396.0342,-1795.9171,13.5469))
		{
			SetPlayerPos(playerid, 1266.6973,1745.0265,4006.1467);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerInterior(playerid,1);
		}
		if(PlayerToPoint(9, playerid,2498.7041,-1542.0563,26.8829))
		{
			SetPlayerPos(playerid, 1230.4515,-1695.2675,-39.7341);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerInterior(playerid,1);
		}
			if(PlayerToPoint(9, playerid,1525.2831,-1550.7203,1970.7859))
		{
			SetPlayerPos(playerid, 1145.0222,-1329.9402,13.5829);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerInterior(playerid,1);
		}
		if(PlayerToPoint(9, playerid,1766.6147,-1704.7567,13.4776))
		{
			SetPlayerPos(playerid, 1553.0592,-1708.8773,527.1360);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerInterior(playerid,1);
		}
		if(PlayerToPoint(9, playerid,-42.5893,1412.7648,1084.4297))
		{
			SetPlayerPos(playerid, 756.4543,-17.1561,1000.5859);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerInterior(playerid,1);
		}
		if(PlayerToPoint(9, playerid,1359.8156,-1854.4071,13.5703))
		{
			SetPlayerPos(playerid, 160.5375,2486.2019,-88.9141);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerInterior(playerid,1);
		}
		if(PlayerToPoint(9, playerid,2232.6523,-1159.8185,25.8906))
		{
			SetPlayerPos(playerid, 312.1318,133.9401,1003.1030);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerInterior(playerid,1);
		}
		if(PlayerToPoint(9, playerid,2044.8243,-1761.7021,13.5469))
		{
			SetPlayerPos(playerid, 643.7854,1705.9125,-81.8715);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerInterior(playerid,1);
		}
		if(PlayerToPoint(9, playerid,2282.2319,2424.2954,3.4766))
		{
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerPos(playerid, 116.0677,1077.0594,523.9155);
			SetPlayerInterior(playerid,1);
			SetPlayerVirtualWorld(playerid,2);
		}
		if(PlayerToPoint(3.0,playerid,598.0388,-1489.6555,15.1393))// NEWS masini
		{
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			SetPlayerPos(playerid, 690.9258,-585.7435,-52.2113);
			SetPlayerInterior(playerid,1);
			SetPlayerVirtualWorld(playerid,5);
		}
		if(PlayerToPoint(3.0,playerid,118.4866,1111.5494,527.4371))
		{
			if (PlayerInfo[playerid][pFaction] == 3)
			{
				SetPlayerPos(playerid, 1557.2380,-1675.6592,28.3955);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
		}
		if(PlayerToPoint(9, playerid,1591.7697,-1622.6110,13.1101)) // 1 parking garage
		{
			if(GetPlayerState(playerid) == 2)
			{
				if (PlayerInfo[playerid][pFaction] == 3)
				{
					SetVehiclePos(idcar, 2315.9336,2446.4229,2.9787);
					SetVehicleZAngle(idcar, 90);
				}
			}
			else
			{
				if (PlayerInfo[playerid][pFaction] == 3)
				{
					SetPlayerPos(playerid, 2315.9336,2446.4229,2.9787);
				}
			}
		}
		if(PlayerToPoint(9, playerid,1173.2039,-1361.3837,13.9647))
		{
			if(IsPlayerConnected(playerid))
			{
				if (PlayerInfo[playerid][pFaction] == 2)
				{
					SetPlayerPos(playerid, 1174.1339,-1370.7260,23.9784);
				}
				else
				{
					SendClientMessage(playerid,COLOR_WHITE,"Nu esti membru ASGH");
				}
			}
		}
		if(PlayerToPoint(2, playerid,1161.5720,-1343.4406,26.6250))
		{
			if(IsPlayerConnected(playerid))
			{
				if (PlayerInfo[playerid][pFaction] == 2)
				{
					SetPlayerPos(playerid, 1161.7328,-1337.3778,31.5018);
				}
				else
				{
					SendClientMessage(playerid,COLOR_WHITE,"Nu esti membru ASGH");
				}
			}
		}
		for(new i = 0; i < sizeof(Garages); i++)
		{
		    if(PlayerToPoint(2.6,playerid,Garages[i][EnterX], Garages[i][EnterY], Garages[i][EnterZ])) {
		        if(GetPlayerVirtualWorld(playerid) == Garages[i][EnterWorld]) {
		            if(Garages[i][Locked] == 0 || AdminDuty[playerid] == 1) {
		                if(Garages[i][Dynamic] == 1) {
		                    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		                    {
			                    TogglePlayerControllable(playerid, 0);
			                    SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			                    SetPlayerInterior(playerid,Garages[i][ExitInterior]);
			                    SetPlayerPos(playerid,Garages[i][ExitX],Garages[i][ExitY],Garages[i][ExitZ]);
			                    SetPlayerVirtualWorld(playerid,i);
			                    SetPlayerFacingAngle(playerid,Garages[i][ExitAngle]);
		                    }
		                    else
		                    {
			                    TogglePlayerControllable(playerid, 0);
			                    SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			                    SetPlayerInterior(playerid,Garages[i][ExitInterior]);
								SetVehiclePos(idcar,Garages[i][ExitX],Garages[i][ExitY],Garages[i][ExitZ]);
								SetVehicleVirtualWorld(idcar, i);
								SetPlayerVirtualWorld(playerid, i);
								SetVehicleZAngle(idcar, 270);
		                    }
		                }
		                else {
		                    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		                    {
			                    SetPlayerInterior(playerid,Garages[i][ExitInterior]);
			                    SetPlayerPos(playerid,Garages[i][ExitX],Garages[i][ExitY],Garages[i][ExitZ]);
			                    SetPlayerVirtualWorld(playerid,i);
			                    SetPlayerFacingAngle(playerid,Garages[i][ExitAngle]);
		                    }
		                    else
		                    {
			                    SetPlayerInterior(playerid,Garages[i][ExitInterior]);
								SetVehiclePos(idcar,Garages[i][ExitX],Garages[i][ExitY],Garages[i][ExitZ]);
								SetVehicleVirtualWorld(idcar, i);
								SetPlayerVirtualWorld(playerid, i);
								SetVehicleZAngle(idcar, 270);
		                    }
		                }
		            }
		            else {
		                GameTextForPlayer(playerid, "~r~Incuiat", 5000, 1);
		            }
		        }
		    }
		}
	    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
			for(new i = 0; i < sizeof(Houses); i++)
			{
				if(PlayerToPoint(1.0,playerid,Houses[i][EnterX], Houses[i][EnterY], Houses[i][EnterZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == Houses[i][EnterWorld])
				   	{
						if(Houses[i][Locked] == 0 || AdminDuty[playerid] == 1)
						{
						    if(Houses[i][Dynamic] == 1)
						    {
							    TogglePlayerControllable(playerid, 0);
								SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
								SetPlayerInterior(playerid,Houses[i][ExitInterior]);
								SetPlayerPos(playerid,Houses[i][ExitX],Houses[i][ExitY],Houses[i][ExitZ]);
								SetPlayerVirtualWorld(playerid,i);
								SetPlayerFacingAngle(playerid,Houses[i][ExitAngle]);
						    }
						    else
						    {
								SetPlayerInterior(playerid,Houses[i][ExitInterior]);
								SetPlayerPos(playerid,Houses[i][ExitX],Houses[i][ExitY],Houses[i][ExitZ]);
								SetPlayerVirtualWorld(playerid,i);
								SetPlayerFacingAngle(playerid,Houses[i][ExitAngle]);
							}
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Incuiat", 5000, 1);
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Building); i++)
			{
			    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		  		{
					if(PlayerToPoint(2.0,playerid,Building[i][EnterX], Building[i][EnterY], Building[i][EnterZ]))
					{
					    if(GetPlayerVirtualWorld(playerid) == Building[i][EnterWorld])
					    {
							if(Building[i][Locked] == 0)
							{
								if(Building[i][Custom] == 1)
								{
								    TogglePlayerControllable(playerid, 0);
									SetPlayerInterior(playerid,Building[i][ExitInterior]);
									SetPlayerVirtualWorld(playerid,i);
									SetPlayerPos(playerid,Building[i][ExitX],Building[i][ExitY],Building[i][ExitZ]);
									SetPlayerFacingAngle(playerid,Building[i][ExitAngle]);
									SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
								} else {
									SetPlayerInterior(playerid,Building[i][ExitInterior]);
									SetPlayerVirtualWorld(playerid,i);
									SetPlayerPos(playerid,Building[i][ExitX],Building[i][ExitY],Building[i][ExitZ]);
									SetPlayerFacingAngle(playerid,Building[i][ExitAngle]);
								}
							}
							else
							{
								GameTextForPlayer(playerid, "~r~Incuiat", 5000, 1);
							}
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Apartment); i++)
			{
			    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		  		{
					if(PlayerToPoint(2.0,playerid,Apartment[i][EnterX], Apartment[i][EnterY], Apartment[i][EnterZ]))
					{
					    if(GetPlayerVirtualWorld(playerid) == Apartment[i][EnterWorld])
					    {
							SetPlayerInterior(playerid,Apartment[i][ExitInterior]);
							SetPlayerVirtualWorld(playerid,0);
							SetPlayerPos(playerid,Apartment[i][ExitX],Apartment[i][ExitY],Apartment[i][ExitZ]);
							SetPlayerFacingAngle(playerid,Apartment[i][ExitAngle]);
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Businesses); i++)
			{
			    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		  		{
					if(PlayerToPoint(3.0,playerid,Businesses[i][EnterX], Businesses[i][EnterY], Businesses[i][EnterZ]))
					{
			 			if(GetPlayerVirtualWorld(playerid) == Businesses[i][EnterWorld])
			    		{
							if(PlayerInfo[playerid][pBizKey] == i || PlayerInfo[playerid][pWorkOn] == i || GetPlayerCash(playerid) >= Businesses[i][EntranceCost])
							{
								if(PlayerInfo[playerid][pBizKey] != i)
								{
									if(Businesses[i][Products] == 0) { GameTextForPlayer(playerid, "~r~No Products", 5000, 1); return 1; }
									if(Businesses[i][Locked] == 0)
									{
									    if(Businesses[i][BizType] != 12) {	GivePlayerCash(playerid,-Businesses[i][EntranceCost]); Businesses[i][Till] += Businesses[i][EntranceCost]; }
										if(Businesses[i][BizType] == 1) { SendClientMessage(playerid, COLOR_WHITE, "Foloseste /eatfood pentru a manca. "); }
					     				if(Businesses[i][BizType] == 2) { SendClientMessage(playerid, COLOR_WHITE, "Foloseste /casino pentru a vedea comenzile."); }
					     				if(Businesses[i][BizType] == 3) { SendClientMessage(playerid, COLOR_WHITE, "Pentru a cumpara ceva scrie /buy."); }
					     				if(Businesses[i][BizType] == 4) { SendClientMessage(playerid, COLOR_WHITE, "Scrie /buygun pentru a cumpara o arma."); }
					     				if(Businesses[i][BizType] == 18) { SendClientMessage(playerid, COLOR_WHITE, "Pentru a cumpara un radio pentru masina scrie /buycradio."); }
						    		    if(Businesses[i][BizType] == 12) { SendClientMessage(playerid, COLOR_WHITE, "Pentru a optine licentele tasteaza /takelicenses");}
										if(Businesses[i][Custom] == 1)
										{
										    TogglePlayerControllable(playerid, 0);
											SetPlayerInterior(playerid,Businesses[i][ExitInterior]);
											SetPlayerPos(playerid,Businesses[i][ExitX],Businesses[i][ExitY],Businesses[i][ExitZ]);
											SetPlayerVirtualWorld(playerid,i);
											SetPlayerFacingAngle(playerid,Businesses[i][ExitAngle]);
											SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
										} else {
											SetPlayerInterior(playerid,Businesses[i][ExitInterior]);
											SetPlayerPos(playerid,Businesses[i][ExitX],Businesses[i][ExitY],Businesses[i][ExitZ]);
											SetPlayerVirtualWorld(playerid,i);
											SetPlayerFacingAngle(playerid,Businesses[i][ExitAngle]);
										}
	                                    if(Businesses[i][BizType] == 11 || Businesses[i][BizType] == 10 || Businesses[i][BizType] == 9 || Businesses[i][BizType] == 13 || Businesses[i][BizType] == 14 || Businesses[i][BizType] == 20)
										{
											SetPlayerVirtualWorld(playerid,0);
											SetPlayerInterior(playerid,0);
										}
									}
									else
									{
										GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
									}
								}
								else
								{
									if(Businesses[i][BizType] != 12) {	GivePlayerCash(playerid,-Businesses[i][EntranceCost]); Businesses[i][Till] += Businesses[i][EntranceCost]; }
									if(Businesses[i][BizType] == 1) { SendClientMessage(playerid, COLOR_WHITE, "Foloseste /eatfood pentru a manca. "); }
					     			if(Businesses[i][BizType] == 2) { SendClientMessage(playerid, COLOR_WHITE, "Foloseste /casino pentru a vedea comenzile."); }
					     			if(Businesses[i][BizType] == 3) { SendClientMessage(playerid, COLOR_WHITE, "Pentru a cumpara ceva scrie /buy."); }
					     			if(Businesses[i][BizType] == 4) { SendClientMessage(playerid, COLOR_WHITE, "Scrie /buygun pentru a cumpara o arma."); }
					     			if(Businesses[i][BizType] == 18) { SendClientMessage(playerid, COLOR_WHITE, "Pentru a cumpara ceva scrie /buy."); }
						    		if(Businesses[i][BizType] == 12) { SendClientMessage(playerid, COLOR_WHITE, "Pentru a optine licentele tasteaza /takelicenses"); }
									if(Businesses[i][Custom] == 1)
									{
										TogglePlayerControllable(playerid, 0);
										SetPlayerInterior(playerid,Businesses[i][ExitInterior]);
										SetPlayerPos(playerid,Businesses[i][ExitX],Businesses[i][ExitY],Businesses[i][ExitZ]);
										SetPlayerVirtualWorld(playerid,i);
										SetPlayerFacingAngle(playerid,Businesses[i][ExitAngle]);
										SetTimerEx("Unfreezeren", 3100, false, "i", playerid);
									} else {
										SetPlayerInterior(playerid,Businesses[i][ExitInterior]);
										SetPlayerPos(playerid,Businesses[i][ExitX],Businesses[i][ExitY],Businesses[i][ExitZ]);
										SetPlayerVirtualWorld(playerid,i);
										SetPlayerFacingAngle(playerid,Businesses[i][ExitAngle]);
									}
	                                if(Businesses[i][BizType] == 11 || Businesses[i][BizType] == 10 || Businesses[i][BizType] == 9 || Businesses[i][BizType] == 13 || Businesses[i][BizType] == 14 || Businesses[i][BizType] == 20)
									{
										SetPlayerVirtualWorld(playerid,0);
										SetPlayerInterior(playerid,0);
									}
								}
							}
							else
							{
								SendClientMessage(playerid, COLOR_WHITE, "Nu ai suficienti bani!");
							}
						}
					}
				}
			}
			if(PlayerToPoint(4.0,playerid,1764.9581,-1568.8328,1742.4940)) // Prison Talking Room
			{
			    if(PlayerInfo[playerid][pJailed] == 0)
			    {
					SetPlayerPos(playerid, 1764.3346,-1567.8099,1742.4967);
				}
				else
				{
	                SendClientMessage(playerid, COLOR_GRAD2, " You are not allowed in here.");
				}
			}
			if(PlayerToPoint(3.0,playerid,699.4091,-585.4630,-52.2113))// NEWS HELI
			{
				SetPlayerPos(playerid, 599.1204,-1476.5684,80.1563);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			if(PlayerToPoint(2.0,playerid,1144.7147,-1330.7227,13.5881)) // Hospital entrance from the back.
			{
				SetPlayerPos(playerid,2504.5898,-4671.9204,52.3476);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,6);
   			}
			if (PlayerToPoint(15, playerid,1533.9005,-1448.4658,13.3828))
			{ // Parking spot downtown los santos Business ID 6
				if(GetPlayerState(playerid) == 2)
				{
					if(PlayerInfo[playerid][pBizKey] == 6)
					{
						GameTextForPlayer(playerid, "~w~No charge for the boss", 5000, 3);
					    MoveObject(Paypark, 1534.4447021484, -1451.4556884766, 20.008407592773, 0.8);
						SetTimer("PayparkClose", 8000, 0);
						return 1;
					}
					else if(GetPlayerCash(playerid) >= Businesses[6][EntranceCost])
				  	{
						if(Businesses[6][Products] == 0)
						{
							GameTextForPlayer(playerid, "~r~Nu mai sunt produse.", 5000, 1);
							return 1;
						}
					    MoveObject(Paypark, 1534.4447021484, -1451.4556884766, 20.008407592773, 0.8);
					    SetTimer("PayparkClose", 8000, 0);
						Businesses[6][Till] += Businesses[6][EntranceCost];
						Businesses[6][Products]--;
						GivePlayerCash(playerid,-Businesses[6][EntranceCost]);
				    }
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/exit", true) == 0)
	{
 		if(IsPlayerConnected(playerid))
		{
		    if(PlayerToPoint(9, playerid,1266.6973,1745.0265,4006.1467))
			{
				SetPlayerPos(playerid, 2396.0342,-1795.9171,13.5469);
			}
			if(PlayerToPoint(9, playerid,1174.1339,-1370.7260,23.9784))
			{
				SetPlayerPos(playerid, 1173.2039,-1361.3837,13.9647);
			}
			if(PlayerToPoint(9, playerid,1230.4515,-1695.2675,-39.7341))
			{
				SetPlayerPos(playerid, 2498.7041,-1542.0563,26.8829);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
				SetPlayerInterior(playerid,0);
			}
			if(PlayerToPoint(9, playerid,1553.0592,-1708.8773,527.1360))
			{
				SetPlayerPos(playerid, 1766.6147,-1704.7567,13.4776);
				SetPlayerInterior(playerid,0);
			}
			if(PlayerToPoint(9, playerid,756.4543,-17.1561,1000.5859))
			{
				SetPlayerPos(playerid, -42.5893,1412.7648,1084.4297);
			}
			if(PlayerToPoint(9, playerid,160.5375,2486.2019,-88.9141))
			{
				SetPlayerPos(playerid, 1359.8156,-1854.4071,13.5703);
				SetPlayerInterior(playerid,0);
			}
			if(PlayerToPoint(9, playerid,312.1318,133.9401,1003.1030))
			{
				SetPlayerPos(playerid, 2232.6523,-1159.8185,25.8906);
				SetPlayerInterior(playerid,0);
			}
			if(PlayerToPoint(9, playerid,643.7854,1705.9125,-81.8715))
			{
				SetPlayerPos(playerid, 2044.8243,-1761.7021,13.5469);
				SetPlayerInterior(playerid,0);
			}
			if(PlayerToPoint(9, playerid,116.0677,1077.0594,523.9155))
			{
				SetPlayerPos(playerid, 2282.2319,2424.2954,3.4766);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			if(PlayerToPoint(9, playerid,1654.2793,3112.8323,37.0658))
			{
				SetPlayerPos(playerid, 1539.8904,3573.7427,399.9110);
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
			}
			if(PlayerToPoint(2, playerid,1161.7328,-1337.3778,31.5018))
			{
				SetPlayerPos(playerid, 1161.5720,-1343.4406,26.6250);
			}
			if(PlayerToPoint(3.0,playerid,1557.2380,-1675.6592,28.3955))
			{
				TogglePlayerControllable(playerid, 0);
				SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
				SetPlayerPos(playerid, 118.4866,1111.5494,527.4371);
				SetPlayerInterior(playerid,1);
				SetPlayerVirtualWorld(playerid,2);
			}
			if(PlayerToPoint(3.0,playerid,599.1204,-1476.5684,80.1563))// NEWS HELI
			{
				TogglePlayerControllable(playerid, 0);
			    SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
				SetPlayerPos(playerid, 699.4091,-585.4630,-52.2113);
				SetPlayerInterior(playerid,1);
				SetPlayerVirtualWorld(playerid,5);
			}
			if(PlayerToPoint(3.0,playerid,690.9258,-585.7435,-52.2113))// NEWS Masini
			{
				SetPlayerPos(playerid, 598.0388,-1489.6555,15.1393);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
		    new carid = GetPlayerVehicleID(playerid);
			if(GetPlayerVehicleID(playerid) == 67 || GetPlayerVehicleID(playerid) == 68) { RemoveDriverFromVehicle(playerid); }
			if(IsAHarvest(carid))
			{
				if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22) { FarmerPickup[playerid][0]--; }
			    TogglePlayerControllable(playerid, 1);
			    RemovePlayerFromVehicle(playerid);
			    FarmerVar[playerid] = 0;
			    DisablePlayerCheckpoint(playerid);
			}
			for(new i = 0; i < sizeof(Garages); i++)
			{
			    if(PlayerToPoint(20.0,playerid,Garages[i][ExitX], Garages[i][ExitY], Garages[i][ExitZ])) {
			        if(GetPlayerVirtualWorld(playerid) == i) {
			            if(Garages[i][Locked] == 0 || AdminDuty[playerid] == 1) {
			                if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			                {
				                SetPlayerInterior(playerid,0);
				                SetPlayerPos(playerid,Garages[i][EnterX],Garages[i][EnterY],Garages[i][EnterZ]);
				                SetPlayerVirtualWorld(playerid,0);
				                SetPlayerFacingAngle(playerid,Garages[i][EnterAngle]);
			                }
			                else
			                {
				                SetPlayerInterior(playerid,0);
								SetVehiclePos(idcar,Garages[i][EnterX],Garages[i][EnterY],Garages[i][EnterZ]);
								SetVehicleVirtualWorld(idcar, 0);
								SetPlayerVirtualWorld(playerid, 0);
								LinkVehicleToInterior(idcar, 0);
								SetVehicleZAngle(idcar, Garages[i][EnterAngle]);
			                }
			            }
			            else {
			                GameTextForPlayer(playerid, "~r~Incuiat", 5000, 1);
			            }
			        }
			    }
			}
	 		for(new i = 0; i < sizeof(Houses); i++)
			{
				if(PlayerToPoint(3.0,playerid,Houses[i][ExitX], Houses[i][ExitY], Houses[i][ExitZ]))
				{
	   				if(GetPlayerVirtualWorld(playerid) == i)
				    {
				        if(Houses[i][Locked] == 0 || AdminDuty[playerid] == 1)
						{
							TogglePlayerControllable(playerid, 0);
							SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
							SetPlayerInterior(playerid,Houses[i][EnterInterior]);
							SetPlayerPos(playerid,Houses[i][EnterX],Houses[i][EnterY],Houses[i][EnterZ]);
							SetPlayerVirtualWorld(playerid,Houses[i][EnterWorld]);
							SetPlayerFacingAngle(playerid,Houses[i][EnterAngle]);
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Incuiat", 2500, 1);
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Building); i++)
			{
				if(PlayerToPoint(3,playerid,Building[i][ExitX], Building[i][ExitY], Building[i][ExitZ]))
				{
				    if(GetPlayerVirtualWorld(playerid) == i)
				    {
						if(Building[i][Locked] == 0 || AdminDuty[playerid] == 1)
						{
							SetPlayerInterior(playerid,Building[i][EnterInterior]);
							SetPlayerVirtualWorld(playerid,Building[i][EnterWorld]);
							SetPlayerPos(playerid,Building[i][EnterX],Building[i][EnterY],Building[i][EnterZ]);
							SetPlayerFacingAngle(playerid,Building[i][EnterAngle]);
							SetPlayerInterior(playerid,Building[i][EnterInterior]);
							SetPlayerVirtualWorld(playerid,Building[i][EnterWorld]);
							SetPlayerPos(playerid,Building[i][EnterX],Building[i][EnterY],Building[i][EnterZ]);
							SetPlayerFacingAngle(playerid,Building[i][EnterAngle]);
							if (i == 0)
							{
								FreezePlayer(playerid, 3);
							}
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Incuiat", 2500, 1);
						}
					}
				}
			}
	  		for(new i = 0; i < sizeof(Businesses); i++)
			{
				if(PlayerToPoint(3,playerid,Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]))
				{
				    if(GetPlayerVirtualWorld(playerid) == i)
				    {
						if(Businesses[i][Locked] == 0)
						{
							SetPlayerInterior(playerid,Businesses[i][EnterInterior]);
							SetPlayerVirtualWorld(playerid,Businesses[i][EnterWorld]);
							SetPlayerPos(playerid,Businesses[i][EnterX],Businesses[i][EnterY],Businesses[i][EnterZ]);
							SetPlayerFacingAngle(playerid,Businesses[i][EnterAngle]);
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Incuiat", 2500, 1);
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Apartment); i++)
			{
				if(PlayerToPoint(3,playerid,Apartment[i][ExitX], Apartment[i][ExitY], Apartment[i][ExitZ]))
				{
					SetPlayerInterior(playerid,Apartment[i][EnterInterior]);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,Apartment[i][EnterX],Apartment[i][EnterY],Apartment[i][EnterZ]);
					SetPlayerFacingAngle(playerid,Apartment[i][EnterAngle]);
				}
			}
			if(PlayerToPoint(4.0,playerid,1764.3346,-1567.8099,1742.4967)) // Prison Talking Room
			{
			    if(PlayerInfo[playerid][pJailed] == 0)
			    {
					SetPlayerPos(playerid, 1764.9581,-1568.8328,1742.4940);
				}
				else
				{
	                SendClientMessage(playerid, COLOR_GRAD2, " You are not allowed in here.");
				}
			}
			if(PlayerToPoint(2.0,playerid,2504.5898,-4671.9204,52.3476)) // Hospital exit
			{
				SetPlayerPos(playerid, 1144.7147,-1330.7227,13.5881);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
			}
			if(PlayerToPoint(2.0, playerid,677.7676,1840.9525,5.8112))
			{
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				if(strcmp(playername, Houses[3][Owner], true) == 0)
				{
					SetPlayerPos(playerid, 678.0634,1843.0786,5.5672);
					SetPlayerVirtualWorld(playerid, 0);
				}
			}
			if(PlayerToPoint(2.0, playerid,670.3526,1834.5692,5.8039))
			{
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				if(strcmp(playername, Houses[3][Owner], true) == 0)
				{
					SetPlayerPos(playerid, 670.1127,1832.0410,5.5190);
					SetPlayerVirtualWorld(playerid, 0);
				}
			}
		    if (PlayerToPoint(9, playerid,2315.9336,2446.4229,2.9787)) // 1 garage
		    {
				if(GetPlayerState(playerid) == 2)
				{
					if (PlayerInfo[playerid][pFaction] == 3)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1591.7697,-1622.6110,13.1101);
						SetVehicleZAngle(tmpcar, 270);
					}
				}
				else
				{
					if (PlayerInfo[playerid][pFaction] == 3)
					{
						SetPlayerPos(playerid, 1591.7697,-1622.6110,13.1101);
					}
				}
			}
			if(PlayerToPoint(9, playerid,-136.3490,1070.4480,24.2541))
			{
				if(IsPlayerConnected(playerid))
				{
					SetPlayerPos(playerid, 366.3985,159.3221,1008.3828);
					SetPlayerInterior(playerid,3);
				}
			}
			if (PlayerToPoint(9, playerid,-1616.2078,742.9830,-5.2422)) // 1 ems
		    {
				if(GetPlayerState(playerid) == 2)
				{
					if (PlayerInfo[playerid][pFaction] == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1178.2443,-1308.6156,13.5601);
						SetVehicleZAngle(tmpcar, 270);
					}
				}
				else
				{
					if (PlayerInfo[playerid][pFaction] == 2)
					{
						SetPlayerPos(playerid, 1178.2443,-1308.6156,13.5601);
					}
				}
			}
		    if (PlayerToPoint(3, playerid,945.6119,-1381.0721,17.8569)) // Diskotek Havana exit
		    {
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					if(Businesses[32][Locked] == 0)
					{
					    SetPlayerPos(playerid,Businesses[32][EnterX],Businesses[32][EnterY],Businesses[32][EnterZ]);
					    SetPlayerFacingAngle(playerid,Businesses[32][EnterAngle]);
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Locked", 2500, 1);
					}
				}
			}
		    if(PlayerToPoint(5.0,playerid,2266.6968,1647.6283,1084.2344))
		    {
		    	{
		        SetPlayerPos(playerid, 1498.2932,-1581.7998,13.5498);
				SetPlayerInterior(playerid,0);
			    SetPlayerVirtualWorld(playerid,0);
				}
		    }
			if (PlayerToPoint(7, playerid,1534.6068,-1458.9106,11.6532))
			{ // Parking spot downtown los santos
				if(IsPlayerConnected(playerid))
  				{
		             MoveObject(Paypark, 1534.4447021484, -1451.4556884766, 20.008407592773, 0.8);
		             SetTimer("PayparkClose", 4000, 0);
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sellupgrade", true) == 0 || strcmp(cmd, "/su", true) == 0)
	{
 		if(IsPlayerConnected(playerid))
   		{
     		new x_nr[128];
	        x_nr = strtok(cmdtext, idx);
	        if(!strlen(x_nr))
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /sellupgrade [item]");
	            SendClientMessage(playerid, COLOR_WHITE, "Fridge | Safetybox | Closet");
	            return 1;
	        }
	        if(strcmp(x_nr,"fridge",true) == 0)
	        {
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
				{
				    new house = PlayerInfo[playerid][pHouseKey];
					if(PlayerToPoint(1.0,playerid,Houses[house][EnterX],Houses[house][EnterY],Houses[house][EnterZ]))
					{
					    if(Houses[house][hFridge] == 1)
					    {
							Houses[house][hFridge] = 0;
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "You have sold your fridge for: $300");
      						GivePlayerCash(playerid,300);
							SendClientMessage(playerid, COLOR_WHITE, string);
       SavePlayerAccount(playerid);
							return 1;
						}
						else
						{
					    	SendClientMessage(playerid, COLOR_GREY, "This house does not have a fridge.");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "You must be at your house entrance to sell it");
					}
				}
				else
				{
	    			SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
	                return 1;
				}
	        }
	        else if(strcmp(x_nr,"safetybox",true) == 0)
	        {
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
				{
				    new house = PlayerInfo[playerid][pHouseKey];
					if(PlayerToPoint(1.0,playerid,Houses[house][EnterX],Houses[house][EnterY],Houses[house][EnterZ]))
					{
					    if(Houses[house][hBox] == 1)
					    {
							PlayerInfo[playerid][pFairMoney] = 1;
			        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
							Houses[house][hBox] = 0;
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
      						GivePlayerCash(playerid,375);
							format(string, sizeof(string), "You have sold your box for: $375");
							SendClientMessage(playerid, COLOR_WHITE, string);
       SavePlayerAccount(playerid);
							return 1;
						}
						else
						{
					    	SendClientMessage(playerid, COLOR_GREY, "This house does not have a fridge.");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "You must be at your house entrance to sell it");
					}
				}
			}
	        else if(strcmp(x_nr,"closet",true) == 0)
	        {
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
				{
				    new house = PlayerInfo[playerid][pHouseKey];
					if(PlayerToPoint(1.0,playerid,Houses[house][EnterX],Houses[house][EnterY],Houses[house][EnterZ]))
					{
					    if(Houses[house][hCloset] == 1)
					    {
							Houses[house][hCloset] = 0;
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
      						GivePlayerCash(playerid,100);
							format(string, sizeof(string), "You have sold your closet for: $100");
							SendClientMessage(playerid, COLOR_WHITE, string);
       SavePlayerAccount(playerid);
							return 1;
						}
						else
						{
					    	SendClientMessage(playerid, COLOR_GREY, "This house does not have a fridge.");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "You must be at your house entrance to sell it");
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /sellupgrade [item]");
	            SendClientMessage(playerid, COLOR_WHITE, "Fridge | Safetybox");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/sellhouse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
			{
			    new house = PlayerInfo[playerid][pHouseKey];
				if(PlayerToPoint(1.0,playerid,Houses[house][EnterX],Houses[house][EnterY],Houses[house][EnterZ]))
				{
					Houses[house][Locked] = 1;
					Houses[house][Owned] = 0;
					Houses[house][hBox] = 0;
					Houses[house][hFridge] = 0;
					Houses[house][Rentable] = 0;
					strmid(Houses[house][Owner], "None", 0, strlen("None"), 255);
					new housesellprice = Houses[house][HousePrice] / 4 * 3;
					PlayerInfo[playerid][pFairMoney] = 1;
	        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
      				GivePlayerCash(playerid,housesellprice);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "Ai vandut casa pentru: $%d", housesellprice);
					SendClientMessage(playerid, COLOR_WHITE, string);
     				Delete3DTextLabel(housetext[house]);
					Delete3DTextLabel(housetext2[house]);
			    	new houselocation[MAX_ZONE_NAME];
					GetCoords2DZone(Houses[house][EnterX],Houses[house][EnterY], houselocation, MAX_ZONE_NAME);
					format(string, sizeof(string), "[Casa de vanzare]\nAdresa: %d %s\nPret: $%d",house,houselocation,Houses[house][HousePrice]);
				    housetext2[house] = Create3DTextLabel(string,COLOR_BLACK,Houses[house][EnterX],Houses[house][EnterY],Houses[house][EnterZ],5.0,0, 0);
				    format(string, sizeof(string), "[Casa de vanzare]\nAdresa: %d %s\nPret: $%d",house,houselocation,Houses[house][HousePrice]);
				    housetext[house] = Create3DTextLabel(string,0xbec339ff,Houses[house][EnterX],Houses[house][EnterY],Houses[house][EnterZ],5.0,0, 0);
					PlayerInfo[playerid][pHouseKey] = 0;

					SaveHouses(house);
     SavePlayerAccount(playerid);
	                // LOG IT HAHA
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new y, m, d;
					new hh,mi,s;
					getdate(y,m,d);
					gettime(hh,mi,s);
					format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /sellhouse # [%d $] HouseID: %d",d,m,y,hh,mi,s,sendername, housesellprice,house);
					CommandLog(string);
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "You must be at your house entrance to sell it");
				}
			}
			else
			{
    			SendClientMessage(playerid, COLOR_GREY, "Nu esti detinatorul casei.");
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/lock", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new bouse = PlayerInfo[playerid][pHouseKey];
	        for(new i = 0; i < sizeof(Houses); i++)
			{
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				if(PlayerToPoint(3.0,playerid, Houses[i][EnterX], Houses[i][EnterY], Houses[i][EnterZ]) || PlayerToPoint(3.0, playerid, Houses[i][ExitX],Houses[i][ExitY],Houses[i][ExitZ]))
			    {
					if(Houses[i][Locked] == 0 && strcmp(playername, Houses[i][Owner], true) == 0)
					{
						Houses[i][Locked] = 1;
						GameTextForPlayer(playerid, "~w~Usa ~r~Incuiata", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
					if(Houses[i][Locked] == 1 && strcmp(playername, Houses[i][Owner], true) == 0)
					{
						Houses[i][Locked] = 0;
						GameTextForPlayer(playerid, "~w~Usa ~g~Descuiata", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
					else if(PlayerInfo[playerid][pToolkit] == 0 && strcmp(playername, Houses[i][Owner], false) == 0 && PlayerInfo[playerid][pHouseKey] != i)
					{
						GameTextForPlayer(playerid,"~r~",2000,3);
						return 1;
					}
					else if(PlayerInfo[playerid][pToolkit] == 1 && strcmp(playername, Houses[i][Owner], false) == 0 && PlayerInfo[playerid][pHouseKey] != i)
					{
					    if(Houses[i][Locked] == 1)
					    {
							GameTextForPlayer(playerid,"~r~",2000,3);
							return 1;
					    }
					    else
					    {
							GameTextForPlayer(playerid,"~r~",2000,3);
							return 1;
						}
					}
				}
				if(PlayerToPoint(3.0,playerid, Houses[bouse][EnterX], Houses[bouse][EnterY], Houses[bouse][EnterZ]) || PlayerToPoint(3.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
			    {
					if(bouse == i && Houses[bouse][Locked] == 1)
					{
						Houses[bouse][Locked] = 0;
						GameTextForPlayer(playerid, "~w~Usa ~g~descuiata", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
					if(bouse == i && Houses[bouse][Locked] == 0)
					{
						Houses[bouse][Locked] = 1;
						GameTextForPlayer(playerid, "~w~Usa ~r~Incuiata", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
			    }
			}
			for(new i = 0; i < sizeof(Businesses); i++)
			{
			    if(GetPlayerVirtualWorld(playerid) == i || (GetPlayerVirtualWorld(playerid) == 0))
			    {
					if(PlayerToPoint(3.0,playerid,Businesses[i][EnterX], Businesses[i][EnterY], Businesses[i][EnterZ]) || PlayerToPoint(3, playerid,Businesses[i][ExitX], Businesses[i][ExitY],Businesses[i][ExitZ]) || PlayerToPoint(3, playerid, Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]) || PlayerToPoint(3,playerid,Businesses[i][ExitX],Businesses[i][ExitZ], Businesses[i][ExitInterior]))
					{
						if(PlayerInfo[playerid][pBizKey] == i || PlayerInfo[playerid][pWorkOn] == i)
						{
							if(Businesses[i][Locked] == 1)
							{
								Businesses[i][Locked] = 0;
								GameTextForPlayer(playerid, "~w~Bussiness ~g~Deschis", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
							if(Businesses[i][Locked] == 0)
							{
								Businesses[i][Locked] = 1;
								GameTextForPlayer(playerid, "~w~Bussiness ~r~Inchis", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Nu ai cheile", 5000, 6);
							return 1;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Garages); i++)
			{
			    if(GetPlayerVirtualWorld(playerid) == i || (GetPlayerVirtualWorld(playerid) == 0))
			    {
					if(PlayerToPoint(3.0,playerid,Garages[i][EnterX], Garages[i][EnterY], Garages[i][EnterZ]) || PlayerToPoint(3, playerid,Garages[i][ExitX], Garages[i][ExitY],Garages[i][ExitZ]) || PlayerToPoint(3, playerid, Garages[i][ExitX], Garages[i][ExitY], Garages[i][ExitZ]) || PlayerToPoint(3,playerid,Garages[i][ExitX],Garages[i][ExitZ], Garages[i][ExitInterior]))
					{
						if(PlayerInfo[playerid][pGarageKey] == i)
						{
							if(Garages[i][Locked] == 1)
							{
								Garages[i][Locked] = 0;
								GameTextForPlayer(playerid, "~w~Usa garajului ~g~Deschisa", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
							if(Garages[i][Locked] == 0)
							{
								Garages[i][Locked] = 1;
								GameTextForPlayer(playerid, "~w~Usa garajului ~r~Inchisa", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Nu ai cheile.", 5000, 6);
							return 1;
						}
					}
				}
			}
		    if(IsPlayerConnected(playerid))
		    {
		        {
				    new counter = 0;
				    new result;
				    new plyName[MAX_PLAYER_NAME];

				    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
				    for(new i; i != MAX_VEHICLES; i++)
				    {
				        new dist = CheckPlayerDistanceToVehicle(2.5, playerid, i);
				        if(dist)
				        {
			 	           result = i;
				           counter++;
				        }
				    }
				    switch(counter)
				    {
				        case 0:
				        {
							// Found no vehicles in range
				        }

				        case 1:
				        {
				            if(result <= IBPCARS)
				        	{
					        	return 1;
				        	}
							if(PlayerInfo[playerid][pCarKey] == result || PlayerInfo[playerid][pDupeKey] == VehicleInfo[result][vKey])
							{
								if (!IsABike(result))
								{
									if(VehicleInfo[result][vLock])
									{
										VehicleInfo[result][vLock] = 0;
										UnLockCar(result);
										new str[256];
										SetVehicleParamsForPlayer(result,playerid,0,0);
										format(str, sizeof(str), "~b~%s ~n~~g~deschis", VehicleNames[GetVehicleModel(result)-400]);
										GameTextForPlayer(playerid, str, 2000, 4);
									}
									else
									{
										VehicleInfo[result][vLock] = 1;
										PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
										LockCar(result);
										new str[256];
										SetVehicleParamsForPlayer(result,playerid,0,1);
										format(str, sizeof(str), "~b~%s ~n~~r~inchis", VehicleNames[GetVehicleModel(result)-400]);
										GameTextForPlayer(playerid, str, 2000, 4);
									}
								}
							}
							else if(VehicleInfo[result][vLock] == 1 && PlayerInfo[playerid][pToolkit] == 1)
							{
								IsJacking[playerid] = 1;
						        TogglePlayerControllable(playerid,0);
								new form[128];
								format(form, sizeof(form), "scoate un set de scule dupa care incepe sa sparga incuietoarea masinii %s.", VehicleNames[GetVehicleModel(result)-400]);
								PlayerActionMessage(playerid,20.0,form);
								// if the valarm is 3 or higher then it will nudge the police
								if(VehicleInfo[result][vAlarm] == 1)
								{
				                    GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    SetVehicleParamsEx(result,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
									format(string, sizeof(string), "* Alarma masinii: BEEP BEEP BEEP BEEP BEEP BEEP.");
									ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        new Float:x,Float:y,Float:z;
							        GetPlayerPos(playerid,x,y,z);
									PlayerPlaySound(playerid, 1138, x, y, z);
								}
								else if(VehicleInfo[result][vAlarm] == 2)
								{
				                    GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    SetVehicleParamsEx(result,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);

									format(string, sizeof(string), "* Alarma Masinii: BEEP BEEP BEEP BEEP BEEP BEEP.");
									ProxDetector(70.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        new Float:x,Float:y,Float:z;
							        GetPlayerPos(playerid,x,y,z);
									PlayerPlaySound(playerid, 1138, x, y, z);
								}
								else if(VehicleInfo[result][vAlarm] == 3)
								{
				                    GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    SetVehicleParamsEx(result,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);

									format(string, sizeof(string), "* Alarma Masinii: BEEP BEEP BEEP BEEP BEEP BEEP.");
									ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        new Float:x,Float:y,Float:z;
							        GetPlayerPos(playerid,x,y,z);
									PlayerPlaySound(playerid, 1138, x, y, z);
								}
								else if(VehicleInfo[result][vAlarm] == 4)
								{
				                    GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    SetVehicleParamsEx(result,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);

									new vZone[MAX_ZONE_NAME];
									GetVehicleZone(result, vZone, MAX_ZONE_NAME);
									format(string, sizeof(string), "Alarma: %s este localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
									SendFactionMessage(1, COLOR_LIGHTRED, string);
									format(string, sizeof(string), "Alarma: %s este localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
									SendFactionMessage(3, COLOR_LIGHTRED, string);

									format(string, sizeof(string), "* Alarma Masinii: BEEP BEEP BEEP BEEP BEEP BEEP.");
									ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        new Float:x,Float:y,Float:z;
							        GetPlayerPos(playerid,x,y,z);
									PlayerPlaySound(playerid, 1138, x, y, z);
								}
								else if(VehicleInfo[result][vAlarm] == 5)
        						{
				                    GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    SetVehicleParamsEx(result,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);


									new vZone[MAX_ZONE_NAME];
									GetVehicleZone(result, vZone, MAX_ZONE_NAME);
									format(string, sizeof(string), "Alarma: %s este localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
									SendFactionMessage(1, COLOR_LIGHTRED, string);
									format(string, sizeof(string), "Alarma: %s este localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
									SendFactionMessage(3, COLOR_LIGHTRED, string);

									format(string, sizeof(string), "*Alarma Masinii: BEEP BEEP BEEP BEEP BEEP BEEP.");
									ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								    new Float:x,Float:y,Float:z;
					     			GetPlayerPos(playerid,x,y,z);
									PlayerPlaySound(playerid, 1138, x, y, z);
									for(new i = 0; i < MAX_PLAYERS; i++)
									{
								    	if(IsPlayerConnected(i))
								    	{
								        	if(result == PlayerInfo[i][pCarKey] || PlayerInfo[i][pCarKey] == result)
								        	{
								            	SendClientMessage(i, COLOR_YELLOW, "Masina ta este sparta in acest moment!Verifica GPS-ul si dute la ea.(4224)");
								        	}
								    	}
									}
								}
								PlayerInfo[playerid][pJackingDoorID] = result;
								if(VehicleInfo[result][vLockBuyed] == 0)
								{ PlayerInfo[playerid][pJackingDoor] = 60; }
								else if(VehicleInfo[result][vLockBuyed] == 1)
								{ PlayerInfo[playerid][pJackingDoor] = 120; }
								else if(VehicleInfo[result][vLockBuyed] == 2)
								{ PlayerInfo[playerid][pJackingDoor] = 180; }
								else if(VehicleInfo[result][vLockBuyed] == 3)
								{ PlayerInfo[playerid][pJackingDoor] = 240; }
								else if(VehicleInfo[result][vLockBuyed] == 4)
								{ PlayerInfo[playerid][pJackingDoor] = 300; }
								else if(VehicleInfo[result][vLockBuyed] == 5)
								{ PlayerInfo[playerid][pJackingDoor] = 360; }
							}
				        }

				        default:
				        {
				            SendClientMessage(playerid, COLOR_GREY, "");
				            return 1;
				        }
				    }
				    return 1;
				}
			}
	    }
	    return 1;
	}


	/*if(strcmp(cmd, "/camera", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pFaction] == 1)
            {
                if(!PlayerToPoint(8.0,playerid,1579.9148,-1634.6359,13.5621,321.1464))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   You are not at the Area51 Security Panel!");
				    return 1;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}SYNTAX{FFFFFF}: /camera [number 1 - 6]  (6 = OFF)");
					return 1;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Camera Number can't be below 1 or above 6!"); return 1; }
				TogglePlayerControllable(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 562.4481,-1294.0647,27.2406,26.4959); SetPlayerCameraLookAt(playerid, 545.5137,-1280.0164,17.2482,246.4579); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 563.1426,-1255.2288,32.3929,302.4219); SetPlayerCameraLookAt(playerid, 592.4326,-1234.1118,17.7570,133.8469); }
				else if(number == 3) { SetPlayerCameraPos(playerid, 1185.4852,-1367.9109,24.0173,357.9224); SetPlayerCameraLookAt(playerid, 1190.2485,-1332.0000,13.5688,346.3289); }
				else if(number == 4) { SetPlayerCameraPos(playerid, 1542.6910,-1700.6967,28.3948,25.5131); SetPlayerCameraLookAt(playerid, 1535.6763,-1673.1096,13.3828,201.1264); }
				else if(number == 5) { SetPlayerCameraPos(playerid, 1812.5533,-1740.2003,54.5687,338.5066); SetPlayerCameraLookAt(playerid, 1827.0106,-1681.7343,13.5469,163.9782); }
				else if(number == 6)
				{
				    MedicBill[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					SpawnPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "ERROR: Factiune invalida!");
			    return 1;
			}
		}
		return 1;
	}*/
	/*if(strcmp(cmd, "/open", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			new bouse = PlayerInfo[playerid][pHouseKey];
			for(new i = 0; i < sizeof(Houses); i++)
			{
				if(PlayerToPoint(5.0,playerid, Houses[bouse][EnterX], Houses[bouse][EnterY], Houses[bouse][EnterZ]) || PlayerToPoint(5.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
				{
				    if(PlayerInfo[playerid][pHouseKey] == i)
				    {
         				if(GetPlayerVirtualWorld(playerid) == bouse || (GetPlayerVirtualWorld(playerid) == 0))
					    {
							if(Houses[bouse][Locked] == 1)
							{
								Houses[bouse][Locked] = 0;
								GameTextForPlayer(playerid, "~w~Usa ~g~Deschisa", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
							else if(Houses[bouse][Locked] == 0)
							{
								Houses[bouse][Locked] = 1;
								GameTextForPlayer(playerid, "~w~Usa ~rInchisa", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							}
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai cheile casei.");
							return 1;
						}
					}
				}
				else
				{
					//SendClientMessage(playerid, COLOR_GREY, "[Error] You are not at your house"); // This message kept sending when people were at their biz, a return 1 didn't work
				}
			}
		}
	    if(IsPlayerConnected(playerid)) {
	        for(new i = 0; i < sizeof(Businesses); i++) {
	            if(GetPlayerVirtualWorld(playerid) == i || (GetPlayerVirtualWorld(playerid) == 0)) {
	                if(PlayerToPoint(10.0,playerid,Businesses[i][EnterX], Businesses[i][EnterY], Businesses[i][EnterZ]) || PlayerToPoint(3, playerid,Businesses[i][ExitX], Businesses[i][ExitY],Businesses[i][ExitZ]) || PlayerToPoint(3, playerid, Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]) || PlayerToPoint(3,playerid,Businesses[i][ExitX],Businesses[i][ExitZ], Businesses[i][ExitInterior])) {
	                    if(PlayerInfo[playerid][pBizKey] == i) {
	                        if(Businesses[i][Locked] == 1) {
	                            if(PlayerInfo[playerid][pSex] == 1) {
	                                Businesses[i][Locked] = 0;
	                                GameTextForPlayer(playerid, "~w~Business ~g~Deschis", 5000, 6);
	                                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	                            }
	                            else {
	                                Businesses[i][Locked] = 0;
	                                GameTextForPlayer(playerid, "~w~Business~g~Deschis", 5000, 6);
	                                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	                            }
	                            return 1;
	                        }
	                        if(Businesses[i][Locked] == 0) {
	                            if(PlayerInfo[playerid][pSex] == 1) {
	                                Businesses[i][Locked] = 1;
	                                GameTextForPlayer(playerid, "~w~Business ~r~Inchis", 5000, 6);
	                                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	                            }
	                            else {
	                                Businesses[i][Locked] = 1;
	                                GameTextForPlayer(playerid, "~w~Business~r~Inchis", 5000, 6);
	                                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
	                            }
	                            return 1;
	                        }
	                    }
	                    else {
	                        SendClientMessage(playerid, COLOR_GREY, "Nu ai cheile afacerii.");
	                        return 1;
	                    }
	                }
	            }
	        }
	    }
	    return 1;
	}*/
    if(strcmp(cmd, "/hire", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /hire [playerid/partofname]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pBizKey] != 255 && strcmp(playername, Businesses[PlayerInfo[playerid][pBizKey]][Owner], true) == 0)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new form[128];
				        new bizzer = PlayerInfo[playerid][pBizKey];
						if(gPlayerLogged[giveplayerid])
						{
		                    if(giveplayerid == playerid)
							{
		                        SendClientMessage(playerid, COLOR_GREY, "You can not hire yourself");
		                        return 1;
					        }
							BizRequest[giveplayerid] = bizzer;
							format(form,sizeof(form),"* You have been invited to work for %s in his business (type /accept job)",GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,form);
							format(form,sizeof(form),"* You have invited %s to work for you.",GetPlayerNameEx(giveplayerid));
							SendClientMessage(playerid,COLOR_WHITE,form);
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
						}
					}
		 			else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You do not own a business.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/fire", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /fire [playerid/partofname]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pBizKey] != 255 && strcmp(playername, Businesses[PlayerInfo[playerid][pBizKey]][Owner], true) == 0)
			{
			    if(PlayerInfo[giveplayerid][pWorkOn] == PlayerInfo[playerid][pBizKey])
				{
					if(IsPlayerConnected(giveplayerid))
					{
     					if(gPlayerLogged[giveplayerid])
     					{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        new form[128];
								format(form,sizeof(form),"* You have been fired from your job by %s",GetPlayerNameEx(playerid));
								SendClientMessage(giveplayerid,COLOR_LIGHTBLUE,form);
								PlayerInfo[giveplayerid][pBizKey] = 255;
								return 1;
							}
						}
	      				else
						{
							SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
						}
					}
		 			else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
					}
				}
 				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player is not hired by you");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You do not own a business.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unrentcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 999)
			{
			    if(idcar == HireCar[playerid])
			    {
			        TogglePlayerControllable(playerid, 1);
			    }
			    new Float:vhealth;
			    GetVehicleHealth(idcar, vhealth);
			    if(vhealth < 1000)
			    {
			    SendClientMessage(playerid, COLOR_GREY, "Ai lovit masina, asa ca vei fii penalizat cu $50");
			    EngineStatus[HireCar[playerid]] = 0;
			    SetVehicleToRespawn(HireCar[playerid]);
				HireCar[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Ai returnat masina", 3000, 3);
				GivePlayerCash(giveplayerid, -50);
				}
			    if(vhealth == 1000)
			    {
			    EngineStatus[HireCar[playerid]] = 0;
			    SetVehicleToRespawn(HireCar[playerid]);
				HireCar[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Ai returnat masina", 3000, 3);
				}
			}
		}
		return 1;
	}
	


	if(strcmp(cmd, "/renthouse", true) == 0 || strcmp(cmd, "/rentroom", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(Houses); h++)
			{
				if(PlayerToPoint(2.0,playerid, Houses[h][EnterX], Houses[h][EnterY], Houses[h][EnterZ]) && Houses[h][Owned] == 1 &&  Houses[h][Rentable] == 1)
				{
					if (PlayerInfo[playerid][pLevel] >=1)
					{
						if(GetPlayerCash(playerid) >= Houses[h][RentCost])
						{
							PlayerInfo[playerid][pHouseKey] = h;
							GivePlayerCash(playerid,-Houses[h][RentCost]);
							Houses[h][Money] = Houses[h][Money]+Houses[h][RentCost];
							SetPlayerInterior(playerid,Houses[h][ExitInterior]);
							SetPlayerPos(playerid,Houses[h][ExitX],Houses[h][ExitY],Houses[h][ExitZ]);
							SetPlayerVirtualWorld(playerid,h);
							GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit", 5000, 3);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "   You can not afford it");
							return 1;
						}
					}
					else SendClientMessage(playerid, COLOR_GREY, "   Nu ai level 1");
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unrenthouse", true) == 0 || strcmp(cmd, "/unrentroom", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new renting = PlayerInfo[playerid][pHouseKey];
			for(new h = 0; h < sizeof(Houses); h++)
			{
				if(PlayerToPoint(3.0,playerid, Houses[renting][EnterX], Houses[renting][EnterY], Houses[renting][EnterZ]))
				{
					PlayerInfo[playerid][pHouseKey] = 0;
					PlayerInfo[playerid][pSpawnPoint] = 0;
					SendClientMessage(playerid, COLOR_WHITE, "House successfully unrented.");
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "You need to be at your rented home before you can unrent it.");
				    return 1;
				}
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/rentfee", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    for(new i = 0; i < sizeof(Houses); i++)
		    {
				new bouse = PlayerInfo[playerid][pHouseKey];
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
				{
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /rentfee [amount]");
						return 1;
					}
					if(strval(tmp) < 1 || strval(tmp) > 1500)
					{
						SendClientMessage(playerid, COLOR_GREY, "Please enter an amount between $1-1500");
						return 1;
					}
					Houses[bouse][RentCost] = strval(tmp);
					format(string, sizeof(string), "You have set the rent fee to: $%d", Houses[bouse][RentCost]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
					return 1;
				}
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/editrenting", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    for(new i = 0; i < sizeof(Houses); i++)
		    {
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				new house = PlayerInfo[playerid][pHouseKey];
				if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
				{
				    if (PlayerToPoint(5.2, playerid,Houses[PlayerInfo[playerid][pHouseKey]][EnterX],Houses[PlayerInfo[playerid][pHouseKey]][EnterY],Houses[PlayerInfo[playerid][pHouseKey]][EnterZ]))
				    {
						if(Houses[PlayerInfo[playerid][pHouseKey]][Rentable] == 0)
						{
						    Houses[PlayerInfo[playerid][pHouseKey]][Rentable] = 1;
		    				SendClientMessage(playerid, COLOR_WHITE, "Your house is now rentable.");
		    				SaveHouses(house);

						}
						else if(Houses[PlayerInfo[playerid][pHouseKey]][Rentable] == 1)
						{
						    Houses[house][Rentable] = 0;
		    				SendClientMessage(playerid, COLOR_WHITE, "Your house is now not rentable.");
		    				SaveHouses(house);
						}
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "You are not at your house.");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "You do not own a house ");
					return 1;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/evictall", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid,playername,sizeof(playername));
			if (strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(i != playerid)
						{
							if (PlayerInfo[i][pHouseKey] == PlayerInfo[playerid][pHouseKey] )
							{
								SendClientMessage(i, COLOR_WHITE, "You have been evicted from your house.");
								SendClientMessage(playerid, COLOR_WHITE, "Everyone have been evicted.");
								PlayerInfo[i][pHouseKey] = 0;
								return 1;
							}
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/evict", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}SYNTAX{FFFFFF}: /evict [playerid/PartOfName]");
				}
				new target;
				target = ReturnUser(tmp);
				if (target == playerid)
				{
					SendClientMessage(target, COLOR_WHITE, "You cant evict yourself.");
					return 1;
				}
				if(IsPlayerConnected(target))
				{
				    if(target != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[target][pHouseKey] == PlayerInfo[playerid][pHouseKey])
						{
							SendClientMessage(target, COLOR_WHITE, "You have been evicted");
							SendClientMessage(playerid, COLOR_WHITE, "Player has been evicted");
							PlayerInfo[target][pHouseKey] = 0;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Player doesn't rent at your House!");
						    return 1;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house!");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/buyhouse", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			for(new h = 0; h < sizeof(Houses); h++)
			{
				if(PlayerToPoint(2.0,playerid, Houses[h][EnterX], Houses[h][EnterY], Houses[h][EnterZ]) && Houses[h][Owned] == 0)
				{
				    if(Houses[h][HousePrice] == 0)
				    {
				        SendClientMessage(playerid, COLOR_WHITE, "  Pretul acestei case nu este setat inca, probabil nu poate fi folosita.");
						return 1;
				    }
					if(Houses[h][Owned] == 1)
					{
				        SendClientMessage(playerid, COLOR_WHITE, "  Casa aceasta este deja cumparata.");
					    return 1;
					}
					if(GetPlayerCash(playerid) >= Houses[h][HousePrice])
					{
					    if(PlayerBadges[playerid][FirstHouse] == 0)
						{
							PlayerBadges[playerid][FirstHouse] = 1;
							InfoForPlayer(playerid, "~b~[][Achievement]~w~ Achivement deblocat - ~b~Casa, Dulce Casa!");
							SaveBadges(playerid);
						}
      					PlayerInfo[playerid][pHouseKey] = h;
						Houses[h][Owned] = 1;
						strmid(Houses[h][Owner], playername, 0, strlen(playername), 255);
						PlayerInfo[playerid][pFairMoney] = 1;
	        			SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
						GivePlayerCash(playerid,-Houses[h][HousePrice]);
						SendClientMessage(playerid, COLOR_GREEN, "Felicitari! Ai cumparat cu succes aceasta proprietate!");
						Delete3DTextLabel(housetext[h]);
						Delete3DTextLabel(housetext2[h]);
						SaveHouses(h);
	                	// LOG IT HAHA
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /buyhouse # [%d $] HouseID: %d",d,m,y,hh,mi,s,sendername, Houses[h][HousePrice],h);
						CommandLog(string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai suficienti bani!");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/buygarage", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			for(new h = 0; h < sizeof(Garages); h++)
			{
				if(PlayerToPoint(2.0,playerid, Garages[h][EnterX], Garages[h][EnterY], Garages[h][EnterZ]) && Garages[h][Owned] == 0)
				{
				    if(PlayerInfo[playerid][pGarageKey] != 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "  Deja deti un garaj.");
				        return 1;
				    }
				    if(Garages[h][Price] == 0)
				    {
				        SendClientMessage(playerid, COLOR_WHITE, "  Pretul aestui garaj nu este setat inca, probabil nu poate fi folosit.");
						return 1;
				    }
					if(Garages[h][Owned] == 1)
					{
				        SendClientMessage(playerid, COLOR_WHITE, "  Garajul acesta este deja cumparat.");
					    return 1;
					}
					if(GetPlayerCash(playerid) > Garages[h][Price])
					{
						PlayerInfo[playerid][pFairMoney] = 1;
	        			SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
      					PlayerInfo[playerid][pGarageKey] = h;
						Garages[h][Owned] = 1;
						strmid(Garages[h][Owner], playername, 0, strlen(playername), 255);
						GivePlayerCash(playerid,-Garages[h][Price]);
						SendClientMessage(playerid, COLOR_GREEN, "Felicitari! Tocmai ti-ai cumparat acest garaj!");
						SaveGarages(h);

						Delete3DTextLabel(garagetext[h]);
				    	new garagelocation[MAX_ZONE_NAME];
						GetCoords2DZone(Garages[h][EnterX],Garages[h][EnterY], garagelocation, MAX_ZONE_NAME);
						format(string, sizeof(string), "[Garaj]\nAdresa: %d %s\nProprietar: %s",h,garagelocation,Garages[h][Owner]);
	    				garagetext[h] = Create3DTextLabel(string,0xbec339ff,Garages[h][EnterX],Garages[h][EnterY],Garages[h][EnterZ],5.0,0);

	                	// LOG IT HAHA
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /buygarage # [%d $] GarageID: %d",d,m,y,hh,mi,s,sendername, Garages[h][Price],h);
						CommandLog(string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai suficienti bani!");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/sellgarage", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(strcmp(playername, Garages[PlayerInfo[playerid][pGarageKey]][Owner], true) == 0)
			{
			    new garage = PlayerInfo[playerid][pGarageKey];
				if(PlayerToPoint(1.0,playerid,Garages[garage][EnterX],Garages[garage][EnterY],Garages[garage][EnterZ]))
				{
					Garages[garage][Locked] = 1;
					Garages[garage][Owned] = 0;
					strmid(Garages[garage][Owner], "None", 0, strlen("None"), 255);
					new garagesellprice = Garages[garage][Price] / 4 * 3;
					PlayerInfo[playerid][pFairMoney] = 1;
	        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
      				GivePlayerCash(playerid,garagesellprice);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "You have sold your garage for: $%d", garagesellprice);
					SendClientMessage(playerid, COLOR_WHITE, string);

					Delete3DTextLabel(garagetext[garage]);
	                new garagelocation[MAX_ZONE_NAME];
	                GetCoords2DZone(Garages[garage][EnterX],Garages[garage][EnterY], garagelocation, MAX_ZONE_NAME);
	                format(string, sizeof(string), "[Garaj De Vanzare]\nAdresa: %d %s\nPretul: $%d",garage,garagelocation,Garages[garage][Price]);
	                garagetext[idx] = Create3DTextLabel(string,0xbec339ff,Garages[garage][EnterX],Garages[garage][EnterY],Garages[garage][EnterZ],5.0,0, 0);
					SaveGarages(garage);
					PlayerInfo[playerid][pGarageKey] = 0;
	                // LOG IT HAHA
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new y, m, d;
					new hh,mi,s;
					getdate(y,m,d);
					gettime(hh,mi,s);
					format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /sellgarage # [%d $] garageID: %d",d,m,y,hh,mi,s,sendername, garagesellprice,garage);
					CommandLog(string);
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa fi la intrarea garajului pentru a-l vinde!");
				}
			}
			else
			{
    			SendClientMessage(playerid, COLOR_GREY, "Nu deti un garaj.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/businessfee", true) == 0 || strcmp(cmd, "/bizfee", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pBizKey];
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid,playername,sizeof(playername));
			if(bouse != 255 && strcmp(playername, Businesses[PlayerInfo[playerid][pBizKey]][Owner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /businessfee [bani]");
				}
				if(strval(tmp) < 0 || strval(tmp) > 50 && Businesses[bouse][BizType] != 12)
				{
					SendClientMessage(playerid, COLOR_GREY, "Minimul este de $0, Maximul este de $50");
					return 1;
				}
				else
				{
				    Businesses[bouse][EntranceCost] = strval(tmp);
				}
				Businesses[bouse][EntranceCost] = strval(tmp);
				SaveBusinesses(bouse);
				format(string, sizeof(string), "Pretul intrarii a fost setat la: $%d", Businesses[bouse][EntranceCost]);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu deti un business.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/businessname", true) == 0 || strcmp(cmd, "/bizname", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new bouse = PlayerInfo[playerid][pBizKey];
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid,playername,sizeof(playername));
			if(bouse != 255 && strcmp(playername, Businesses[PlayerInfo[playerid][pBizKey]][Owner], true) == 0)
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /businessname [nume]");
				}
				if(PlayerToPoint(1.0,playerid,Businesses[bouse][EnterX],Businesses[bouse][EnterY],Businesses[bouse][EnterZ]) || PlayerToPoint(25.0,playerid,Businesses[bouse][ExitX],Businesses[bouse][ExitY],Businesses[bouse][ExitZ]))
				{
				    if(strfind( result , "'" , true ) == -1)
				    {
						strmid(Businesses[bouse][BusinessName], result, 0, 64, 255);
						format(string, sizeof(string), "Ai setat numele businessului la: %s",Businesses[bouse][BusinessName]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						SaveBusinesses(bouse);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "ERROR: Simbol invalid, simbolul: ' nu este activ!");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Trebuie sa fi la intrarea businessului pentru a-i schimba numele.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu deti un business");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/businessinfo", true) == 0 || strcmp(cmd, "/bizinfo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid,playername,sizeof(playername));
			new bouse = PlayerInfo[playerid][pBizKey];
			new work = PlayerInfo[playerid][pBizKey];
			if(PlayerInfo[playerid][pBizKey] == bouse)
			{
 				if(PlayerToPoint(1.5,playerid,Businesses[bouse][EnterX],Businesses[bouse][EnterY],Businesses[bouse][EnterZ]) || PlayerToPoint(20.0,playerid,Businesses[bouse][ExitX],Businesses[bouse][ExitY],Businesses[bouse][ExitZ]) || PlayerToPoint(1.0,playerid,Businesses[work][EnterX],Businesses[work][EnterY],Businesses[work][EnterZ]) || PlayerToPoint(20.0,playerid,Businesses[work][ExitX],Businesses[work][ExitY],Businesses[work][ExitZ]))
				{
					format(string, sizeof(string), "Nume Business: %s - Till: $%d - Locked: %d", Businesses[bouse][BusinessName],Businesses[bouse][Till],Businesses[bouse][Locked]);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "Materiale: %d - Pretul intrarii: $%d", Businesses[bouse][Products],Businesses[bouse][EntranceCost]);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti in business.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu deti un business.");
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/sellbusiness", true) == 0 || strcmp(cmd, "/sellbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pBizKey] != 255 && strcmp(playername, Businesses[PlayerInfo[playerid][pBizKey]][Owner], true) == 0)
			{
			    new biz = PlayerInfo[playerid][pBizKey];
				if(PlayerToPoint(1.0,playerid,Businesses[biz][EnterX],Businesses[biz][EnterY],Businesses[biz][EnterZ]))
				{
					PlayerInfo[playerid][pFairMoney] = 1;
	        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
					Businesses[biz][Owned] = 0;
					strmid(Businesses[biz][Owner], "None", 0, strlen("None"), 255);
					new businesssellprice = Businesses[biz][BizPrice] / 4 * 3;
					GivePlayerCash(playerid,businesssellprice);
					format(string, sizeof(string), "Ti-ai vandut business-ul pentru: $%d", businesssellprice);
					SendClientMessage(playerid, COLOR_WHITE, string);
					ChangeStreamPickupModel(Businesses[biz][PickupID],1272);
					PlayerInfo[playerid][pBizKey] = 255;
					SaveBusinesses(biz);
     SavePlayerAccount(playerid);
					// Log it.
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new y, m, d;
					new h,mi,s;
					getdate(y,m,d);
					gettime(h,mi,s);
					format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /sellbiz $%d",d,m,y,h,mi,s,sendername, businesssellprice);
					CommandLog(string);
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa fi la intrarea business-ului.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu deti un business.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/refuel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(IsAtGasStation(playerid))
			{
				if (EngineStatus[GetPlayerVehicleID(playerid)] == 0)
				{
					PlayerInfo[playerid][pRefueling] = 15;
					Refueling[playerid] = 1;
					FreezePlayer(playerid, 15);
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Ai motorul pornit, nu poti alimenta.");
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Nu esti la benzinarie.");
			}
		}
    	return 1;
	}
	if(strcmp(cmd, "/buybusiness", true) == 0 || strcmp(cmd, "/buybiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new Float:oldposx, Float:oldposy, Float:oldposz;
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(Businesses); h++)
			{
				if(PlayerToPoint(2.0,playerid, Businesses[h][EnterX], Businesses[h][EnterY], Businesses[h][EnterZ]) && Businesses[h][Owned] == 0)
				{
				    if(Businesses[h][BizPrice] == 0)
				    {
				        SendClientMessage(playerid, COLOR_WHITE, "Pretul nu este setat pentru acest business, probabil este inactiv.");
						return 1;
				    }
					if(PlayerInfo[playerid][pBizKey] != 255 && strcmp(playername, Businesses[PlayerInfo[playerid][pBizKey]][Owner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_GREY, "Poti avea decat un business!");
						return 1;
					}
					if(GetPlayerCash(playerid) > Businesses[h][BizPrice])
					{
						PlayerInfo[playerid][pFairMoney] = 1;
		        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
						PlayerInfo[playerid][pBizKey] = h;
						Businesses[h][Owned] = 1;
						strmid(Businesses[h][Owner], playername, 0, strlen(playername), 255);
						GivePlayerCash(playerid,-Businesses[h][BizPrice]);
						SendClientMessage(playerid, COLOR_GREEN, "Felicitari! Ti-ai cumparat un business!");
						ChangeStreamPickupModel(Businesses[h][PickupID],1239);
						SaveBusinesses(h);
      SavePlayerAccount(playerid);
						// Log it.
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /buybiz $%d",d,m,y,hh,mi,s,sendername, Businesses[h][BizPrice]);
						CommandLog(string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai suficienti bani!");
						return 1;
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/buyapartment", true) == 0 || strcmp(cmd, "/buyapc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new Float:oldposx, Float:oldposy, Float:oldposz;
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(Apartment); h++)
			{
				if(PlayerToPoint(2.0,playerid, Apartment[h][EnterX], Apartment[h][EnterY], Apartment[h][EnterZ]) && Apartment[h][Owned] == 0)
				{
				    if(Apartment[h][Price] == 0)
				    {
				        SendClientMessage(playerid, COLOR_WHITE, "Pretul nu este setat pentru acest apartament, probabil este inactiv.");
						return 1;
				    }
				    if(Apartment[h][Price] == 1)
				    {
				        SendClientMessage(playerid, COLOR_WHITE, "Pretul nu este setat pentru acest apartament, probabil este inactiv.");
						return 1;
				    }
					if(PlayerInfo[playerid][pApartmentKey] != 255)
					{
						SendClientMessage(playerid, COLOR_GREY, "Poti avea doar un apartament, vinde-l pe cel original prima data!");
						return 1;
					}
					if(GetPlayerCash(playerid) > Apartment[h][Price])
					{
						PlayerInfo[playerid][pFairMoney] = 1;
		        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
						PlayerInfo[playerid][pApartmentKey] = h;
						Apartment[h][Owned] = 1;
						strmid(Apartment[h][Owner], playername, 0, strlen(playername), 255);
						GivePlayerCash(playerid,-Apartment[h][Price]);
						SendClientMessage(playerid, COLOR_GREEN, "Felicitari! Ti-ai cumparat un apartament in ");

      SavePlayerAccount(playerid);
						// Log it.
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /buyapartment $%d",d,m,y,hh,mi,s,sendername, Apartment[h][Price]);
						CommandLog(string);
						return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai suficienti bani!");
						return 1;
					}
				}
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/sellapartment", true) == 0 || strcmp(cmd, "/sellapc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pApartmentKey] != 255 && strcmp(playername, Apartment[PlayerInfo[playerid][pApartmentKey]][Owner], true) == 0)
			{
			    new biz = PlayerInfo[playerid][pApartmentKey];
				if(PlayerToPoint(2.0,playerid, Apartment[biz][EnterX], Apartment[biz][EnterY], Apartment[biz][EnterZ]))
				{
					PlayerInfo[playerid][pFairMoney] = 1;
	        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
					Apartment[biz][Owned] = 0;
					strmid(Apartment[biz][Owner], "None", 0, strlen("None"), 255);
					new businesssellprice = Apartment[biz][Price] / 4 * 3;
					GivePlayerCash(playerid,businesssellprice);
					format(string, sizeof(string), "Ti-ai vandut apartamentul pentru: $%d", businesssellprice);
					SendClientMessage(playerid, COLOR_WHITE, string);
					ChangeStreamPickupModel(Apartment[biz][PickupID],1272);
					PlayerInfo[playerid][pApartmentKey] = 255;
     SavePlayerAccount(playerid);

					// Log it.
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new y, m, d;
					new h,mi,s;
					getdate(y,m,d);
					gettime(h,mi,s);
					format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /sellapartment $%d",d,m,y,h,mi,s,sendername, businesssellprice);
					CommandLog(string);
					return 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD2, "Trebuie sa fi la intrarea apartamentului pentru a-l vinde.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Nu deti un apartament.");
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/aapartmentprice", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /aapartmentprice [idapartament] [pret]");
				return 1;
			}
			if(PlayerInfo[playerid][pAdministrator] >= 3)
			{
					new id;
					id = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /aapartmentprice [businessid] [price]");
						return 1;
					}
					new id2;
					id2 = strval(tmp);

					Apartment[id][Price] = id2;
					new form[128];
					format(form, sizeof form, "You have set Apartment ID: %d's price to %d", id,id2);
					SendClientMessage(playerid, COLOR_ADMINCMD,form);
	                // LOG IT HAHA
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new y, m, d;
					new hh,mi,s;
					getdate(y,m,d);
					gettime(hh,mi,s);
					format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /aapartmentprice # You have set Apartment ID: %d's price to %d",d,m,y,hh,mi,s,sendername,id,id2);
					CommandLog(string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/fine", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /fine [playerid/PoN] [amount] [reason]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdministrator] >= 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new fine;
						tmp = strtok(cmdtext, idx);
						if (!strlen(tmp))
						{
						SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /fine [playerid/PoN] [amount] [reason]");
						return 1;
						}
						fine = strval(tmp);
						if (fine < 0)
						{
							SendClientMessage(playerid, COLOR_GRAD2, "ERROR: Amount must be greater than 0");
							return 1;
						}
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /fine [playerid/PoN] [amount] [reason]");
							return 1;
						}
						format(string, sizeof(string), "%s was fined $%d for %s", giveplayer, fine, (result));
						AdministratorMessage(COLOR_LIGHTRED,string,1);
						GivePlayerCash(giveplayerid,-fine);
						return 1;
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Player-ul este deconectat.");
			}
		}
		return 1;
	}
	//==========================================================================
	if(strcmp(cmd, "/engine", true) == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			if(IsAdonatebike(idcar)) { return 1; }
			if(Fuel[idcar] == 0) { SendClientMessage(playerid, COLOR_GREY, "Ai ramas fara benzina."); return 1; }
			if(VehicleInfo[idcar][vImpound] == 1) { SendClientMessage(playerid, COLOR_WHITE, "Aceasta masina este {D30000}blocata{FFFFFF} de LSAS Company suna la {D30000}522{FFFFFF} pentru deblocare."); return 1; }
      		if (HandBrake[idcar][hActiv] == 1) { SendClientMessage(playerid, COLOR_GREY, "Aceasta masina are frana de mana trasa nu poti porni motorul."); return 1; }
			new model = GetVehicleModel(GetPlayerVehicleID(playerid));
			new Float:vehicleHealth;
		    GetVehicleHealth(idcar, vehicleHealth);
		    new plname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plname, sizeof(plname));
			//if(idcar == PlayerInfo[playerid][pCarKey] || PlayerInfo[playerid][pDupeKey] == VehicleInfo[idcar][vKey] || idcar <= IBPCARS || (strcmp(plname, VehicleInfo[vehi][vOwner], true) == 0))
			if(VehicleInfo[idcar][vKey] == PlayerInfo[playerid][pCarKey] || (strcmp(plname, VehicleInfo[idcar][vOwner], true) == 0))
			{
				if(vehicleHealth <= 350) { SendClientMessage(playerid, COLOR_LIGHTRED, "Masina ta nu poate porni, te rog cheama un mecanic."); return 1; }
				if(model == 481 || model == 509 || model == 510) { return 1; }
				if(EngineStatus[GetPlayerVehicleID(playerid)] == 0)
				{
					EngineStatus[GetPlayerVehicleID(playerid)] = 1;
					if(PlayerInfo[playerid][pMaskuse] == 1)
					{
					    PlayerActionMessage(playerid,15.0,"introduce cheia in contact si o roteste.");
						format(string, sizeof(string), "[Masca_%d] a pornit motorul vehiculului %s.", PlayerInfo[playerid][pMaskID], VehicleNames[GetVehicleModel(idcar)-400]);
						SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
						SendClientMessage(playerid, COLOR_PURPLE, string);
						VehicleInfo[idcar][vEngineLife] -= 2.5;
					} else {
					    PlayerActionMessage(playerid,15.0,"introduce cheia in contact si o roteste.");
						format(string, sizeof(string), "%s a pornit motorul vehiculului %s.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(idcar)-400]);
						SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
						SendClientMessage(playerid, COLOR_PURPLE, string);
						VehicleInfo[idcar][vEngineLife] -= 2.5;
					}
					GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
				}
				else
				{
					EngineStatus[GetPlayerVehicleID(playerid)] = 0;
					if(PlayerInfo[playerid][pMaskuse] == 1)
					{
						format(string, sizeof(string), "[Masca_%d] opreste motorul vehiculului %s.", PlayerInfo[playerid][pMaskID], VehicleNames[GetVehicleModel(idcar)-400]);
						SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
						SendClientMessage(playerid, COLOR_PURPLE, string);
						VehicleInfo[idcar][vEngineLife] -= 1.5;
					} else {
						format(string, sizeof(string), "%s opreste motorul vehiculului %s.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(idcar)-400]);
						SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
						SendClientMessage(playerid, COLOR_PURPLE, string);
						VehicleInfo[idcar][vEngineLife] -= 1.5;
					}
					GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
				}
				return 1;
			}
			else
			{
				if(EngineStatus[GetPlayerVehicleID(playerid)] == 0 && PlayerInfo[playerid][pToolkit] == 1)
				{
					{
						format(string, sizeof(string), "scoate un set de scule si incearca sa porneasca masina %s.", VehicleNames[GetVehicleModel(idcar)-400]);
						PlayerActionMessage(playerid,20.0,string);
						// if the valarm is 5 then it will nudge the polic
						if(VehicleInfo[idcar][vAlarm] == 1)
						{
							format(string, sizeof(string), "* Alarma: BEEP BEEP BEEP BEEP BEEP BEEP.");
							ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							// Alarm on
							GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(idcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
						}
						else if(VehicleInfo[idcar][vAlarm] == 2)
						{
							format(string, sizeof(string), "* Alarma: BEEP BEEP BEEP BEEP BEEP BEEP.");
							ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							// Alarm on
							GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(idcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
						}
						else if(VehicleInfo[idcar][vAlarm] == 3)
						{
							format(string, sizeof(string), "* Alarma: BEEP BEEP BEEP BEEP BEEP BEEP.");
							ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							// Alarm on
							GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(idcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
       						new vZone[MAX_ZONE_NAME];
							GetVehicleZone(idcar, vZone, MAX_ZONE_NAME);
							format(string, sizeof(string), "[Alarma] %s localizata in %s.", VehicleNames[GetVehicleModel(idcar)-400], vZone);
							SendFactionMessage(1, COLOR_LIGHTRED, string);
							format(string, sizeof(string), "[Alarma] %s localizata in %s.", VehicleNames[GetVehicleModel(idcar)-400], vZone);
							SendFactionMessage(3, COLOR_LIGHTRED, string);
						}
						else if(VehicleInfo[idcar][vAlarm] == 4)
						{
							format(string, sizeof(string), "* Alarma: BEEP BEEP BEEP BEEP BEEP BEEP.");
							ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							// Alarm on
							GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(idcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
							new vZone[MAX_ZONE_NAME];
							GetVehicleZone(idcar, vZone, MAX_ZONE_NAME);
							format(string, sizeof(string), "[Alarma] %s localizata in %s.", VehicleNames[GetVehicleModel(idcar)-400], vZone);
							SendFactionMessage(1, COLOR_LIGHTRED, string);
							format(string, sizeof(string), "[Alarma] %s localizata in %s..", VehicleNames[GetVehicleModel(idcar)-400], vZone);
							SendFactionMessage(3, COLOR_LIGHTRED, string);
							SetPVarInt(playerid, "VehON", 0);
						}
						else if(VehicleInfo[idcar][vAlarm] == 5)
						{
							format(string, sizeof(string), "* Alarma: BEEP BEEP BEEP BEEP BEEP BEEP.");
							ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							// Alarm on
							GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(idcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
							new vZone[MAX_ZONE_NAME];
							GetVehicleZone(idcar, vZone, MAX_ZONE_NAME);
							format(string, sizeof(string), "[Alarma] %s localizata in %s.", VehicleNames[GetVehicleModel(idcar)-400], vZone);
							SendFactionMessage(1, COLOR_LIGHTRED, string);
							format(string, sizeof(string), "[Alarma] %s localizata in %s..", VehicleNames[GetVehicleModel(idcar)-400], vZone);
							SendFactionMessage(3, COLOR_LIGHTRED, string);
							SetPVarInt(playerid, "VehON", 0);
							foreach (Player, i)
							{
								if(IsPlayerConnected(i))
								{
									if(idcar == PlayerInfo[i][pCarKey] || PlayerInfo[i][pCarKey] == idcar)
									{
										SendClientMessage(i, COLOR_YELLOW, "SMS: Cineva vrea sa iti fure masina!Dute la coordonate!(4224)");
									}
								}
							}
						}
						////////////////////////////////////////////////
						if(VehicleInfo[idcar][vImmob] == 0)      ////
						{                                           ////
							PlayerInfo[playerid][pJacking] = 60;    ////
						}                                           ////
						else if(VehicleInfo[idcar][vImmob] == 1)     ////
						{                                           ////
							PlayerInfo[playerid][pJacking] = 120;   ////
						}                                           ////
						else if(VehicleInfo[idcar][vImmob] == 2)     ////
						{                                           ////
							PlayerInfo[playerid][pJacking] = 180;   ////
						}                                           ////
						else if(VehicleInfo[idcar][vImmob] == 3)     ////
						{                                           ////
							PlayerInfo[playerid][pJacking] = 240;   ////
						}                                           ////
						else if(VehicleInfo[idcar][vImmob] == 4)     ////
						{                                           ////
							PlayerInfo[playerid][pJacking] = 300;   ////
						}                                            ////
						else if(VehicleInfo[idcar][vImmob] == 5)      ////
						{                                           ////
							PlayerInfo[playerid][pJacking] = 360;   ////
						}                                          ////
					}
				}
				else
				{
					GameTextForPlayer(playerid,"~r~Nu ai un set de scule.",2000,3);
					return 1;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina.");
		}
		return 1;
	}
	if (strcmp(cmd, "/admins", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Admini Online:");
   			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[playerid][pAdministrator] == 0)
					{
					    if(PlayerInfo[i][pAdministrator] >= 1 && Hide[i] == 0)
					    {
					        new admtext[64];
					        if(PlayerInfo[i][pAdministrator] == 6) { admtext = "Administrator Principal"; }
					        else if(PlayerInfo[i][pAdministrator] == 5) { admtext = "Manager"; }
					        else if(PlayerInfo[i][pAdministrator] == 4) { admtext = "Administrator Secundar"; }
					        else if(PlayerInfo[i][pAdministrator] == 3) { admtext = "Administrator"; }
							else if(PlayerInfo[i][pAdministrator] == 2)	{ admtext = "Moderator"; }
							else if(PlayerInfo[i][pAdministrator] == 1) { admtext = "Asistent"; }
							else { admtext = "Administrator Principal"; }
							if(AdminDuty[i] == 0)
							{
								if (Hidden[i] == 0)
								{
									format(string, sizeof(string), "(%s) %s / %s (ID: %d) Disponibil: Nu",admtext, GetPlayerNameEx(i),PlayerInfo[i][pForumName], i);
									SendClientMessage(playerid, COLOR_GREY, string);
								}
							}
							else
							{
								if (Hidden[i] == 0)
								{
									format(string, sizeof(string), "(%s) %s / %s (ID: %d) Disponibil: Da",admtext, GetPlayerNameEx(i),PlayerInfo[i][pForumName], i);
									SendClientMessage(playerid, COLOR_GREEN, string);
								}
							}
						}
					}
					else
					{
					if(PlayerInfo[i][pAdministrator] >= 1)
					    {
					        new admtext[64];
					        if(PlayerInfo[i][pAdministrator] == 6) { admtext = "Administrator Principal"; }
					        if(PlayerInfo[i][pAdministrator] == 5) { admtext = "Manager"; }
					        else if(PlayerInfo[i][pAdministrator] == 4) { admtext = "Administrator Secundar"; }
					        else if(PlayerInfo[i][pAdministrator] == 3) { admtext = "Administrator"; }
							else if(PlayerInfo[i][pAdministrator] == 2)	{ admtext = "Moderator"; }
							else if(PlayerInfo[i][pAdministrator] == 1) { admtext = "Asistent"; }
							else { admtext = "Administrator Principal"; }
							if(AdminDuty[i] == 0)
							{
								format(string, sizeof(string), "(%s) %s / %s (ID: %d) Disponibil: Nu",admtext, GetPlayerNameEx(i),PlayerInfo[i][pForumName], i);
								SendClientMessage(playerid, COLOR_GREY, string);
							}
							else
							{
							    format(string, sizeof(string), "(%s) %s / %s (ID: %d) Disponibil: Da",admtext, GetPlayerNameEx(i),PlayerInfo[i][pForumName], i);
								SendClientMessage(playerid, COLOR_GREEN, string);
							}
						}
					}
				}
			}
		}
		return 1;
	}
 	if (strcmp(cmd, "/testers", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "Testers Online:");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pTester] >= 1)
				    {
						if(TesterDuty[i] == 0)
						{
							format(string, sizeof(string), "%s / %s (ID: %d) Disponibil: Nu",GetPlayerNameEx(i), PlayerInfo[i][pForumName], i);
							SendClientMessage(playerid, COLOR_GREY, string);
						}
						else
						{
						    format(string, sizeof(string), "%s / %s (ID: %d) Disponibil: Da",GetPlayerNameEx(i), PlayerInfo[i][pForumName], i);
							SendClientMessage(playerid, COLOR_GREEN, string);
						}
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mic", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	        if(gPlayerLogged[playerid] == 0)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Nu te-ai logat inca !");
	            return 1;
	        }
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        new length = strlen(cmdtext);
	        new bouse = PlayerInfo[playerid][pBizKey];
	        while ((idx < length) && (cmdtext[idx] <= ' ')) {
	            idx++;
	        }
	        new offset = idx;
	        new result[256];
	        while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
	            result[idx - offset] = cmdtext[idx];
	            idx++;
	        }
	        result[idx - offset] = EOS;
	        if(!strlen(result)) {
	            SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /mic [chat]");
	            return 1;
	        }
	        if(Muted[playerid] == 1)
			{
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Deocamdata ai mute.");
	            return 1;
	        }
	        new playername[MAX_PLAYER_NAME];
	        GetPlayerName(playerid,playername,sizeof(playername));
	        for(new i = 0; i < sizeof(Businesses); i++)
			{
	            if (PlayerToPoint(25.0,playerid,Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]))
				{
	                if(GetPlayerVirtualWorld(playerid) == i)
					{
	                    if(Businesses[i][BizType] == 7 || Businesses[i][BizType] == 20)
						{
	                        if(bouse != 255 && strcmp(playername, Businesses[PlayerInfo[playerid][pBizKey]][Owner], true) == 0)
							{
	                            if(PlayerToPoint(100.0,playerid,Businesses[bouse][ExitX],Businesses[bouse][ExitY],Businesses[bouse][ExitZ]))
								{
	                                new maskid = PlayerInfo[playerid][pMaskID];
	                                new str[128];
									if(strlen(result) > MAXLEN)
									{
										new pos = MAXLEN;
									    //while(result[--pos] < ' ') {}
									    if(pos < MAXLEN-1) pos = MAXLEN;
									    if(PlayerInfo[playerid][pMaskuse] == 1)
										{
											format(str, sizeof(str), "[MIC] [Masca_%d]: %.*s ...", maskid, pos, result);
											ProxDetector(60.0, playerid, str,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC);
											format(str, sizeof(str), "[MIC] [Masca_%d]: ... %s", maskid, result[pos]);
											ProxDetector(60.0, playerid, str,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC);
										}
										else
										{
										    format(str, sizeof(str), "[MIC] %s: %.*s ...", GetPlayerNameEx(playerid), pos, result);
										    ProxDetector(60.0, playerid, str,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC);
											format(str, sizeof(str), "[MIC] %s: ... %s", GetPlayerNameEx(playerid), result[pos]);
											ProxDetector(60.0, playerid, str,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC);
										}
										printf("%s",str);
									}
									else
									{
									    if(PlayerInfo[playerid][pMaskuse] == 1)
										{
											format(str, sizeof(str), "[MIC] [Masca_%d]: %s", maskid, result);
											ProxDetector(60.0, playerid, str,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC);
										}
										else
										{
										    format(str, sizeof(str), "[MIC] %s: %s", GetPlayerNameEx(playerid), result);
										    ProxDetector(60.0, playerid, str,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC,COLOR_MIC);
										}
										printf("%s",str);
										return 1;
									}
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }
	    return 1;
	}
 	if(strcmp(cmd, "/changepass", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gPlayerLogged[playerid])
			{
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[128];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /changepass [newpass]");
					return 1;
				}
				if(strfind( result , "," , true ) == -1)
    			{
		   			strmid(PlayerInfo[playerid][pKey], (result), 0, strlen((result)), 128);
					format(string, sizeof(string), "Ti-ai setat parola: %s", (result));
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Simbol invalid.");
				}
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/id", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /id [playerid/partofname]");
				return 1;
			}
			new target;
			target = ReturnUser(tmp);
			new sstring[256];
			if(IsPlayerConnected(target))
			{
			    if(target != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(target, giveplayer, sizeof(giveplayer));
					format(sstring, sizeof(sstring), "ID: (%d) %s | Level: %d",target,giveplayer,PlayerInfo[target][pLevel]);
					SendClientMessage(playerid, COLOR_GREY, sstring);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/acceptdeath", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(Wounded[playerid] == 1)
	    	{
	    	    if(PlayerInfo[playerid][pDeath] > 100) { SendClientMessage(playerid, COLOR_INFO, "Nu poti folosi comanda momentan."); return 1; }
	    	    PlayerInfo[playerid][pHospital] = 1;
	    	    GivePlayerCash(playerid, -150);
				DynamicFactions[2][fBank] += 150;
	            SetPlayerHealth(playerid,0);
	            Wounded[playerid] = 0;
	            PlayerInfo[playerid][pDeath] = 0;
	            SendClientMessage(playerid, COLOR_GREY, "Ai acceptat DT-ul,asa ca ai pierdut 150$ pentru spitalizare.");
	            return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/showid", true) == 0 || strcmp(cmd, "/licenses", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Trebuie sa te loghezi!");
	            return 1;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /showid (/licenses) [playerid/PartOfName]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	            		SendClientMessage(giveplayerid, COLOR_GREEN, "_______Buletin_______");
	            		format(string, sizeof(string), "Nume: %s, Varsta: %d", GetPlayerNameEx(playerid), PlayerInfo[playerid][pAge]);
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		format(string, sizeof(string), "CNP: %d", PlayerInfo[playerid][pSocial]);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        if(PlayerInfo[playerid][pCarLic] == 1)
				        {
						   	format(string, sizeof(string), "Licenta de conducere: Da(%d)", PlayerInfo[playerid][pDemerits]);
						    SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        }
				        else
				        {
				            SendClientMessage(giveplayerid, COLOR_WHITE, "Licenta de conducere: Nu");
				        }
	            		SendClientMessage(giveplayerid, COLOR_GREEN, "____________________________");
	            		if(PlayerInfo[playerid][pSex] == 1)
	            		{
	            			PlayerPlayerActionMessage(playerid,giveplayerid,20.0,"scoate buletinul si il arata lui");
						} else {
							PlayerPlayerActionMessage(playerid,giveplayerid,20.0,"scoate buletinul si il arata lui");
						}
	            		return 1;
			        }
			    }
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/showcarid", true) == 0 || strcmp(cmd, "/showmycarid", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Trebuie sa te loghezi!");
	            return 1;
	        }
	        new vehi = GetPlayerVehicleID(playerid);
	        if(PlayerInfo[playerid][pCarKey] != vehi || PlayerInfo[playerid][pCarKey] != vehi)
	        {
	           SendClientMessage(playerid, COLOR_LIGHTRED, "Aceasta nu este masina ta.");
               return 1;
	        }
	        if(!IsPlayerInAnyVehicle(playerid))
			{
	            SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-un vehicul.");
	            return 1;
			}
			if(GetPlayerVehicleID(playerid) <= 89)
			{
	            return 1;
			}
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /showcarid [playerid/PartOfName]");
			    return 1;
			}
            giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	            		SendClientMessage(giveplayerid, COLOR_GREEN, "_______Talonul masinii_______");
	            		format(string, sizeof(string), "Nume detinator: {F6E007}%s", GetPlayerNameEx(playerid));
	            		SendClientMessage(giveplayerid, COLOR_WHITE, string);
	            		format(string, sizeof(string), "Modelul masinii: {F6E007}%s", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "Serie sasiu: {F6E007}%d", VehicleInfo[vehi][vSasiu]);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Culoarea masinii: {F6E007}%d", VehicleInfo[vehi][vColorOne]);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Numar de imatriculare: {F6E007}%s", VehicleInfo[vehi][vPlate]);
						SendClientMessage(giveplayerid, COLOR_WHITE, string);
						if(VehicleInfo[vehi][vInsurances] >= 1)
	            		{
							format(string, sizeof(string), "Asigurare: {117000}VALIDA", VehicleInfo[vehi][vPlate]);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						else
						{
							format(string, sizeof(string), "Asigurare: {FF0000}INVALIDA", VehicleInfo[vehi][vPlate]);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						if(VehicleInfo[vehi][vVerify] == 0)
						{
							format(string, sizeof(string), "Inspectie tehnica: {FF0000}INVALIDA", VehicleInfo[vehi][vPlate]);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						if(VehicleInfo[vehi][vVerify] == 1)
						{
							format(string, sizeof(string), "Inspectie tehnica: {117000}VALIDA", VehicleInfo[vehi][vPlate]);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						if(VehicleInfo[vehi][vVer1] != 0 && VehicleInfo[vehi][vVer2] != 0 && VehicleInfo[vehi][vVer3] != 0)
						{
							format(string, sizeof(string), "Data inspectiei: {F6E007}%d/%d/%d", VehicleInfo[vehi][vVer1], VehicleInfo[vehi][vVer2], VehicleInfo[vehi][vVer3]);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
						if(VehicleInfo[vehi][vVerifyBy] != 0)
						{
							format(string, sizeof(string), "Mecanic: {F6E007}%s", VehicleInfo[vehi][vVerifyBy]);
							SendClientMessage(giveplayerid, COLOR_WHITE, string);
						}
	            		if(PlayerInfo[playerid][pSex] == 1)
	            		{
	            			PlayerPlayerActionMessage(playerid,giveplayerid,20.0,"scoate talonul si il arata lui");
						} else {
							PlayerPlayerActionMessage(playerid,giveplayerid,20.0,"scoate talonul si il arata lui");
						}
	            		return 1;
			        }
			    }
			}
	    }
	    return 1;
	}

if(strcmp(cmd, "/helicopterchopping", true) == 0)
{

	new vehicleid = GetPlayerVehicleID(playerid);
	new obiect;
	obiect = CreateObject(17951, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	if(PlayerInfo[playerid][pFaction] != 3) return SendClientMessage(playerid, 0x33CCFFAA,"Nu esti membru LSPD !");
	SetObjectMaterial(obiect, 0, 0, "None", "None", 0xFFFFFFFF);
	AttachObjectToVehicle(obiect, vehicleid, -0.00110, 0.58970, -1.03110, 0.00000, 90.00000, 0.00000);
	return 1;
}

	if(strcmp(cmd, "/stats", true) == 0)
	{
  		ShowStats(playerid,playerid);
		return 1;
	}
	
		if(strcmp(cmd, "/ss", true) == 0)
	{
		if(IsPlayerConnected(playerid))
      	{
      	if(ssstatus == 0)
      	{
      	TextDrawShowForPlayer(playerid, ssroleplay);
      	ssstatus = 1;
      	}
      	else if(ssstatus == 1)
      	{
      	TextDrawHideForPlayer(playerid, ssroleplay);
		ssstatus = 0;
      	}
      	}
		return 1;
	}
	

if (strcmp("/buildingrappelling", cmdtext, true) == 0)
{
       if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0x33CCFFAA, "Nu poti folosi aceasta comanda cand esti intr-un vehicol !");
       if(PlayerInfo[playerid][pFaction] != 3) return SendClientMessage(playerid, 0x33CCFFAA,"Nu esti membru LSPD !");
       new Float:Xr, Float:Yr, Float:Zr,Float:Angler;
       SetPlayerHealth(playerid, 400);
       GetPlayerPos(playerid, Xr, Yr, Zr);
       GetPlayerFacingAngle(playerid, Angler);
       SetPlayerPos(playerid, Xr, Yr+5, Zr+5);
       new i=1;while(IsValidObject(i))i++;
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr+5, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr+3, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr+1, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-2, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-5, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-7, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-9, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-10, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-12, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-17, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-25, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-28, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-31, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-34, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-38, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-41, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-45, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-49, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-51, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-57, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-61, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-65, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-69, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-73, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-77, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-80, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-85, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-89, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-90, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-95, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-87, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-100, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-105, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-110, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-115, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-120, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-125, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-130, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-135, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-140, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-145, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-150, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-155, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-160, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-165, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-170, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-175, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-180, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-185, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-190, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-195, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-200, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-205, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-210, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-215, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-220, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-225, 0, 0, Angler);
       ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
   return 1;
}
if (strcmp("/helicopterrappeling", cmdtext, true) == 0)
{
       new vehicleid = GetPlayerVehicleID(playerid);
           if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0x33CCFFAA,"Trebuie sa fii intr-un police maverik pentru a folosi aceasta comanda !");
           if(PlayerInfo[playerid][pFaction] != 3) return SendClientMessage(playerid, 0x33CCFFAA,"Nu esti membru LSPD !");
           if(GetVehicleModel(vehicleid) != 497) return SendClientMessage(playerid, 0x33CCFFAA,"Trebuie sa fii intr-un police maverik pentru a folosi aceasta comanda !");
           {
           RemovePlayerFromVehicle(playerid);
           new Float:Xr, Float:Yr, Float:Zr,Float:Angler;
           GetPlayerPos(playerid, Xr, Yr, Zr);
           SetPlayerPos(playerid, Xr, Yr+5, Zr-5);
       GetPlayerFacingAngle(playerid, Angler);
       SetPlayerHealth(playerid, 1000);
       new i=1;while(IsValidObject(i))i++;
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr+5, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr+3, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr+1, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-2, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-5, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-7, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-9, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-10, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-12, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-17, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-25, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-28, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-31, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-34, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-38, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-41, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-45, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-49, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-51, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-57, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-61, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-65, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-69, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-73, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-77, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-80, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-85, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-89, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-90, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-95, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-87, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-100, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-105, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-110, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-115, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-120, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-125, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-130, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-135, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-140, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-145, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-150, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-155, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-160, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-165, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-170, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-175, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-180, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-185, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-190, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-195, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-200, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-205, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-210, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-215, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-220, 0, 0, Angler);
       rope[i] = CreateObject(19089, Xr, Yr+5, Zr-225, 0, 0, Angler);
       ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
           }
   return 1;
}
if (strcmp("/deleterope", cmdtext, true) == 0)
{
 	if(PlayerInfo[playerid][pFaction] != 3) return SendClientMessage(playerid, 0x33CCFFAA,"Nu esti membru LSPD !");
   for(new i=1;i<MAX_ROPES;i++)
   {
    DestroyObject(i);
    ClearAnimations(playerid);
    SetPlayerHealth(playerid, 100);
   }
        return 1;
}

if (strcmp("/cctv", cmdtext, true) == 0)
        {
      		if(PlayerInfo[playerid][pFaction] == 3)
		{
			if(CopOnDuty[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti ON-DUTY");
				return 1;
			}
   			if(!PlayerToPoint(3.0,playerid,1579.9551,-1634.8647,13.5616))
			{
   				SendClientMessage(playerid, COLOR_GREY, "Nu esti la locul de unde se pot vizualiza camerele");
   				return 1;
			}
                if(Spawned[playerid] == 1)
                {
                    TextDrawShowForPlayer(playerid, cctv0);
                    TextDrawShowForPlayer(playerid, cctv1);
                    TextDrawShowForPlayer(playerid, cctv2);
                    TextDrawShowForPlayer(playerid, cctv3);
                    
                    PlayerMenu[playerid] = 0;
                    TogglePlayerControllable(playerid, 0);
                    ShowMenuForPlayer(CCTVMenu[0], playerid);
                }
                }
                return 1;
        }

        if (strcmp("/cctvoff", cmdtext, true) == 0)
        {
        		if(PlayerInfo[playerid][pFaction] == 3)
		{

            if(CurrentCCTV[playerid] > -1)
            {
                	TextDrawDestroy(cctv0);
                	TextDrawDestroy(cctv1);
                	TextDrawDestroy(cctv2);
                	TextDrawDestroy(cctv3);
                    SetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
                        SetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
                SetPlayerInterior(playerid, LastPos[playerid][LInterior]);
                    TogglePlayerControllable(playerid, 1);
                    KillTimer(KeyTimer[playerid]);
                    SetCameraBehindPlayer(playerid);
                    TextDrawHideForPlayer(playerid, TD);
            CurrentCCTV[playerid] = -1;
            return 1;
				}
			}
        }


	
		if (!strcmp("/makedj",cmd))
    {
        if(PlayerInfo[playerid][pAdministrator] >= 68) return SendClientMessage(playerid, 0x919191FF, "Nu esti ADMIN");
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp)) return SendClientMessage(playerid, 0x919191FF, "{0077FF}[DJ]:{ff0000} FOLOSESTE: /makedj [id]");
        giveplayerid = strval(tmp);
        if(dj == 1) return SendClientMessage(playerid, 0x919191FF, "{ff0000} Jucatorul are permisiunea de a fi DJ");
        if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, 0x919191FF, "{ff0000} Jucatorul nu este conecat.");
        dj = 1;
        SendClientMessage(giveplayerid, 0x919191FF, "{0077FF}[DJ]{ff0000}Ti-au fost acordate drepturile pentru a fi DJ.");

        return 1;
    }
    
	    if (!strcmp("/urldj",cmd))
    {
        if(IsPlayerAdmin(playerid) || dj == 1)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, 476.1028,-14.7950,1003.6953))
            {
                ShowPlayerDialog(playerid,184,DIALOG_STYLE_INPUT,"Alta piesa","{00FF40}Introduceti link-ul piesei, de dorit {FF0000}.mp3","Ok","Anuleaza");
            }
            else SendClientMessage(playerid,0xFFFF0000,"Nu esti la pozitia necesara");
        }
	}

		if(strcmp(cmd, "/takehammer", true) == 0)
	{
		if(PlayerInfo[playerid][pToolkit] == 1) {
		SetPlayerAttachedObject(playerid, 3, 18635, 6); }
		else if(PlayerInfo[playerid][pToolkit] == 0) {
		SendClientMessage(playerid,COLOR_GREY,"Trebuie sa ai un set de scule pentru a folosi aceasta comanda !"); }
		return 1;
	}
	
			if(strcmp(cmd, "/hidetool", true) == 0)
	{
        for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
        {
            if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
        }
		return 1;
	}
	/*
	
	
		if(strcmp(cmd, "/takewrench", true) == 0)
	{
		if(PlayerInfo[playerid][pToolkit] == 1) {
		SetPlayerAttachedObject(playerid, 3, 18633, 6, 0.00000, -1.00000, 0.0000,   90.00000, 180.00000, 0.00000); }
		else if(PlayerInfo[playerid][pToolkit] == 0) {
		SendClientMessage(playerid,COLOR_GREY,"Trebuie sa ai un set de scule pentru a folosi aceasta comanda !"); }
		return 1;
	}
	
			if(strcmp(cmd, "/takecrowbar", true) == 0)
	{
		if(PlayerInfo[playerid][pToolkit] == 1) {
		SetPlayerAttachedObject(playerid, 3, 18634, 6, 0.00000, -1.00000, 0.0000,   90.00000, 180.00000, 0.00000); }
		else if(PlayerInfo[playerid][pToolkit] == 0) {
		SendClientMessage(playerid,COLOR_GREY,"Trebuie sa ai un set de scule pentru a folosi aceasta comanda !"); }
		return 1;
	}
	*/


if(strcmp(cmd, "/siren", true) == 0)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		return SendClientMessage(playerid,COLOR_GREY,"Trebuie sa fii soferul masinii pentru a activa sirena");
	}
	new iVehicleID = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pFaction] == 3)
	{
		if(DynamicCars[iVehicleID][FactionCar] == 3)
		{
			if(VehicleInfo[iVehicleID][vSiren] == 0)
			{
				if(GetVehicleModel(iVehicleID) == 412)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.5036, -0.0888, 0.7361, 0.000000, 0.000000, 0.000000);
				}

				if(GetVehicleModel(iVehicleID) == 426)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.7161, 1.3547, 0.3244, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 421)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.4035, 0.1549, 0.7589, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 415)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.3764, -0.2032, 0.6389, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 541)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.42000, 0.08000, 0.68000, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 560)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.4805, 0.1059, 0.8379, 0.000000, 0.000000, 0.000000);
				}
                if(GetVehicleModel(iVehicleID) == 482)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.5947, 1.8747, 0.2989, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 566)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.66948, 0.83696, 0.35062, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 567)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.7079, 1.7533, 0.1389, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 521)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.0, 0.75, 0.275, 0.000000, 0.000000, 0.000000);
				}
                if(GetVehicleModel(iVehicleID) == 463)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.0, 0.75, 0.275, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 490)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.5716, 0.3289, 1.1439, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 528)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.0, 0.75, 0.275, 0.000000, 0.000000, 0.000000);
				}
			}
			else
			{
				DestroyObject(VehicleInfo[iVehicleID][vSiren]);
				VehicleInfo[iVehicleID][vSiren] = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_GREY,"Poti monta sirena decat pe masinile de la LSPD.");
	}
    if(PlayerInfo[playerid][pFaction] == 6)
	{
		if(DynamicCars[iVehicleID][FactionCar] == 6)
		{
			if(VehicleInfo[iVehicleID][vSiren] == 0)
			{
				if(GetVehicleModel(iVehicleID) == 426)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, -0.004999, 0.135000, 1.034999, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 405)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.434999, 0.514999, 0.234999, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 470)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.414999, 0.494999, 0.384999, 0.000000, 0.000000, 0.000000);
				}
				if(GetVehicleModel(iVehicleID) == 580)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.509999, 0.754999, 0.469999, 0.000000, 0.000000, 0.000000);
				}
			}
			else
			{
				DestroyObject(VehicleInfo[iVehicleID][vSiren]);
				VehicleInfo[iVehicleID][vSiren] = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_GREY,"Poti monta sirena decat pe masinile de la GOV.");
	}
	if(PlayerInfo[playerid][pFaction] == 2)
	{
		if(DynamicCars[iVehicleID][FactionCar] == 2)
		{
			if(VehicleInfo[iVehicleID][vSiren] == 0)
			{
				if(GetVehicleModel(iVehicleID) == 490)
				{
					VehicleInfo[iVehicleID][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(VehicleInfo[iVehicleID][vSiren], iVehicleID, 0.589999, 1.189999, 0.574999, 0.000000, 0.000000, 0.000000);
				}
			}
			else
			{
				DestroyObject(VehicleInfo[iVehicleID][vSiren]);
				VehicleInfo[iVehicleID][vSiren] = 0;
			}
		}
		else SendClientMessage(playerid,COLOR_GREY,"Poti monta sirena decat pe masinile de la ASGH.");
	}
	return 1;
}



	 	if(strcmp(cmd, "/earthquakerestart", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdministrator] >= 10) {
			GameModeRestart();
            SendRconCommand("loadfs quake");
			}
			else
			{ SendClientMessage(playerid, COLOR_GRAD2, "Nu esti autorizat sa folosesti comanda!"); }
		}
		return 1;
	}

	if(strcmp(cmd, "/earthquakeeffect", true) == 0)
{
    if (PlayerInfo[playerid][pAdministrator] >= 10)
    {
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	if(IsPlayerConnected(i))
	{
	PlayAudioStreamForPlayer(i, "http://k003.kiwi6.com/hotlink/s7peaz62xk/Alarm_sound_effects_-_modern_alarm_2.mp3");
	SetPlayerDrunkLevel (i, 4000);
	ApplyAnimation(i, "PARACHUTE", "FALL_skyDive_DIE",4,0,0,0,1,0);
	}
	}
 	}

    return 1;
}


	
	if(strcmp(cmd, "/fillup", true) == 0)
	{
        new vehicle = GetPlayerVehicleID(playerid);
	    if(IsPlayerConnected(playerid))
	    {
            if(PlayerInfo[playerid][pFuel] == 1)
		    {
		        if(Fuel[vehicle] < 81)
		        {
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ti-ai umplut canistra,care valoreaza 20 la suta din cantitatea motorului.");
				    PlayerInfo[playerid][pFuel] = 0;
					Fuel[vehicle] += 20;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Nu ai o canistra.");
				return 1;
		    }
		}
		return 1;
	}
	if(strcmp(cmd, "/eject", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        new State;
	        if(IsPlayerInAnyVehicle(playerid))
	        {
         		State=GetPlayerState(playerid);
		        if(State!=PLAYER_STATE_DRIVER)
		        {
		        	SendClientMessage(playerid, COLOR_GREY, "Nu esti soferul masinii");
		            return 1;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /eject [playerid/partofname]");
					return 1;
				}
				new playa;
				playa = ReturnUser(tmp);
				new test;
				test = GetPlayerVehicleID(playerid);
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
			    		if(playa == playerid)
				    	{
        					SendClientMessage(playerid, COLOR_GREY, "Nu poti sa te scoti pe tine singur din masina.");
        					return 1;
				    	}
				        if(IsPlayerInVehicle(playa,test))
				        {
							PlayerPlayerActionMessage(playerid,playa,20.0,"deschide usa si il arunca pe");
							RemovePlayerFromVehicle(playa);
							TogglePlayerControllable(playa, 1);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este in vehiculul tau.");
						    return 1;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/charity", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /charity [amount]");
				SendClientMessage(playerid, COLOR_LIGHTRED, "Atentie!Nu donezi pentru admin sau alte facilitati.");
				return 1;
			}
			new moneys;
			moneys = strval(tmp);
			if(moneys < 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Suma invalida.");
				return 1;
			}
			if(GetPlayerCash(playerid) < moneys)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
				return 1;
			}
			PlayerInfo[playerid][pFairMoney] = 1;
		    SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
			GivePlayerCash(playerid, -moneys);
			format(string, sizeof(string), "[WARNING] %s a donat $%d",GetPlayerNameEx(playerid), moneys);
			AdministratorMessage(COLOR_LIGHTRED,string,1);
			PayLog(string);
		}
		return 1;
	}
	if(strcmp(cmd, "/stop", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Wounded[playerid] == 1)
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Nu poti face asta in acest moment!");
	            return 1;
	        }
	        if(PlayerInfo[playerid][pJackingtrunk] != 0)
	        {
	            TogglePlayerControllable(playerid, 1);
	            PlayerInfo[playerid][pJackingtrunk] = 0;
	            PlayerInfo[playerid][pJackingtrunkID] = 0;
	            ClearAnimations(playerid);
 				LoopingAnim(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
 				gPlayerUsingLoopingAnim[playerid] = 0;
 				IsJacking[playerid] = 0;
 				ClearAnimations(playerid);
	        }
	        if(PlayerInfo[playerid][pJacking] != 0)
			{
			    PlayerInfo[playerid][pJacking] = 0;
			    TogglePlayerControllable(playerid, 1);
	            ClearAnimations(playerid);
 				LoopingAnim(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
 				gPlayerUsingLoopingAnim[playerid] = 0;
 				IsJacking[playerid] = 0;
 				ClearAnimations(playerid);
			    if( IsPlayerInAnyVehicle( playerid ) )
				{
					RemoveDriverFromVehicle(playerid);
				}
			}
	        if(PlayerInfo[playerid][pJackingDoor] != 0)
			{
			    PlayerInfo[playerid][pJackingDoor] = 0;
			    PlayerInfo[playerid][pJackingDoorID] = 0;
			    TogglePlayerControllable(playerid, 1);
 				LoopingAnim(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
 				gPlayerUsingLoopingAnim[playerid] = 0;
 				IsJacking[playerid] = 0;
	            ClearAnimations(playerid);
			}
    	}
    	return 1;
	}
	if(strcmp(cmd, "/stopanim", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		 	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	        {
		        if(Wounded[playerid] == 1)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "Nu poti face asta in acest moment!");
		            return 1;
		        }
		        else
		        {
		            ClearAnimations(playerid);
	 				LoopingAnim(giveplayerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	 				gPlayerUsingLoopingAnim[playerid] = 0;
	    			return 1;
				}
    		}
    	}
    	return 1;
	}
	if(strcmp(cmd, "/abizid", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			for(new i = 0; i < sizeof(Businesses); i++)
			{
			    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pAdministrator] == 4)
		  		{
					if(PlayerToPoint(3.0,playerid,Businesses[i][EnterX], Businesses[i][EnterY], Businesses[i][EnterZ]))
					{
			 			if(GetPlayerVirtualWorld(playerid) == Businesses[i][EnterWorld])
			    		{
   							format(string, sizeof(string), "* You are standing on biz id - %d", i);
   							SendClientMessage(playerid, COLOR_GRAD1, string);
						}
					}
				}
			}
    	}
    	return 1;
	}
	if(strcmp(cmd, "/clearanims", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		 	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	        {
		        if(Wounded[playerid] == 1)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "Nu poti face acest lucru chiar acum!");
		            return 1;
		        }
		        else
		        {
		            ClearAnimations(playerid);
	 				ApplyAnimation(giveplayerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	 				gPlayerUsingLoopingAnim[playerid] = 0;
	    			return 1;
				}
    		}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/clearanim", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		 	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	        {
		        if(Wounded[playerid] == 1)
		        {
		            SendClientMessage(playerid, COLOR_WHITE, "Nu poti face acest lucru chiar acum.");
		            return 1;
		        }
		        else
		        {
		            ClearAnimations(playerid);
	 				ApplyAnimation(giveplayerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	 				gPlayerUsingLoopingAnim[playerid] = 0;
	    			return 1;
				}
    		}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/coin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
     		GivePlayerCash(playerid,-1);
			new coin = random(2)+1;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new maskid = PlayerInfo[playerid][pMaskID];
			new coinname[20];
			if(coin == 1)
			{
				coinname = "cap";
			}
			else
			{
				coinname = "pajura";
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
   				format(string, sizeof(string), "* [Masca_%d] arunca cu banul si cade %s", maskid,coinname);
				ProxDetector(15.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
			}
			else
			{
				format(string, sizeof(string), "* %s arunca cu banul si cade %s", sendername,coinname);
				ProxDetector(15.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/dice", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(6)+1;
			if(Dice[playerid] == 1)
			{
				format(string, sizeof(string), "arunca cu zarul si cade %d **",dice);
				PlayerActionnMessage(playerid,15.0,string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu ai zaruri.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/afrisk", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
		{
	        tmp = strtok(cmdtext,idx);
	        if (!strlen(tmp)) {
	            SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /afrisk [playerid");
	            return 1;
	        }
	        giveplayerid = ReturnUser(tmp);
	        if (giveplayerid == INVALID_PLAYER_ID) {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
	            return 1;
	        }
	        new sweapon, sammo;
	        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	        format(string, sizeof(string), "%s are urmatoarele arme:", giveplayer);
	        SendClientMessage(playerid, COLOR_LIGHTRED, string);
	        for (new i=0; i<9; i++)
			{
	            GetPlayerWeaponData(giveplayerid, i, sweapon, sammo);
	            if(sweapon != 0)
				{
				    new weaponName[128];
					GetWeaponName(sweapon,weaponName,255);
	                format(string, sizeof(string), "%d: %s(%d) (%d)", i, weaponName, sweapon, sammo);
	                SendClientMessage(playerid, COLOR_GRAD1, string);
	            }
	        }
	        return 1;
	    }
	}
 	if(strcmp(cmd, "/frisk", true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /frisk [playerid/partofname]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
   					if(giveplayerid == playerid)
				    {
        				SendClientMessage(playerid, COLOR_GREY, "Nu te poti controla singur.");
        				return 1;
				    }
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
				        SendClientMessage(playerid, COLOR_GREEN, "_________________________________");
				        format(string, sizeof(string), "** %s **", GetPlayerNameEx(giveplayerid));
				        SendClientMessage(playerid, COLOR_WHITE, string);
						if(PlayerInfo[giveplayerid][pCash] > 0)
						{
							format(string, sizeof(string), "[Frisk] Bani gasiti: %d", PlayerInfo[giveplayerid][pCash]);
							SendClientMessage(playerid, COLOR_LIGHTRED, string);
						}
					    if(PlayerInfo[giveplayerid][pMaterials] > 0)
						{
							format(string, sizeof(string), "[Frisk] Materiale gasite: %d", PlayerInfo[giveplayerid][pMaterials]);
							SendClientMessage(playerid, COLOR_LIGHTRED, string);
						}
						else
						{
							SendClientMessage(playerid, COLOR_LIGHTRED, "[Frisk] Nici un material gasit.");
						}
						new Player_Weapons[13];
						new Player_Ammos[13];
						new i;

						for(i = 1;i <= 12;i++)
						{
							GetPlayerWeaponData(giveplayerid,i,Player_Weapons[i],Player_Ammos[i]);
							if(Player_Weapons[i] != 0)
							{
								new weaponName[128];
								GetWeaponName(Player_Weapons[i],weaponName,255);
								format(string,255,"[Frisk] Arme gasite: %s",weaponName);
								SendClientMessage(playerid,COLOR_LIGHTRED,string);
							}
						}
						SendClientMessage(playerid, COLOR_GREEN, "_________________________________");
						PlayerPlayerActionMessage(playerid,giveplayerid,15.0,"il perchezitioneaza pe");
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine.");
					    return 1;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ!");
	            return 1;
	        }
		}
	    return 1;
 	}
	if(!strcmp(cmdtext, "/smoke", true)) // By Ellis
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Trebuie sa te loghezi!");
	            return 1;
	        }
	        if(IsSmoking[playerid] == 0)
	        {
	            if(PlayerInfo[playerid][pLighter] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Nu ai cu ce s aprinzi tigara!");
	                return 1;
	            }
	            if(PlayerInfo[playerid][pCigarettes] == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Nu ai o tigara pentru a fuma!");
	                return 1;
	            }
			    PlayerInfo[playerid][pLighter] -= 1;
			    PlayerInfo[playerid][pCigarettes] -= 1;
			    if(PlayerBadges[playerid][FirstSmoke] == 0)
				{
					PlayerBadges[playerid][FirstSmoke] = 1;
					InfoForPlayer(playerid, "~b~~w~ Eu - ~b~Sunt Fumator!!");
					SaveBadges(playerid);
				}
			    if(PlayerInfo[playerid][pSex] == 1)
			    {
					PlayerActionMessage(playerid,15.0,"scoate o tigara si o bricheta din buzunar dupa care o aprinde.");
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
				    SendClientMessage(playerid, COLOR_WHITE, "Scrie /dropsmoke pentru a arunca tigara pe jos");
				    IsSmoking[playerid] = 1;
			    } else {
					PlayerActionMessage(playerid,15.0,"scoate o tigara si o bricheta din buzunar dupa care o aprinde.");
				    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
				    SendClientMessage(playerid, COLOR_WHITE, "Scrie /dropsmoke pentru a arunca tigara pe jos.");
				    IsSmoking[playerid] = 1;
				    return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Deja fumezi!");
			    return 1;
			}
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/dropsmoke", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Trebuie sa te loghezi!");
	            return 1;
	        }
	        if(IsSmoking[playerid] > 0)
	        {
	            IsSmoking[playerid] = 0;
				PlayerActionMessage(playerid,15.0,"arunca tigara pe jos.");
				ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	            if(UsingSmokeAnim[playerid] == 1)
	            { ClearAnimations(playerid); }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nu fumezi!");
	            return 1;
	        }
		}
		return 1;
	}
	if(strcmp(cmd, "/tie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pLevel] >= 2)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /tie [playerid/partofname]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    if(PlayerTied[giveplayerid] == 1)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Playerul este deja legat.");
					        return 1;
					    }
	        			if(PlayerCuffed[giveplayerid] == 1)
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "Playerul este incatusat.");
			            	return 1;
			        	}
   				    	if(giveplayerid == playerid)
				    	{
        					SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi franghia momentan.");
        					return 1;
				    	}
						if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new car = GetPlayerVehicleID(playerid);
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
						    {
              					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								PlayerPlayerActionMessage(playerid,giveplayerid,20.0, "il leaga de maini si de picioare pe ");
								TogglePlayerControllable(giveplayerid, 0);
								PlayerTied[giveplayerid] = 1;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Playerul nu este in vehicul sau tu nu esti soferul.");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine.");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu ai level 2!");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/untie", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pLevel] >= 3)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /untie [playerid/partofname]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
    					if(giveplayerid == playerid)
				    	{
        					SendClientMessage(playerid, COLOR_GREY, "Nu poti folosi comanda momentan.");
        					return 1;
				    	}
					    if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
							if(PlayerTied[giveplayerid])
							{
           						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								TogglePlayerControllable(giveplayerid, 1);
								PlayerTied[giveplayerid] = 0;
								PlayerPlayerActionMessage(playerid,giveplayerid,20.0, "il dezleaga pe ");
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este legat.");
							    return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine.");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu ai level 2!");
			}
		}//not connected
		return 1;
	}
	// INVENTORY
    if(strcmp(cmd, "/inventory", true) == 0)
    {
	  ShowInventory(playerid);
	  return 1;
	}
    if(strcmp(cmd, "/resetinventory", true) == 0)
    {
	  ResetPlayerInventory(playerid);
	  SendClientMessage(playerid, COLOR_GREY, "Ti-ai resetat inventarul cu succes.");
	  return 1;
	}
	if(strcmp(cmd, "/searchwallet", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
     		if(PlayerInfo[playerid][pLevel] < 3)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nu ai nivelul necesar pentru a face asta.");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /searchwallet [playerid/partofname]");
			    return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerTied[giveplayerid] != 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Player-ul trebuie sa fie legat.");
			            return 1;
			        }
			        if(ProxDetectorS(5.0, playerid, giveplayerid))
			        {
			            GetPlayerName(playerid, sendername, sizeof(sendername));
			            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            format(string, sizeof(string), "%s has %d$ at his wallet", giveplayer, GetPlayerCash(giveplayerid));
			            SendClientMessage(playerid, COLOR_WHITE, string);
			            return 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Player-ul nu se afla langa tine.");
			            return 1;
			        }
			    }
			}
	    }
	    return 1;
	}
 	if(strcmp(cmd, "/shownotes", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "|_____________Carte de note_____________|");
            format(string, sizeof(string), "1| %s", PlayerInfo[playerid][pNote1]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "2| %s", PlayerInfo[playerid][pNote2]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "3| %s", PlayerInfo[playerid][pNote3]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "4| %s", PlayerInfo[playerid][pNote4]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            format(string, sizeof(string), "5| %s", PlayerInfo[playerid][pNote5]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "_____________________________________");
            GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerActionMessage(playerid,15.0,"scoate cartea de note si o citeste.");
        }
        return 1;
    }
    if(strcmp(cmd, "/deletenote", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new x_nr[256];
            x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /deletenote [slot(1-5)]");
				return 1;
			}
			if(strcmp(x_nr, "1", true) == 0)
			{
			    if(PlayerInfo[playerid][pNote1s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote1], "None", 0, strlen("None"), 255);
			    	PlayerInfo[playerid][pNote1s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Nota (slot 1) a fost stearsa cu succes.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nu ai o nota pe slotul 1.");
				}
			}
			else if(strcmp(x_nr, "2", true) == 0)
			{
			    if(PlayerInfo[playerid][pNote2s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote2], "None", 0, strlen("None"), 255);
			    	PlayerInfo[playerid][pNote2s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Nota (slot 2) a fost stearsa cu succes.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nu ai o nota pe slotul 2.");
				}
			}
			else if(strcmp(x_nr, "3", true) == 0)
			{
			    if(PlayerInfo[playerid][pNote3s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote3], "None", 0, strlen("None"), 255);
			    	PlayerInfo[playerid][pNote3s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Nota (slot 3) a fost stearsa cu succes.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nu ai o nota pe slotul 3.");
				}
			}
			else if(strcmp(x_nr, "4", true) == 0)
			{
			    if(PlayerInfo[playerid][pNote4s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote4], "None", 0, strlen("None"), 255);
			    	PlayerInfo[playerid][pNote4s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Nota (slot 4) a fost stearsa cu succes.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nu ai o nota pe slotul 4.");
				}
			}
			else if(strcmp(x_nr, "5", true) == 0)
			{
			    if(PlayerInfo[playerid][pNote5s] == 1)
			    {
			    	strmid(PlayerInfo[playerid][pNote5], "None", 0, strlen("None"), 255);
			    	PlayerInfo[playerid][pNote5s] = 0;
			    	SendClientMessage(playerid, COLOR_WHITE, "Nota (slot 5) a fost stearsa cu succes.");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nu ai o nota pe slotul 5.");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "ERROR: Slot invalid.");
			    return 1;
			}
        }
        return 1;
    }
    if(strcmp(cmd, "/createnote", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(length > 60)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Error: Nota este prea lunga.");
			    return 1;
			}
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /createnote [text]");
				return 1;
			}
			if(strfind(result,"=",true) != -1) return SendClientMessage(playerid,COLOR_WHITE,"Nu poti folosi '=' intr-o nota");
			if(PlayerInfo[playerid][pNote1s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote1], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote1s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Nota a fost creeata cu succes.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote2s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote2], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote2s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Nota a fost creeata cu succes.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote3s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote3], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote3s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Nota a fost creeata cu succes.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote4s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote4], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote4s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Nota a fost creeata cu succes.");
			    return 1;
			}
			else if(PlayerInfo[playerid][pNote5s] == 0)
			{
			    strmid(PlayerInfo[playerid][pNote5], result, 0, strlen(result), 255);
			    PlayerInfo[playerid][pNote5s] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "Nota a fost creeata cu succes.");
			    return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Error: Nu mai ai pagini disponibile in carnetelul de note.");
			    return 1;
			}
        }
        return 1;
    }
    if(strcmp(cmd, "/givenote", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /givenote [playerid/partofname] [note id]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        new Float:x, Float:y, Float:z;
           			GetPlayerPos(giveplayerid,x,y,z);
			        if(!PlayerToPoint(5,playerid, x, y, z))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Player-ul nu este langa tine.");
			            return 1;
			        }
			        new x_nr[256];
			        x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /givenote [playerid/partofname] [note id]");
						return 1;
					}
					if(strcmp(x_nr ,"1", true) == 0)
					{
					    if(PlayerInfo[playerid][pNote1s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnet de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnet de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnet de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnet de note de la(ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnet de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Error: Carnetelul player-ului este plin.");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Error: Nu ai o nota in slotul 1.");
					        return 1;
					    }
					}
					else if(strcmp(x_nr, "2", true) == 0)
					{
					    if(PlayerInfo[playerid][pNote2s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetelul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetelul tau de note lui  (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetelul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetelul tau de note lui  (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetelul tau de note lui  (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Error: Carnetelul de note al player-ului este plin.");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Error: Nu ai o nota pe slotul 2.");
					        return 1;
					    }
					}
					else if(strcmp(x_nr, "3", true) == 0)
					{
					    if(PlayerInfo[playerid][pNote3s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Error: That players notebook is full");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Error: You do not have a note at slot 3");
					        return 1;
					    }
					}
					else if(strcmp(x_nr, "4", true) == 0)
					{
					    if(PlayerInfo[playerid][pNote4s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Error: That players notebook is full");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Error: You do not have a note at slot 4");
					        return 1;
					    }
					}
					else if(strcmp(x_nr, "5", true) == 0)
					{
					    if(PlayerInfo[playerid][pNote5s] == 1)
					    {
					        if(PlayerInfo[giveplayerid][pNote1s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote1s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote2s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote3s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote4s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
					        {
					            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
					            PlayerInfo[giveplayerid][pNote5s] = 1;
					            GetPlayerName(playerid, sendername, sizeof(sendername));
					            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					            format(string, sizeof(string), "I-ai dat carnetul tau de note lui (ID:%d) %s", giveplayerid, giveplayer);
					            SendClientMessage(playerid, COLOR_WHITE, string);
					            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
					            SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Error: That players notebook is full");
					            return 1;
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Error: You do not have a note at slot 5");
					        return 1;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Error: Wrong note ID");
					    return 1;
					}
			    }
			}
        }
        return 1;
    }
 	if(strcmp(cmd, "/detonatebomb", true) == 0)
    {
    	if(IsPlayerConnected(playerid))
	    {
        	if(Planted[playerid] == 1)
        	{
            	if(!IsPlayerInAnyVehicle(playerid))
            	{
                	new Float:bx[MAX_PLAYERS], Float:by[MAX_PLAYERS], Float:bz[MAX_PLAYERS];

					GetObjectPos(C4[playerid], bx[playerid], by[playerid], bz[playerid]);
                	if(PlayerToPoint(360, playerid, bx[playerid], by[playerid], bz[playerid]))
                	{
		            	GivePlayerWeapon(playerid, 40, 1);
		            	ClearAnimations(playerid);
		            	ApplyAnimation(playerid,"PED","bomber",4.0,0,0,0,0,1000);
		            	SetTimerEx("Explode", 1200, 0, "i", playerid);
						TextDrawHideForPlayer(playerid, Meter1[playerid]);
						TextDrawHideForPlayer(playerid, Meter2[playerid]);
						TextDrawHideForPlayer(playerid, Meter3[playerid]);
						KillTimer(UpdateMeterTimer[playerid]);
		            	return 1;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Out Of Range", 2000, 1);
						ClearAnimations(playerid);
		            	ApplyAnimation(playerid,"PED","bomber",4.0,0,0,0,0,1000);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/blindfold", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /blindfold [playerid/partofname]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid != INVALID_PLAYER_ID)
   			{
		    	if(giveplayerid == playerid)
   			    {
					SendClientMessage(playerid, COLOR_GREY, "Nu il poti lega la ochi!");
					return 1;
				}
				if(PlayerCuffed[playerid] == 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nu il poti lega daca e incatusat.");
				    return 1;
				}
				if(PlayerTazed[playerid] == 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nu il poti lega daca este sub efectul tazerului.");
				    return 1;
				}
				if(PlayerTied[playerid] == 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Nu poti face acest lucru cat timp esti legat.");
				    return 1;
				}
				if(PlayerTied[giveplayerid] == 1)
				{
 					if(GetDistanceBetweenPlayers(playerid,giveplayerid) < 5)
					{
 						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
	       				SetPlayerCameraPos(giveplayerid, -833.5241,-1358.8575,86.9054);
	       				PlayerPlayerActionMessage(playerid,giveplayerid,30.0, "ia o carpa groasa,urmand sa i-o puna peste ochii lui");
      					Blindfold[giveplayerid] = SetTimerEx("BlindfoldTimer", 300000, 0, "i", giveplayerid);
	   		    		return SetPlayerCameraLookAt(giveplayerid, -830.8118,-1360.3612,87.0289);
					}
					else
					{
					    return SendClientMessage(playerid, COLOR_GREY, "That player is not in range");
					}
				}
				else if(PlayerCuffed[giveplayerid] == 1)
				{
 					if(GetDistanceBetweenPlayers(playerid,giveplayerid) < 5)
					{
 						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
	       				SetPlayerCameraPos(giveplayerid, -833.5241,-1358.8575,86.9054);
						PlayerPlayerActionMessage(playerid,giveplayerid,30.0, "ia o carpa groasa,urmand sa i-o puna peste ochii lui");
      					Blindfold[giveplayerid] = SetTimerEx("BlindfoldTimer", 300000, 0, "i", giveplayerid);
	   		    		return SetPlayerCameraLookAt(giveplayerid, 2000,-2000,2000);
					}
					else
					{
					    return SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine.");
					}
				}
			}
			else
			{
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unblindfold", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /unblindfold [playerid]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(giveplayerid != INVALID_PLAYER_ID)
   			{
    			if(GetDistanceBetweenPlayers(playerid,giveplayerid) < 5)
				{
    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerPlayerActionMessage(playerid,giveplayerid,30.0, "ii da carpa jos lui");
 					KillTimer(Blindfold[giveplayerid]);
   					return SetCameraBehindPlayer(giveplayerid);
				}
			}
			else
   			{
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/mask", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(PlayerInfo[playerid][pMask] == 0)
	   	 	{
	   		     SendClientMessage(playerid, COLOR_GREY, "Nu ai o masca!");
	   		     return 1;
	   		}
	   		if(PlayerInfo[playerid][pLevel] < 1)
	    	{
	       		SendClientMessage(playerid, COLOR_GREY, "Nu ai level 2 pentru a cumpara o masca!");
	        	return 1;
	    	}
	    	if(PlayerInfo[playerid][pMaskuse] == 0)
	    	{
				for(new i = 0; i < MAX_PLAYERS; i++)
   				{
   		    		if(IsPlayerConnected(i))
   		    		{
   		    		    if(PlayerInfo[playerid][pBandana] == 1) { SetPlayerAttachedObject(playerid,HELMET,18912,2,0.1,0.0,0.0,90.0,-180.0,90.0,1.2,1.2,1.2); }
   		    		    if(PlayerInfo[playerid][pBandana] == 2) { SetPlayerAttachedObject(playerid,HELMET,18908,2,0.1,0.0,0.0,90.0,-180.0,90.0,1.2,1.2,1.2); }
        				ShowPlayerNameTagForPlayer(i, playerid, 0);
        				PlayerInfo[playerid][pMaskuse] = 1;
        				GameTextForPlayer(playerid, "~p~Ti-ai pus masca.", 3000, 5);
					}
				}
				new stringmask[128];
				format(stringmask, sizeof(stringmask), "Masca %d",PlayerInfo[playerid][pMaskID]);
				ShowMasca[playerid] = Create3DTextLabel(stringmask, 0xBFC0C2FF, 30.0, 40.0, 50.0, 20.0, 0);
				Attach3DTextLabelToPlayer(ShowMasca[playerid], playerid, 0.0, 0.0, 0.1);
			}
			else
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
   		    		if(IsPlayerConnected(i))
   		    		{
   		    		    if(PlayerInfo[playerid][pBandana] == 1) { SetPlayerAttachedObject(playerid,HELMET,18912,2,0.0,0.0,0.0,90.0,-180.0,90.0,1.0,1.0,1.0); }
   		    		    if(PlayerInfo[playerid][pBandana] == 2) { SetPlayerAttachedObject(playerid,HELMET,18908,2,0.0,0.0,0.0,90.0,-180.0,90.0,1.0,1.0,1.0); }
        				ShowPlayerNameTagForPlayer(i, playerid, 1);
        				PlayerInfo[playerid][pMaskuse] = 0;
        				GameTextForPlayer(playerid, "~p~Ti-ai dat masca jos.", 3000, 5);
					}
				}
				Delete3DTextLabel(ShowMasca[playerid]);
			}
			
			// ================================================================================================
			

			

		}
		return 1;
	}
	
 	if(strcmp(cmd, "/maskon", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(FakeMask[playerid] == 0)
	   	 	{
	   		     SendClientMessage(playerid, COLOR_GREY, "Nu ai o masca!");
	   		     return 1;
	   		}
	   		if(PlayerInfo[playerid][pLevel] < 1)
	    	{
	       		SendClientMessage(playerid, COLOR_GREY, "Nu ai level 2!");
	        	return 1;
	    	}
	    	if(PlayerInfo[playerid][pMaskuse] == 0)
	    	{
				for(new i = 0; i < MAX_PLAYERS; i++)
   				{
   		    		if(IsPlayerConnected(i))
   		    		{
        				ShowPlayerNameTagForPlayer(i, playerid, 0);
        				PlayerInfo[playerid][pMaskuse] = 1;
        				GameTextForPlayer(playerid, "~p~Ti-ai pus masca.", 3000, 5);
					}
				}
				new stringmask[128];
				format(stringmask, sizeof(stringmask), "Masca %d",PlayerInfo[playerid][pMaskID]);
				ShowMasca[playerid] = Create3DTextLabel(stringmask, 0xBFC0C2FF, 30.0, 40.0, 50.0, 20.0, 0);
				Attach3DTextLabelToPlayer(ShowMasca[playerid], playerid, 0.0, 0.0, 0.1);
			}
			else
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
   		    		if(IsPlayerConnected(i))
   		    		{
        				ShowPlayerNameTagForPlayer(i, playerid, 1);
        				PlayerInfo[playerid][pMaskuse] = 0;
        				GameTextForPlayer(playerid, "~p~Ti-ai dat jos masca.", 3000, 5);
					}
				}
				Delete3DTextLabel(ShowMasca[playerid]);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/imidauadmincapot69", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /imidauadmincapot69 [playerid/partofname] [adminlevel]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);

			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						PlayerInfo[para1][pAdministrator] = level;
						format(string, sizeof(string), "*Functia de administrator ti-a fost acordata de %s,level  %d", GetPlayerNameEx(playerid),level);
						SendClientMessage(para1, COLOR_WHITE, string);
						printf("%s", string);
						format(string, sizeof(string), "* L-ai promovat pe %s ca administrator level %d", GetPlayerNameEx(para1),level);
						SendClientMessage(playerid, COLOR_ADMINCMD, string);
		                // LOG IT HAHA
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new y, m, d;
						new hh,mi,s;
						getdate(y,m,d);
						gettime(hh,mi,s);
						format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /makeadmin # l-a facut pe %s level %d admin.",d,m,y,hh,mi,s,sendername,giveplayer,level);
						AbuseLog(string);
					}
				}
		}
		return 1;
	}
	
	if(strcmp(cmd, "/house", true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house [item]");
				SendClientMessage(playerid, COLOR_WHITE, "info | putgun (1-3) | Takegun (1-3) ");
				SendClientMessage(playerid, COLOR_WHITE, "takemats | putmats | takeseeds | putseeds | setpass | lock");
				SendClientMessage(playerid, COLOR_WHITE, "putclothes | takeclothes | takemoney | putmoney");
				return 1;
			}
			if(strcmp(x_nr, "info", true) == 0)
			{
			    new bouse = PlayerInfo[playerid][pHouseKey];
			    if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
			    {
			        if(Houses[bouse][hBox] == 0)
			        {
				        SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
				        return 1;
			        }
     				if(ReduceTime[playerid] == 1)
			        {
				        SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti 4 secunde pentru a folosi aceasta comanda.");
				        return 1;
			        }
			        if(GetPlayerVirtualWorld(playerid) == bouse)
					{
			            PlayerActionMessage(playerid,15.0,"deschide seiful, urmand sa verifice ce este in el.");
			            ReduceTime[playerid] = 1;
			            SetTimerEx("ReduceTimer", 4000, false, "i", playerid);
			            SendClientMessage(playerid, COLOR_GREEN, "_______ Seiful casei _______");
			            new gunname[100];
			            if(Houses[bouse][hGun1] != 0)
						{
			                GetWeaponName(Houses[bouse][hGun1], gunname, sizeof(gunname));
			                format(string, sizeof(string), "| Slot 1: %s (Gloante: %i)", gunname, Houses[bouse][hGunAmmo1]);
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            else
						{
			                format(string, sizeof(string), "| Slot 1: Gol");
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            if(Houses[bouse][hGun2] != 0)
						{
			                GetWeaponName(Houses[bouse][hGun2], gunname, sizeof(gunname));
			                format(string, sizeof(string), "| Slot 2: %s (Gloante: %i)", gunname, Houses[bouse][hGunAmmo2]);
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            else
						{
			                format(string, sizeof(string), "| Slot 2: Gol");
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            if(Houses[bouse][hGun3] != 0)
						{
			                GetWeaponName(Houses[bouse][hGun3], gunname, sizeof(gunname));
			                format(string, sizeof(string), "| Slot 3: %s (Gloante: %i)", gunname, Houses[bouse][hGunAmmo3]);
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            else
						{
			                format(string, sizeof(string), "| Slot 3: Gol");
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            if(Houses[bouse][Money] != 0)
						{
			                format(string, sizeof(string), "| Bani: %d ", Houses[bouse][Money]);
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            else
						{
			                format(string, sizeof(string), "| Bani: $0");
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            if(Houses[bouse][Drugs] != 0)
						{
			                format(string, sizeof(string), "| Seminte: %d ", Houses[bouse][Drugs]);
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            else
						{
			                format(string, sizeof(string), "| Droguri: 0");
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            if(Houses[bouse][Materials] != 0)
						{
			                format(string, sizeof(string), "| Materiale: %d ", Houses[bouse][Materials]);
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            else
						{
			                format(string, sizeof(string), "| Materiale: 0");
			                SendClientMessage(playerid, COLOR_WHITE, string);
			            }
			            SendClientMessage(playerid, COLOR_GREEN, "____________________");
			       	}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Nu esti in nici-o casa.");
			        return 1;
			    }
			}
			else if(strcmp(x_nr, "drug", true) == 0)
			{
			    new bouse = PlayerInfo[playerid][pHouseKey];
			    if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
			    {
			        if(Houses[bouse][hBox] == 0)
			        {
				        SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
				        return 1;
			        }
     				if(ReduceTime[playerid] == 1)
			        {
				        SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
				        return 1;
			        }
			        if(GetPlayerVirtualWorld(playerid) == bouse)
					{
			        	ShowPlayerDialog(playerid,HouseDialog,DIALOG_STYLE_LIST,"Safetybox - Main Menu","Stash Info\nDrugs\nMoney","Select","Cancel");
			       	}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
			        return 1;
			    }
			}
			else if(strcmp(x_nr, "putweed", true) == 0)
			{
			    new bouse = PlayerInfo[playerid][pHouseKey];
			    if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
			    {
			        if(Houses[bouse][hBox] == 0)
			        {
				        SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
				        return 1;
			        }
     				if(ReduceTime[playerid] == 1)
			        {
				        SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
				        return 1;
			        }
			        if(GetPlayerVirtualWorld(playerid) == bouse)
					{
			        	ShowPlayerDialog(playerid,HouseDialog,DIALOG_STYLE_LIST,"Safetybox - Main Menu","Stash Info\nDrugs\nMoney","Withdraw","Deposit");
			       	}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
			        return 1;
			    }
			}
			else if(strcmp(x_nr, "putclothes", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
				{
					if(PlayerToPoint(50.0,playerid,Houses[PlayerInfo[playerid][pHouseKey]][ExitX], Houses[PlayerInfo[playerid][pHouseKey]][ExitY], Houses[PlayerInfo[playerid][pHouseKey]][ExitZ]))
					{
						if(Houses[PlayerInfo[playerid][pHouseKey]][hCloset] == 1)
						{
							{
								Houses[PlayerInfo[playerid][pHouseKey]][hClosetSkin] = GetPlayerSkin(playerid);
								if(PlayerInfo[playerid][pSex] == 1)
								{
									PlayerActionMessage(playerid,15.0,"opens the closet and takes off his clothes.");
									new MaleClothes = random(4);
									if(MaleClothes == 0)
									{
										SetPlayerSkin(playerid, 18);
									}
									if(MaleClothes == 1)
									{
									    SetPlayerSkin(playerid, 45);
									}
									if(MaleClothes == 2)
									{
									    SetPlayerSkin(playerid, 97);
									}
									if(MaleClothes == 3)
									{
									    SetPlayerSkin(playerid, 154);
									}
								}
								else
								{
								    PlayerActionMessage(playerid,15.0,"opens the closet and takes off her clothes.");
									new FeMaleClothes = random(4);
									if(FeMaleClothes == 0)
									{
										SetPlayerSkin(playerid, 140);
									}
									if(FeMaleClothes == 1)
									{
									    SetPlayerSkin(playerid, 139);
									}
									if(FeMaleClothes == 2)
									{
									    SetPlayerSkin(playerid, 251);
									}
									if(FeMaleClothes == 3)
									{
									    SetPlayerSkin(playerid, 138);
									}
								}
						    }
						}
						else
						{
		                	SendClientMessage(playerid, COLOR_GREY, "This house does not have a closet.");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "You are not inside your house..");
					}
			    }
			}
			else if(strcmp(x_nr, "takeclothes", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
				{
					if(PlayerToPoint(50.0,playerid,Houses[PlayerInfo[playerid][pHouseKey]][ExitX], Houses[PlayerInfo[playerid][pHouseKey]][ExitY], Houses[PlayerInfo[playerid][pHouseKey]][ExitZ]))
					{
						if(Houses[PlayerInfo[playerid][pHouseKey]][hCloset] == 1)
						{
							if(Houses[PlayerInfo[playerid][pHouseKey]][hClosetSkin] != 0)
							{
								SetPlayerSkin(playerid,Houses[PlayerInfo[playerid][pHouseKey]][hClosetSkin]);
								Houses[PlayerInfo[playerid][pHouseKey]][hClosetSkin] = 0;
								if(PlayerInfo[playerid][pSex] == 1)
								{
									PlayerActionMessage(playerid,15.0,"opens the closet and changes his clothes.");
								}
								else
								{
								    PlayerActionMessage(playerid,15.0,"opens the closet and changes her clothes.");
								}
						    }
						    else
						    {
                                SendClientMessage(playerid, COLOR_GREY, " There is already nothing inside the closet.");
						    }
						}
						else
						{
		                	SendClientMessage(playerid, COLOR_GREY, "This house does not have a closet.");
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "You are not inside your house..");
					}
			    }
			}
			else if(strcmp(x_nr, "putgun", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /house putgun [slot]");
					return 1;
				}
				if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 6)
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu poti da arma deoarece esti in LSPD!");
        			return 1;
				}
				if(strcmp(tmp, "1", true) == 0)
				{
				    new bouse = PlayerInfo[playerid][pHouseKey];
					for(new i = 0; i < sizeof(Houses); i++)
					{
						if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
							if(GetPlayerVirtualWorld(playerid) == bouse)
							{
							    if(Houses[GetPlayerVirtualWorld(playerid)][StashLock] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "The safetybox is locked.");
							        return 1;
							    }
						        if(Houses[bouse][hBox] == 0)
						        {
							        SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
							        return 1;
						        }
								if(ReduceTime[playerid] == 1)
								{
								    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
								    return 1;
								}
								if(Houses[bouse][hGun1] > 0)
								{
								    SendClientMessage(playerid, COLOR_WHITE, "You have a gun already in there!");
								    return 1;
								}
								new stat[32];
								new gunname[100];
								strmid(stat, tmp, 0, sizeof(stat), sizeof(stat));
								new weapon = GetPlayerWeapon(playerid);
								new gunAmmo = GetPlayerAmmo(playerid);
								GetWeaponName(weapon, gunname, sizeof(gunname));
								if(weapon == 0)
								{
								    SendClientMessage(playerid, COLOR_GRAD2, "You cannot stash your fist.");
								    return 1;
								}
								if(weapon == 38)
								{
								    SendClientMessage(playerid, COLOR_GRAD2, "You cannot stash this.");
								    return 1;
								}
								if(weapon == 41)
						        {
						            SendClientMessage(playerid, COLOR_GRAD2, "You cannot stash this.");
						            return 1;
								}
								ReduceTime[playerid] = 0;
								new buffer[512];
								new gunID = GetPlayerWeapon(playerid);
								Houses[bouse][hGun1] = weapon;
								Houses[bouse][hGunAmmo1] = gunAmmo;
								format(buffer, sizeof(buffer), "You have put your %s (Ammo: %i) in your safetybox.", gunname, gunAmmo);
								SendClientMessage(playerid, COLOR_WHITE, buffer);
								if(weapon == 24)
						        {
						            PlayerInfo[playerid][pEagle] = 0;
								}
								if(weapon == 25)
						        {
						            PlayerInfo[playerid][pShotgun] = 0;
								}
								if(weapon == 30)
						        {
						            PlayerInfo[playerid][pAK] = 0;
								}
								if(weapon == 31)
						        {
						            PlayerInfo[playerid][pM4] = 0;
								}
								SafeRemovePlayerWeapon(playerid, gunID);
        SavePlayerAccount(playerid);
								PlayerActionMessage(playerid,15.0,"opens the safetybox and puts something in it.");
								ReduceTime[playerid] = 1;
								SetTimerEx("ReduceTimer", 4000, false, "i", playerid);
								SaveHouses(PlayerInfo[playerid][pHouseKey]);
								SavePlayerAccount(playerid);
	                			// LOG IT HAHA
								GetPlayerName(playerid, sendername, sizeof(sendername));
								new y, m, d;
								new h,mi,s;
								getdate(y,m,d);
								gettime(h,mi,s);
								format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /house putgun 1 # You have put your %s (Ammo: %i) in your safetybox.",d,m,y,h,mi,s,sendername, gunname, gunAmmo);
								WeaponLog(string);
							}
			  			}
						else
						{
				            SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
					        return 1;
						}
			        }
			    }
				if(strcmp(tmp, "2", true) == 0)
				{
				    new bouse = PlayerInfo[playerid][pHouseKey];
					for(new i = 0; i < sizeof(Houses); i++)
					{
						if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
							if(GetPlayerVirtualWorld(playerid) == bouse)
							{
							    if(Houses[GetPlayerVirtualWorld(playerid)][StashLock] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "The safetybox is locked.");
							        return 1;
							    }
						        if(Houses[bouse][hBox] == 0)
						        {
							        SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
							        return 1;
						        }
								if(ReduceTime[playerid] == 1)
								{
								    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
								    return 1;
								}
								if(Houses[bouse][hGun2] > 0)
								{
								    SendClientMessage(playerid, COLOR_WHITE, "You have a gun already in there!");
								    return 1;
								}
								new stat[32];
								new gunname[100];
								strmid(stat, tmp, 0, sizeof(stat), sizeof(stat));
								new weapon = GetPlayerWeapon(playerid);
								new gunAmmo = GetPlayerAmmo(playerid);
								GetWeaponName(weapon, gunname, sizeof(gunname));
								if(weapon == 0)
								{
								    SendClientMessage(playerid, COLOR_WHITE, "You cannot stash your fist.");
								    return 1;
								}
								if(weapon == 38)
								{
								    SendClientMessage(playerid, COLOR_WHITE, "You cannot stash this.");
								    return 1;
								}
								ReduceTime[playerid] = 0;
								new buffer[512];
								new gunID = GetPlayerWeapon(playerid);
								Houses[bouse][hGun2] = weapon;
								Houses[bouse][hGunAmmo2] = gunAmmo;
								format(buffer, sizeof(buffer), "You have put your %s (Ammo: %i) in your safetybox.", gunname, gunAmmo);
								SendClientMessage(playerid, COLOR_WHITE, buffer);
								if(weapon == 24)
						        {
						            PlayerInfo[playerid][pEagle] = 0;
								}
								if(weapon == 25)
						        {
						            PlayerInfo[playerid][pShotgun] = 0;
								}
								if(weapon == 30)
						        {
						            PlayerInfo[playerid][pAK] = 0;
								}
								if(weapon == 31)
						        {
						            PlayerInfo[playerid][pM4] = 0;
								}
								RemovePlayerWeapon(playerid, gunID);
        SavePlayerAccount(playerid);
								PlayerActionMessage(playerid,15.0,"opens the safetybox and puts something in it.");
								ReduceTime[playerid] = 1;
								SetTimerEx("ReduceTimer", 4000, false, "i", playerid);
								SaveHouses(PlayerInfo[playerid][pHouseKey]);
								SavePlayerAccount(playerid);
	                			// LOG IT HAHA
								GetPlayerName(playerid, sendername, sizeof(sendername));
								new y, m, d;
								new h,mi,s;
								getdate(y,m,d);
								gettime(h,mi,s);
								format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /house putgun 2 # You have put your %s (Ammo: %i) in your safetybox.",d,m,y,h,mi,s,sendername, gunname, gunAmmo);
								WeaponLog(string);
							}
			  			}
						else
						{
				            SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
					        return 1;
						}
			        }
				}
				if(strcmp(tmp, "3", true) == 0)
				{
				    new bouse = PlayerInfo[playerid][pHouseKey];
					for(new i = 0; i < sizeof(Houses); i++)
					{
						if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
							if(GetPlayerVirtualWorld(playerid) == bouse)
							{
							    if(Houses[GetPlayerVirtualWorld(playerid)][StashLock] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "The safetybox is locked.");
							        return 1;
							    }
						        if(Houses[bouse][hBox] == 0)
						        {
							        SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
							        return 1;
						        }
								if(ReduceTime[playerid] == 1)
								{
								    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
								    return 1;
								}
								if(Houses[bouse][hGun3] > 0)
								{
								    SendClientMessage(playerid, COLOR_WHITE, "You have a gun already in there!");
								    return 1;
								}
								ReduceTime[playerid] = 0;
								new stat[32];
								new gunname[100];
								strmid(stat, tmp, 0, sizeof(stat), sizeof(stat));
								new weapon = GetPlayerWeapon(playerid);
								new gunAmmo = GetPlayerAmmo(playerid);
								GetWeaponName(weapon, gunname, sizeof(gunname));
								if(weapon == 0)
								{
								    SendClientMessage(playerid, COLOR_WHITE, "You cannot stash your fist.");
								    return 1;
								}
								if(weapon == 38)
								{
								    SendClientMessage(playerid, COLOR_WHITE, "You cannot stash this.");
								    return 1;
								}
								new buffer[512];
								new gunID = GetPlayerWeapon(playerid);
								Houses[bouse][hGun3] = weapon;
								Houses[bouse][hGunAmmo3] = gunAmmo;
								format(buffer, sizeof(buffer), "You have put your %s (Ammo: %i) in your safetybox.", gunname, gunAmmo);
								SendClientMessage(playerid, COLOR_WHITE, buffer);
								if(weapon == 24)
						        {
						            PlayerInfo[playerid][pEagle] = 0;
								}
								if(weapon == 25)
						        {
						            PlayerInfo[playerid][pShotgun] = 0;
								}
								if(weapon == 30)
						        {
						            PlayerInfo[playerid][pAK] = 0;
								}
								if(weapon == 31)
						        {
						            PlayerInfo[playerid][pM4] = 0;
								}
								RemovePlayerWeapon(playerid, gunID);
        SavePlayerAccount(playerid);
								PlayerActionMessage(playerid,15.0,"opens the safetybox and puts something in it.");
								ReduceTime[playerid] = 1;
								SetTimerEx("ReduceTimer", 4000, false, "i", playerid);
								SaveHouses(PlayerInfo[playerid][pHouseKey]);
								SavePlayerAccount(playerid);
	                			// LOG IT HAHA
								GetPlayerName(playerid, sendername, sizeof(sendername));
								new y, m, d;
								new h,mi,s;
								getdate(y,m,d);
								gettime(h,mi,s);
								format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /house putgun 3 # You have put your %s (Ammo: %i) in your safetybox.",d,m,y,h,mi,s,sendername, gunname, gunAmmo);
								WeaponLog(string);
							}
			  			}
						else
						{
				            SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
					        return 1;
						}
			        }
				}
			}
			else if(strcmp(x_nr, "takegun", true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /house takegun [slot]");
					return 1;
				}
				if(strcmp(tmp, "1", true) == 0)
				{
				    new bouse = PlayerInfo[playerid][pHouseKey];
					for(new i = 0; i < sizeof(Houses); i++)
					{
						if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
							if(GetPlayerVirtualWorld(playerid) == bouse)
							{
							    if(Houses[GetPlayerVirtualWorld(playerid)][StashLock] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "The safetybox is locked.");
							        return 1;
							    }
						        if(Houses[bouse][hBox] == 0)
						        {
							        SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
							        return 1;
						        }
								if(ReduceTime[playerid] == 1)
								{
								    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
								    return 1;
								}
								if(PlayerInfo[playerid][pLevel] == 1)
						    	{
									SendClientMessage(playerid, COLOR_GREY, "  You cannot use this command since you are level 1.");
		        					return 1;
						    	}
						        if(Houses[bouse][hGun1] == 0)
						        {
								    SendClientMessage(playerid, COLOR_GREY, "Nothing in this slot.");
								    return 1;
								}
								ReduceTime[playerid] = 0;
						        if(Houses[bouse][hGun1] == 24)
						        { PlayerInfo[playerid][pEagle] = 1; }
						        if(Houses[bouse][hGun1] == 29)
						        { PlayerInfo[playerid][pMP5] = 1; }
						        if(Houses[bouse][hGun1] == 28)
						        { PlayerInfo[playerid][pUzi] = 1; }
						        if(Houses[bouse][hGun1] == 25)
						        { PlayerInfo[playerid][pShotgun] = 1; }
						        if(Houses[bouse][hGun1] == 33)
						        {
						            PlayerInfo[playerid][pCountryRifle] = 1;
								}
						        if(Houses[bouse][hGun1] == 22)
						        {
						            PlayerInfo[playerid][p9mm] = 1;
								}
						        if(Houses[bouse][hGun1] == 34)
						        {
						            PlayerInfo[playerid][pSniper] = 1;
								}
						        if(Houses[bouse][hGun1] == 31)
						        {
						            PlayerInfo[playerid][pM4] = 1;
								}
						        if(Houses[bouse][hGun1] == 5)
						        {
						            PlayerInfo[playerid][pBaseball] = 1;
								}
						        if(Houses[bouse][hGun1] == 30)
						        {
						            PlayerInfo[playerid][pAK] = 1;
								}
						        if(Houses[bouse][hGun1] == 4)
						        {
						            PlayerInfo[playerid][pKnife] = 1;
								}
						        if(Houses[bouse][hGun1] == 41)
						        {
						            PlayerInfo[playerid][pSpray] = 1;
								}
						        new buffer[128];
						        new gunName[100];
						        GetWeaponName(Houses[bouse][hGun1], gunName, sizeof(gunName));
						        format(buffer, sizeof(buffer), "You've taken a %s (Ammo: %i) from the stash.", gunName, Houses[bouse][hGunAmmo1]);
						        SendClientMessage(playerid, COLOR_GREEN, buffer);
							    SafeGivePlayerWeapon(playerid, Houses[bouse][hGun1], 1);
							    SetPlayerAmmo(playerid,Houses[bouse][hGun1],Houses[bouse][hGunAmmo1]);
	                            ReduceTime[playerid] = 1;
								PlayerActionMessage(playerid,15.0,"opens the safetybox and takes something from it.");
	                			SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
	                			// LOG IT HAHA
								GetPlayerName(playerid, sendername, sizeof(sendername));
								new y, m, d;
								new h,mi,s;
								getdate(y,m,d);
								gettime(h,mi,s);
								format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /house takegun 1 # You've taken a %s (Ammo: %i) from the stash.",d,m,y,h,mi,s,sendername, gunName, Houses[bouse][hGunAmmo1]);
								WeaponLog(string);
								// Reset it
				            	Houses[bouse][hGun1] = 0;
				            	Houses[bouse][hGunAmmo1] = 0;
				            	SaveHouses(PlayerInfo[playerid][pHouseKey]);
							}
			  			}
						else
						{
				            SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
					        return 1;
						}
			        }
			    }
				if(strcmp(tmp, "2", true) == 0)
				{
				    new bouse = PlayerInfo[playerid][pHouseKey];
					for(new i = 0; i < sizeof(Houses); i++)
					{
						if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
							if(GetPlayerVirtualWorld(playerid) == bouse)
							{
							    if(Houses[GetPlayerVirtualWorld(playerid)][StashLock] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "The safetybox is locked.");
							        return 1;
							    }
						        if(Houses[bouse][hBox] == 0)
						        {
							        SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
							        return 1;
						        }
								if(ReduceTime[playerid] == 1)
								{
								    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
								    return 1;
								}
								if(PlayerInfo[playerid][pLevel] == 1)
						    	{
									SendClientMessage(playerid, COLOR_GREY, "  You cannot use this command since you are level 1.");
		        					return 1;
						    	}
						        if(Houses[bouse][hGun2] == 0)
						        {
								    SendClientMessage(playerid, COLOR_GREY, "Nothing in this slot.");
								    return 1;
								}
								ReduceTime[playerid] = 0;
						        if(Houses[bouse][hGun2] == 24)
						        {
						            PlayerInfo[playerid][pEagle] = 1;
								}
						        if(Houses[bouse][hGun2] == 25)
						        {
						            PlayerInfo[playerid][pShotgun] = 1;
								}
						        if(Houses[bouse][hGun2] == 29)
						        {
						            PlayerInfo[playerid][pMP5] = 1;
								}
						        if(Houses[bouse][hGun2] == 28)
						        {
						            PlayerInfo[playerid][pUzi] = 1;
								}
						        if(Houses[bouse][hGun2] == 33)
						        {
						            PlayerInfo[playerid][pCountryRifle] = 1;
								}
						        if(Houses[bouse][hGun2] == 22)
						        {
						            PlayerInfo[playerid][p9mm] = 1;
								}
						        if(Houses[bouse][hGun2] == 34)
						        {
						            PlayerInfo[playerid][pSniper] = 1;
								}
						        if(Houses[bouse][hGun2] == 31)
						        {
						            PlayerInfo[playerid][pM4] = 1;
								}
						        if(Houses[bouse][hGun2] == 5)
						        {
						            PlayerInfo[playerid][pBaseball] = 1;
								}
						        if(Houses[bouse][hGun1] == 30)
						        {
						            PlayerInfo[playerid][pAK] = 1;
								}
						        if(Houses[bouse][hGun2] == 4)
						        {
						            PlayerInfo[playerid][pKnife] = 1;
								}
						        if(Houses[bouse][hGun2] == 41)
						        {
						            PlayerInfo[playerid][pSpray] = 1;
								}
						        new buffer[128];
						        new gunName[100];
						        GetWeaponName(Houses[bouse][hGun2], gunName, sizeof(gunName));
						        format(buffer, sizeof(buffer), "You've taken a %s (Ammo: %i) from the stash.", gunName, Houses[bouse][hGunAmmo2]);
						        SendClientMessage(playerid, COLOR_GREEN, buffer);
							    SafeGivePlayerWeapon(playerid, Houses[bouse][hGun2], 1);
							    SetPlayerAmmo(playerid,Houses[bouse][hGun2],Houses[bouse][hGunAmmo2]);
	                            ReduceTime[playerid] = 1;
								PlayerActionMessage(playerid,15.0,"opens the safetybox and takes something from it.");
	                			SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
	                			// LOG IT HAHA
								GetPlayerName(playerid, sendername, sizeof(sendername));
								new y, m, d;
								new h,mi,s;
								getdate(y,m,d);
								gettime(h,mi,s);
								format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /house takegun 2 # You've taken a %s (Ammo: %i) from the stash.",d,m,y,h,mi,s,sendername, gunName, Houses[bouse][hGunAmmo2]);
								WeaponLog(string);
								// Reset it
				            	Houses[bouse][hGun2] = 0;
				            	Houses[bouse][hGunAmmo2] = 0;
				            	SaveHouses(PlayerInfo[playerid][pHouseKey]);
							}
			  			}
						else
						{
				            SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
					        return 1;
						}
			        }
			    }
				if(strcmp(tmp, "3", true) == 0)
				{
				    new bouse = PlayerInfo[playerid][pHouseKey];
					for(new i = 0; i < sizeof(Houses); i++)
					{
						if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
							if(GetPlayerVirtualWorld(playerid) == bouse)
							{
							    if(Houses[GetPlayerVirtualWorld(playerid)][StashLock] == 1)
							    {
							        SendClientMessage(playerid, COLOR_GREY, "The safetybox is locked.");
							        return 1;
							    }
						        if(Houses[bouse][hBox] == 0)
						        {
							        SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
							        return 1;
						        }
								if(ReduceTime[playerid] == 1)
								{
								    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
								    return 1;
								}
								if(PlayerInfo[playerid][pLevel] == 1)
						    	{
									SendClientMessage(playerid, COLOR_GREY, "  You cannot use this command since you are level 1.");
		        					return 1;
						    	}
						        if(Houses[bouse][hGun3] == 0)
						        {
								    SendClientMessage(playerid, COLOR_GREY, "Nothing in this slot.");
								    return 1;
								}
								ReduceTime[playerid] = 0;
						        if(Houses[bouse][hGun3] == 24)
						        {
						            PlayerInfo[playerid][pEagle] = 1;
								}
						        if(Houses[bouse][hGun3] == 29)
						        {
						            PlayerInfo[playerid][pMP5] = 1;
								}
						        if(Houses[bouse][hGun3] == 28)
						        {
						            PlayerInfo[playerid][pUzi] = 1;
								}
						        if(Houses[bouse][hGun3] == 25)
						        {
						            PlayerInfo[playerid][pShotgun] = 1;
								}
						        if(Houses[bouse][hGun3] == 33)
						        {
						            PlayerInfo[playerid][pCountryRifle] = 1;
								}
						        if(Houses[bouse][hGun3] == 22)
						        {
						            PlayerInfo[playerid][p9mm] = 1;
								}
						        if(Houses[bouse][hGun3] == 34)
						        {
						            PlayerInfo[playerid][pSniper] = 1;
								}
						        if(Houses[bouse][hGun3] == 31)
						        {
						            PlayerInfo[playerid][pM4] = 1;
								}
						        if(Houses[bouse][hGun3] == 5)
						        {
						            PlayerInfo[playerid][pBaseball] = 1;
								}
						        if(Houses[bouse][hGun3] == 30)
						        {
						            PlayerInfo[playerid][pAK] = 1;
								}
						        if(Houses[bouse][hGun3] == 4)
						        {
						            PlayerInfo[playerid][pKnife] = 1;
								}
						        if(Houses[bouse][hGun3] == 41)
						        {
						            PlayerInfo[playerid][pSpray] = 1;
								}
						        new buffer[128];
						        new gunName[100];
						        GetWeaponName(Houses[bouse][hGun3], gunName, sizeof(gunName));
						        format(buffer, sizeof(buffer), "You've taken a %s (Ammo: %i) from the stash.", gunName, Houses[bouse][hGunAmmo3]);
						        SendClientMessage(playerid, COLOR_GREEN, buffer);
							    SafeGivePlayerWeapon(playerid, Houses[bouse][hGun3], 1);
							    SetPlayerAmmo(playerid,Houses[bouse][hGun3],Houses[bouse][hGunAmmo3]);
	                            ReduceTime[playerid] = 1;
								PlayerActionMessage(playerid,15.0,"opens the safetybox and takes something from it.");
	                			SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
	                			// LOG IT HAHA
								GetPlayerName(playerid, sendername, sizeof(sendername));
								new y, m, d;
								new h,mi,s;
								getdate(y,m,d);
								gettime(h,mi,s);
								format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /house takegun 3 # You've taken a %s (Ammo: %i) from the stash.",d,m,y,h,mi,s,sendername, gunName, Houses[bouse][hGunAmmo3]);
								WeaponLog(string);
								// Reset it
				            	Houses[bouse][hGun3] = 0;
				            	Houses[bouse][hGunAmmo3] = 0;
				            	SaveHouses(PlayerInfo[playerid][pHouseKey]);
							}
			  			}
						else
						{
				            SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
					        return 1;
						}
			        }
			    }
			}
			else if(strcmp(x_nr, "putseeds", true) == 0)
			{
			    new bouse = PlayerInfo[playerid][pHouseKey];
			    for(new i = 0; i < sizeof(Houses); i++)
				{
			        if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
					{
					    if(IsPlayerConnected(playerid))
						{
						    new playername[MAX_PLAYER_NAME];
							GetPlayerName(playerid, playername, sizeof(playername));
			            	if(ReduceTime[playerid] == 1)
			            	{
			            	    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
			            	    return 1;
			            	}
						    if(Houses[bouse][hBox] == 0)
						    {
				 				SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
								return 1;
						    }
							if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
							{
								tmp = strtok(cmdtext, idx);
								if(!strlen(tmp))
								{
									SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house putseeds [amount]");
									return 1;
								}
								new materialsdeposit = strval(tmp);
								if(!strlen(tmp))
								{
									SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house putseeds [amount]");
									return 1;
								}
								if(PlayerToPoint(100.0,playerid,Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
								{
						    		new amount = PlayerHasItem(playerid,"(D) Marijuana");
								    if(amount >= materialsdeposit && PlayerHasItem(playerid,"(D) Marijuana"))
								    {
									    if(GetPlayerVirtualWorld(playerid) == bouse)
									    {
							            	if(ReduceTime[playerid] == 1)
							            	{
							            	    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
							            	    return 1;
							            	}
										    if(Houses[bouse][hBox] == 0)
										    {
								 				SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
												return 1;
										    }
									        if(Houses[bouse][Drugs] < 500)
									        {
									            if(materialsdeposit < 501)
									            {
									                RemoveItem(playerid,"(D) Marijuana",materialsdeposit);
													Houses[bouse][Drugs]=Houses[bouse][Drugs]+materialsdeposit;
													format(string, sizeof(string), "You have put %d seeds into your safe, Seeds Total: %d ", materialsdeposit,Houses[bouse][Drugs]);
													SendClientMessage(playerid, COLOR_WHITE, string);
							                    	PlayerActionMessage(playerid,15.0,"twists the combination on the safe and puts in some seeds");
						                            ReduceTime[playerid] = 1;
						                			SetTimerEx("ReduceTimer", 4000, false, "i", playerid);
													SaveHouses(PlayerInfo[playerid][pHouseKey]);
												}
												else
												{
					                                SendClientMessage(playerid, COLOR_GREY, "You can not enter more than 500");
												}
											}
											else
											{
				                                SendClientMessage(playerid, COLOR_GREY, "You have exceeded the maximum amount of drugs allowed in a house (500)");
											}
											return 1;
										}
									}
				 					else
									{
										SendClientMessage(playerid, COLOR_GREY, "You do not have that much drugs");
										return 1;
									}
								}
								else
								{
									SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
									return 1;
								}
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
								return 1;
							}
						}
						return 1;
				    }
				}
			}
			else if(strcmp(x_nr, "takeseeds", true) == 0)
			{
			    new bouse = PlayerInfo[playerid][pHouseKey];
			    for(new i = 0; i < sizeof(Houses); i++)
				{
			        if(PlayerToPoint(30.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
					{
						if(GetPlayerVirtualWorld(playerid) == bouse)
						{
			            	if(ReduceTime[playerid] == 1)
			            	{
			            	    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
			            	    return 1;
			            	}
						    if(Houses[bouse][hBox] == 0)
						    {
				 				SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
								return 1;
						    }
						    if(IsPlayerConnected(playerid))
							{
							    new playername[MAX_PLAYER_NAME];
								GetPlayerName(playerid, playername, sizeof(playername));
								if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
								{
									tmp = strtok(cmdtext, idx);
									if(!strlen(tmp))
									{
										SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house takeseeds [amount]");
										return 1;
									}
									new materialsdeposit = strval(tmp);
									if(!strlen(tmp))
									{
										SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house takeseeds [amount]");
										return 1;
									}
									if(PlayerToPoint(100.0,playerid,Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
									{
									    if(Houses[bouse][Drugs] >= materialsdeposit)
									    {
										    if(GetPlayerVirtualWorld(playerid) == bouse)
										    {
										        AddItem(playerid,"(D) Marijuana",materialsdeposit);
												Houses[bouse][Drugs]=Houses[bouse][Drugs]-materialsdeposit;
												format(string, sizeof(string), "You have taken %d seeds from your safetybox, Seeds Total: %d ", materialsdeposit,Houses[bouse][Drugs]);
												SendClientMessage(playerid, COLOR_WHITE, string);
						       					PlayerActionMessage(playerid,15.0,"twists the combination on the safe and takes out some seeds");
					                            ReduceTime[playerid] = 1;
					                			SetTimerEx("ReduceTimer", 4000, false, "i", playerid);

												return 1;
											}
										}
					 					else
										{
											SendClientMessage(playerid, COLOR_GREY, "You do not have that much drugs in your safe");
										}
									}
									else
									{
										SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
										return 1;
									}
								}
								else
								{
									SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
									return 1;
								}
							}
							return 1;
				    	}
		            }
		            else
		            {
				        SendClientMessage(playerid, COLOR_WHITE, "You are not inside your house.");
				        return 1;
				    }
				}
			}
			else if(strcmp(x_nr, "putmoney", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
				{
				    new playername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, playername, sizeof(playername));
					new bouse = PlayerInfo[playerid][pHouseKey];
					if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
					{
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house putmoney [amount]");
							return 1;
						}
						new materialsdeposit = strval(tmp);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house putmoney [amount]");
							return 1;
						}
						if(PlayerToPoint(100.0,playerid,Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
						    if(PlayerInfo[playerid][pCash] >= materialsdeposit)
						    {
							    if(GetPlayerVirtualWorld(playerid) == bouse)
							    {
					            	if(ReduceTime[playerid] == 1)
					            	{
					            	    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
					            	    return 1;
					            	}
							        if(Houses[bouse][Money] < 150000)
							        {
							            if(materialsdeposit < 150000)
							            {
							                if(materialsdeposit < 0) { return 1; }
											GivePlayerCash(playerid,-materialsdeposit);
											Houses[bouse][Money]=Houses[bouse][Money]+materialsdeposit;
											format(string, sizeof(string), "You have put %d money into your house safe, Money Total: %d ", materialsdeposit,Houses[bouse][Money]);
											SendClientMessage(playerid, COLOR_WHITE, string);
					                    	PlayerActionMessage(playerid,15.0,"twists the combination on the safe and puts something into it.");
				                            ReduceTime[playerid] = 1;
				                			SetTimerEx("ReduceTimer", 4000, false, "i", playerid);

										}
										else
										{
			                                SendClientMessage(playerid, COLOR_GREY, "You can not enter more than 150000");
										}
									}
									else
									{
		                                SendClientMessage(playerid, COLOR_GREY, "You have exceeded the maximum amount of money allowed in a house (150000)");
									}
									return 1;
								}
							}
		 					else
							{
								SendClientMessage(playerid, COLOR_GREY, "You do not have that much money");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
						return 1;
					}
				}
				return 1;
			}
			else if(strcmp(x_nr, "takemoney", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
				{
				    new playername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, playername, sizeof(playername));
					new bouse = PlayerInfo[playerid][pHouseKey];
					if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
					{
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house takemoney [amount]");
							return 1;
						}
						new materialsdeposit = strval(tmp);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house takemoney [amount]");
							return 1;
						}
			            if(ReduceTime[playerid] == 1)
			            {
			            	SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
			            	return 1;
			            }
						if(PlayerToPoint(100.0,playerid,Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
						    if(Houses[bouse][Money] >= materialsdeposit)
						    {
							    if(GetPlayerVirtualWorld(playerid) == bouse)
							    {
							        if(materialsdeposit < 0) { SendClientMessage(playerid, COLOR_GRAD2, "   You cannot withdraw minus numbers"); return 1; }
									GivePlayerCash(playerid,materialsdeposit);
									Houses[bouse][Money]=Houses[bouse][Money]-materialsdeposit;
									format(string, sizeof(string), "You have taken %d money from your house safe, Money Total: %d ", materialsdeposit,Houses[bouse][Money]);
									SendClientMessage(playerid, COLOR_WHITE, string);
			       					PlayerActionMessage(playerid,15.0,"twists the combination on the safe and takes something from it.");
		                            ReduceTime[playerid] = 1;
		                			SetTimerEx("ReduceTimer", 4000, false, "i", playerid);

									return 1;
								}
							}
		 					else
							{
								SendClientMessage(playerid, COLOR_GREY, "You do not have that much money in your safe");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
					}
				}
				return 1;
			}
			else if(strcmp(x_nr, "putmats", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
				{
				    new playername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, playername, sizeof(playername));
					new bouse = PlayerInfo[playerid][pHouseKey];
					if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
					{
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house putmats [amount]");
							return 1;
						}
						new materialsdeposit = strval(tmp);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house putmats [amount]");
							return 1;
						}
						if(PlayerToPoint(100.0,playerid,Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
						    if(PlayerInfo[playerid][pMaterials] >= materialsdeposit)
						    {
							    if(GetPlayerVirtualWorld(playerid) == bouse)
							    {
					            	if(ReduceTime[playerid] == 1)
					            	{
					            	    SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
					            	    return 1;
					            	}
								    if(Houses[bouse][hBox] == 0)
								    {
						 				SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
										return 1;
								    }
							        if(Houses[bouse][Materials] < 10000)
							        {
							            if(materialsdeposit < 9999)
							            {
				       			 			if(materialsdeposit < 0) { return 1; }
											PlayerInfo[playerid][pMaterials] -= materialsdeposit;
											Houses[bouse][Materials]=Houses[bouse][Materials]+materialsdeposit;
											format(string, sizeof(string), "You have put %d materials into your safe, Materials Total: %d ", materialsdeposit,Houses[bouse][Materials]);
											SendClientMessage(playerid, COLOR_WHITE, string);
					                    	PlayerActionMessage(playerid,15.0,"twists the combination on the safe and puts in some materials");
				                            ReduceTime[playerid] = 1;
				                			SetTimerEx("ReduceTimer", 4000, false, "i", playerid);

											return 1;
										}
										else
										{
			                                SendClientMessage(playerid, COLOR_GREY, "You can not enter more than 10000");
										}
									}
									else
									{
		                                SendClientMessage(playerid, COLOR_GREY, "You have exceeded the maximum amount of materials allowed in a house (5000)");
									}
								}
							}
		 					else
							{
								SendClientMessage(playerid, COLOR_GREY, "You do not have that much materials");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
						return 1;
					}
				}
				return 1;
			}
			else if(strcmp(x_nr, "takemats", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
				{
				    new playername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, playername, sizeof(playername));
					new bouse = PlayerInfo[playerid][pHouseKey];
					if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
					{
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house takemats [amount]");
							return 1;
						}
						new materialsdeposit = strval(tmp);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house takemats [amount]");
							return 1;
						}
			            if(ReduceTime[playerid] == 1)
			            {
			            	SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
			            	return 1;
			            }
						if(Houses[bouse][hBox] == 0)
						{
				 			SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
							return 1;
						}
						if(PlayerToPoint(100.0,playerid,Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
						    if(Houses[bouse][Materials] >= materialsdeposit)
						    {
							    if(GetPlayerVirtualWorld(playerid) == bouse)
							    {
					                if(PlayerInfo[playerid][pMaterials] >= 10000)
					                {
						                SendClientMessage(playerid, COLOR_GREY, "   You cannot hold anymore materials.");
						                return 1;
					                }
				       			 	if(materialsdeposit < 0) { return 1; }
									PlayerInfo[playerid][pMaterials] += materialsdeposit;
									Houses[bouse][Materials]=Houses[bouse][Materials]-materialsdeposit;
									format(string, sizeof(string), "You have taken %d materials from your safe, Materials Total: %d ", materialsdeposit,Houses[bouse][Materials]);
									SendClientMessage(playerid, COLOR_WHITE, string);
			       					PlayerActionMessage(playerid,15.0,"twists the combination on the safe and takes out some materials");
		                            ReduceTime[playerid] = 1;
		                			SetTimerEx("ReduceTimer", 4000, false, "i", playerid);
									return 1;
								}
							}
		 					else
							{
								SendClientMessage(playerid, COLOR_GREY, "You do not have that much materials in your safe");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
						return 1;
					}
				}
				return 1;
			}
			else if(strcmp(x_nr, "setpass", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
				{
				    new playername[MAX_PLAYER_NAME];
					GetPlayerName(playerid, playername, sizeof(playername));
					new bouse = PlayerInfo[playerid][pHouseKey];
					if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
					{
						if(Houses[GetPlayerVirtualWorld(playerid)][hBox] == 0)
						{
				 			SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
							return 1;
						}
						if(PlayerToPoint(100.0,playerid,Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
						{
						    if(Houses[GetPlayerVirtualWorld(playerid)][hBox] == 1)
						    {
							    if(GetPlayerVirtualWorld(playerid) == bouse)
							    {
									new length = strlen(cmdtext);
									while ((idx < length) && (cmdtext[idx] <= ' '))
									{
										idx++;
									}
									new offset = idx;
									new result[128];
									while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
									{
										result[idx - offset] = cmdtext[idx];
										idx++;
									}
									result[idx - offset] = EOS;
									if(!strlen(result))
									{
										SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /house setpass [pass]");
										return 1;
									}
									if(strfind( result , "," , true ) == -1)
					    			{
										if(strfind( result , "|" , true ) == -1)
						    			{
								   			strmid(Houses[bouse][StashCode], (result), 0, strlen((result)), 128);
											format(string, sizeof(string), "You have set the password to: %s", (result));
											SendClientMessage(playerid, COLOR_WHITE, string);
										}
										else
										{
									    	SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid symbol , is not allowed");
										}
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid symbol , is not allowed");
									}
								}
							}
		 					else
							{
								SendClientMessage(playerid, COLOR_GREY, "  This house does not have a safetybox.");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_WHITE, "You are not at your safetybox.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
						return 1;
					}
				}
				return 1;
			}
			else if(strcmp(x_nr, "lock", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
			    {
			        new bouse = PlayerInfo[playerid][pHouseKey];
			        for(new i = 0; i < sizeof(Houses); i++)
					{
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
						if(PlayerToPoint(3.0,playerid, Houses[i][EnterX], Houses[i][EnterY], Houses[i][EnterZ]) || PlayerToPoint(3.0, playerid, Houses[i][ExitX],Houses[i][ExitY],Houses[i][ExitZ]))
					    {
							if(Houses[i][Locked] == 0 && strcmp(playername, Houses[i][Owner], true) == 0)
							{
								Houses[i][Locked] = 1;
								GameTextForPlayer(playerid, "~w~Usa ~r~Incuiata", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
							if(Houses[i][Locked] == 1 && strcmp(playername, Houses[i][Owner], true) == 0)
							{
								Houses[i][Locked] = 0;
								GameTextForPlayer(playerid, "~w~Usa ~g~Descuiata", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
							else if(PlayerInfo[playerid][pToolkit] == 0 && strcmp(playername, Houses[i][Owner], false) == 0 && PlayerInfo[playerid][pHouseKey] != i)
							{
								GameTextForPlayer(playerid,"~r~",2000,3);
								return 1;
							}
							else if(PlayerInfo[playerid][pToolkit] == 1 && strcmp(playername, Houses[i][Owner], false) == 0 && PlayerInfo[playerid][pHouseKey] != i)
							{
							    if(Houses[i][Locked] == 1)
							    {
									GameTextForPlayer(playerid,"~r~",2000,3);
									return 1;
							    }
							    else
							    {
									GameTextForPlayer(playerid,"~r~",2000,3);
									return 1;
								}
							}
						}
						if(PlayerToPoint(3.0,playerid, Houses[bouse][EnterX], Houses[bouse][EnterY], Houses[bouse][EnterZ]) || PlayerToPoint(3.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
					    {
							if(bouse == i && Houses[bouse][Locked] == 1)
							{
								Houses[bouse][Locked] = 0;
								GameTextForPlayer(playerid, "~w~Usa ~g~descuiata", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
							if(bouse == i && Houses[bouse][Locked] == 0)
							{
								Houses[bouse][Locked] = 1;
								GameTextForPlayer(playerid, "~w~Usa ~r~Incuiata", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
					    }
					}
			    }
				return 1;
			}
			else if(strcmp(x_nr, "frisk", true) == 0)
			{
			    for(new i = 0; i < sizeof(Houses); i++)
			    {
			        if(PlayerToPoint(30.0, playerid, Houses[GetPlayerVirtualWorld(playerid)][ExitX],Houses[GetPlayerVirtualWorld(playerid)][ExitY],Houses[GetPlayerVirtualWorld(playerid)][ExitZ]))
			        {
					    if(Houses[GetPlayerVirtualWorld(playerid)][hBox] == 0)
					    {
			 				SendClientMessage(playerid, COLOR_GREY, "Aceasta casa nu are un seif.");
							return 1;
					    }
			            if(ReduceTime[playerid] == 1)
			            {
			            	SendClientMessage(playerid, COLOR_GREY, "Trebuie sa astepti cel putin 4 secunde inainte sa folosesti aceasta comanda");
			            	return 1;
			            }
			            if(GetPlayerVirtualWorld(playerid) != 0)
			            {
				            SendClientMessage(playerid, COLOR_GREEN, "_______ Stash _______");
				            new gunname[100];
				            if(Houses[GetPlayerVirtualWorld(playerid)][hGun1] != 0)
							{
				                GetWeaponName(Houses[GetPlayerVirtualWorld(playerid)][hGun1], gunname, sizeof(gunname));
				                format(string, sizeof(string), "| Slot 1: %s (Ammo: %i)", gunname, Houses[GetPlayerVirtualWorld(playerid)][hGunAmmo1]);
				                SendClientMessage(playerid, COLOR_WHITE, string);
				            }
				            else
							{
				                format(string, sizeof(string), "| Slot 1: Empty");
				                SendClientMessage(playerid, COLOR_WHITE, string);
				            }
				            if(Houses[GetPlayerVirtualWorld(playerid)][hGun2] != 0)
							{
				                GetWeaponName(Houses[GetPlayerVirtualWorld(playerid)][hGun2], gunname, sizeof(gunname));
				                format(string, sizeof(string), "| Slot 2: %s (Ammo: %i)", gunname, Houses[GetPlayerVirtualWorld(playerid)][hGunAmmo2]);
				                SendClientMessage(playerid, COLOR_WHITE, string);
				            }
				            else
							{
				                format(string, sizeof(string), "| Slot 2: Empty");
				                SendClientMessage(playerid, COLOR_WHITE, string);
				            }
				            if(Houses[GetPlayerVirtualWorld(playerid)][hGun3] != 0)
							{
				                GetWeaponName(Houses[GetPlayerVirtualWorld(playerid)][hGun3], gunname, sizeof(gunname));
				                format(string, sizeof(string), "| Slot 3: %s (Ammo: %i)", gunname, Houses[GetPlayerVirtualWorld(playerid)][hGunAmmo3]);
				                SendClientMessage(playerid, COLOR_WHITE, string);
				            }
				            else
							{
				                format(string, sizeof(string), "| Slot 3: Empty");
				                SendClientMessage(playerid, COLOR_WHITE, string);
				            }
				            if(Houses[GetPlayerVirtualWorld(playerid)][Drugs] != 0)
							{
				                format(string, sizeof(string), "| Seeds: %s ", Houses[GetPlayerVirtualWorld(playerid)][Drugs]);
				                SendClientMessage(playerid, COLOR_WHITE, string);
				            }
				            else
							{
				                format(string, sizeof(string), "| Drugs: None");
				                SendClientMessage(playerid, COLOR_WHITE, string);
				            }
				            if(Houses[i][Materials] != 0)
							{
				                format(string, sizeof(string), "| Materials: %s ", Houses[GetPlayerVirtualWorld(playerid)][Materials]);
				                SendClientMessage(playerid, COLOR_WHITE, string);
				            }
				            else
							{
				                format(string, sizeof(string), "| Materials: None");
				                SendClientMessage(playerid, COLOR_WHITE, string);
				            }
	                        ReduceTime[playerid] = 1;
	                		SetTimerEx("ReduceTimer", 4000, false, "i", playerid);
				        }
					}
				    else
				    {
					    SendClientMessage(playerid, COLOR_GREY, "You are not inside a house");
						return 1;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Comanda invalida!");
			    return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/trunk", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(ReduceTime[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Trebuie sa astepti cel putin 3 secunde inainte sa folosesti aceasta comanda !");
				return 1;
			}
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /trunk [item]");
			    SendClientMessage(playerid, COLOR_WHITE, "info | putgun | takegun | package | lock");
			    if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "You can /trunk frisk and /trunk detain as a cop");
			    }
			    if(PlayerInfo[playerid][pJob] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "You can /trunk putcrate/takecrate as a materials deliver");
			    }
			    return 1;
			}
			if(strcmp(x_nr,"ainfo",true) == 0)
			{
				if (PlayerInfo[playerid][pAdministrator] == 0)
				{
					return 1;
				}
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "No vehicles with a trunk in range");
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "You can not open the trunk while you are in a vehicle");
			            	return 1;
               			}
               			if(IsAPlane(result) || IsAdonatebike(result) || IsABiker(result) || IsAHelicopter(result) || IsABoat(result))
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "This vehicle does not have a trunk");
               			    return 1;
               			}
					    ReduceTime[playerid] = 1;
					    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						SendClientMessage(playerid, COLOR_INFO, "_______ Vehicle Trunk _______");
						new gunname[100];
						// Others
						if(VehicleInfo[result][vTrunk1] != 0)
						{
							GetWeaponName(VehicleInfo[result][vTrunk1], gunname, sizeof(gunname));
							format(string, sizeof(string), "| Slot 1: %s (Ammo: %i)", gunname, VehicleInfo[result][vTrunka1]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						} else {
						    format(string, sizeof(string), "| Slot 1: Empty");
						    SendClientMessage(playerid, COLOR_WHITE, string);
						}
						// Trunk 2!
						if(VehicleInfo[result][vTrunk2] != 0)
						{
							GetWeaponName(VehicleInfo[result][vTrunk2], gunname, sizeof(gunname));
							format(string, sizeof(string), "| Slot 2: %s (Ammo: %i)", gunname, VehicleInfo[result][vTrunka2]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						} else {
						    format(string, sizeof(string), "| Slot 2: Empty");
						    SendClientMessage(playerid, COLOR_WHITE, string);
						}
						// Trunk 3
						if(VehicleInfo[result][vTrunk3] != 0)
						{
							GetWeaponName(VehicleInfo[result][vTrunk3], gunname, sizeof(gunname));
							format(string, sizeof(string), "| Slot 3: %s (Ammo: %i)", gunname, VehicleInfo[result][vTrunka3]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						} else {
						    format(string, sizeof(string), "| Slot 3: Empty");
						    SendClientMessage(playerid, COLOR_WHITE, string);
						}
						// Trunk 4
						if(VehicleInfo[result][vTrunk4] != 0)
						{
							GetWeaponName(VehicleInfo[result][vTrunk4], gunname, sizeof(gunname));
							format(string, sizeof(string), "| Slot 4: %s (Ammo: %i)", gunname, VehicleInfo[result][vTrunka4]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						} else {
						    format(string, sizeof(string), "| Slot 4: Empty");
						    SendClientMessage(playerid, COLOR_WHITE, string);
						}
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Found more then one car in range");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"package",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "No vehicles with a trunk in range");
			        }

			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "You can not open the trunk while you are in a vehicle");
			            	return 1;
               			}
               			if(IsAdonatebike(result) || IsABiker(result))
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "This vehicle does not have a trunk");
               			    return 1;
               			}
					    ReduceTime[playerid] = 1;
					    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						SendClientMessage(playerid, COLOR_INFO, "_______ Vehicle Trunk _______");
						// Others
						//new gunname5[100];
						// Package
						if(IsPlayerConnected(playerid)) // Tractor, it will be fixed when ive got the time for finding big vehicles and small ones
						{
							new gunname1[100];
							new gunname2[100];
							new gunname3[100];
							new gunname4[100];
						    GetWeaponName(VehicleInfo[result][vPackage1], gunname1, sizeof(gunname1));
						    GetWeaponName(VehicleInfo[result][vPackage2], gunname2, sizeof(gunname2));
						    GetWeaponName(VehicleInfo[result][vPackage3], gunname3, sizeof(gunname3));
						    GetWeaponName(VehicleInfo[result][vPackage4], gunname4, sizeof(gunname4));
							format(string, sizeof(string), "|Package[1]: %s [Ammo: %i]|Package[2]: %s(Ammo: %i)|", gunname1, VehicleInfo[result][vPackage1a],gunname2,VehicleInfo[result][vPackage2a]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "|Package[3]: %s [Ammo: %i]|Package[4]: %s(Ammo: %i)|", gunname3, VehicleInfo[result][vPackage3a],gunname4,VehicleInfo[result][vPackage4a]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Found more then one car in range");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"takepackage",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   No cars with trunk near you");
			        }

			        case 1:
			        {
			            {
			            	if(ReduceTime[playerid] == 1)
			            	{
			            	    SendClientMessage(playerid, COLOR_GREY, "   Trebuie sa astepti cel putin 3 secunde inainte sa folosesti aceasta comanda !");
			            	    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			            	    return 1;
			            	}
	               			if(PlayerInfo[playerid][pCarKey] == result)
							{
							}
	               			else if(PlayerInfo[playerid][pDupeKey] == VehicleInfo[result][vKey])
			    			{
							}
	               			else if(VehicleInfo[result][vTrunkLock] == 0)
			    			{
							}
	               			else
		               		{
					            SendClientMessage(playerid, COLOR_WHITE, "The trunk is locked");
					            return 1;
				            }
			                if(IsPlayerInAnyVehicle(playerid))
			                {
			                    SendClientMessage(playerid, COLOR_GREY, "  You can't open the trunk while you're in the car");
			                    return 1;
			                }
			                if(IsAPlane(result) || IsAdonatebike(result) || IsABiker(result) || IsAHelicopter(result) || IsABoat(result))
               				{
               			    	SendClientMessage(playerid, COLOR_GREY, "  This vehicle does not have a trunk.");
               			    	return 1;
               				}
               				if(VehicleInfo[result][vTrunkLock] == 1)
	               			{
	               			    SendClientMessage(playerid, COLOR_GREY, "  This vehicles trunk is locked.");
	               			    return 1;
	               			}
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
							    SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /trunk takepackage [slot]");
							    return 1;
							}
							if(strcmp(tmp, "1", true) == 0)
							{
								if(VehicleInfo[result][vPackage1] != 0)
							    {
							        {
						                ReduceTime[playerid] = 1;
			               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						                new buffer[512];
						                new gunName[100];
						                GetWeaponName(VehicleInfo[result][vPackage1], gunName, sizeof(gunName));
						                format(buffer, sizeof(buffer), "You've taken a Package[%s Ammo: %i] from the vehicle.", gunName, VehicleInfo[result][vPackage1a]);
						                SendClientMessage(playerid, COLOR_WHITE, buffer);
						                PlayerActionMessage(playerid,15.0,"opens the trunk and takes something from it.");
									    ReduceTime[playerid] = 1;
									    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
									    // here you need to do so the player gets the package into his PlayerInfo[playerid][pPack1] and pPack1a which is ammo
									    // I think its as simple as GVehicleInfo[result][vPackage1] = PlayerInfo[playerid][pPack1] C									    // But you have to make sure he dont got anything in his current slot so it wont overwrite :)
									    if(PlayerInfo[playerid][pPack1] == 0)
										{
											VehicleInfo[result][vPackage1] = PlayerInfo[playerid][pPack1];
											VehicleInfo[result][vPackage1a] = PlayerInfo[playerid][pPack1a];
										}
										else if(PlayerInfo[playerid][pPack2] == 0)
										{
											VehicleInfo[result][vPackage1] = PlayerInfo[playerid][pPack2];
											VehicleInfo[result][vPackage1a] = PlayerInfo[playerid][pPack2a];
										}
										else if(PlayerInfo[playerid][pPack3] == 0)
										{
											VehicleInfo[result][vPackage1] = PlayerInfo[playerid][pPack3];
											VehicleInfo[result][vPackage1a] = PlayerInfo[playerid][pPack3a];
										}
										else if(PlayerInfo[playerid][pPack4] == 0)
										{
											VehicleInfo[result][vPackage1] = PlayerInfo[playerid][pPack4];
											VehicleInfo[result][vPackage1a] = PlayerInfo[playerid][pPack4a];
										}
										else if(PlayerInfo[playerid][pPack5] == 0)
										{
											VehicleInfo[result][vPackage1] = PlayerInfo[playerid][pPack5];
											VehicleInfo[result][vPackage1a] = PlayerInfo[playerid][pPack5a];
										}
										else
										{
										    SendClientMessage(playerid, COLOR_WHITE, "You can not carry anymore packages.");
											return 1;
										}
			                			// Lets log his actions.
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s > /trunk takepackage 1 # [%s Ammo: %i] Owner %s [%s]",d,m,y,h,mi,s,sendername, gunName, VehicleInfo[result][vPackage1],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
										// Reset The cars variables.
						                VehicleInfo[result][vPackage1] = 0;
						                VehicleInfo[result][vPackage1a] = 0;
		                                return 1;
									}
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "ERROR: This slot is empty.");
                                    return 1;
								}
							}
							if(strcmp(tmp, "2", true) == 0)
							{
								if(VehicleInfo[result][vPackage2] != 0)
							    {
							        {
						                ReduceTime[playerid] = 1;
			               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						                new buffer[512];
						                new gunName[100];
						                GetWeaponName(VehicleInfo[result][vPackage2], gunName, sizeof(gunName));
						                format(buffer, sizeof(buffer), "You've taken a Package[%s Ammo: %i] from the vehicle.", gunName, VehicleInfo[result][vPackage2a]);
						                SendClientMessage(playerid, COLOR_WHITE, buffer);
						                PlayerActionMessage(playerid,15.0,"opens the trunk and takes something from it.");
									    ReduceTime[playerid] = 1;
									    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
									    // here you need to do so the player gets the package into his PlayerInfo[playerid][pPack1] and pPack1a which is ammo
									    // I think its as simple as GVehicleInfo[result][vPackage1] = PlayerInfo[playerid][pPack1] C									    // But you have to make sure he dont got anything in his current slot so it wont overwrite :)
									    if(PlayerInfo[playerid][pPack1] == 0)
										{
											VehicleInfo[result][vPackage2] = PlayerInfo[playerid][pPack1];
											VehicleInfo[result][vPackage2a] = PlayerInfo[playerid][pPack1a];
										}
										else if(PlayerInfo[playerid][pPack2] == 0)
										{
											VehicleInfo[result][vPackage2] = PlayerInfo[playerid][pPack2];
											VehicleInfo[result][vPackage2a] = PlayerInfo[playerid][pPack2a];
										}
										else if(PlayerInfo[playerid][pPack3] == 0)
										{
											VehicleInfo[result][vPackage2] = PlayerInfo[playerid][pPack3];
											VehicleInfo[result][vPackage2a] = PlayerInfo[playerid][pPack3a];
										}
										else if(PlayerInfo[playerid][pPack4] == 0)
										{
											VehicleInfo[result][vPackage2] = PlayerInfo[playerid][pPack4];
											VehicleInfo[result][vPackage2a] = PlayerInfo[playerid][pPack4a];
										}
										else if(PlayerInfo[playerid][pPack5] == 0)
										{
											VehicleInfo[result][vPackage2] = PlayerInfo[playerid][pPack5];
											VehicleInfo[result][vPackage2a] = PlayerInfo[playerid][pPack5a];
										}
										else
										{
										    SendClientMessage(playerid, COLOR_WHITE, "You can not carry anymore packages.");
											return 1;
										}
			                			// Lets log his actions.
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s > /trunk takepackage 2 # [%s Ammo: %i] Owner %s [%s]",d,m,y,h,mi,s,sendername, gunName, VehicleInfo[result][vPackage2a],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
										// Reset The cars variables.
						                VehicleInfo[result][vPackage2] = 0;
						                VehicleInfo[result][vPackage2a] = 0;
		                                return 1;
									}
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "ERROR: This slot is empty.");
                                    return 1;
								}
							}
							if(strcmp(tmp, "3", true) == 0)
							{
							    if(VehicleInfo[result][vPackage3] != 0)
							    {
							        {
						                ReduceTime[playerid] = 1;
			               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						                new buffer[512];
						                new gunName[100];
						                GetWeaponName(VehicleInfo[result][vPackage3], gunName, sizeof(gunName));
						                format(buffer, sizeof(buffer), "You've taken a Package[%s Ammo: %i] from the vehicle.", gunName, VehicleInfo[result][vPackage2a]);
						                SendClientMessage(playerid, COLOR_WHITE, buffer);
						                PlayerActionMessage(playerid,15.0,"opens the trunk and takes something from it.");
									    ReduceTime[playerid] = 1;
									    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
									    // here you need to do so the player gets the package into his PlayerInfo[playerid][pPack1] and pPack1a which is ammo
									    // I think its as simple as GVehicleInfo[result][vPackage1] = PlayerInfo[playerid][pPack1] C									    // But you have to make sure he dont got anything in his current slot so it wont overwrite :)
									    if(PlayerInfo[playerid][pPack1] == 0)
										{
											VehicleInfo[result][vPackage3] = PlayerInfo[playerid][pPack1];
											VehicleInfo[result][vPackage3a] = PlayerInfo[playerid][pPack1a];
										}
										else if(PlayerInfo[playerid][pPack2] == 0)
										{
											VehicleInfo[result][vPackage3] = PlayerInfo[playerid][pPack2];
											VehicleInfo[result][vPackage3a] = PlayerInfo[playerid][pPack2a];
										}
										else if(PlayerInfo[playerid][pPack3] == 0)
										{
											VehicleInfo[result][vPackage3] = PlayerInfo[playerid][pPack3];
											VehicleInfo[result][vPackage3a] = PlayerInfo[playerid][pPack3a];
										}
										else if(PlayerInfo[playerid][pPack4] == 0)
										{
											VehicleInfo[result][vPackage3] = PlayerInfo[playerid][pPack4];
											VehicleInfo[result][vPackage3a] = PlayerInfo[playerid][pPack4a];
										}
										else if(PlayerInfo[playerid][pPack5] == 0)
										{
											VehicleInfo[result][vPackage3] = PlayerInfo[playerid][pPack5];
											VehicleInfo[result][vPackage3a] = PlayerInfo[playerid][pPack5a];
										}
										else
										{
										    SendClientMessage(playerid, COLOR_WHITE, "You can not carry anymore packages.");
											return 1;
										}
			                			// Lets log his actions.
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s > /trunk takepackage 3 # [%s Ammo: %i] Owner %s [%s]",d,m,y,h,mi,s,sendername, gunName, VehicleInfo[result][vPackage3a],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
										// Reset The cars variables.
						                VehicleInfo[result][vPackage2] = 0;
						                VehicleInfo[result][vPackage2a] = 0;
		                                return 1;
									}
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "ERROR: This slot is empty.");
                                    return 1;
								}
							}
							if(strcmp(tmp, "4", true) == 0)
							{
							    if(VehicleInfo[result][vPackage4] != 0)
							    {
							        {
						                ReduceTime[playerid] = 1;
			               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						                new buffer[512];
						                new gunName[100];
						                GetWeaponName(VehicleInfo[result][vPackage4], gunName, sizeof(gunName));
						                format(buffer, sizeof(buffer), "You've taken a Package[%s Ammo: %i] from the vehicle.", gunName, VehicleInfo[result][vPackage4a]);
						                SendClientMessage(playerid, COLOR_WHITE, buffer);
						                PlayerActionMessage(playerid,15.0,"opens the trunk and takes something from it.");
									    ReduceTime[playerid] = 1;
									    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
									    // here you need to do so the player gets the package into his PlayerInfo[playerid][pPack1] and pPack1a which is ammo
									    // I think its as simple as GVehicleInfo[result][vPackage1] = PlayerInfo[playerid][pPack1] C									    // But you have to make sure he dont got anything in his current slot so it wont overwrite :)
									    if(PlayerInfo[playerid][pPack1] == 0)
										{
											VehicleInfo[result][vPackage4] = PlayerInfo[playerid][pPack1];
											VehicleInfo[result][vPackage4a] = PlayerInfo[playerid][pPack1a];
										}
										else if(PlayerInfo[playerid][pPack2] == 0)
										{
											VehicleInfo[result][vPackage4] = PlayerInfo[playerid][pPack2];
											VehicleInfo[result][vPackage4a] = PlayerInfo[playerid][pPack2a];
										}
										else if(PlayerInfo[playerid][pPack3] == 0)
										{
											VehicleInfo[result][vPackage4] = PlayerInfo[playerid][pPack3];
											VehicleInfo[result][vPackage4a] = PlayerInfo[playerid][pPack3a];
										}
										else if(PlayerInfo[playerid][pPack4] == 0)
										{
											VehicleInfo[result][vPackage4] = PlayerInfo[playerid][pPack4];
											VehicleInfo[result][vPackage4a] = PlayerInfo[playerid][pPack4a];
										}
										else if(PlayerInfo[playerid][pPack5] == 0)
										{
											VehicleInfo[result][vPackage4] = PlayerInfo[playerid][pPack5];
											VehicleInfo[result][vPackage4a] = PlayerInfo[playerid][pPack5a];
										}
										else
										{
										    SendClientMessage(playerid, COLOR_WHITE, "You can not carry anymore packages.");
											return 1;
										}
			                			// Lets log his actions.
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s > /trunk takepackage 4 # [%s Ammo: %i] Owner %s [%s]",d,m,y,h,mi,s,sendername, gunName, VehicleInfo[result][vPackage4a],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
										// Reset The cars variables.
						                VehicleInfo[result][vPackage4] = 0;
						                VehicleInfo[result][vPackage4a] = 0;
		                                return 1;
									}
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "ERROR: This slot is empty.");
                                    return 1;
								}
							}
							if(strcmp(tmp, "5", true) == 0)
							{
							    if(VehicleInfo[result][vPackage5] != 0)
							    {
							        {
						                ReduceTime[playerid] = 1;
			               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						                new buffer[512];
						                new gunName[100];
						                GetWeaponName(VehicleInfo[result][vPackage5], gunName, sizeof(gunName));
						                format(buffer, sizeof(buffer), "You've taken a Package[%s Ammo: %i] from the vehicle.", gunName, VehicleInfo[result][vPackage5a]);
						                SendClientMessage(playerid, COLOR_WHITE, buffer);
						                PlayerActionMessage(playerid,15.0,"opens the trunk and takes something from it.");
									    ReduceTime[playerid] = 1;
									    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
									    // here you need to do so the player gets the package into his PlayerInfo[playerid][pPack1] and pPack1a which is ammo
									    // I think its as simple as GVehicleInfo[result][vPackage1] = PlayerInfo[playerid][pPack1] C									    // But you have to make sure he dont got anything in his current slot so it wont overwrite :)
									    if(PlayerInfo[playerid][pPack1] == 0)
										{
											VehicleInfo[result][vPackage5] = PlayerInfo[playerid][pPack1];
											VehicleInfo[result][vPackage5a] = PlayerInfo[playerid][pPack1a];
										}
										else if(PlayerInfo[playerid][pPack2] == 0)
										{
											VehicleInfo[result][vPackage5] = PlayerInfo[playerid][pPack2];
											VehicleInfo[result][vPackage5a] = PlayerInfo[playerid][pPack2a];
										}
										else if(PlayerInfo[playerid][pPack3] == 0)
										{
											VehicleInfo[result][vPackage5] = PlayerInfo[playerid][pPack3];
											VehicleInfo[result][vPackage5a] = PlayerInfo[playerid][pPack3a];
										}
										else if(PlayerInfo[playerid][pPack4] == 0)
										{
											VehicleInfo[result][vPackage5] = PlayerInfo[playerid][pPack4];
											VehicleInfo[result][vPackage5a] = PlayerInfo[playerid][pPack4a];
										}
										else if(PlayerInfo[playerid][pPack5] == 0)
										{
											VehicleInfo[result][vPackage5] = PlayerInfo[playerid][pPack5];
											VehicleInfo[result][vPackage5a] = PlayerInfo[playerid][pPack5a];
										}
										else
										{
										    SendClientMessage(playerid, COLOR_WHITE, "You can not carry anymore packages.");
											return 1;
										}
			                			// Lets log his actions.
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s > /trunk takepackage 5 # [%s Ammo: %i] Owner %s [%s]",d,m,y,h,mi,s,sendername, gunName, VehicleInfo[result][vPackage5a],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
										// Reset The cars variables.
						                VehicleInfo[result][vPackage5] = 0;
						                VehicleInfo[result][vPackage5a] = 0;
		                                return 1;
									}
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "ERROR: This slot is empty.");
                                    return 1;
								}
							}
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Found more then one car in range");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"putpackage",true) == 0)
			{
			    if(PlayerInfo[playerid][pLevel] == 1)
					return SendClientMessage(playerid, COLOR_GREY, "  You cannot use this command as level 1");
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Nu esti in apropierea unui portbagaj.");
			        }

			        case 1:
			        {
			            {
			            	if(ReduceTime[playerid] == 1)
			            	{
			            	    SendClientMessage(playerid, COLOR_GREY, "Asteapta 3 secunde dupa fiecare comanda!");
			            	    return 1;
			            	}
	               			if(PlayerInfo[playerid][pCarKey] == result)
							{
							}
	               			else if(PlayerInfo[playerid][pDupeKey] == VehicleInfo[result][vKey])
			    			{
							}
	               			else if(VehicleInfo[result][vTrunkLock] == 0)
			    			{
							}
	               			else
		               		{
					            SendClientMessage(playerid, COLOR_WHITE, "Portbagajul este inchis");
					            return 1;
				            }
						    ReduceTime[playerid] = 1;
						    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			                if(IsPlayerInAnyVehicle(playerid))
			                {
			                    SendClientMessage(playerid, COLOR_GREY, " Nu poti deschide un portbagaj cand esti in masina!");
			                    return 1;
			                }
			                if(IsAPlane(result) || IsAdonatebike(result) || IsABiker(result) || IsAHelicopter(result) || IsABoat(result))
               				{
               			    	SendClientMessage(playerid, COLOR_GREY, "Vehicolul nu are portbagaj.");
               			    	return 1;
               				}
               				if(VehicleInfo[result][vTrunkLock] == 1)
	               			{
	               			    SendClientMessage(playerid, COLOR_GREY, "Portbagajul este incuiat.");
	               			    return 1;
	               			}
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
							    SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /trunk putgun [slot]");
							    return 1;
							}
							if(strcmp(tmp, "1", true) == 0)
							{
							    {
		                            if(VehicleInfo[result][vPackage1] == 0)
		                            {
		                                new buffer[512];
		                            	new gunname[100];
		                                // Timer
		                                ReduceTime[playerid] = 1;
		                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
		                                // Action
                                        if(PlayerInfo[playerid][pPack1] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack1] = VehicleInfo[result][vPackage1];
	                                        PlayerInfo[playerid][pPack1a] = VehicleInfo[result][vPackage1a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack1] = 0;
	                                        PlayerInfo[playerid][pPack1a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack2] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack2] = VehicleInfo[result][vPackage1];
	                                        PlayerInfo[playerid][pPack2a] = VehicleInfo[result][vPackage1a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack2] = 0;
	                                        PlayerInfo[playerid][pPack2a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack3] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack3] = VehicleInfo[result][vPackage1];
	                                        PlayerInfo[playerid][pPack3a] = VehicleInfo[result][vPackage1a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack3] = 0;
	                                        PlayerInfo[playerid][pPack3a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack4] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack4] = VehicleInfo[result][vPackage1];
	                                        PlayerInfo[playerid][pPack4a] = VehicleInfo[result][vPackage1a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack4] = 0;
	                                        PlayerInfo[playerid][pPack4a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack5] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack5] = VehicleInfo[result][vPackage1];
	                                        PlayerInfo[playerid][pPack5a] = VehicleInfo[result][vPackage1a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack5] = 0;
	                                        PlayerInfo[playerid][pPack5a] = 0;
                                        }
		                				// Get the weapons name and send a message about him putting his [package] into the trunk.
		                                GetWeaponName(VehicleInfo[result][vPackage1], gunname, sizeof(gunname));
		                                format(buffer, sizeof(buffer), "Ai pus un pachet de gloante pentru %s Gloante: %i in portbagajul masinii.", gunname, VehicleInfo[result][vPackage1a]);
		                                SendClientMessage(playerid, COLOR_WHITE, buffer);
		                                PlayerActionMessage(playerid,15.0,"scoate un pachet din ghiozdan si il pune in portbagajul masinii.");
			                			// Now log the command.
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s /trunk putpackage 1 # %s (Ammo:%i) Owner %s [%s]",d,m,y,h,mi,s,sendername, gunname, VehicleInfo[result][vPackage1a],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
		                                return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Slotul este utilizat.");
	                                    return 1;
	                                }
								}
							}
							if(strcmp(tmp, "2", true) == 0)
							{
							    {
		                            if(VehicleInfo[result][vPackage2] == 0)
		                            {
		                                new buffer[512];
		                            	new gunname[100];
		                                // Timer
		                                ReduceTime[playerid] = 1;
		                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
		                                // Now lets give the car its new stats and the guy his new stats.
                                        if(PlayerInfo[playerid][pPack1] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack1] = VehicleInfo[result][vPackage2];
	                                        PlayerInfo[playerid][pPack1a] = VehicleInfo[result][vPackage2a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack1] = 0;
	                                        PlayerInfo[playerid][pPack1a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack2] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack2] = VehicleInfo[result][vPackage2];
	                                        PlayerInfo[playerid][pPack2a] = VehicleInfo[result][vPackage2a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack2] = 0;
	                                        PlayerInfo[playerid][pPack2a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack3] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack3] = VehicleInfo[result][vPackage2];
	                                        PlayerInfo[playerid][pPack3a] = VehicleInfo[result][vPackage2a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack3] = 0;
	                                        PlayerInfo[playerid][pPack3a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack4] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack4] = VehicleInfo[result][vPackage2];
	                                        PlayerInfo[playerid][pPack4a] = VehicleInfo[result][vPackage2a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack4] = 0;
	                                        PlayerInfo[playerid][pPack4a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack5] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack5] = VehicleInfo[result][vPackage2];
	                                        PlayerInfo[playerid][pPack5a] = VehicleInfo[result][vPackage2a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack5] = 0;
	                                        PlayerInfo[playerid][pPack5a] = 0;
                                        }
		                				// Get the weapons name and send a message about him putting his [package] into the trunk.
		                                GetWeaponName(VehicleInfo[result][vPackage2], gunname, sizeof(gunname));
		                                format(buffer, sizeof(buffer), "Ai pus un pachet de gloante pentru %s Gloante: %i in portbagajul masinii.", gunname, VehicleInfo[result][vPackage2a]);
		                                SendClientMessage(playerid, COLOR_WHITE, buffer);
		                                PlayerActionMessage(playerid,15.0,"scoate un pachet din ghiozdan si il pune in portbagajul masinii.");
			                			// Now log the command.
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s /trunk putpackage 2 # %s (Ammo:%i) Owner %s [%s]",d,m,y,h,mi,s,sendername, gunname, VehicleInfo[result][vPackage2a],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
		                                return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Slotul este utilizat.");
	                                    return 1;
	                                }
								}
							}
							if(strcmp(tmp, "3", true) == 0)
							{
							    {
		                            if(VehicleInfo[result][vPackage3] == 0)
		                            {
		                                new buffer[512];
		                            	new gunname[100];
		                                // Timer
		                                ReduceTime[playerid] = 1;
		                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
		                				// Get the weapons name and send a message about him putting his [package] into the trunk.
                                        if(PlayerInfo[playerid][pPack1] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack3] = VehicleInfo[result][vPackage3];
	                                        PlayerInfo[playerid][pPack3a] = VehicleInfo[result][vPackage3a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack3] = 0;
	                                        PlayerInfo[playerid][pPack3a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack2] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack2] = VehicleInfo[result][vPackage3];
	                                        PlayerInfo[playerid][pPack2a] = VehicleInfo[result][vPackage3a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack2] = 0;
	                                        PlayerInfo[playerid][pPack2a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack3] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack3] = VehicleInfo[result][vPackage3];
	                                        PlayerInfo[playerid][pPack3a] = VehicleInfo[result][vPackage3a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack3] = 0;
	                                        PlayerInfo[playerid][pPack3a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack4] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack4] = VehicleInfo[result][vPackage3];
	                                        PlayerInfo[playerid][pPack4a] = VehicleInfo[result][vPackage3a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack4] = 0;
	                                        PlayerInfo[playerid][pPack4a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack5] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack5] = VehicleInfo[result][vPackage3];
	                                        PlayerInfo[playerid][pPack5a] = VehicleInfo[result][vPackage3a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack5] = 0;
	                                        PlayerInfo[playerid][pPack5a] = 0;
                                        }
		                				// Get the weapons name and send a message about him putting his [package] into the trunk.
		                                GetWeaponName(VehicleInfo[result][vPackage3], gunname, sizeof(gunname));
		                                format(buffer, sizeof(buffer), "Ai pus un pachet de gloante pentru %s Gloante: %i in portbagajul masinii.", gunname, VehicleInfo[result][vPackage3a]);
		                                SendClientMessage(playerid, COLOR_WHITE, buffer);
		                                PlayerActionMessage(playerid,15.0,"scoate un pachet din ghiozdan si il pune in portbagajul masinii.");
			                			// Now log the command.
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s /trunk putpackage 3 # %s (Ammo:%i) Owner %s [%s]",d,m,y,h,mi,s,sendername, gunname, VehicleInfo[result][vPackage3a],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
		                                return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Slotul este utilizat.");
	                                    return 1;
	                                }
	                            }
							}
							if(strcmp(tmp, "4", true) == 0)
							{
							    {
		                            if(VehicleInfo[result][vPackage4] == 0)
		                            {
		                                new buffer[512];
		                            	new gunname[100];
		                                // Timer
		                                ReduceTime[playerid] = 1;
		                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
		                				// Get the weapons name and send a message about him putting his [package] into the trunk.
                                        if(PlayerInfo[playerid][pPack1] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack3] = VehicleInfo[result][vPackage4];
	                                        PlayerInfo[playerid][pPack3a] = VehicleInfo[result][vPackage4a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack3] = 0;
	                                        PlayerInfo[playerid][pPack3a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack2] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack2] = VehicleInfo[result][vPackage4];
	                                        PlayerInfo[playerid][pPack2a] = VehicleInfo[result][vPackage4a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack2] = 0;
	                                        PlayerInfo[playerid][pPack2a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack3] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack3] = VehicleInfo[result][vPackage4];
	                                        PlayerInfo[playerid][pPack3a] = VehicleInfo[result][vPackage4a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack3] = 0;
	                                        PlayerInfo[playerid][pPack3a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack4] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack4] = VehicleInfo[result][vPackage4];
	                                        PlayerInfo[playerid][pPack4a] = VehicleInfo[result][vPackage4a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack4] = 0;
	                                        PlayerInfo[playerid][pPack4a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack5] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack5] = VehicleInfo[result][vPackage4];
	                                        PlayerInfo[playerid][pPack5a] = VehicleInfo[result][vPackage4a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack5] = 0;
	                                        PlayerInfo[playerid][pPack5a] = 0;
                                        }
		                				// Get the weapons name and send a message about him putting his [package] into the trunk.
		                                GetWeaponName(VehicleInfo[result][vPackage4], gunname, sizeof(gunname));
		                                format(buffer, sizeof(buffer), "Ai pus un pachet de gloante pentru %s Gloante: %i in portbagajul masinii.", gunname, VehicleInfo[result][vPackage4a]);
		                                SendClientMessage(playerid, COLOR_WHITE, buffer);
		                                PlayerActionMessage(playerid,15.0,"scoate un pachet din ghiozdan si il pune in portbagajul masinii.");
			                			// Now log the command.
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s /trunk putpackage 4 # %s (Ammo:%i) Owner %s [%s]",d,m,y,h,mi,s,sendername, gunname, VehicleInfo[result][vPackage4a],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
		                                return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Slotul este utilizat.");
	                                    return 1;
	                                }
	                            }
							}
							if(strcmp(tmp, "5", true) == 0)
							{
							    {
		                            if(VehicleInfo[result][vPackage5] == 0)
		                            {
		                                new buffer[512];
		                            	new gunname[100];
		                                // Timer
		                                ReduceTime[playerid] = 1;
		                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
		                				// Get the weapons name and send a message about him putting his [package] into the trunk.
                                        if(PlayerInfo[playerid][pPack1] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack3] = VehicleInfo[result][vPackage5];
	                                        PlayerInfo[playerid][pPack3a] = VehicleInfo[result][vPackage5a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack3] = 0;
	                                        PlayerInfo[playerid][pPack3a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack2] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack2] = VehicleInfo[result][vPackage5];
	                                        PlayerInfo[playerid][pPack2a] = VehicleInfo[result][vPackage5a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack2] = 0;
	                                        PlayerInfo[playerid][pPack2a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack3] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack3] = VehicleInfo[result][vPackage5];
	                                        PlayerInfo[playerid][pPack3a] = VehicleInfo[result][vPackage5a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack3] = 0;
	                                        PlayerInfo[playerid][pPack3a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack4] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack4] = VehicleInfo[result][vPackage5];
	                                        PlayerInfo[playerid][pPack4a] = VehicleInfo[result][vPackage5a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack4] = 0;
	                                        PlayerInfo[playerid][pPack4a] = 0;
                                        }
                                        else if(PlayerInfo[playerid][pPack5] != 0)
                                        {
	                                        PlayerInfo[playerid][pPack5] = VehicleInfo[result][vPackage5];
	                                        PlayerInfo[playerid][pPack5a] = VehicleInfo[result][vPackage5a];
	                                        // Reset it so he looses the package ( Its inside the car now )
	                                        PlayerInfo[playerid][pPack5] = 0;
	                                        PlayerInfo[playerid][pPack5a] = 0;
                                        }
		                				// Get the weapons name and send a message about him putting his [package] into the trunk.
		                                GetWeaponName(VehicleInfo[result][vPackage5], gunname, sizeof(gunname));
		                                format(buffer, sizeof(buffer), "Ai pus un pachet de gloante pentru %s Gloante: %i in portbagajul masinii.", gunname, VehicleInfo[result][vPackage5a]);
		                                SendClientMessage(playerid, COLOR_WHITE, buffer);
		                                PlayerActionMessage(playerid,15.0,"scoate un pachet din ghiozdan si il pune in portbagajul masinii.");
			                			// Now log the command.
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s /trunk putpackage 5 # %s (Ammo:%i) Owner %s [%s]",d,m,y,h,mi,s,sendername, gunname, VehicleInfo[result][vPackage5a],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
		                                return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Slotul este utilizat.");
	                                    return 1;
	                                }
	                            }
							}
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Sunt mai multe masini in apropierea ta!");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"info",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];
			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Nu este nici un vehicul in apropiere.");
			        }

			        case 1:
			        {
               			if(PlayerInfo[playerid][pCarKey] == result)
						{
						}
               			else if(PlayerInfo[playerid][pDupeKey] == VehicleInfo[result][vKey])
		    			{
						}
               			else if(VehicleInfo[result][vTrunkLock] == 0)
		    			{
						}
               			else
	               		{
				            SendClientMessage(playerid, COLOR_WHITE, "Portbagajul este incuiat.");
				            return 1;
			            }
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "Nu poti verifica un portbagaj din masina!");
			            	return 1;
               			}
               			if(IsAPlane(result) || IsAdonatebike(result) || IsABiker(result) || IsAHelicopter(result) || IsABoat(result))
               			{
               			    SendClientMessage(playerid, COLOR_GREY, "Vehicolul nu are portbagaj!");
               			    return 1;
               			}
               			if(VehicleInfo[result][vTrunkLock] == 1)
	               		{
		               		SendClientMessage(playerid, COLOR_GREY, "Portbagajul masinii este inchis.");
		               		return 1;
	               		}
					    ReduceTime[playerid] = 1;
					    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						SendClientMessage(playerid, COLOR_INFO, "_______ Portbagajul masinii_______");
						new gunname[100];
						if(VehicleInfo[result][vTrunk1] != 0)
						{
							GetWeaponName(VehicleInfo[result][vTrunk1], gunname, sizeof(gunname));
							format(string, sizeof(string), "| Slot 1: %s (Gloante: %i)", gunname, VehicleInfo[result][vTrunka1]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "| Slot 1: Nimic");
						    SendClientMessage(playerid, COLOR_WHITE, string);
						}
						// Trunk 2!
						if(VehicleInfo[result][vTrunk2] != 0)
						{
							GetWeaponName(VehicleInfo[result][vTrunk2], gunname, sizeof(gunname));
							format(string, sizeof(string), "| Slot 2: %s (Gloante: %i)", gunname, VehicleInfo[result][vTrunka2]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "| Slot 2: Nimic");
						    SendClientMessage(playerid, COLOR_WHITE, string);
						}
						// Trunk 3
						if(VehicleInfo[result][vTrunk3] != 0)
						{
							GetWeaponName(VehicleInfo[result][vTrunk3], gunname, sizeof(gunname));
							format(string, sizeof(string), "| Slot 3: %s (Gloante: %i)", gunname, VehicleInfo[result][vTrunka3]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "| Slot 3: Nimic");
						    SendClientMessage(playerid, COLOR_WHITE, string);
						}
						// Trunk 4
						if(VehicleInfo[result][vTrunk4] != 0)
						{
							GetWeaponName(VehicleInfo[result][vTrunk4], gunname, sizeof(gunname));
							format(string, sizeof(string), "| Slot 4: %s (Gloante: %i)", gunname, VehicleInfo[result][vTrunka4]);
							SendClientMessage(playerid, COLOR_WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "| Slot 4: Nimic");
						    SendClientMessage(playerid, COLOR_WHITE, string);
						}
						PlayerActionMessage(playerid,15.0,"deschide portbagajul si se uita ce este in el.");
						return 1;
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Sunt mai multe masini in apropiere.");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"putgun",true) == 0)
			{
			    if(PlayerInfo[playerid][pLevel] == 1)
					return SendClientMessage(playerid, COLOR_GREY, "Nu ai voie sa folosesti comanda la level 1!");
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
				if(PlayerInfo[playerid][pFaction] == 3)
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu poti da arma deoarece esti in LSPD!");
        			return 1;
			   	}
  					if(PlayerInfo[playerid][pFaction] == 6)
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu poti da arma deoarece esti in GOV!");
        			return 1;
			   	}
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Nu este nici o masina in apropierea ta.");
			        }

			        case 1:
			        {
			            {
			            	if(ReduceTime[playerid] == 1)
			            	{
			            	    SendClientMessage(playerid, COLOR_WHITE, "Asteapta 3 secunde dupa fiecare comanda!");
			            	}
	               			if(PlayerInfo[playerid][pCarKey] == result)
							{
							}
	               			else if(PlayerInfo[playerid][pDupeKey] == VehicleInfo[result][vKey])
			    			{
							}
	               			else if(VehicleInfo[result][vTrunkLock] == 0)
			    			{
							}
	               			else
		               		{
					            SendClientMessage(playerid, COLOR_WHITE, "Portbagajul este incuiat!");
					            return 1;
				            }
						    ReduceTime[playerid] = 1;
						    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			                if(IsPlayerInAnyVehicle(playerid))
			                {
			                    SendClientMessage(playerid, COLOR_GREY, "Nu poti deschide un portbagaj cand esti intr-o masina.");
			                    return 1;
			                }
			                if(IsAPlane(result) || IsAdonatebike(result) || IsABiker(result) || IsAHelicopter(result) || IsABoat(result))
               				{
               			    	SendClientMessage(playerid, COLOR_GREY, " Vehiculul selectat nu are portbagaj.");
               			    	return 1;
               				}
               				if(VehicleInfo[result][vTrunkLock] == 1)
	               			{
	               			    SendClientMessage(playerid, COLOR_GREY, "Portbagajul masinii este incuiat.");
	               			    return 1;
	               			}
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
							    SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /trunk putgun [slot]");
							    return 1;
							}
							if(strcmp(tmp, "1", true) == 0)
							{
								if(VehicleInfo[result][vTrunk1] == 0)
							    {
		                            new buffer[128];
		                            new gunname[100];
		                            new gunID = GetPlayerWeapon(playerid);
		                            new gunAmmo = GetPlayerAmmo(playerid);

		                            if(gunID != 0 && gunAmmo != 0)
		                            {
										if(gunID == 41)
								        {
								            SendClientMessage(playerid, COLOR_GRAD2, "Nu poti pune ceva ce nu exista.");
								            return 1;
										}
		                                ReduceTime[playerid] = 1;
		                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
		                                GetWeaponName(gunID, gunname, sizeof(gunname));
		                                VehicleInfo[result][vTrunk1] = gunID;
		                                VehicleInfo[result][vTrunka1] = gunAmmo;
		                                format(buffer, sizeof(buffer), "Ai pus in portbagaj un %s (Gloante: %i).", gunname, gunAmmo);
		                                SendClientMessage(playerid, COLOR_WHITE, buffer);
		                                PlayerActionMessage(playerid,15.0,"deschide portbagajul si pune ceva.");
		                                SafeRemovePlayerWeapon(playerid, gunID);
									    ReduceTime[playerid] = 1;
									    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			                			// LOG IT HAHA
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s /trunk putgun 1 # %s (Ammo:%i) Owner %s [%s]",d,m,y,h,mi,s,sendername, gunname, gunAmmo,VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
										SaveVehiclesViaDesc(VehicleInfo[result][vDescription],result);
										SavePlayerAccount(playerid);
										if(CopOnDuty[playerid] == 1)
										{
											GetPlayerName(playerid, sendername, sizeof(sendername));
											// lets log it so that abuser can get a cock in his nose
											format(string, sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s a pus %s cu %i gloante,cand este politist on duty!",d,m,y,h,mi,s,sendername, gunname, gunAmmo, result);
											WeaponLog(string);
										}
		                                return 1;
									}
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Slotul este deja utilizat!");
                                    return 1;
								}
							}
							if(strcmp(tmp, "2", true) == 0)
							{
							    if(VehicleInfo[result][vTrunk2] == 0)
							    {
							        SavePlayerAccount( playerid );
		                            new buffer[128];
		                            new gunname[100];
		                            new gunID = GetPlayerWeapon(playerid);
		                            new gunAmmo = GetPlayerAmmo(playerid);

		                            if(gunID != 0 && gunAmmo != 0)
		                            {
										if(gunID == 41)
								        {
								            SendClientMessage(playerid, COLOR_GRAD2, "Nu poti pune arma in portbagaj.");
								            return 1;
										}
		                                ReduceTime[playerid] = 1;
		                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
		                                GetWeaponName(gunID, gunname, sizeof(gunname));
		                                VehicleInfo[result][vTrunk2] = gunID;
		                                VehicleInfo[result][vTrunka2] = gunAmmo;
		                                format(buffer, sizeof(buffer), "Ai pus in portbagaj un %s (Gloante: %i).", gunname, gunAmmo);
		                                SendClientMessage(playerid, COLOR_WHITE, buffer);
		                                PlayerActionMessage(playerid,15.0,"deschide portbagajul si pune ceva.");
										if(gunID == 24)
								        {
								            PlayerInfo[playerid][pEagle] = 0;
										}
										if(gunID == 25)
								        {
								            PlayerInfo[playerid][pShotgun] = 0;
										}
										if(gunID == 30)
								        {
								            PlayerInfo[playerid][pAK] = 0;
										}
										if(gunID == 31)
								        {
								            PlayerInfo[playerid][pM4] = 0;
										}
		                                SafeRemovePlayerWeapon(playerid, gunID);
		                                SavePlayerAccount(playerid);
									    ReduceTime[playerid] = 1;
									    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			                			// LOG IT HAHA
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s /trunk putgun 2 # %s (Ammo:%i) Owner %s [%s]",d,m,y,h,mi,s,sendername, gunname, gunAmmo,VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
										if(CopOnDuty[playerid] == 1)
										{
					     					new hour,minte,second;
										    gettime(hour,minte,second);
											GetPlayerName(playerid, sendername, sizeof(sendername));
											// lets log it so that abuser can get a cock in his nose
											format(string, sizeof(string), "[TRUNK] %s a pus %s cu %i gloante cand %s este duty ca politist . ((Time: %d:0 Minute %d))", sendername, gunname, gunAmmo, result, hour, minte);
											WeaponLog(string);
										}
		                                return 1;
									}
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Slotul deja este ocupat!");
                                    return 1;
								}
							}
							if(strcmp(tmp, "3", true) == 0)
							{
							    if(VehicleInfo[result][vTrunk3] == 0)
							    {
							        SavePlayerAccount( playerid );
		                            new buffer[128];
		                            new gunname[100];
		                            new gunID = GetPlayerWeapon(playerid);
		                            new gunAmmo = GetPlayerAmmo(playerid);

		                            if(gunID != 0 && gunAmmo != 0)
		                            {
										if(gunID == 41)
								        {
								            SendClientMessage(playerid, COLOR_GRAD2, "You cannot trunk this.");
								            return 1;
										}
		                                ReduceTime[playerid] = 1;
		                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
		                                GetWeaponName(gunID, gunname, sizeof(gunname));
		                                VehicleInfo[result][vTrunk3] = gunID;
		                                VehicleInfo[result][vTrunka3] = gunAmmo;
		                                format(buffer, sizeof(buffer), "Ai pus in portbagaj un %s (Gloante: %i).", gunname, gunAmmo);
		                                SendClientMessage(playerid, COLOR_WHITE, buffer);
		                                PlayerActionMessage(playerid,15.0,"deschide portbagajul si pune ceva.");
										if(gunID == 24)
								        {
								            PlayerInfo[playerid][pEagle] = 0;
										}
										if(gunID == 25)
								        {
								            PlayerInfo[playerid][pShotgun] = 0;
										}
										if(gunID == 30)
								        {
								            PlayerInfo[playerid][pAK] = 0;
										}
										if(gunID == 31)
								        {
								            PlayerInfo[playerid][pM4] = 0;
										}
		                                SafeRemovePlayerWeapon(playerid, gunID);
		                                SavePlayerAccount(playerid);
									    ReduceTime[playerid] = 1;
									    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			                			// LOG IT HAHA
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s /trunk putgun 3 # %s (Ammo:%i) Owner %s [%s]",d,m,y,h,mi,s,sendername, gunname, gunAmmo,VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
										if(CopOnDuty[playerid] == 1)
										{
					     					new hour,minte,second;
										    gettime(hour,minte,second);
											GetPlayerName(playerid, sendername, sizeof(sendername));
											// lets log it so that abuser can get a cock in his nose
											format(string, sizeof(string), "[TRUNK] %s a pus %s cu %i gloante cand %s este duty ca politist . ((Time: %d:0 Minute %d))", sendername, gunname, gunAmmo, result, hour, minte);
											WeaponLog(string);
										}
		                                return 1;
									}
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Slotul este deja folosit.");
                                    return 1;
								}
							}
							if(strcmp(tmp, "4", true) == 0)
							{
							    if(VehicleInfo[result][vTrunk4] == 0)
							    {
							        SavePlayerAccount( playerid );
		                            new buffer[128];
		                            new gunname[100];
		                            new gunID = GetPlayerWeapon(playerid);
		                            new gunAmmo = GetPlayerAmmo(playerid);

		                            if(gunID != 0 && gunAmmo != 0)
		                            {
										if(gunID == 41)
								        {
								            SendClientMessage(playerid, COLOR_GRAD2, "Nu puteti pune in locul acesta.");
								            return 1;
										}
		                                ReduceTime[playerid] = 1;
		                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
		                                GetWeaponName(gunID, gunname, sizeof(gunname));
		                                VehicleInfo[result][vTrunk4] = gunID;
		                                VehicleInfo[result][vTrunka4] = gunAmmo;
		                                format(buffer, sizeof(buffer), "Ai pus in portbagaj un %s (Gloante: %i).", gunname, gunAmmo);
		                                SendClientMessage(playerid, COLOR_WHITE, buffer);
		                                PlayerActionMessage(playerid,15.0,"deschide portbagajul si pune ceva..");
										if(gunID == 24)
								        {
								            PlayerInfo[playerid][pEagle] = 0;
										}
										if(gunID == 25)
								        {
								            PlayerInfo[playerid][pShotgun] = 0;
										}
										if(gunID == 30)
								        {
								            PlayerInfo[playerid][pAK] = 0;
										}
										if(gunID == 31)
								        {
								            PlayerInfo[playerid][pM4] = 0;
										}
		                                SafeRemovePlayerWeapon(playerid, gunID);
		                                SavePlayerAccount(playerid);
									    ReduceTime[playerid] = 1;
									    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			                			// LOG IT HAHA
										GetPlayerName(playerid, sendername, sizeof(sendername));
										new y, m, d;
										new h,mi,s;
										getdate(y,m,d);
										gettime(h,mi,s);
										format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s /trunk putgun 4 # %s (Gloante:%i) Proprietar %s [%s]",d,m,y,h,mi,s,sendername, gunname, gunAmmo,VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
										WeaponLog(string);
										if(CopOnDuty[playerid] == 1)
										{
					     					new hour,minte,second;
										    gettime(hour,minte,second);
											GetPlayerName(playerid, sendername, sizeof(sendername));
											// lets log it so that abuser can get a cock in his nose
											format(string, sizeof(string), "[TRUNK] %s a pus %s cu %i gloante cand %s este duty ca politist . ((Time: %d:0 Minute %d))", sendername, gunname, gunAmmo, result, hour, minte);
											WeaponLog(string);
										}
		                                return 1;
									}
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Slotul este deja utilizat.");
                                    return 1;
								}
							}
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Sunt m-ai multe masini in apropiere!");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"takegun",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Nu sunt masini cu portbagaj in apropierea ta.");
			        }

			        case 1:
			        {
			            {
			            	if(ReduceTime[playerid] == 1)
			            	{
			            	    SendClientMessage(playerid, COLOR_GREY, "Asteapta 3 secunde dupa fiecare comanda!");
			            	    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			            	    return 1;
			            	}
	               			if(PlayerInfo[playerid][pCarKey] == result || PlayerInfo[playerid][pCarKey2] == result)
							{
							}
	               			else if(PlayerInfo[playerid][pDupeKey] == VehicleInfo[result][vKey])
			    			{
							}
	               			else if(VehicleInfo[result][vTrunkLock] == 0)
			    			{
							}
	               			else
		               		{
					            SendClientMessage(playerid, COLOR_WHITE, "Portbagajul este inchis.");
					            return 1;
				            }
			                if(IsPlayerInAnyVehicle(playerid))
			                {
			                    SendClientMessage(playerid, COLOR_GREY, "Nu poti deschide un portbagaj din masina.");
			                    return 1;
			                }
			                if(IsAPlane(result) || IsAdonatebike(result) || IsABiker(result) || IsAHelicopter(result) || IsABoat(result))
               				{
               			    	SendClientMessage(playerid, COLOR_GREY, "Vehicolul nu are portbagaj.");
               			    	return 1;
               				}
               				if(VehicleInfo[result][vTrunkLock] == 1)
	               			{
	               			    SendClientMessage(playerid, COLOR_GREY, "Portbagajul este inchis!");
	               			    return 1;
	               			}
							tmp = strtok(cmdtext, idx);
							if(!strlen(tmp))
							{
							    SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /trunk takegun [slot]");
							    return 1;
							}
							if(strcmp(tmp, "1", true) == 0)
							{
								if(VehicleInfo[result][vTrunk1] != 0)
							    {
									if(PlayerInfo[playerid][pLevel] == 1)
								    {
										SendClientMessage(playerid, COLOR_GREY, "Nu poti scoate o arma la level 1!.");
				        				return 1;
								    }
					                ReduceTime[playerid] = 1;
		               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
					                new buffer[128];
					                new gunName[100];
					                GetWeaponName(VehicleInfo[result][vTrunk1], gunName, sizeof(gunName));
					                format(buffer, sizeof(buffer), "Ai scos un %s (Gloante: %i) din vehicul.", gunName, VehicleInfo[result][vTrunka1]);
					                SendClientMessage(playerid, COLOR_WHITE, buffer);
								    SafeGivePlayerWeapon(playerid, VehicleInfo[result][vTrunk1], VehicleInfo[result][vTrunka1]);
					                PlayerActionMessage(playerid,15.0,"deschide portbagajul,dupa care scoate ceva de acolo.");
								    ReduceTime[playerid] = 1;
								    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
								    if(VehicleInfo[result][vTrunk1] == 29)
									{
								    	PlayerInfo[playerid][pMP5] = 1;
								    }
								    if(VehicleInfo[result][vTrunk1] == 24)
								    {
								    	PlayerInfo[playerid][pEagle] = 1;
									}
									if(VehicleInfo[result][vTrunk1] == 28)
									{
								    	PlayerInfo[playerid][pUzi] = 1;
									}
		                			// LOG IT HAHA
									GetPlayerName(playerid, sendername, sizeof(sendername));
									new y, m, d;
									new h,mi,s;
									getdate(y,m,d);
									gettime(h,mi,s);
									format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s > /trunk takegun 1 # %s (Gloante: %i) Proprietar: %s [%s]",d,m,y,h,mi,s,sendername, gunName, VehicleInfo[result][vTrunka1],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
									WeaponLog(string);
									// Reset it
					                VehicleInfo[result][vTrunk1] = 0;
					                VehicleInfo[result][vTrunka1] = 0;
					                SaveVehiclesViaDesc(VehicleInfo[result][vDescription],result);
	                                return 1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Slotul este gol.");
                                    return 1;
								}
							}
							if(strcmp(tmp, "2", true) == 0)
							{
								if(VehicleInfo[result][vTrunk2] != 0)
							    {
									if(PlayerInfo[playerid][pLevel] == 1)
								    {
										SendClientMessage(playerid, COLOR_GREY, "Nu poti scoate o arma la level 1!");
				        				return 1;
								    }
					                ReduceTime[playerid] = 1;
		               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
					                new buffer[128];
					                new gunName[100];
					                GetWeaponName(VehicleInfo[result][vTrunk2], gunName, sizeof(gunName));
					                format(buffer, sizeof(buffer), "Ai scos un %s (Gloante: %i) din vehicul.", gunName, VehicleInfo[result][vTrunka2]);
					                SendClientMessage(playerid, COLOR_WHITE, buffer);
								    SafeGivePlayerWeapon(playerid, VehicleInfo[result][vTrunk2], VehicleInfo[result][vTrunka2]);
					                PlayerActionMessage(playerid,15.0,"deschide portbagajul,dupa care scoate ceva de acolo..");
								    ReduceTime[playerid] = 1;
								    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
								    if(VehicleInfo[result][vTrunk2] == 29)
								    {
							    		PlayerInfo[playerid][pMP5] = 1;
								    }
								    if(VehicleInfo[result][vTrunk2] == 24)
								    {
								    	PlayerInfo[playerid][pEagle] = 1;
								    }
								    if(VehicleInfo[result][vTrunk2] == 28)
								    {
								    	PlayerInfo[playerid][pUzi] = 1;
								    }
		                			// LOG IT HAHA
									GetPlayerName(playerid, sendername, sizeof(sendername));
									new y, m, d;
									new h,mi,s;
									getdate(y,m,d);
									gettime(h,mi,s);
									format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s > /trunk takegun 2 # %s (Gloante: %i) Proprietar: %s [%s]",d,m,y,h,mi,s,sendername, gunName, VehicleInfo[result][vTrunka2],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
									WeaponLog(string);
									// Reset it
					                VehicleInfo[result][vTrunk2] = 0;
					                VehicleInfo[result][vTrunka2] = 0;
					                SaveVehiclesViaDesc(VehicleInfo[result][vDescription],result);
	                                return 1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Slotul este gol.");
                                    return 1;
								}
							}
							if(strcmp(tmp, "3", true) == 0)
							{
							    if(VehicleInfo[result][vTrunk3] != 0)
							    {
									if(PlayerInfo[playerid][pLevel] == 1)
								    {
										SendClientMessage(playerid, COLOR_GREY, "Nu poti scoate o arma la level 1!");
				        				return 1;
								    }
					                ReduceTime[playerid] = 1;
		               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
					                new buffer[128];
					                new gunName[100];
					                GetWeaponName(VehicleInfo[result][vTrunk3], gunName, sizeof(gunName));
					                format(buffer, sizeof(buffer), "Ai scos un %s (Gloante: %i) din vehicul.", gunName, VehicleInfo[result][vTrunka3]);
					                SendClientMessage(playerid, COLOR_WHITE, buffer);
								    SafeGivePlayerWeapon(playerid, VehicleInfo[result][vTrunk3], VehicleInfo[result][vTrunka3]);
					                PlayerActionMessage(playerid,15.0,"deschide portbagajul,dupa care scoate ceva de acolo..");
								    ReduceTime[playerid] = 1;
								    SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
								    if(VehicleInfo[result][vTrunk3] == 29)
								    {
								    	PlayerInfo[playerid][pMP5] = 1;
								    }
								    if(VehicleInfo[result][vTrunk3] == 24)
								    {
								    	PlayerInfo[playerid][pEagle] = 1;
								    }
								    if(VehicleInfo[result][vTrunk3] == 28)
								    {
								    	PlayerInfo[playerid][pUzi] = 1;
								    }
		                			// LOG IT HAHA
									GetPlayerName(playerid, sendername, sizeof(sendername));
									new y, m, d;
									new h,mi,s;
									getdate(y,m,d);
									gettime(h,mi,s);
									format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s > /trunk takegun 3 # %s (Gloante: %i) Proprietar: %s [%s]",d,m,y,h,mi,s,sendername, gunName, VehicleInfo[result][vTrunka3],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
									WeaponLog(string);
									// Reset it
					                VehicleInfo[result][vTrunk3] = 0;
					                VehicleInfo[result][vTrunka3] = 0;
					                SaveVehiclesViaDesc(VehicleInfo[result][vDescription],result);
	                                return 1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Slotul este gol!.");
                                    return 1;
								}
							}
							if(strcmp(tmp, "4", true) == 0)
							{
							    if(VehicleInfo[result][vTrunk4] != 0)
							    {
									if(PlayerInfo[playerid][pLevel] == 1)
								    {
										SendClientMessage(playerid, COLOR_GREY, "Nu poti scoate o arma la level 1!");
				        				return 1;
								    }
						        	ReduceTime[playerid] = 1;
			               			SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
						            new buffer[128];
						            new gunName[100];
						            GetWeaponName(VehicleInfo[result][vTrunk4], gunName, sizeof(gunName));
						            format(buffer, sizeof(buffer), "Ai scos un %s (Gloante: %i) din vehicul.", gunName, VehicleInfo[result][vTrunka4]);
						            SendClientMessage(playerid, COLOR_WHITE, buffer);
								    SafeGivePlayerWeapon(playerid, VehicleInfo[result][vTrunk4], VehicleInfo[result][vTrunka4]);
						            PlayerActionMessage(playerid,15.0,"deschide portbagajul,dupa care scoate ceva de acolo.");
									ReduceTime[playerid] = 1;
									SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
									if(VehicleInfo[result][vTrunk4] == 29)
									{
										PlayerInfo[playerid][pMP5] = 1;
									}
									if(VehicleInfo[result][vTrunk4] == 24)
									{
										PlayerInfo[playerid][pEagle] = 1;
									}
									if(VehicleInfo[result][vTrunk4] == 28)
								    {
								    	PlayerInfo[playerid][pUzi] = 1;
								    }
		                			// LOG IT HAHA
									GetPlayerName(playerid, sendername, sizeof(sendername));
									new y, m, d;
									new h,mi,s;
									getdate(y,m,d);
									gettime(h,mi,s);
									format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s > /trunk takegun 4 # %s (Gloante: %i) Proprietar: %s [%s]",d,m,y,h,mi,s,sendername, gunName, VehicleInfo[result][vTrunka4],VehicleInfo[result][vOwner],VehicleNames[GetVehicleModel(result)-400]);
									WeaponLog(string);
									// Reset it
					                VehicleInfo[result][vTrunk4] = 0;
					                VehicleInfo[result][vTrunka4] = 0;
					                SaveVehiclesViaDesc(VehicleInfo[result][vDescription],result);
	                                return 1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "Slotul este gol.");
                                    return 1;
								}
							}
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Sunt mai multe masini in zona cu portbagaj.");
			            return 1;
			        }
			    }
			    return 1;
			}
			else if(strcmp(x_nr,"lock",true) == 0)
			{
			    if(PlayerInfo[playerid][pFaction] >= 0)
			    {
			    	new counter = 0;
			    	new result;
			    	new plyName[MAX_PLAYER_NAME];

				    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
				    for(new i; i != MAX_VEHICLES; i++)
				    {
				        new dist = CheckPlayerDistanceToVehicle(5.5, playerid, i);
			    	    if(dist)
			        	{
			           		result = i;
			            	counter++;
			        	}
			    	}
			    	switch(counter)
			    	{
			        	case 0:
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "Nu sunt vehicule cu portbagaj in apropiere.");
			        	}

			        	case 1:
			        	{
			        	    {
			        	        if(IsPlayerInAnyVehicle(playerid))
	      						{
				                	SendClientMessage(playerid, COLOR_GREY, "Nu poti deschide portbagajul cat timp esti in masina");
				            		return 1;
	               				}
	               				if(IsAPlane(result) || IsAdonatebike(result) || IsABike(result) || IsAHelicopter(result) || IsABoat(result))
	               				{
	               			    	SendClientMessage(playerid, COLOR_GREY, "Acest vehicul nu are portbagaj");
	               			    	return 1;
	               				}
				            	if(PlayerInfo[playerid][pCarKey] == result)
								{
									if(VehicleInfo[result][vTrunkLock] == 0)
									{
				                    	GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    	SetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
									    GameTextForPlayer(playerid, "~g~Portbagaj ~r~Inchis", 3000, 3);
										VehicleInfo[result][vTrunkLock] = 1;
									}
									else
									{
				                    	GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    	SetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
									    GameTextForPlayer(playerid, "~g~Portbagaj ~r~Deschis", 3000, 3);
										VehicleInfo[result][vTrunkLock] = 0;
									}
								}
		               			else if(PlayerInfo[playerid][pDupeKey] == VehicleInfo[result][vKey])
				    			{
									if(VehicleInfo[result][vTrunkLock] == 0)
									{
				                    	GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    	SetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
									    GameTextForPlayer(playerid, "~g~Portbagaj ~r~Inchis", 3000, 3);
										VehicleInfo[result][vTrunkLock] = 1;
									}
									else
									{
				                    	GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    	SetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
									    GameTextForPlayer(playerid, "~g~Portbagaj ~r~Deschis", 3000, 3);
										VehicleInfo[result][vTrunkLock] = 0;
									}
								}
		               			else if(VehicleInfo[result][vTrunkLock] == 1 && PlayerInfo[playerid][pToolkit] == 0)
				    			{
	               			    	SendClientMessage(playerid, COLOR_GREY, "Acest portbagaj este inchis");
	               			    	return 1;
								}
		               			else if(VehicleInfo[result][vTrunkLock] == 1 && PlayerInfo[playerid][pToolkit] == 1)
			               		{
						            // LETS JACK THIS BIATCH
                                    IsJacking[playerid] = 1;
						            PlayerInfo[playerid][pJackingtrunkID] = result;
						            TogglePlayerControllable(playerid,0);
									new form[128];
									format(form, sizeof(form), "scoate o trusa de scule si incearca sa sparga incuietoarea masinii de tip %s.", VehicleNames[GetVehicleModel(result)-400]);
									PlayerActionMessage(playerid,20.0,form);
									// if the valarm is 3 or higher then it will nudge the police
									if(VehicleInfo[result][vAlarm] == 1)
									{
										format(string, sizeof(string), "* ALARMA MASINII: BEEP BEEP BEEP BEEP BEEP BEEP.");
										ProxDetector(40.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										new Float:x,Float:y,Float:z;
										GetPlayerPos(playerid,x,y,z);
										PlayerPlaySound(playerid, 1138, x, y, z);
									}
									else if(VehicleInfo[result][vAlarm] == 2)
									{
										format(string, sizeof(string), "* ALARMA MASINII: BEEP BEEP BEEP BEEP BEEP BEEP.");
										ProxDetector(70.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										new Float:x,Float:y,Float:z;
										GetPlayerPos(playerid,x,y,z);
										PlayerPlaySound(playerid, 1138, x, y, z);
									}
									else if(VehicleInfo[result][vAlarm] == 3)
									{
										format(string, sizeof(string), "* ALARMA MASINII: BEEP BEEP BEEP BEEP BEEP BEEP.");
										ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										new Float:x,Float:y,Float:z;
										GetPlayerPos(playerid,x,y,z);
										PlayerPlaySound(playerid, 1138, x, y, z);

										new vZone[MAX_ZONE_NAME];
										GetVehicleZone(result, vZone, MAX_ZONE_NAME);
										format(string, sizeof(string), "[ALARM VEHICLE] %s localizat in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
										SendFactionMessage(1, COLOR_LIGHTRED, string);
										format(string, sizeof(string), "[ALARM VEHICLE] %s localizat in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
										SendFactionMessage(3, COLOR_LIGHTRED, string);
									}
									else if(VehicleInfo[result][vAlarm] == 4)
									{
										format(string, sizeof(string), "* ALARMA MASINII: BEEP BEEP BEEP BEEP BEEP BEEP.");
										ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										new Float:x,Float:y,Float:z;
										GetPlayerPos(playerid,x,y,z);
										PlayerPlaySound(playerid, 1138, x, y, z);

										new vZone[MAX_ZONE_NAME];
										GetVehicleZone(result, vZone, MAX_ZONE_NAME);
										format(string, sizeof(string), "[ALARM VEHICLE] %s localizat in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
										SendFactionMessage(1, COLOR_LIGHTRED, string);
										format(string, sizeof(string), "[ALARM VEHICLE] %s localizat in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
										SendFactionMessage(3, COLOR_LIGHTRED, string);
									}
									else if(VehicleInfo[result][vAlarm] == 5)
									{
										format(string, sizeof(string), "* ALARMA MASINII: BEEP BEEP BEEP BEEP BEEP BEEP.");
										ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
										new Float:x,Float:y,Float:z;
										GetPlayerPos(playerid,x,y,z);
										PlayerPlaySound(playerid, 1138, x, y, z);

										new vZone[MAX_ZONE_NAME];
										GetVehicleZone(result, vZone, MAX_ZONE_NAME);
										format(string, sizeof(string), "[ALARM VEHICLE] %s localizat in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
										SendFactionMessage(1, COLOR_LIGHTRED, string);
										format(string, sizeof(string), "[ALARM VEHICLE] %s localizat in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
										SendFactionMessage(3, COLOR_LIGHTRED, string);
										for(new i = 0; i < MAX_PLAYERS; i++)
										{
									    	if(IsPlayerConnected(i))
									    	{
									        	if(result == PlayerInfo[i][pCarKey] || PlayerInfo[i][pCarKey] == result)
									        	{
									            	SendClientMessage(i, COLOR_YELLOW, "SMS: Alarma de la masina ta este sparta in acest moment, Expeditor: AlarmService (4224)");
									        	}
									    	}
										}
									}
									////////////////////////////////////////////////
									if(VehicleInfo[result][vLockBuyed] == 0)      ////
									{                                           ////
										PlayerInfo[playerid][pJackingtrunk] = 60;    ////
									}                                           ////
									else if(VehicleInfo[result][vLockBuyed] == 1)     ////
									{                                           ////
										PlayerInfo[playerid][pJackingtrunk] = 120;   ////
									}                                           ////
									else if(VehicleInfo[result][vLockBuyed] == 2)     ////
									{                                           ////
										PlayerInfo[playerid][pJackingtrunk] = 180;   ////
									}                                           ////
									else if(VehicleInfo[result][vLockBuyed] == 3)     ////
									{                                           ////
										PlayerInfo[playerid][pJackingtrunk] = 240;   ////
									}                                           ////
									else if(VehicleInfo[result][vLockBuyed] == 4)     ////
									{                                           ////
										PlayerInfo[playerid][pJackingtrunk] = 300;   ////
									}                                            ////
									else if(VehicleInfo[result][vLockBuyed] == 5)      ////
									{                                           ////
										PlayerInfo[playerid][pJackingtrunk] = 360;   ////
									}                                          ////
					            }
		               			else if(VehicleInfo[result][vTrunkLock] == 0)
			               		{
						            PlayerActionMessage(playerid,15.0,"deschide portbagajul urmand sa se uite in el.");
						            // Check it
									SendClientMessage(playerid, COLOR_GREEN, "_______ Portbagajul masinii _______");
									new gunname[100];
									if(VehicleInfo[result][vTrunk1] != 0)
									{
										GetWeaponName(VehicleInfo[result][vTrunk1], gunname, sizeof(gunname));
										format(string, sizeof(string), "| Slot 1: %s (Ammo: %i)", gunname, VehicleInfo[result][vTrunka1]);
										SendClientMessage(playerid, COLOR_WHITE, string);
									}
									else
									{
									    format(string, sizeof(string), "| Slot 1: Gol");
									    SendClientMessage(playerid, COLOR_WHITE, string);
									}
									// Trunk 2!
									if(VehicleInfo[result][vTrunk2] != 0)
									{
										GetWeaponName(VehicleInfo[result][vTrunk2], gunname, sizeof(gunname));
										format(string, sizeof(string), "| Slot 2: %s (Ammo: %i)", gunname, VehicleInfo[result][vTrunka2]);
										SendClientMessage(playerid, COLOR_WHITE, string);
									}
									else
									{
									    format(string, sizeof(string), "| Slot 2: Gol");
									    SendClientMessage(playerid, COLOR_WHITE, string);
									}
									// Trunk 3
									if(VehicleInfo[result][vTrunk3] != 0)
									{
										GetWeaponName(VehicleInfo[result][vTrunk3], gunname, sizeof(gunname));
										format(string, sizeof(string), "| Slot 3: %s (Ammo: %i)", gunname, VehicleInfo[result][vTrunka3]);
										SendClientMessage(playerid, COLOR_WHITE, string);
									}
									else
									{
									    format(string, sizeof(string), "| Slot 3: Gol");
									    SendClientMessage(playerid, COLOR_WHITE, string);
									}
									// Trunk 4
									if(VehicleInfo[result][vTrunk4] != 0)
									{
										GetWeaponName(VehicleInfo[result][vTrunk4], gunname, sizeof(gunname));
										format(string, sizeof(string), "| Slot 4: %s (Ammo: %i)", gunname, VehicleInfo[result][vTrunka4]);
										SendClientMessage(playerid, COLOR_WHITE, string);
									}
									else
									{
									    format(string, sizeof(string), "| Slot 4: Gol");
									    SendClientMessage(playerid, COLOR_WHITE, string);
									}
						            return 1;
								}
							}
			        	}
				        default:
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Nu esti langa un vehicul.");
				            return 1;
			    	    }
			    	}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
					return 1;
				}
			    return 1;
			}
			else if(strcmp(x_nr,"frisk",true) == 0)
			{
			    if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
			    {
			    	new counter = 0;
			    	new result;
			    	new plyName[MAX_PLAYER_NAME];

				    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
				    for(new i; i != MAX_VEHICLES; i++)
				    {
				        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			    	    if(dist)
			        	{
			           		result = i;
			            	counter++;
			        	}
			    	}
			    	switch(counter)
			    	{
			        	case 0:
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "Nu sunt vehicule cu portbagaj in apropiere.");
			        	}

			        	case 1:
			        	{
			        	    {
				            	if(IsPlayerInAnyVehicle(playerid))
	      						{
				                	SendClientMessage(playerid, COLOR_GREY, "Nu poti controla un portbagaj din masina.");
				            		return 1;
	               				}
	               				if(IsAPlane(result) || IsAdonatebike(result) || IsABiker(result) || IsAHelicopter(result) || IsABoat(result))
	               				{
	               			    	SendClientMessage(playerid, COLOR_GREY, "Vehicolul nu are portbagaj");
	               			    	return 1;
	               				}

								SendClientMessage(playerid, COLOR_GREEN, "_______ Portbagajul masinii _______");
								new gunname[100];
								if(VehicleInfo[result][vTrunk1] != 0)
								{
									GetWeaponName(VehicleInfo[result][vTrunk1], gunname, sizeof(gunname));
									format(string, sizeof(string), "| Slot 1: %s (Gloante: %i)", gunname, VehicleInfo[result][vTrunka1]);
									SendClientMessage(playerid, COLOR_WHITE, string);
								}
								else
								{
								    format(string, sizeof(string), "| Slot 1: Nimic");
								    SendClientMessage(playerid, COLOR_WHITE, string);
								}
								// Trunk 2!
								if(VehicleInfo[result][vTrunk2] != 0)
								{
									GetWeaponName(VehicleInfo[result][vTrunk2], gunname, sizeof(gunname));
									format(string, sizeof(string), "| Slot 2: %s (Gloante: %i)", gunname, VehicleInfo[result][vTrunka2]);
									SendClientMessage(playerid, COLOR_WHITE, string);
								}
								else
								{
								    format(string, sizeof(string), "| Slot 2: Nimic");
								    SendClientMessage(playerid, COLOR_WHITE, string);
								}
								// Trunk 3
								if(VehicleInfo[result][vTrunk3] != 0)
								{
									GetWeaponName(VehicleInfo[result][vTrunk3], gunname, sizeof(gunname));
									format(string, sizeof(string), "| Slot 3: %s (Gloante: %i)", gunname, VehicleInfo[result][vTrunka3]);
									SendClientMessage(playerid, COLOR_WHITE, string);
								}
								else
								{
								    format(string, sizeof(string), "| Slot 3: Nimic");
								    SendClientMessage(playerid, COLOR_WHITE, string);
								}
								// Trunk 4
								if(VehicleInfo[result][vTrunk4] != 0)
								{
									GetWeaponName(VehicleInfo[result][vTrunk4], gunname, sizeof(gunname));
									format(string, sizeof(string), "| Slot 4: %s (Gloante: %i)", gunname, VehicleInfo[result][vTrunka4]);
									SendClientMessage(playerid, COLOR_WHITE, string);
								}
								else
								{
								    format(string, sizeof(string), "| Slot 4: Nimic");
								    SendClientMessage(playerid, COLOR_WHITE, string);
								}
								PlayerActionMessage(playerid,15.0,"deschide fortat portbagajul urmand sa vada ce este in acesta..");
								return 1;
							}
			        	}

				        default:
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Nu esti langa un vehicul.");
				            return 1;
			    	    }
			    	}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
					return 1;
				}
			    return 1;
			}
   			else if(strcmp(x_nr,"detain",true) == 0)
			{
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }

			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Nu sunt vehicule cu portbagaj in apropiere.");
			            return 1;
			        }

			        case 1:
			        {
			            if(PlayerInfo[playerid][pFaction] == 1 || PlayerInfo[playerid][pFaction] == 3)
			            {
				            if(IsPlayerInAnyVehicle(playerid))
				            {
				                SendClientMessage(playerid, COLOR_GREY, "Nu poti deschide portbagajul din masina.");
				                return 1;
				            }
				            if(ReduceTime[playerid] == 1)
				            {
				                SendClientMessage(playerid, COLOR_GREY, "Asteapta 3 secunde dupa orice comanda!");
				                return 1;
			            	}
				           	if(IsAPlane(result) || IsAdonatebike(result) || IsABiker(result) || IsAHelicopter(result) || IsABoat(result))
	               			{
	               			    SendClientMessage(playerid, COLOR_GREY, "Vehiculul nu are portbagaj.");
	               			    return 1;
	               			}
				            if(VehicleInfo[result][vTrunk1] != 0 || VehicleInfo[result][vTrunk2] != 0 || VehicleInfo[result][vTrunk3] != 0 || VehicleInfo[result][vTrunk4] != 0)
				            {
				                ReduceTime[playerid] = 1;
	               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
				                new buffer[512];
								if(VehicleInfo[result][vTrunk1] != 0)
								{
				                	new gunName[100];
									GetWeaponName(VehicleInfo[result][vTrunk1], gunName, sizeof(gunName));
					                format(buffer, sizeof(buffer), "Ai scos un  %s (Gloante: %i) din vehicul", gunName, VehicleInfo[result][vTrunka1]);
					                SendClientMessage(playerid, COLOR_WHITE, buffer);
					                SafeGivePlayerWeapon(playerid, VehicleInfo[result][vTrunk1], VehicleInfo[result][vTrunka1]);
					                VehicleInfo[result][vTrunk1] = 0;
					                VehicleInfo[result][vTrunka1] = 0;
								}
								if(VehicleInfo[result][vTrunk2] != 0)
								{
				                	new gunName[100];
									GetWeaponName(VehicleInfo[result][vTrunk2], gunName, sizeof(gunName));
					                format(buffer, sizeof(buffer), "Ai scos un  %s (Gloante: %i) din vehicul", gunName, VehicleInfo[result][vTrunka2]);
					                SendClientMessage(playerid, COLOR_WHITE, buffer);
					                SafeGivePlayerWeapon(playerid, VehicleInfo[result][vTrunk2], VehicleInfo[result][vTrunka2]);
					                VehicleInfo[result][vTrunk2] = 0;
					                VehicleInfo[result][vTrunka2] = 0;
								}
								if(VehicleInfo[result][vTrunk3] != 0)
								{
				                	new gunName[100];
									GetWeaponName(VehicleInfo[result][vTrunk3], gunName, sizeof(gunName));
					                format(buffer, sizeof(buffer), "Ai scos un  %s (Gloante: %i) din vehicul", gunName, VehicleInfo[result][vTrunka3]);
					                SendClientMessage(playerid, COLOR_WHITE, buffer);
					                SafeGivePlayerWeapon(playerid, VehicleInfo[result][vTrunk3], VehicleInfo[result][vTrunka3]);
					                VehicleInfo[result][vTrunk3] = 0;
					                VehicleInfo[result][vTrunka3] = 0;
								}
								if(VehicleInfo[result][vTrunk4] != 0)
								{
				                	new gunName[100];
									GetWeaponName(VehicleInfo[result][vTrunk4], gunName, sizeof(gunName));
					                format(buffer, sizeof(buffer), "Ai scos un  %s (Gloante: %i) din vehicul", gunName, VehicleInfo[result][vTrunka4]);
					                SendClientMessage(playerid, COLOR_WHITE, buffer);
					                SafeGivePlayerWeapon(playerid, VehicleInfo[result][vTrunk4], VehicleInfo[result][vTrunka4]);
					                VehicleInfo[result][vTrunk4] = 0;
					                VehicleInfo[result][vTrunka4] = 0;
								}
			                	// LOG IT HAHA
								GetPlayerName(playerid, sendername, sizeof(sendername));
								new y, m, d;
								new hh,mi,s;
								getdate(y,m,d);
								gettime(hh,mi,s);
								format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /trunk detain ",d,m,y,hh,mi,s,sendername);
								CommandLog(string);
								PlayerActionMessage(playerid,15.0,"deschide portbagajul fortat dupa care ia tot ce este acolo.");
				    		 	SaveVehicles(playerid, result);
				                return 1;
				            }
				            else
				            {
				                SendClientMessage(playerid, COLOR_WHITE, "Portbagajul este gol.");
				                return 1;
				            }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "Factiune invalida.");
          					return 1;
						}
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Nu esti langa o masina.");
			            return 1;
			        }
			    }
			    return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /trunk [item]");
			    SendClientMessage(playerid, COLOR_WHITE, "info | putgun | takegun | package | lock");
			    if(PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Poti folosi comanda /trunk frisk pentru a controla vehicolul.");
			        SendClientMessage(playerid, COLOR_WHITE, "Poti folosi comanda /trunk detain pentru a confisca marfa din vehicul.");
			    }
			    return 1;
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/gotocar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "{AFAFAF}SYNTAX{FFFFFF}: /gotocar [carid]");
				return 1;
			}
			new testcar = strval(tmp);
			if(PlayerInfo[playerid][pAdministrator] >= 1 || PlayerInfo[playerid][pDeveloper] == 1)
			{
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(testcar, cwx2, cwy2, cwz2);
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, cwx2, cwy2, cwz2+2);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Ai fost teleportat");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Nu esti autorizat sa folosesti comanda!");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/kickfromjob",true)==0)
	{
 		if (PlayerInfo[playerid][pAdministrator] >= 2)
 		{
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)){ SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /kickfromjob [playerid]"); return 1; }
			new pid = strval(tmp);
			SendClientMessage(pid, COLOR_YELLOW,"Nu mai ai jobul tau!Un admin ti-a resetat jobul!");
	    	GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerInfo[playerid][pJob] = 0;
			PlayerInfo[playerid][pContractTime] = 0;
			GetPlayerName(playerid,sendername,sizeof(sendername));
		}
	}
	if(strcmp(cmd, "/give", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /give [name] [playerid/partofname]");
				SendClientMessage(playerid, COLOR_WHITE, "bodyarmour | gun | mats | note | item(Coming Soon)");
				return 1;
			}
			if(strcmp(x_nr,"mats",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /give mats [playerid/PartOfName] [amount]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new Float:x, Float:y, Float:z;
			            GetPlayerPos(giveplayerid,x,y,z);
			            if(!PlayerToPoint(5, playerid, x, y, z))
			            {
			                SendClientMessage(playerid, COLOR_GRAD1, "Playerul nu este langa tine!");
			                return 1;
			            }
		                if(PlayerInfo[giveplayerid][pMaterials] >= 10000)
		                {
			                SendClientMessage(playerid, COLOR_GREY, " Acest player nu mai poate detine materiale.");
			                return 1;
		                }
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /give mats [playerid/PartOfName] [amount]");
							return 1;
						}
						new dammount;
						dammount = strval(tmp);
						if(dammount < 0) { return 1; }
						if(dammount > PlayerInfo[playerid][pMaterials]) { SendClientMessage(playerid, COLOR_GREY, "Nu deti materiale."); return 1; }
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						PlayerInfo[playerid][pMaterials] -= dammount;
						PlayerInfo[giveplayerid][pMaterials] += dammount;

						if( !IsPlayerInAnyVehicle( playerid ) )
						{
							LoopingAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
						}
						if(PlayerInfo[playerid][pSex] == 1)
						{
						    PlayerPlayerActionMessage(playerid, giveplayerid, 30.0, "isi da rucsacul jos,urmand sa scoata metalele de acolo si sa i le dea lui");
						}
						else
						{
							PlayerPlayerActionMessage(playerid, giveplayerid, 30.0, "isi da rucsacul jos,urmand sa scoata metalele de acolo si sa i le dea lui");
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ!");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"bodyarmour",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /give bodyarmour [playerid/partofname]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
		    			if(giveplayerid == playerid)
				    	{
        					return 1;
				    	}
						if(ProxDetectorS(5.0, playerid, giveplayerid))
						{
			    			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[giveplayerid][pGotArmour] = 1;
							PlayerInfo[playerid][pGotArmour] = 0;
							new Float:bodya;
							GetPlayerArmour(playerid, bodya);
					        SetPlayerArmour(giveplayerid,bodya);
					        SetPlayerArmour(playerid,0);
					        PlayerInfo[playerid][pArmour] = 0;
					        PlayerInfo[giveplayerid][pArmour] = bodya;
		     				PlayerPlayerActionMessage(playerid,giveplayerid,30.0,"isi da vesta anti glont jos si i-o da lui");
							if( !IsPlayerInAnyVehicle( playerid ) )
							{
								LoopingAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
							}
						    new hour,minte,second;
							gettime(hour,minte,second);
							format(string, sizeof(string), "[BodyArmour] %s ia dat lui %s o armura. ((Timp: %d:0 Minute %d))", sendername, giveplayerid, hour, minte);
							WeaponLog(string);
							if(CopOnDuty[playerid] == 1)
							{
								format(string, sizeof(string), "AdmWarning: %s ia dat lui %s armura lui cand acesta este on-duty.", sendername, giveplayer);
								AdministratorMessage(COLOR_LIGHTRED,string,1);
								return 1;
							}
						    else
						    {
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine.");
						    return 1;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"gun",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /give gun [playerid/partofname]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
		    			if(giveplayerid == playerid)
				    	{
        					SendClientMessage(playerid, COLOR_GREY, "Nu poate sa iti dea arma.Tine-o in mana.");
        					return 1;
				    	}
						if(PlayerInfo[giveplayerid][pLevel] == 1)
				    	{
							SendClientMessage(playerid, COLOR_GREY, "Nu poate cineva sa iti dea o arma la level 1!");
        					return 1;
				    	}
						if(PlayerInfo[playerid][pFaction] == 3)
				    	{
							SendClientMessage(playerid, COLOR_GREY, "Nu poti da arma deoarece esti in LSPD!");
        					return 1;
				    	}
  							if(PlayerInfo[playerid][pFaction] == 6)
				    	{
							SendClientMessage(playerid, COLOR_GREY, "Nu poti da arma deoarece esti in GOV!");
        					return 1;
				    	}
						if(ProxDetectorS(5.0, playerid, giveplayerid))
						{
							new gunname[100];
					        new weapon = GetPlayerWeapon(playerid);
					        new ammo = GetAmmo(playerid);
					        GetWeaponName(weapon, gunname, sizeof(gunname));
					        if(weapon == 22)
					        {
					            PlayerInfo[playerid][p9mm] = 0;
					            PlayerInfo[giveplayerid][p9mm] = 1;
							}
							if(weapon == 24)
					        {
					            PlayerInfo[playerid][pEagle] = 0;
					            PlayerInfo[giveplayerid][pEagle] = 1;
							}
							if(weapon == 25)
					        {
					            PlayerInfo[playerid][pShotgun] = 0;
					            PlayerInfo[giveplayerid][pShotgun] = 1;
							}
							if(weapon == 33)
					        {
					            PlayerInfo[playerid][pCountryRifle] = 0;
					            PlayerInfo[giveplayerid][pCountryRifle] = 1;
							}
							if(weapon == 35)
					        {
					            PlayerInfo[playerid][pRPG] = 0;
					            PlayerInfo[giveplayerid][pRPG] = 1;
							}
							if(weapon == 30)
					        {
					            PlayerInfo[playerid][pAK] = 0;
					            PlayerInfo[giveplayerid][pAK] = 1;
							}
							if(weapon == 29)
					        {
					            PlayerInfo[playerid][pMP5] = 0;
					            PlayerInfo[giveplayerid][pMP5] = 1;
							}
							if(weapon == 28)
					        {
					            PlayerInfo[playerid][pUzi] = 0;
					            PlayerInfo[giveplayerid][pUzi] = 1;
							}
							if(weapon == 5)
					        {
					            PlayerInfo[playerid][pBaseball] = 0;
					            PlayerInfo[giveplayerid][pBaseball] = 1;
							}
							if(weapon == 6)
					        {
					            PlayerInfo[playerid][pShovel] = 0;
					            PlayerInfo[giveplayerid][pShovel] = 1;
							}
							if(weapon == 4)
					        {
					            PlayerInfo[playerid][pKnife] = 0;
					            PlayerInfo[giveplayerid][pKnife] = 1;
							}
							if(weapon == 31)
					        {
					            PlayerInfo[playerid][pM4] = 0;
					            PlayerInfo[giveplayerid][pM4] = 1;
							}
							if(weapon == 34)
					        {
					            PlayerInfo[playerid][pSniper] = 0;
					            PlayerInfo[giveplayerid][pSniper] = 1;
							}
							if(weapon == 26)
					        {
					            PlayerInfo[giveplayerid][pSawn] = 1;
							}
							if(weapon == 37)
					        {
					            PlayerInfo[giveplayerid][pFlame] = 1;
							}
							if(weapon == 41)
					        {
					            SendClientMessage(playerid, COLOR_GRAD2, "Nu ai cum sa iei arma.");
					            return 1;
							}
			    			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
		     				PlayerPlayerActionMessage(playerid,giveplayerid,30.0,"hands something to");
							if( !IsPlayerInAnyVehicle( playerid ) )
							{
								LoopingAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
							}
			                // Now log the command.
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new y, m, d;
							new h,mi,s;
							getdate(y,m,d);
							gettime(h,mi,s);
							format(string, sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s ia dat  %s cu %d gloante catre %s",d,m,y,h,mi,s,sendername, gunname, ammo, GetPlayerNameEx(giveplayerid));
							WeaponLog(string);
							// Remove and give
							GivePlayerWeapon(giveplayerid, weapon, ammo);
					    	SafeRemovePlayerWeapon(playerid, weapon);
					    	//
					    	SavePlayerAccount( playerid );
							if(CopOnDuty[playerid] == 1 && CopOnDuty[giveplayerid] != 1)
							{
			    				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "AdmWarning: %s o-a dat lui  %s o arma %s, cand este on duty ca politist!.", sendername, giveplayer, weapon);
								AdministratorMessage(COLOR_LIGHTRED,string,1);
								// lets log it so that abuser can get a cock in his nose
								format(string, sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s gave a %s with %d ammo to %s while he was on police duty.",d,m,y,h,mi,s,sendername, weapon, ammo, GetPlayerNameEx(giveplayerid));
								WeaponLog(string);
								return 1;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine");
						    return 1;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
				    return 1;
				}
			}
			else if(strcmp(x_nr,"note",true) == 0)
		    {
		        if(IsPlayerConnected(playerid))
		        {
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /give note [playerid/partofname] [note id]");
						return 1;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        new Float:x, Float:y, Float:z;
		           			GetPlayerPos(giveplayerid,x,y,z);
					        if(!PlayerToPoint(5,playerid, x, y, z))
					        {
					            SendClientMessage(playerid, COLOR_GREY, "Acel jucator nu este langa tine.");
					            return 1;
					        }
					        new x_tel[256];
					        x_tel = strtok(cmdtext, idx);
							if(!strlen(x_tel))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /givenote [playerid/partofname] [note id]");
								return 1;
							}
							if(strcmp(x_tel ,"1", true) == 0)
							{
							    if(PlayerInfo[playerid][pNote1s] == 1)
							    {
							        if(PlayerInfo[giveplayerid][pNote1s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
							            PlayerInfo[giveplayerid][pNote1s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
							            PlayerInfo[giveplayerid][pNote2s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
							            PlayerInfo[giveplayerid][pNote3s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
							            PlayerInfo[giveplayerid][pNote4s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la(ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote1], 0, strlen(PlayerInfo[playerid][pNote1]), 255);
							            PlayerInfo[giveplayerid][pNote5s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else
							        {
							            SendClientMessage(playerid, COLOR_GREY, "Carneltelul este plin!");
							            return 1;
							        }
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Nu ai o notita pe slotul 1.");
							        return 1;
							    }
							}
							else if(strcmp(x_tel, "2", true) == 0)
							{
							    if(PlayerInfo[playerid][pNote2s] == 1)
							    {
							        if(PlayerInfo[giveplayerid][pNote1s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
							            PlayerInfo[giveplayerid][pNote1s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la(ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
							            PlayerInfo[giveplayerid][pNote2s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
							            PlayerInfo[giveplayerid][pNote3s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
							            PlayerInfo[giveplayerid][pNote4s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote2], 0, strlen(PlayerInfo[playerid][pNote2]), 255);
							            PlayerInfo[giveplayerid][pNote5s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else
							        {
							            SendClientMessage(playerid, COLOR_GREY, "Carnetelul este plin!");
							            return 1;
							        }
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Nu ai o notita pe slotul 2!");
							        return 1;
							    }
							}
							else if(strcmp(x_tel, "3", true) == 0)
							{
							    if(PlayerInfo[playerid][pNote3s] == 1)
							    {
							        if(PlayerInfo[giveplayerid][pNote1s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
							            PlayerInfo[giveplayerid][pNote1s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "YI-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
							            PlayerInfo[giveplayerid][pNote2s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote3], 0, strlen(PlayerInfo[playerid][pNote3]), 255);
							            PlayerInfo[giveplayerid][pNote3s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
							            PlayerInfo[giveplayerid][pNote4s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
							            PlayerInfo[giveplayerid][pNote5s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else
							        {
							            SendClientMessage(playerid, COLOR_GREY, "Carnetelul este plin!");
							            return 1;
							        }
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Nu ai o notita pe slotul 3.");
							        return 1;
							    }
							}
							else if(strcmp(x_tel, "4", true) == 0)
							{
							    if(PlayerInfo[playerid][pNote4s] == 1)
							    {
							        if(PlayerInfo[giveplayerid][pNote1s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
							            PlayerInfo[giveplayerid][pNote1s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui(ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
							            PlayerInfo[giveplayerid][pNote2s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
							            PlayerInfo[giveplayerid][pNote3s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
							            PlayerInfo[giveplayerid][pNote4s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote4], 0, strlen(PlayerInfo[playerid][pNote4]), 255);
							            PlayerInfo[giveplayerid][pNote5s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else
							        {
							            SendClientMessage(playerid, COLOR_GREY, "Carnetelul este plin!");
							            return 1;
							        }
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Nu ai o notita pe slotul 4.");
							        return 1;
							    }
							}
							else if(strcmp(x_tel, "5", true) == 0)
							{
							    if(PlayerInfo[playerid][pNote5s] == 1)
							    {
							        if(PlayerInfo[giveplayerid][pNote1s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote1], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
							            PlayerInfo[giveplayerid][pNote1s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote2s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote2], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
							            PlayerInfo[giveplayerid][pNote2s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote3s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote3], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
							            PlayerInfo[giveplayerid][pNote3s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote4s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote4], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
							            PlayerInfo[giveplayerid][pNote4s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit un carnetel de note de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pNote5s] == 0)
							        {
							            strmid(PlayerInfo[giveplayerid][pNote5], PlayerInfo[playerid][pNote5], 0, strlen(PlayerInfo[playerid][pNote5]), 255);
							            PlayerInfo[giveplayerid][pNote5s] = 1;
							            GetPlayerName(playerid, sendername, sizeof(sendername));
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							            format(string, sizeof(string), "I-ai dat o notita lui (ID:%d) %s", giveplayerid, giveplayer);
							            SendClientMessage(playerid, COLOR_WHITE, string);
							            format(string, sizeof(string), "Ai primit o notita de la (ID:%d) %s", playerid, sendername);
							            SendClientMessage(giveplayerid, COLOR_WHITE, string);
							            return 1;
							        }
							        else
							        {
							            SendClientMessage(playerid, COLOR_GREY, "Carnetelul tau este plin.");
							            return 1;
							        }
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "Nu ai o notita pe slotul 5.");
							        return 1;
							    }
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Ai gresit id-ul notitei.");
							    return 1;
							}
					    }
					}
		        }
		    }
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /give [name] [playerid/partofname]");
				SendClientMessage(playerid, COLOR_WHITE, "bodyarmour | gun | mats | note");
				return 1;
			}
	    }
	    return 1;
	}
	//==========================================================================
 	if(strcmp(cmd, "/aooc", true) == 0 || strcmp(cmd, "/ao", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Nu esti logat!");
	            return 1;
	        }
			if (PlayerInfo[playerid][pAdministrator] < 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda!");
				return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: (/ao)oc [aooc chat]");
				return 1;
			}
			new admtext[64];
	        if(PlayerInfo[playerid][pAdministrator] == 5) { admtext = "Administrator Principal"; }
	        else if(PlayerInfo[playerid][pAdministrator] == 4) { admtext = "Administrator Secundar"; }
	        else if(PlayerInfo[playerid][pAdministrator] == 3) { admtext = "Administrator"; }
			else if(PlayerInfo[playerid][pAdministrator] == 2)	{ admtext = "Moderator"; }
			else if(PlayerInfo[playerid][pAdministrator] == 1) { admtext = "Asistent"; }
			else { admtext = "Fondator"; }
			new str[128];
			if(strlen(result) > MAXLEN)
			{
     			new pos = MAXLEN;
			    //while(result[--pos] < ' ') {}
			    if(pos < MAXLEN-1) pos = MAXLEN;
			    format(str, sizeof(str), "[AOOC] %s %s: %.*s ...", admtext, sendername, pos, result);
                SendClientMessageToAll(0xF97804FF,str);
			    format(str, sizeof(str), "[AOOC] %s %s: ... %s", admtext, sendername, result[pos]);
			    SendClientMessageToAll(0xF97804FF,str);
			}
			else
			{
				format(str, sizeof(str), "[AOOC] %s %s: %s", admtext, sendername, result);
			    SendClientMessageToAll(0xF97804FF,str);
			}
			OOCLog(string);
			printf("%s", string);
		}
		return 1;
	}
 	if(strcmp(cmd, "/ooc", true) == 0 || strcmp(cmd, "/o", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Trebuie sa te loghezi!");
	            return 1;
	        }
			if ((OOCStatus) == 0 && PlayerInfo[playerid][pAdministrator] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Canalul Global OOC (/o) este dezactivat!");
				return 1;
			}
			if(Muted[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Momentan ai mute.");
			    return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: (/o)oc [ooc chat]");
				return 1;
			}
			new str[128];
			if(strlen(result) > MAXLEN)
			{
     			new pos = MAXLEN;
			    //while(result[--pos] < ' ') {}
			    if(pos < MAXLEN-1) pos = MAXLEN;
			    format(str, sizeof(str), "[OOC] %s: %.*s ...", sendername, pos, result);
                OOCOff(COLOR_OOCNEW,str);
			    format(str, sizeof(str), "[OOC] %s: ... %s", sendername, result[pos]);
			    OOCOff(COLOR_OOCNEW,str);
			}
			else
			{
				format(str, sizeof(str), "[OOC] %s: %s", sendername, result);
			    OOCOff(COLOR_OOCNEW,str);
			}
			OOCLog(str);
			printf("%s", str);
		}
		return 1;
	}
 	if(strcmp(cmd, "/pspeaker", true) == 0 || strcmp(cmd, "/pspeak", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "Trebuie sa te loghezi pentru a folosi comanda!");
	            return 1;
	        }
			if (PlayerInfo[playerid][pFaction] != 1 && PlayerInfo[playerid][pFaction] != 3)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Factiune invalida!");
				return 1;
			}
			if(Muted[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Momentan ai mute.");
			    return 1;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /pspeak [Prison Spaker chat]");
				return 1;
			}
			new str[128];
			if(strlen(result) > MAXLEN)
			{
				for(new p = 0; p < MAX_PLAYERS; p++)
				{
				    if(IsPlayerConnected(p))
				    {
						if(PlayerToPoint(200, p, Building[3][ExitX], Building[3][ExitY], Building[3][ExitZ]))
						{
			     			new pos = MAXLEN;
						    //while(result[--pos] < ' ') {}
						    if(pos < MAXLEN-1) pos = MAXLEN;
						    format(str, sizeof(str), "[Inchisoare] %.*s ...", pos, result);
						    SendClientMessage(p, COLOR_YELLOW, str);
						    format(str, sizeof(str), "[Inchisoare] ... %s", result[pos]);
						    SendClientMessage(p, COLOR_YELLOW, str);
						}
					}
				}
			}
			else
			{
				for(new p = 0; p < MAX_PLAYERS; p++)
				{
				    if(IsPlayerConnected(p))
				    {
						if(PlayerToPoint(200, p, Building[3][ExitX], Building[3][ExitY], Building[3][ExitZ]))
						{
							format(str, sizeof(str), "[Inchisoare] %s", result);
						    SendClientMessage(p, COLOR_YELLOW, str);
						}
					}
				}
			}
			printf("%s", str);
		}
		return 1;
	}
	if(strcmp(cmd, "/tchat", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
			if (PlayerInfo[playerid][pAdministrator] >= 5)
			{
				if (Tchat == 0)
				{
					Tchat = 1;
					format(string, sizeof(string), "Canalul pentru TESTERI a fost dezactivat de catre %s", GetPlayerNameEx(playerid));
					TesterMessager(COLOR_GREY, string);
				}
				else
				{
					Tchat = 0;
					format(string, sizeof(string), "Canalul pentru TESTERI a fost activat de catre %s", GetPlayerNameEx(playerid));
					TesterMessager(COLOR_GREY, string);
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda.");
		}
		return 1;
	}
	if(strcmp(cmd, "/achat", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
			if (PlayerInfo[playerid][pAdministrator] >= 5)
			{
				if (Achat == 0)
				{
					Achat = 1;
					format(string, sizeof(string), "   Canalul pentru ADMINISTRATORILOR a fost dezactivat de catre %s", GetPlayerNameEx(playerid));
					AdministratorMessage(COLOR_GREY, string, 1);
				}
				else
				{
					Achat = 0;
					format(string, sizeof(string), "   Canalul pentru ADMINISTRATORILOR a fost activat de catre %s", GetPlayerNameEx(playerid));
					AdministratorMessage(COLOR_GREY, string, 1);
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda.");
		}
		return 1;
	}
 	if(strcmp(cmd, "/b", true) == 0)
        {
            if(IsPlayerConnected(playerid))
            {
                if(gPlayerLogged[playerid] == 0)
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Trebuie sa te loghezi!");
                    return 1;
                }
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
                while ((idx < length) && (cmdtext[idx] <= ' '))
                {
                    idx++;
                }
                new offset = idx;
                new result[256];
                while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
                {
                    result[idx - offset] = cmdtext[idx];
                    idx++;
                }
                result[idx - offset] = EOS;
                if(!strlen(result))
                {
                    SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /b [local ooc chat]");
                    return 1;
                }
                if(Muted[playerid] == 1)
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Momentan ai mute.");
                    return 1;
                }
                new str[128];
                if(strlen(result) > MAXLEN)
                {
                    new pos = MAXLEN;
                    if(pos < MAXLEN-1) pos = MAXLEN;
                    if(PlayerInfo[playerid][pAdministrator] >= 69)
                    {
						format(str, sizeof(str), "(( {8D1B19}Fondator{BFC0C2} %s: %.*s ... ))", GetPlayerNameEx(playerid),pos, result);
						ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
						format(str, sizeof(str), "(( {8D1B19}Fondator{BFC0C2} %s: ... %s ))", GetPlayerNameEx(playerid),result[pos]);
						ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
					}
					if (AdminDuty[playerid] == 1)
					{
						format(str, sizeof(str), "(( {F97804}Administrator{BFC0C2} %s: %.*s ... ))", GetPlayerNameEx(playerid),pos, result);
						ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
						format(str, sizeof(str), "(( {F97804}Administrator{BFC0C2} %s: ... %s ))", GetPlayerNameEx(playerid),result[pos]);
						ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
					}
					else if (TesterDuty[playerid] == 1)
					{
						format(str, sizeof(str), "(( {33AA33}Tester{BFC0C2} %s: %.*s ... ))",GetPlayerNameEx(playerid), pos, result);
						ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
						format(str, sizeof(str), "(( {33AA33}Tester{BFC0C2} %s: ... %s ))",GetPlayerNameEx(playerid), result[pos]);
						ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
					}
					else
					{
						if (BStatus == 0)
						{
							format(str, sizeof(str), "(( [%d] %s: %.*s ... ))", playerid, GetPlayerNameEx(playerid), pos, result);
							ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
							format(str, sizeof(str), "(( [%d] %s: ... %s ))", playerid, GetPlayerNameEx(playerid), result[pos]);
							ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
						}
						else SendClientMessage (playerid, COLOR_GREY, "Canalul OOC /b este inchis asa ca nu poti vorbi");
					}
                    printf("%s", str);
					return 1;
                }
                else
                {
					if (AdminDuty[playerid] == 1)
					{
						format(str, sizeof(str), "(( {F97804}Administrator{BFC0C2} %s: %s ))" ,GetPlayerNameEx(playerid) ,result);
						ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
					}
					else if (TesterDuty[playerid] == 1)
					{
						format(str, sizeof(str), "(( {33AA33}Tester{BFC0C2} %s: %s ))" ,GetPlayerNameEx(playerid) ,result);
						ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
					}
					else if (PlayerInfo[playerid][pAdministrator] >= 69)
					{
						format(str, sizeof(str), "(( {8D1B19}Fondator{BFC0C2} %s: %s ))", GetPlayerNameEx(playerid) ,result);
						ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
					}
					else
					{
						if (BStatus == 0)
						{
							format(str, sizeof(str), "(( [%d] %s: %s ))", playerid, GetPlayerNameEx(playerid), result);
							ProxDetector(25.0, playerid, str,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
						}
						else SendClientMessage (playerid, COLOR_GREY, "Canalul OOC /b este inchis asa ca nu poti vorbi");
					}
                    printf("%s", str);
                    return 1;
				}
			}
            return 1;
        }
 	if(strcmp(cmd, "/doorshout", true) == 0 || strcmp(cmd, "/ds", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new maskid = PlayerInfo[playerid][pMaskID];
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /doorshout [chat]");
				return 1;
			}
			if(Muted[playerid] == 1)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Momentan ai mute.");
			    return 1;
			}
			if(Wounded[playerid] == 1)
			{
			    return 1;
			}
			for(new i = 0; i < sizeof(Houses); i++)
			{
			    for(new s = 0; s < sizeof(Businesses); s++)
			    {
					if (PlayerToPoint(3, playerid,Houses[i][EnterX], Houses[i][EnterY], Houses[i][EnterZ]))
					{
		                if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(string, sizeof(string), "[Masca_%d] striga: %s!", maskid, result);
							ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
						}
						else
						{
							format(string, sizeof(string), "%s striga: %s!", GetPlayerNameEx(playerid), result);
							ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		 				}
						for(new p = 0; p < MAX_PLAYERS; p++)
						{
						    if(IsPlayerConnected(p))
			    			{
				    			if(PlayerToPoint(30, p, Houses[i][ExitX], Houses[i][ExitY], Houses[i][ExitZ]))
							    {
							        if(PlayerInfo[playerid][pMaskuse] == 1)
							        {
							        	format(string, sizeof(string), "[Masca_%d] (la usa): %s!", maskid, result);
			                            SendClientMessage(p, COLOR_WHITE, string);
									}
									else
									{
										format(string, sizeof(string), "%s (la usa): %s!", GetPlayerNameEx(playerid), result);
										SendClientMessage(p, COLOR_WHITE, string);
									}
							    }
							}
						}
						return 1;
					}
					else if (PlayerToPoint(3, playerid,Businesses[s][EnterX], Businesses[s][EnterY], Businesses[s][EnterZ]))
	    			{
        				if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(string, sizeof(string), "[Masca_%d] striga: %s!", maskid, result);
							ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
						}
						else
						{
							format(string, sizeof(string), "%s striga: %s!", GetPlayerNameEx(playerid), result);
							ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		 				}
						for(new p = 0; p < MAX_PLAYERS; p++)
						{
						    if(IsPlayerConnected(p))
				    		{
							    if(PlayerToPoint(30, p, Businesses[s][ExitX], Businesses[s][ExitY], Businesses[s][ExitZ]))
							    {
							        if(PlayerInfo[playerid][pMaskuse] == 1)
							        {
							        	format(string, sizeof(string), "[Masca_%d] (la usa): %s!", maskid, result);
			                            SendClientMessage(p, COLOR_WHITE, string);
									}
									else
									{
										format(string, sizeof(string), "%s (la usa): %s!", GetPlayerNameEx(playerid), result);
										SendClientMessage(p, COLOR_WHITE, string);
									}
							    }
							}
						}
						return 1;
					}
					else if (PlayerToPoint(3, playerid,Houses[i][ExitX], Houses[i][ExitY], Houses[i][ExitZ]))
					{
               			if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(string, sizeof(string), "[Masca_%d] striga: %s!", maskid, result);
							ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
						}
						else
						{
							format(string, sizeof(string), "%s striga: %s!", GetPlayerNameEx(playerid), result);
							ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		 				}
						for(new p = 0; p < MAX_PLAYERS; p++)
						{
						    if(IsPlayerConnected(p))
				    		{
							    if(PlayerToPoint(40, p, Houses[GetPlayerVirtualWorld(playerid)][EnterX], Houses[GetPlayerVirtualWorld(playerid)][EnterY], Houses[GetPlayerVirtualWorld(playerid)][EnterZ]))
							    {
							        if(PlayerInfo[playerid][pMaskuse] == 1)
							        {
							        	format(string, sizeof(string), "[Masca_%d] (la usa): %s!", maskid, result);
			                            SendClientMessage(p, COLOR_WHITE, string);
									}
									else
									{
										format(string, sizeof(string), "%s (la usa): %s!", GetPlayerNameEx(playerid), result);
										SendClientMessage(p, COLOR_WHITE, string);
									}
								}
							}
						}
						return 1;
					}
					else if (PlayerToPoint(3, playerid,Businesses[s][ExitX], Businesses[s][ExitY], Businesses[s][ExitZ]))
	    			{
        				if(PlayerInfo[playerid][pMaskuse] == 1)
						{
							format(string, sizeof(string), "[Masca_%d] striga: %s!", maskid, result);
							ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
						}
						else
						{
							format(string, sizeof(string), "%s striga: %s!", GetPlayerNameEx(playerid), result);
							ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		 				}
						for(new p = 0; p < MAX_PLAYERS; p++)
						{
						    if(IsPlayerConnected(p))
				    		{
							    if(PlayerToPoint(30, p, Businesses[GetPlayerVirtualWorld(playerid)][EnterX], Businesses[GetPlayerVirtualWorld(playerid)][EnterY], Businesses[GetPlayerVirtualWorld(playerid)][EnterZ]))
							    {
							        if(PlayerInfo[playerid][pMaskuse] == 1)
							        {
							        	format(string, sizeof(string), "[Masca_%d] (la usa): %s!", maskid, result);
			                            SendClientMessage(p, COLOR_WHITE, string);
									}
									else
									{
										format(string, sizeof(string), "%s (la usa): %s!", GetPlayerNameEx(playerid), result);
										SendClientMessage(p, COLOR_WHITE, string);
									}
								}
							}
						}
						return 1;
					}
				}
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/pm", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Muted[playerid])
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Ai mute.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /pm [playerid/partofname] [text]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					if(PMsEnabled[giveplayerid] == 0)
			        {
			            SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul are inchise PM-urile.");
			            return 1;
			        }
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[256];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /pm [playerid/partofname] [text]");
						return 1;
					}
					if(Muted[playerid] == 1)
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai mute.");
					    return 1;
					}
					if(BlockPMPerson[giveplayerid][playerid] == 1)
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "Userul are PM-ul blocat!");
					    return 1;
					}
		     		new str[128];
					if(strlen(result) > MAXLEN)
					{
					    new pos = MAXLEN;
					    //while(result[--pos] < ' ') {}
					    if(pos < MAXLEN-1) pos = MAXLEN;
					    format(str, sizeof(str), "(( PM de la %s(ID:%d): %.*s ... ))", sendername, playerid, pos, (result));
						SendClientMessage(giveplayerid, COLOR_PMIN, str);
						format(str, sizeof(str), "(( PM de la %s(ID:%d): ... %s ))", sendername, playerid, (result)[pos]);
						SendClientMessage(giveplayerid, COLOR_PMIN, str);
						format(str, sizeof(str), "(( PM trimis catre %s(ID:%d): %.*s ... ))", giveplayer, giveplayerid, pos, (result));
						SendClientMessage(playerid, COLOR_PMOUT, str);
						format(str, sizeof(str), "(( PM trimis catre %s(ID:%d): ... %s ))", giveplayer, giveplayerid, (result)[pos]);
						SendClientMessage(playerid, COLOR_PMOUT, str);
						printf("%s",str);
						for(new i = 0; i<MAX_PLAYERS; i++)
                        {
                            if(AscultaPM[i] == 1)
                            {
						       format(str, sizeof(str), "[SHOW-PMS] Mesaj de la %s pentru %s: %s", giveplayer, sendername, (result));
						       SendClientMessage(i, COLOR_PMIN, str);

			                }
                        }
						// PM log
						format(str, sizeof(str), "(( PM trimis catre %s[catre %s]: %.*s ... ))", giveplayer, sendername, pos, (result));
						PMLog(str);
						format(str, sizeof(str), "(( PM trimis catre %s[catre:%s]: ... %s ))", giveplayer, sendername, (result)[pos]);
						PMLog(str);
					}
					else
					{
					    format(str, sizeof(str), "(( PM de la %s(ID:%d): %s ))", sendername, playerid, (result));
						SendClientMessage(giveplayerid, COLOR_PMIN, str);
						format(str, sizeof(str), "(( PM trimis catre %s(ID:%d): %s ))", giveplayer, giveplayerid, (result));
						SendClientMessage(playerid, COLOR_PMOUT, str);
						printf("%s",str);
						// PM log
						format(str, sizeof(str), "(( PM de la %s[pentru: %s]: %s ))", giveplayer, sendername, (result));
						PMLog(str);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul nu este activ.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/low", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Muted[playerid])
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Deocamdata ai mute.");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /low [message]");
				return 1;
			}
			new maskid = PlayerInfo[playerid][pMaskID];
          	new chatstyle = PlayerInfo[playerid][pTalk];
			new str[128];
			if(strlen(result) > MAXLEN)
			{
     			new pos = MAXLEN;
			    //while(result[--pos] < ' ') {}
			    if(pos < MAXLEN-1) pos = MAXLEN;
			    if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(str, sizeof(str), "[Masca_%d] spune [incet]: %.*s ...", maskid, pos, result);
					ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(str, sizeof(str), "[Masca_%d] spune [incet]: ... %s", maskid, result[pos]);
					ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    format(str, sizeof(str), "%s spune [incet]: %.*s ...", GetPlayerNameEx(playerid), pos, result);
				    ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(str, sizeof(str), "%s spune [incet]: ... %s", GetPlayerNameEx(playerid), result[pos]);
					ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
			    if(gPlayerUsingLoopingAnim[playerid] != 1)
		     	{
					if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
					{
					    if(Wounded[playerid] == 0)
					    {
							if(chatstyle == 0) { ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,1,1); }
							else if(chatstyle == 1) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.0,0,0,0,1,1); }
							else if(chatstyle == 2) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.0,0,0,0,1,1); }
							else if(chatstyle == 3) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkC",4.0,0,0,0,1,1);}
							else if(chatstyle == 4) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,1,1);}
							else if(chatstyle == 5) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.0,0,0,0,1,1);}
							else if(chatstyle == 6) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.0,0,0,0,1,1);}
							else if(chatstyle == 7) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.0,0,0,0,1,1);}
							else if(chatstyle == 8) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.0,0,0,0,1,1);}
							SetTimerEx("Stoptalking",floatround(strlen(result)/9)*1000, 0, "i", playerid);
						}
					}
				}
			}
			else
			{
			    if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(str, sizeof(str), "[Masca_%d] spune [incet]: %s", maskid, result);
					ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				} else {
				    format(str, sizeof(str), "%s spune [incet]: %s", GetPlayerNameEx(playerid), result);
				    ProxDetector(5.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
			    if(gPlayerUsingLoopingAnim[playerid] != 1)
		     	{
					if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
					{
					    if(Wounded[playerid] == 0)
					    {
							if(chatstyle == 0) { ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,1,1); }
							else if(chatstyle == 1) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.0,0,0,0,1,1); }
							else if(chatstyle == 2) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.0,0,0,0,1,1); }
							else if(chatstyle == 3) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkC",4.0,0,0,0,1,1);}
							else if(chatstyle == 4) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.0,0,0,0,1,1);}
							else if(chatstyle == 5) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.0,0,0,0,1,1);}
							else if(chatstyle == 6) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.0,0,0,0,1,1);}
							else if(chatstyle == 7) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.0,0,0,0,1,1);}
							else if(chatstyle == 8) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.0,0,0,0,1,1);}
							SetTimerEx("StopTalking",floatround(strlen(result)/9)*1000, 0, "i", playerid);
						}
					}
				}
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/ame", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        new maskid = PlayerInfo[playerid][pMaskID];
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /ame [action]");
				return 1;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
				format(string, sizeof(string), "* [Masca_%d] %s", maskid, result);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 10000);
				format(string, sizeof(string), "> [Masca_%d] %s", maskid, result);
				SendClientMessage(playerid, COLOR_PURPLE, string);
			}
			else
			{
			    format(string, sizeof(string), "* %s %s", GetPlayerNameEx(playerid), result);
				SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 10000);
				format(string, sizeof(string), "> %s %s", GetPlayerNameEx(playerid), result);
				SendClientMessage(playerid, COLOR_PURPLE, string);
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/local", true) == 0 || strcmp(cmd, "/l", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Muted[playerid])
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Deocamdata ai mute.");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /local [message]");
				return 1;
			}
			new maskid = PlayerInfo[playerid][pMaskID];
			new str[128];
			if(strlen(result) > MAXLEN)
			{
     			new pos = MAXLEN;
			    //while(result[--pos] < ' ') {}
			    if(pos < MAXLEN-1) pos = MAXLEN;
			    if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(str, sizeof(str), "[Masca_%d] spune: %.*s ...", maskid, pos, result);
					ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(str, sizeof(str), "[Masca_%d] spune: ... %s", maskid, result[pos]);
					ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    format(str, sizeof(str), "%s spune: %.*s ...", GetPlayerNameEx(playerid), pos, result);
				    ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
					format(str, sizeof(str), "%s spune: ... %s", GetPlayerNameEx(playerid), result[pos]);
					ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				printf("%s",str);
			}
			else
			{
			    if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(str, sizeof(str), "[Masca_%d] spune: %s", maskid, result);
					ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    format(str, sizeof(str), "%s spune: %s", GetPlayerNameEx(playerid), result);
				    ProxDetector(20.0, playerid, str,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				printf("%s",str);
				return 1;
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/do", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /do [action]");
				return 1;
			}
			new maskid = PlayerInfo[playerid][pMaskID];
			new str[128];
			if(strlen(result) > MAXLEN)
			{
     			new pos = MAXLEN;
			    //while(result[--pos] < ' ') {}
			    if(pos < MAXLEN-1) pos = MAXLEN;
			    if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(str, sizeof(str), "* %.*s ... (([Masca_%d]))", pos, result, maskid);
					ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(str, sizeof(str), "* ... %s (([Masca_%d]))", result[pos], maskid);
					ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
				    format(str, sizeof(str), "* %.*s ... ((%s))", pos, result, GetPlayerNameEx(playerid));
				    ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(str, sizeof(str), "* ... %s ((%s))", result[pos], GetPlayerNameEx(playerid));
					ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				printf("%s",str);
			}
			else
			{
			    if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(str, sizeof(str), "* %s (([Masca_%d]))", result, maskid);
					ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
				    format(str, sizeof(str), "* %s ((%s))", result, GetPlayerNameEx(playerid));
				    ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				printf("%s",str);
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/shout", true) == 0 || strcmp(cmd, "/s", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Muted[playerid])
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Deocamdata ai mute.");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /shout [message]");
				return 1;
			}
			new maskid = PlayerInfo[playerid][pMaskID];
			new str[128];
			if(strlen(result) > MAXLEN)
			{
     			new pos = MAXLEN;
			    //while(result[--pos] < ' ') {}
			    if(pos < MAXLEN-1) pos = MAXLEN;
			    if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(str, sizeof(str), "[Masca_%d] striga: %.*s ...", maskid, pos, result);
					ProxDetector(25.0, playerid, str,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
					format(str, sizeof(str), "[Masca_%d] striga: ... %s", maskid, result[pos]);
					ProxDetector(25.0, playerid, str,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
				}
				else
				{
				    format(str, sizeof(str), "%s striga: %.*s ...", GetPlayerNameEx(playerid), pos, result);
				    ProxDetector(25.0, playerid, str,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
					format(str, sizeof(str), "%s striga: ... %s", GetPlayerNameEx(playerid), result[pos]);
					ProxDetector(25.0, playerid, str,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
				}
				printf("%s",str);
			}
			else
			{
			    if(PlayerInfo[playerid][pMaskuse] == 1)
				{
					format(str, sizeof(str), "[Masca_%d] striga: %s", maskid, result);
					ProxDetector(30.0, playerid, str,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
				}
				else
				{
				    format(str, sizeof(str), "%s striga: %s", GetPlayerNameEx(playerid), result);
				    ProxDetector(30.0, playerid, str,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
				}
				printf("%s",str);
				return 1;
			}
		}
		return 1;
	}
	// Chat kommandoer, /b og s?n //
 	if(strcmp(cmd, "/me", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /me [action]");
				return 1;
			}
			new form[128];
			format(form, sizeof(form), "%s",result);
			PlayerActionMessage(playerid,20.0,form);
		}
		return 1;
	}
	if(strcmp(cmd, "/try", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /try [actiune]");
				return 1;
			}
			new form[128];
			new TryRandom = random(2);
			switch(TryRandom)
			{
				case 0:
				{
					format(form, sizeof(form), "incearca sa %s si {25A900}REUSESTE",result);
				}
				case 1:
				{
					format(form, sizeof(form), "incearca sa %s si {B50000}ESUEAZA",result);
				}
			}
			PlayerActionMessage(playerid,20.0,form);
		}
		return 1;
	}
	if(strcmp(cmd, "/whisper", true) == 0 || strcmp(cmd, "/w", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(Muted[playerid])
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Deocamdata ai mute.");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /whisper [playerid/partofname] [message]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[128];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /whisper [playerid/partofname] [message]");
						return 1;
					}
					if(ProxDetectorS(3.0, playerid, giveplayerid))
					{
						if(giveplayerid != playerid)
						{
							PlayerBubbleMessage(playerid,"sopteste ceva.");
							new str[128];
							if(strlen((result)) > MAXLEN)
							{
								for(new i = 0; i < MAX_PLAYERS; i ++)
								{
								  	if(IsPlayerConnected(i))
									{
									    if(IsPlayerInAnyVehicle(playerid))
									    {
										    if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
										    {
												new pos = MAXLEN;
											    //while(result[--pos] < ' ') {}
											    if(pos < MAXLEN-1) pos = MAXLEN;

												format(str, sizeof(str), "%s sopteste: %.*s ...",GetPlayerNameEx(playerid), pos, (result));
												SendClientMessage(i, COLOR_GRAD, string);
												format(str, sizeof(str), "... %s", (result)[pos]);
												SendClientMessage(i, COLOR_GRAD, string);
												return 1;
											}
										}
										else
										{
											new pos = MAXLEN;
											//while(result[--pos] < ' ') {}
											if(pos < MAXLEN-1) pos = MAXLEN;

											format(str, sizeof(str), "%s sopteste: %.*s ...",GetPlayerNameEx(playerid), pos, (result));
											SendClientMessage(i, COLOR_GRAD, string);
											format(str, sizeof(str), "... %s", (result)[pos]);
											SendClientMessage(i, COLOR_GRAD, string);
											return 1;
										}
									}
								}
							}
							else
							{
								for(new i = 0; i < MAX_PLAYERS; i ++)
								{
								  	if(IsPlayerConnected(i))
									{
									    if(IsPlayerInAnyVehicle(playerid))
									    {
										    if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)))
										    {
												format(str, sizeof(str), "%s sopteste: %s", GetPlayerNameEx(playerid), (result));
												SendClientMessage(i, COLOR_GRAD, str);
												return 1;
										    }
										}
										else
										{
											format(str, sizeof(str), "%s sopteste: %s", GetPlayerNameEx(playerid), (result));
											SendClientMessage(playerid, COLOR_GRAD, str);
											SendClientMessage(giveplayerid, COLOR_GRAD, str);
											return 1;
										}
									}
								}
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu iti poti sopti singur.");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu esti destul de aproape.");
						return 1;
					}
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Player ID este invalid.");
			}
		}
		return 1;
	}
	//==========================================================================
	if(strcmp(cmd, "/pay", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pPlayingHours] < 2)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "You must have atleast played 2 hours to use this command.");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /pay [playerid/partofname] [amount]");
				return 1;
			}
	        giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /pay [playerid/partofname] [amount]");
				return 1;
			}
			new moneys,playermoney;
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 99999)
			{
			    SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid amount");
			    return 1;
			}
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if(ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(giveplayerid != playerid)
					    {
							playermoney = GetPlayerCash(playerid);
							if(moneys > 0 && playermoney >= moneys)
							{
								PlayerInfo[playerid][pFairMoney] = 1;
				        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
								PlayerInfo[giveplayerid][pFairMoney] = 1;
				        		SetTimerEx("FairMoneyReset", 3000, false, "i", giveplayerid);
                                GivePlayerCash(playerid, (0 - moneys));
								GivePlayerCash(giveplayerid, moneys);
								format(string, sizeof(string), "   $%d trimisi lui %s (ID:%d)", moneys, GetPlayerNameEx(giveplayerid),giveplayerid);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								SendClientMessage(playerid, COLOR_GREY, string);
								format(string, sizeof(string), "   %s (ID:%d) ti-a dat $%d",GetPlayerNameEx(playerid), playerid,moneys);
								SendClientMessage(giveplayerid, COLOR_GREY, string);
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
								PlayerPlayerActionMessage(playerid,giveplayerid,5.0,"scoate niste bani din buzunar, si ii da lui");
								// Log it.
								new y, m, d;
								new h,mi,s;
								getdate(y,m,d);
								gettime(h,mi,s);
								format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] [CMD] -> /pay %s paid $%d to %s",d,m,y,h,mi,s,GetPlayerNameEx(playerid), moneys, GetPlayerNameEx(giveplayerid));
								PayLog(string);
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid amount");
							}
						}
      					else
						{
							SendClientMessage(playerid, COLOR_GREY, "You can not pay yourself");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "That player not in range");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/businesswithdraw", true) == 0 || strcmp(cmd, "/bizwithdraw", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			new bouse = PlayerInfo[playerid][pBizKey];
			if(bouse != 255 && strcmp(playername, Businesses[bouse][Owner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /businesswithdraw [amount]");
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Foloseste: /businesswithdraw [amount]");
					return 1;
				}
				if(PlayerToPoint(20.0,playerid,Businesses[bouse][ExitX],Businesses[bouse][ExitY],Businesses[bouse][ExitZ]) || PlayerToPoint(20.0,playerid,Businesses[bouse][EnterX],Businesses[bouse][EnterY],Businesses[bouse][EnterZ]))
				{
				    if(Businesses[bouse][Till] >= cashdeposit)
				    {
					    if(GetPlayerVirtualWorld(playerid) == bouse || (GetPlayerVirtualWorld(playerid) == 0))
					    {
							if(cashdeposit < 0) { SendClientMessage(playerid, COLOR_GRAD2, "   Nu poti lua bani pe minus."); return 1; }
							PlayerInfo[playerid][pFairMoney] = 1;
			        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
							GivePlayerCash(playerid,cashdeposit);
							Businesses[bouse][Till]=Businesses[bouse][Till]-cashdeposit;
							format(string, sizeof(string), " Ai primit $%d de la afacerea ta, Total: $%d ", cashdeposit,Businesses[bouse][Till]);
							SendClientMessage(playerid, COLOR_GREY, string);
	                    	PlayerActionMessage(playerid,15.0,"deschide sertarul si apuca niste bani.");
							// Log it.
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new y, m, d;
							new h,mi,s;
							getdate(y,m,d);
							gettime(h,mi,s);
							format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /businesswithdraw - a luat $%d din afacerea lui.",d,m,y,h,mi,s,GetPlayerNameEx(playerid),cashdeposit);
							PayLog(string);
							return 1;
						}
					}
 					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai atatia bani in sertar.");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti in business.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu esti in business.");
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/businessdeposit", true) == 0 || strcmp(cmd, "/bizdeposit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	new bizkey = PlayerInfo[playerid][pBizKey];
	    	new playername[MAX_PLAYER_NAME];
	    	GetPlayerName(playerid,playername,sizeof(playername));
	        if(PlayerInfo[playerid][pBizKey] == bizkey || PlayerInfo[playerid][pWorkOn] == bizkey)
	        {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /businessdeposit [amount]");
					return 1;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /businessdeposit [amount]");
					return 1;
				}
				if(PlayerToPoint(20.0,playerid,Businesses[bizkey][ExitX],Businesses[bizkey][ExitY],Businesses[bizkey][ExitZ]) || PlayerToPoint(20.0,playerid,Businesses[bizkey][EnterX],Businesses[bizkey][EnterY],Businesses[bizkey][EnterZ]))
				{
						if(GetPlayerCash(playerid) >= cashdeposit)
						{
					        if(Businesses[bizkey][Till] < 500000)
					        {
					            if(cashdeposit < 500001)
					            {
					                if(cashdeposit < 0) { return 1; }
									PlayerInfo[playerid][pFairMoney] = 1;
					        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
									GivePlayerCash(playerid,-cashdeposit);
									Businesses[bizkey][Till]=cashdeposit+Businesses[bizkey][Till];
									format(string, sizeof(string), "   Ai pus $%d dolari in sertarul tau, Total: $%d", cashdeposit,Businesses[bizkey][Till]);
									SendClientMessage(playerid, COLOR_GREY, string);
				                    PlayerActionMessage(playerid,15.0,"deschide sertarul si pune cativa bani inauntru.");
									// Log it.
									GetPlayerName(playerid, sendername, sizeof(sendername));
									new y, m, d;
									new h,mi,s;
									getdate(y,m,d);
									gettime(h,mi,s);
									format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /businessdeposit %s a pus $%d in afacerea lui.",d,m,y,h,mi,s,GetPlayerNameEx(playerid),cashdeposit);
									PayLog(string);
									return 1;
								}
								else
								{
									SendClientMessage(playerid, COLOR_GREY, "Nu poti depozita mai mult decat $500,000");
								}
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "Ai atins limita de $500,000 dolari.");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai atatia bani.");
						}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti inauntru-l businessului tau.");
				}
   			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu deti o afacere.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/jetpack",true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
		    if (PlayerInfo[playerid][pAdministrator] >= 1)
		    {
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti autorizat sa folosesti aceasta comanda.");
			    return 1;
			}
		}
	}
	if(strcmp(cmd, "/wiretransfer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /wiretransfer [playerid/partofname] [amount]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Foloseste{696969}: /wiretransfer [playerid/partofname] [amount]");
				return 1;
			}
   			if(PlayerToPoint(10.0,playerid,BankPosition[X],BankPosition[Y],BankPosition[Z]) || PlayerToPoint(40.0,playerid,1430.2157,-981.3618,996.0681))
   			{
				new moneys = strval(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						new playermoney = PlayerInfo[playerid][pBank] ;
						if(moneys > 0 && playermoney >= moneys)
						{
							if (PlayerInfo[playerid][pLevel] >= 2)
							{
								if(giveplayerid != playerid)
								{
									PlayerInfo[playerid][pBank] -= moneys;
									PlayerInfo[giveplayerid][pBank] += moneys;
									format(string, sizeof(string), "   Ai transferat $%d catre contul bancar lui %s", moneys, GetPlayerNameEx(giveplayerid),giveplayerid);
									SendClientMessage(playerid, COLOR_WHITE, string);
									format(string, sizeof(string), "   Ti-ai transferat $%d de la %s", moneys, GetPlayerNameEx(playerid), playerid);
									SendClientMessage(giveplayerid, COLOR_WHITE, string);
									PlayerActionMessage(playerid,15.0,"scrie ceva in ATM si apasa enter");
									// Log it.
									GetPlayerName(playerid, sendername, sizeof(sendername));
									new y, m, d;
									new h,mi,s;
									getdate(y,m,d);
									gettime(h,mi,s);
									format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /wiretransfer $%d",d,m,y,h,mi,s,sendername, moneys);
									PayLog(string);
								}
								else
								{
									SendClientMessage(playerid, COLOR_GREY, "Nu iti poti transfera bani singur");
								}
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "Nu ai level 2");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Invalid amount");
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not at the bank");
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/balance", true) == 0)
	{
 		if(PlayerToPoint(10.0,playerid,BankPosition[X],BankPosition[Y],BankPosition[Z]) || PlayerToPoint(40.0,playerid,1430.2157,-981.3618,996.0681))
		{
			SendClientMessage(playerid, COLOR_WHITE, "______ Statistici ______");
			format(string, sizeof(string), "Sold: $%d", PlayerInfo[playerid][pBank]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "Economii: $%d", PlayerInfo[playerid][pSavings]);
			SendClientMessage(playerid, COLOR_WHITE, "|---------------------------------|");
   			PlayerActionMessage(playerid,15.0,"a primit un bon cu statisticile contului sau bancar");
		}
		else
		{
  			SendClientMessage(playerid, COLOR_GREY, "Nu esti la banca!");
		}
		return 1;
	}
  	if(strcmp(cmd, "/eat", true) == 0)
	{
     	for(new i = 0; i < sizeof(Houses); i++)
		{
			if(PlayerToPoint(50.0,playerid,Houses[i][ExitX], Houses[i][ExitY], Houses[i][ExitZ]))
			{
				if(Houses[GetPlayerVirtualWorld(playerid)][hFridge] == 1)
				{
					new Float:HP;
				    GetPlayerHealth(playerid,HP);
                  	if(HP > 100)
                    {
                        SendClientMessage(playerid, COLOR_GREY, "You don't need to eat anything..");
                    	return 1;
                    }
                  	if(HP == 100)
                    {
                        SendClientMessage(playerid, COLOR_GREY, "You don't need to eat anything..");
                    	return 1;
                    }
                  	if(HP < 100)
                    {
                    	SetPlayerHealth(playerid,HP+50.0);
                    }
                    Houses[GetPlayerVirtualWorld(playerid)][Money] -= 1;
			        PlayerActionMessage(playerid,15.0,"opens the fridge and grabs something to eat.");

					return 1;
				}
				else
				{
                	SendClientMessage(playerid, COLOR_GREY, "This house does not have a fridge.");
                	return 1;
				}
			}
		}
		return 1;
	}
	//==========================================================================
	if(strcmp(cmd, "/takejob", true) == 0)
	{
	    if(PlayerInfo[playerid][pJob] == 0)
	    {
			if(PlayerToPoint(2.0,playerid,DrugJob[TakeJobX],DrugJob[TakeJobY],DrugJob[TakeJobZ]))
			{
		        if(PlayerInfo[playerid][pPermissionGundeal] == 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "You haven't got permission from the leader of the faction to take this job.");
		            return 1;
		        }
   				if(DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 2 || DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 3 && PlayerInfo[playerid][pPermissionGundeal] == 1)
			    {
					SendClientMessage(playerid, COLOR_WHITE, "[Success] You are now a drug dealer, type /jobcmds");
					PlayerInfo[playerid][pJob] = 2;
					PlayerInfo[playerid][pPermissionGundeal] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "You need to be in a illegal faction to have this job.");
				}
			}
			else if(PlayerToPoint(2.0,playerid,ArmsDealerJob[X],ArmsDealerJob[Y],ArmsDealerJob[Z]))
			{
		        if(PlayerInfo[playerid][pLevel] < 3)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "You need to be atleast level 3 to be a arms dealer.");
		            return 1;
		        }
		        if(PlayerInfo[playerid][pPermissionGundeal] == 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "You haven't got permission from the leader of the faction to take this job.");
		            return 1;
		        }
   				if(DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 2 || DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 3 && PlayerInfo[playerid][pPermissionGundeal] == 1)
			    {
					SendClientMessage(playerid, COLOR_WHITE, "[Success] You are now a Arms Dealer, type /jobcmds");
					PlayerInfo[playerid][pJob] = 8;
					PlayerInfo[playerid][pPermissionGundeal] = 0;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "You need to be in a illegal faction to have this job.");
				}
			}
			else if(PlayerToPoint(2.0, playerid, PrisonJobPosition[X], PrisonJobPosition[Y], PrisonJobPosition[Z]))
			{
   				if(GetPlayerVirtualWorld(playerid) == PrisonJobPosition[World])
			    {
					SendClientMessage(playerid, COLOR_WHITE, "[Success] You are now a Prison Guard, type /jobcmds");
					PlayerInfo[playerid][pJob] = 7;
				}
			}
			PlayerInfo[playerid][pContractTime] = 12;
	    }
	    else
	    {
	    	SendClientMessage(playerid, COLOR_GREY, "You already have a job !");
	    }
		return 1;
	}
 	if(strcmp(cmd, "/quitjob", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pJob] > 0)
		    {
		        if(PlayerInfo[playerid][pDonator] > 0)
		        {
		            if(PlayerInfo[playerid][pContractTime] >= 2)
					{
					    SendClientMessage(playerid, COLOR_WHITE, "You forfilled your 1 hour contract and quit your job");
					    PlayerInfo[playerid][pJob] = 0;
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 2 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), "You still have %d hours left to forfill on your contract", chours / 2);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
		        }
		        else
		        {
					if(PlayerInfo[playerid][pContractTime] >= 10)
					{
					    SendClientMessage(playerid, COLOR_WHITE, "You forfilled your 5 hour contract and quit your job");
					    PlayerInfo[playerid][pJob] = 0;
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 10 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), "You still have %d hours left to forfill on your contract", chours / 2);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "You do not have a job !");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/fare",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        {
				if(TransportDuty[playerid] > 0)
				{
				    TransportDuty[playerid] = 0;
					format(string, sizeof(string), "You are now off duty and earned $%d", TransportMoney[playerid]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					GivePlayerCash(playerid, TransportMoney[playerid]);
					TransportMoney[playerid] = 0;
					return 1;
				}
				if(IsATaxi(GetPlayerVehicleID(playerid)))
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /fare [price]");
							return 1;
						}
						new moneys;
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 15) { SendClientMessage(playerid, COLOR_GREY, "Fare price must be between $1 and $15"); return 1; }
					    TransportDuty[playerid] = 1; TransportValue[playerid] = moneys;
					    SendClientMessage(playerid, COLOR_WHITE, "  Taxi meter has started.");
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "You are not the driver");
					    return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "  You are not in a taxi");
				}
			}
		}
	    return 1;
 	}
	if(strcmp(cmd, "/tracephone", true) == 0)
	{
 		if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pFaction] != 3 || PlayerInfo[playerid][pRank] !=6 || PlayerInfo[playerid][pRank] !=1)
		    {
				SendClientMessage(playerid, COLOR_GREY, "Nu esti in LSPD/Nu esti un Detectiv");
				return 1;
		    }
		    tmp = strtok(cmdtext, idx);
    		if(!strlen(tmp))
		    {
				SendClientMessage(playerid,COLOR_YELLOW,"{AFAFAF}SYNTAX{FFFFFF}: /tracephone [Phone number]");
   		     	return 1;
    		}
    		new ph = strval(tmp);
    		for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPhoneNumber] == ph && ph != 0)
					{
						giveplayerid = i;
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid])
						        {
						            SendClientMessage(playerid, COLOR_LIGHTRED, "Acest jucator nu are telefonul pornit");
						            return 1;
						        }
						        if(GetPlayerInterior(giveplayerid)!=0)
						        {
					 				SendClientMessage(playerid, COLOR_GREY, " Nu exista o conexiune..");
					 				return 1;
								}
								new zone[MAX_ZONE_NAME];
								GetPlayer2DZone(giveplayerid, zone, MAX_ZONE_NAME);
						        format(string, sizeof(string), "[TRACEPHONE]: [NUMAR:%d] Localizare numar de telefon: %s",ph,zone);
						        SendClientMessage(playerid,0xe9e900AA,string);
								// Log it.
								GetPlayerName(playerid, sendername, sizeof(sendername));
								new y, m, d;
								new h,mi,s;
								getdate(y,m,d);
								gettime(h,mi,s);
								format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [CMD] -> /tracephone %d %s",d,m,y,h,mi,s,sendername, ph, zone);
								CommandLog(string);
							}
						}
					}
				}
			}
		}
		return 1;
	}
/*	if(strcmp(cmd, "/createweapon", true) == 0 || strcmp(cmd, "/cw", true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 8)
			{
			    SendClientMessage(playerid, COLOR_GREY, "You are not an arms dealer");
			    return 1;
			}
			new x_weapon[256],weaponcreation[MAX_PLAYERS],ammocreation[MAX_PLAYERS],pricecreation[MAX_PLAYERS];
			x_weapon = strtok(cmdtext, idx);
			if(!strlen(x_weapon))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /createweapon [weapon]");
				SendClientMessage(playerid, COLOR_WHITE, "[Weapons] baseballbat(50) | deagle(300) | mp5(395) | sdpistol(200)");
				SendClientMessage(playerid, COLOR_WHITE, "[Weapons] shotgun(330) | ak47(700) | m4(785) | rifle(800) | RPG(20k)");
				return 1;
			}
			if(strcmp(x_weapon,"baseballbat",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 50) { weaponcreation[playerid] = 5; pricecreation[playerid] = 50; ammocreation[playerid] = 1; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else if(strcmp(x_weapon,"sdpistol",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 200) { weaponcreation[playerid] = 23; pricecreation[playerid] = 200; ammocreation[playerid] = 50; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else if(strcmp(x_weapon,"deagle",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 300) { weaponcreation[playerid] = 24; pricecreation[playerid] = 300; ammocreation[playerid] = 50; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else if(strcmp(x_weapon,"mp5",true) == 0) {	if(PlayerInfo[playerid][pMaterials] > 395) { weaponcreation[playerid] = 29; pricecreation[playerid] = 395; ammocreation[playerid] = 200; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else if(strcmp(x_weapon,"shotgun",true) == 0) {	if(PlayerInfo[playerid][pMaterials] > 330) { weaponcreation[playerid] = 25; pricecreation[playerid] = 330; ammocreation[playerid] = 50; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else if(strcmp(x_weapon,"ak47",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 700) { weaponcreation[playerid] = 30; pricecreation[playerid] = 700; ammocreation[playerid] = 250; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else if(strcmp(x_weapon,"m4",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 785) { weaponcreation[playerid] = 31; pricecreation[playerid] = 785; ammocreation[playerid] = 250; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else if(strcmp(x_weapon,"rifle",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 800) { weaponcreation[playerid] = 33; pricecreation[playerid] = 800; ammocreation[playerid] = 50; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else if(strcmp(x_weapon,"knife",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 100) { weaponcreation[playerid] = 4; pricecreation[playerid] = 100; ammocreation[playerid] = 1; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else if(strcmp(x_weapon,"molotov",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 220) { weaponcreation[playerid] = 18; pricecreation[playerid] = 220; ammocreation[playerid] = 1; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else if(strcmp(x_weapon,"rpg",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 20000) { weaponcreation[playerid] = 35; pricecreation[playerid] = 20000; ammocreation[playerid] = 2; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai destule materiale."); return 1; } }
			else { SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid weapon name"); return 1; }
			if(PlayerToPoint(4, playerid,Houses[1][EnterX], Houses[1][EnterY],Houses[1][EnterZ]))
			{
				format(string, sizeof(string), "You have created a %s with %d ammo, for %d materials.",x_weapon, ammocreation[playerid], pricecreation[playerid]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				// Logged
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new hour,minte,second;
				gettime(hour,minte,second);
				format(string, sizeof(string), "[CreateWeapon] %s created a %s with %d ammo (Time: %d:0 Minute %d)", sendername, x_weapon, ammocreation[playerid], hour, minte);
				WeaponLog(string);
				//////////////////////////////////////////////////////////////////
				if(PlayerInfo[playerid][pPack1] == 0)
				{
					PlayerInfo[playerid][pPack1] = weaponcreation[playerid];
					PlayerInfo[playerid][pPack1a] = ammocreation[playerid];
					PlayerInfo[playerid][pMaterials] -= pricecreation[playerid];
				}
				else if(PlayerInfo[playerid][pPack2] == 0)
				{
					PlayerInfo[playerid][pPack2] = weaponcreation[playerid];
					PlayerInfo[playerid][pPack2a] = ammocreation[playerid];
					PlayerInfo[playerid][pMaterials] -= pricecreation[playerid];
				}
				else if(PlayerInfo[playerid][pPack3] == 0)
				{
					weaponcreation[playerid] = PlayerInfo[playerid][pPack3];
					ammocreation[playerid] = PlayerInfo[playerid][pPack3a];
					PlayerInfo[playerid][pMaterials] -= pricecreation[playerid];
				}
				else if(PlayerInfo[playerid][pPack4] == 0)
				{
					weaponcreation[playerid] = PlayerInfo[playerid][pPack4];
					ammocreation[playerid] = PlayerInfo[playerid][pPack4a];
					PlayerInfo[playerid][pMaterials] -= pricecreation[playerid];
				}
				else if(PlayerInfo[playerid][pPack5] == 0)
				{
					weaponcreation[playerid] = PlayerInfo[playerid][pPack5];
					ammocreation[playerid] = PlayerInfo[playerid][pPack5a];
					PlayerInfo[playerid][pMaterials] -= pricecreation[playerid];
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You can not carry anymore packages.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You are not at the factory.");
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/makeweapon", true) == 0 || strcmp(cmd, "/mw", true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pJob] != 8)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o factiune oficiala.");
			    return 1;
			}
			new x_weapon[256],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
			weapon[playerid] = 0;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /makeweapon [playerid/partofname] [weapon]");
				//SendClientMessage(playerid, COLOR_WHITE, "[Weapons] baseballbat(50) | knife(100) | sdpistol(175) | deagle(225) | mp5(385) | Molotov(220)");
				//SendClientMessage(playerid, COLOR_WHITE, "[Weapons] shotgun(300) | ak47(700) | m4(750) | rifle(800) | RPG(10k) | Bomb(8000)");
				SendClientMessage(playerid, COLOR_WHITE, "[Arme] baseballbat(50) | knife(550) | sdpistol(2150) | deagle(3125) | tec9(1945) | Molotov(2400)");
				SendClientMessage(playerid, COLOR_WHITE, "[Arme] shotgun(3800) | ak47(4670) | uzi(3450) | rifle(5500) | Bomb(8000)");
				SendClientMessage(playerid, COLOR_WHITE, "[Altele] Armour(1150)");
				SendClientMessage(playerid, COLOR_WHITE, "[Clips] sdpistolclip(2450) | deagleclip(2750) | shotgunclip(3450)");
				SendClientMessage(playerid, COLOR_WHITE, "[Clips] ak47clip(3050) | uziclip(4150) | rifleclip(5450) | tec9clip(4150)");
				//SendClientMessage(playerid, COLOR_WHITE, "[Clips] ak47clip(50) | m4clip(55) | rifleclip(70)");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if(PlayerInfo[giveplayerid][pLevel] == 2)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu poti vinde arme unui player de nivel 2.");
						return 1;
					}
					x_weapon = strtok(cmdtext, idx);
					if(!strlen(x_weapon))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /makeweapon [playerid/partofname] [weapon]");
						//SendClientMessage(playerid, COLOR_WHITE, "[Weapons] baseballbat(50) | knife(100) | sdpistol(175) | deagle(225) | mp5(385) | Molotov(220)");
						//SendClientMessage(playerid, COLOR_WHITE, "[Weapons] shotgun(300) | ak47(700) | m4(750) | rifle(800) | RPG(10k) | Bomb(8000)");
						SendClientMessage(playerid, COLOR_WHITE, "[Weapons] baseballbat(50) | knife(100) | sdpistol(175) | deagle(225) | tec9(360) | Molotov(220)");
						SendClientMessage(playerid, COLOR_WHITE, "[Weapons] shotgun(300) | ak47(5600) | uzi(345) | rifle(5500)");
						SendClientMessage(playerid, COLOR_WHITE, "[Other] Armour(1150)");
						SendClientMessage(playerid, COLOR_WHITE, "[Clips] sdpistolclip(2450) | deagleclip(2750) | shotgunclip(3450)");
						SendClientMessage(playerid, COLOR_WHITE, "[Clips] ak47clip(3050) | uziclip(4150) | rifleclip(5450) | tec9clip(4150)");
						return 1;
					}
				}
				if(strcmp(x_weapon,"baseballbat",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 50) { weapon[playerid] = 5; price[playerid] = 50; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
			    else if(strcmp(x_weapon,"sdpistol",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 2150) { weapon[playerid] = 23; price[playerid] = 175; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"tec9",true) == 0) {	if(PlayerInfo[playerid][pMaterials] > 1945) { weapon[playerid] = 32; price[playerid] = 360; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"uzi",true) == 0) {	if(PlayerInfo[playerid][pMaterials] > 3450) { weapon[playerid] = 28; price[playerid] = 345; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"shotgun",true) == 0) {	if(PlayerInfo[playerid][pMaterials] > 3800) { weapon[playerid] = 25; price[playerid] = 300; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"ak47",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 5600) { weapon[playerid] = 30; price[playerid] = 699; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"m4",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 5210) { weapon[playerid] = 31; price[playerid] = 750; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"rifle",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 5500) { weapon[playerid] = 33; price[playerid] = 800; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"knife",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 550) { weapon[playerid] = 4; price[playerid] = 100; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"molotov",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 2400) { weapon[playerid] = 18; price[playerid] = 220; } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"sdpistolclip",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 2450) { weapon[playerid] = 233; price[playerid] = 20;  } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"deagleclip",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 2750) { weapon[playerid] = 244; price[playerid] = 30;  } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				//else if(strcmp(x_weapon,"mp5clip",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 40) { weapon[playerid] = 299; price[playerid] = 40;  } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"shotgunclip",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 3450) { weapon[playerid] = 255; price[playerid] = 35;  } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"ak47clip",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 3050) { weapon[playerid] = 300; price[playerid] = 50;  } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				//else if(strcmp(x_weapon,"m4clip",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 55) { weapon[playerid] = 311; price[playerid] = 55;  } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"tec9clip",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 4150) { weapon[playerid] = 322; price[playerid] = 45;  } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"uziclip",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 4150) { weapon[playerid] = 288; price[playerid] = 40;  } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"rifleclip",true) == 0) { if(PlayerInfo[playerid][pMaterials] > 5450) { weapon[playerid] = 333; price[playerid] = 70;  } else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1; } }
				else if(strcmp(x_weapon,"bomb",true) == 0)
			 	{
					if(PlayerInfo[playerid][pMaterials] > 8000)
					{
                            AddItem(giveplayerid,"(Item) Bomb",1);
							PlayerInfo[playerid][pMaterials] -= 8000;
							format(string, sizeof(string), "You gave %s a bomb, with 1 ammo, for %d materials", GetPlayerNameEx(giveplayerid), price[playerid]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "bomb received, Ammo: 1, From %s", GetPlayerNameEx(playerid));
							SendClientMessage(giveplayerid, COLOR_GREEN, string);
					        return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1;
					}
				}
				else if(strcmp(x_weapon,"armour",true) == 0)
			 	{
					if(PlayerInfo[playerid][pMaterials] > 1150)
					{
						weapon[playerid] = 52;
						price[playerid] = 550;
						ammo[playerid] = 50;
						PlayerInfo[playerid][pMaterials] -= price[playerid];
						PlayerInfo[giveplayerid][pArmour] = 50;
						SetPlayerArmour(giveplayerid,50);
						format(string, sizeof(string), "You gave %s a body armour, with 50 ammo, for %d materials", GetPlayerNameEx(giveplayerid), price[playerid]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Ai primit armura, Ammo: 50, De la %s", GetPlayerNameEx(playerid));
						SendClientMessage(giveplayerid, COLOR_GREEN, string);
						return 1;
					}
					else { SendClientMessage(playerid, COLOR_GREY, "Nu ai suficiente materiale."); return 1;
					}
				}
				else { SendClientMessage(playerid, COLOR_GREY, "ERROR: Invalid weapon name"); return 1; }
				if(PlayerInfo[giveplayerid][pLevel] == 1) { SendClientMessage(playerid, COLOR_GREY, "  You can't give a gun to a player who is level 1 !"); return 1; }
				if(ProxDetectorS(5.0, playerid, giveplayerid))
				{
				    ammo[playerid] = 0;
 					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "I-ai dat lui %s, un %s, pentru %d materiale", GetPlayerNameEx(giveplayerid),x_weapon, price[playerid]);
					SendClientMessage(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "Ai primit ceva - %s", x_weapon);
					SendClientMessage(giveplayerid, COLOR_GREEN, string);
					// Logged
					new y, m, d;
					new hh,mi,s;
					getdate(y,m,d);
					gettime(hh,mi,s);
					format(string, sizeof(string), "(%d/%d/%d)[%d:%d:%d][SELLWEAPON] %s sold a %s with %d ammo to %s)",d,m,y,hh,mi,s,GetPlayerNameEx(playerid), x_weapon, ammo[playerid], GetPlayerNameEx(giveplayerid));
					WeaponLog(string);
					PlayerPlayerActionMessage(playerid,giveplayerid,15.0,"ii da ceva lui");
					PlayerInfo[playerid][pMaterials] -= price[playerid];
					switch(weapon[playerid])
					{
						case 4: SafeGivePlayerWeapon(giveplayerid, 4, 1);
						case 5: SafeGivePlayerWeapon(giveplayerid, 5, 1);
       					case 18: SafeGivePlayerWeapon(giveplayerid, 18, 1);
       					case 23: SafeGivePlayerWeapon(giveplayerid, 23, 5);
       					case 24: SafeGivePlayerWeapon(giveplayerid, 24, 5);
       					case 25: SafeGivePlayerWeapon(giveplayerid, 25, 5);
       					case 28: SafeGivePlayerWeapon(giveplayerid, 28, 5);
       					case 29: SafeGivePlayerWeapon(giveplayerid, 29, 5);
       					case 30: SafeGivePlayerWeapon(giveplayerid, 30, 5);
       					case 31: SafeGivePlayerWeapon(giveplayerid, 31, 5);
       					case 32: SafeGivePlayerWeapon(giveplayerid, 32, 5);
       					case 33: SafeGivePlayerWeapon(giveplayerid, 33, 5);
       					case 52: PlayerInfo[giveplayerid][pArmour] = 50,SetPlayerArmour(giveplayerid,50);
       					case 233: SafeGivePlayerWeapon(giveplayerid, 233, 5);
       					case 244: AddItem(giveplayerid,"(C) Desert Eagle",1);
       					case 255: AddItem(giveplayerid,"(C) Shotgun",1);
       					case 288: AddItem(giveplayerid,"(C) Uzi",1);
       					case 299: AddItem(giveplayerid,"(C) MP5",1);
       					case 300: AddItem(giveplayerid,"(C) AK47",1);
       					case 311: AddItem(giveplayerid,"(C) M4A1",1);
       					case 322: AddItem(giveplayerid,"(C) Tec9",1);
       					case 333: AddItem(giveplayerid,"(C) Rifle",1);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "That player is not in range");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/delivery", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pJob] != 8)
            {

            new x_nr[256];
            x_nr = strtok(cmdtext, idx);
            if(!strlen(x_nr))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /delivery [item]");
                SendClientMessage(playerid, COLOR_WHITE, "buyproducts | sellproducts | buymats | matsdropoff");
                return 1;
            }
            if(strcmp(x_nr, "buyproducts", true) == 0)
            {
                if(PlayerToPoint(3.0,playerid,ProductsSellerJob[BuyProductsX],ProductsSellerJob[BuyProductsY],ProductsSellerJob[BuyProductsZ]))
                {
                    if(PlayerInfo[playerid][pProducts] >= 500)
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu poti transporta mai mult de 500 produse.");
                        return 1;
                    }
                    tmp = strtok(cmdtext, idx);
                    if(!strlen(tmp))
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Folosire: /delivery [buyproducts] [amount]");
                        return 1;
                    }
                    new moneys;
                    moneys = strval(tmp);
                    if(moneys < 1 || moneys > 500) { SendClientMessage(playerid, COLOR_GREY, "Maximum number of products is 500"); return 1; }
                    new price = moneys * PRODUCT_PRICE;
                    if(GetPlayerCash(playerid) > price)
                    {
                        format(string, sizeof(string), "Ai cumparat %d produse - Cost final: $%d", moneys, price);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        SendClientMessage(playerid, COLOR_WHITE, "Dute la fabrica din BlueBarry si predale acolo pentru a-ti lua marfa.");
                        GivePlayerCash(playerid, - price);
                        PlayerInfo[playerid][pProducts] = moneys;
                    }
                    else
                    {
                        format(string, sizeof(string), "Nu ai $%d", price);
                        SendClientMessage(playerid, COLOR_GREY, string);
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "You are not at the products purchase place");
                    return 1;
                }
            }
            else if(strcmp(x_nr, "buymats", true) == 0)
            {
                if(PlayerToPoint(10.0,playerid,2786.0203,-2453.3123,13.6341))
                {
                    if(PlayerInfo[playerid][pMaterials] >= 10000)
                    {
                        SendClientMessage(playerid, COLOR_GREY, "You can not hold more than 10000 materials");
                        return 1;
                    }
                    tmp = strtok(cmdtext, idx);
                    if(!strlen(tmp))
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Folosire: /delivery [buymats] [amount]");
                        return 1;
                    }
                    new moneys;
                    moneys = strval(tmp);
                    if(moneys < 1 || moneys > 10000) { SendClientMessage(playerid, COLOR_GREY, "Nu poti duce mai mult de 10000 de materiale"); return 1; }
                    new price = moneys * MAT_PRICE;
                    if(PlayerInfo[playerid][pConvertMats] != 0)
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "Dute la fabrica din BlueBerry si livreaza marfa pentru a-ti primi partea.");
                        return 1;
                    }
                    if(GetPlayerCash(playerid) > price)
                    {
                        format(string, sizeof(string), "Ai cumparat %d kg de materiale. - Cost final: $%d", moneys, price);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        SendClientMessage(playerid, COLOR_WHITE, "Dute la fabrica din BlueBerry pentru a livra marfa si a-ti primi partea.");
                        GivePlayerCash(playerid, - price);
                        PlayerInfo[playerid][pConvertMats] = moneys;
                    }
                    else
                    {
                        format(string, sizeof(string), "You do not have $%d", price);
                        SendClientMessage(playerid, COLOR_GREY, string);
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu esti la locul de unde se cumpara materiale");
                    return 1;
                }
            }
            else if(strcmp(x_nr, "matsdropoff", true) == 0)
            {
                if(PlayerToPoint(10.0,playerid,149.7461,-287.7071,1.5781))
                {
                    if(PlayerInfo[playerid][pConvertMats] > 0)
                    {
                        if(PlayerInfo[playerid][pMaterials] >= 10000)
                        {
                            SendClientMessage(playerid, COLOR_GREY, "Nu poti sa ti mai mult de 10000 de materiale.");
                            return 1;
                        }
                        format(string, sizeof(string), "Ai transportat cu succes materialele , ai acum %d materiale", PlayerInfo[playerid][pConvertMats]);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        PlayerInfo[playerid][pMaterials] += PlayerInfo[playerid][pConvertMats];
                        PlayerInfo[playerid][pConvertMats] = 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "You have not delivered any packages.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu esti la locul de lasat materiale");
                    return 1;
                }
            }
            else if(strcmp(x_nr, "sellproducts", true) == 0)
            {
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /delivery [sellproducts] [playerid/partofname] [amount] [cost]");
                    return 1;
                }
                new id;
                id = ReturnUser(tmp);
                if(id == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can not sell products to yourself"); return 1;}

                tmp = strtok(cmdtext, idx);
                new amount;
                amount = strval(tmp);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /delivery [sellproducts] [playerid/partofname] [amount] [cost]");
                    return 1;
                }
                tmp = strtok(cmdtext, idx);
                new cost;
                cost = strval(tmp);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /delivery [sellproducts] [playerid/partofname] [amount] [cost]");
                    return 1;
                }
                if(cost < 1 || cost > 99999) { SendClientMessage(playerid, COLOR_GREY, "Products must be above 1 and below 99999"); return 1; }

                if(IsPlayerConnected(id))
                {
                    if(id != INVALID_PLAYER_ID)
                    {
                        if(GetDistanceBetweenPlayers(playerid,id) < 5)
                        {
                            if(PlayerInfo[playerid][pProducts] == 0)
                            {
                                SendClientMessage(playerid, COLOR_GREY, "You do not have any products");
                                return 1;
                            }
                            ProductsOffer[id] = playerid;
                            ProductsAmount[id] = amount;
                            ProductsCost[id] = cost;
                            format(string, sizeof(string), "You have been offered %d products for $%d by %s, (type /accept products)", ProductsAmount[id], ProductsCost[id], GetPlayerNameEx(playerid));
                            SendClientMessage(id, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "You offered %s, %d products for $%d", GetPlayerNameEx(id), amount, cost);
                            SendClientMessage(playerid, COLOR_WHITE, string);
                            return 1;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GREY, "That player is not in range");
                        }
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Invalid command");
                return 1;
            }
        }
    }
        return 1;
    }*/
	if(strcmp(cmd, "/respawn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{00FF00}Utilizare:{FFFFFF} /respawn [playerid/PartOfName]");
				return 1;
			}
			new playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdministrator] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            SetPlayerInterior(playa,0);
						SetPlayerVirtualWorld(playa,0);
						SetPlayerPos(playa, 823.5479,-1361.3833,-0.5078);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/servicerepair", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			new servicecar = strval(tmp);
			new Float:healthcar;
    		new carrepair = GetPlayerVehicleID(playerid);
    		GetVehicleHealth(carrepair, healthcar);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{00FF00}Utilizare:{FFFFFF} /servicerepair [id-ul tipului reparatiei]");
            	SendClientMessage(playerid, COLOR_WHITE, "1. Reparatie totala (400$)");
            	SendClientMessage(playerid, COLOR_WHITE, "2. Reparatie motor (200$)");
				return 1;
			}
			if (servicecar == 1)
			{
		        if(IsPlayerInRangeOfPoint(playerid,5,1015.7255,-918.1165,42.1797) || IsPlayerInRangeOfPoint(playerid,5,1913.2634,-1776.4719,13.3828) || IsPlayerInRangeOfPoint(playerid,5,-110.9694,1133.2971,19.7422) || IsPlayerInRangeOfPoint(playerid,5,91.4999,-165.0383,2.5938))
		        {
		            if (healthcar<1000)
		            {
			            if(GetPlayerCash(playerid)>=400)
			            {
			                RepairVehicle(carrepair);
			                RepCar[playerid] = 1;
			                SendClientMessage(playerid, COLOR_WHITE,"Masina ta este in proces de reparatie ! Te rugam sa astepti ...");
							if (PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pFaction] != 2)
							{
								GivePlayerCash(playerid,-400);
							}
							FreezePlayer(playerid, 20);
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_WHITE,"Nu ai destui bani");
			            }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE,"Masina este deja reparata");
					}
		        }
			}
			if (servicecar == 2)
			{
                if(IsPlayerInRangeOfPoint(playerid,5,1015.7255,-918.1165,42.1797) || IsPlayerInRangeOfPoint(playerid,5,1913.2634,-1776.4719,13.3828)|| IsPlayerInRangeOfPoint(playerid,5,-110.9694,1133.2971,19.7422)|| IsPlayerInRangeOfPoint(playerid,5,91.4999,-165.0383,2.5938))
		        {
		            if (healthcar<1000)
		            {
			            if(GetPlayerCash(playerid)>=200)
			            {
			                SetVehicleHealth(carrepair, 850.0);
			                RepCar[playerid] = 1;
			               	SendClientMessage(playerid, COLOR_WHITE,"Masina ta este in proces de reparatie ! Te rugam sa astepti ...");
			                if (PlayerInfo[playerid][pFaction] != 3 && PlayerInfo[playerid][pFaction] != 2)
							{
								GivePlayerCash(playerid,-200);
							}
							FreezePlayer(playerid, 10);
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_WHITE,"Nu ai destui bani");
			            }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE,"Masina este deja reparata");
					}
		        }
			}
	    }
	    return 1;
	}
	if(strcmp(cmd, "/fullrepair", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if (IsPlayerInAnyVehicle(playerid))
            {
                if (PlayerInfo[playerid][pFaction] == 7)
                {
                    if (PlayerToPoint(100.0,playerid,1986.6340,-1860.2877,13.5504))
                    {
                        RepairVehicle(GetPlayerVehicleID(playerid));
                        SendClientMessage(playerid, COLOR_WHITE, "Ti-au fost retrasi 10$ pentru ca ai reparat aceasta masina");
                        GivePlayerCash(playerid,-10);
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la sediu pentru a folosi aceasta comanda");
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea LSAS");
                }
            }
        }
    }
    if(strcmp(cmd, "/increaserubber", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if (IsPlayerInAnyVehicle(playerid))
            {
                if (PlayerInfo[playerid][pFaction] == 7)
                {
                    if (PlayerToPoint(100.0,playerid,1986.6340,-1860.2877,13.5504))
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "Ti-au fost retrasi 100$ pentru ca ai umflat cauciucurile acestei masinii");
                        GivePlayerCash(playerid,-100);
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la sediu pentru a folosi aceasta comanda");
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu faci parte din factiunea LSAS");
                }
            }
        }
    }
    if(strcmp(cmd, "/repair", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pFaction] != 7)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu esti un mecanic.");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /repair [playerid/partofname] [price]");
                return 1;
            }
            new playa;
            new money;
            playa = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
            money = strval(tmp);
            if(money < 1 || money > 500) { SendClientMessage(playerid, COLOR_GREY, "Price can not be lower then 1, or above 500"); return 1; }
            if(IsPlayerConnected(playa))
            {
                if(playa != INVALID_PLAYER_ID)
                {
                    if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
                    {
                        if(IsATowTruck(GetPlayerVehicleID(playerid)))
                        {
                            if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can not repair your own vehicles"); return 1; }
                            GetPlayerName(playa, giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "I-ai oferit lui %s sa ii repari masina pentru $%d",giveplayer,money);
                            SendClientMessage(playerid, COLOR_WHITE, string);
                            format(string, sizeof(string), "Mecanicul %s iti ofera o reparatie pentru suma de $%d, (scrie /accept repair) pentru a accepta",sendername,money);
                            SendClientMessage(playa, COLOR_LIGHTBLUE, string);
                            RepairOffer[playa] = playerid;
                            RepairPrice[playa] = money;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GREY, "You need to be in a towtruck.");
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "That player is not in range / not in a vehicle");
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/refill", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pFaction] != 7)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu esti un mecanic.");
                return 1;
            }
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /refill [playerid/partofname] [price]");
                return 1;
            }
            new playa;
            new money;
            playa = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
            money = strval(tmp);
            if(money < 1 || money > 200) { SendClientMessage(playerid, COLOR_GREY, "Price can not be lower then 1, or above 200"); return 1; }
            if(IsPlayerConnected(playa))
            {
                if(playa != INVALID_PLAYER_ID)
                {
                    if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
                    {
                        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "You can not refuel your own vehicles"); return 1; }
                        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "You offerd %s to refill his vehicle for $%d",giveplayer,money);
                        SendClientMessage(playerid, COLOR_WHITE, string);
                        format(string, sizeof(string), "Mechanic %s wants to refill your vehicle for $%d, (type /accept refill) to accept",sendername,money);
                        SendClientMessage(playa, COLOR_LIGHTBLUE, string);
                        RefillOffer[playa] = playerid;
                        RefillPrice[playa] = money;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "That player is not in range / not in a vehicle");
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/ptow", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pFaction] == 3)
            {
                if(IsPlayerInAnyVehicle(playerid))
                {
                    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
                    {
                        if(GetPlayerState(playerid)==2)
                        {
                            new Float:pX,Float:pY,Float:pZ;
                            GetPlayerPos(playerid,pX,pY,pZ);
                            new Float:vXX,Float:vYY,Float:vZZ;
                            new Found=0;
                            new vid=0;
                            while((vid<MAX_VEHICLES)&&(!Found))
                            {
                                vid++;
                                GetVehiclePos(vid,vXX,vYY,vZZ);
                                if((floatabs(pX-vXX)<7.0)&&(floatabs(pY-vYY)<7.0)&&(floatabs(pZ-vZZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
                                {
                                    Found=1;
                                    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
                                    {
                                        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
                                    }
                                    else
                                    {
                                        AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
                                    }
                                }
                            }
                            if(!Found)
                            {
                                SendClientMessage(playerid, COLOR_GREY, "There is no vehicle in range");
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GREY, "You must be the driver to use the tow");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "You must be in a tow truck");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "You must be be in a vehicle");
                    return 1;
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Factiune invalida!");
                return 1;
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/tow", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pFaction] == 7)
            {
                if(IsPlayerInAnyVehicle(playerid))
                {
                    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
                    {
                        if(GetPlayerState(playerid)==2)
                        {
                            new Float:pX,Float:pY,Float:pZ;
                            GetPlayerPos(playerid,pX,pY,pZ);
                            new Float:vXX,Float:vYY,Float:vZZ;
                            new Found=0;
                            new vid=0;
                            while((vid<MAX_VEHICLES)&&(!Found))
                            {
                                vid++;
                                GetVehiclePos(vid,vXX,vYY,vZZ);
                                if((floatabs(pX-vXX)<7.0)&&(floatabs(pY-vYY)<7.0)&&(floatabs(pZ-vZZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
                                {
                                    Found=1;
                                    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
                                    {
                                        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
                                    }
                                    else
                                    {
                                        if (HandBrake[vid][hActiv] == 1)
                                        {
                                            HandBrake[vid][hActiv] = 0;
                                            HandBrake[vid][hX] = 0;
                                            HandBrake[vid][hY] = 0;
                                            HandBrake[vid][hZ] = 0;
                                            HandBrake[vid][hRZ] = 0;
                                        }
                                        if (VehicleInfo[GetPlayerVehicleID(playerid)][vSiren] == 0)
                                        {
                                            AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
                                            VehicleInfo[GetPlayerVehicleID(playerid)][vSiren] = CreateObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                                            AttachObjectToVehicle(VehicleInfo[GetPlayerVehicleID(playerid)][vSiren], GetPlayerVehicleID(playerid), -0.569999, 0.414999, 1.409998, 0.000000, 0.000000, 0.000000);
                                            SendClientMessage(playerid, COLOR_WHITE, "Folositi {B20000}/sirenoff{FFFFFF} pentru a da sirena jos de pe masina.");
                                        }
                                        else
                                        {
                                            DestroyObject(VehicleInfo[GetPlayerVehicleID(playerid)][vSiren]);
                                            VehicleInfo[GetPlayerVehicleID(playerid)][vSiren] = 0;
                                        }
                                    }
                                }
                            }
                            if(!Found)
                            {
                                SendClientMessage(playerid, COLOR_GREY, "Nu este nici un vehicul in zona.");
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GREY, "Trebuie sa fi soferul masinii");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un  tow truck");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul!");
                    return 1;
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu esti mecanic!");
                return 1;
            }
        }
        return 1;
    }
	if(strcmp(cmd, "/sirenoff", true) == 0)
	{
	 	if(IsPlayerConnected(playerid))
	 	{
			if (PlayerInfo[playerid][pFaction] == 7 || PlayerInfo[playerid][pFaction] == 1)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
				{
					if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					{
						DestroyObject(VehicleInfo[GetPlayerVehicleID(playerid)][vSiren]);
						VehicleInfo[GetPlayerVehicleID(playerid)][vSiren] = 0;
					}
					else SendClientMessage(playerid, COLOR_WHITE, "Nu poti da sirena jos atunci cand tractezi o masina");
				}
			}
		}
		return 1;
 	}
	if(strcmp(cmd, "/buy", true) == 0)
	{
	 	if(IsPlayerConnected(playerid))
	 	{
	  		for(new i = 0; i < sizeof(Businesses); i++)
			{
				if(PlayerToPoint(25.0,playerid,Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == i)
		   			{
					    if(Businesses[i][BizType] == 3) //24-7
				    	{
			        		if(Businesses[i][Products] != 0)
			        		{
					    		ShowPlayerDialog(playerid, 752, DIALOG_STYLE_LIST, "Bine ai venit", "Statie Radio($150) \nBata de baseball($10) \nSet de scule($100)\nTigari($50) \nBricheta($5) \nLoz($35) \nCanistra cu benzina($50) \nMasca($250) \nLopata($10) \nZaruri($2) \nParasuta($25) \nCarja($5)\nCamera Foto($45)\nCasetofon($200)", "Cumpara", "Cancel");
					    		return 1;
					    	}
					    	else
					    	{
							    SendClientMessage(playerid, COLOR_GRAD2, "Afacerea nu mai are produse pe stoc.");
							    return 1;
					    	}
				    	}
				    	else if(Businesses[i][BizType] == 18)
				    	{
			        		if(Businesses[i][Products] != 0)
			        		{
					    		ShowPlayerDialog(playerid, 753, DIALOG_STYLE_LIST, "Buna!", "Selectia casei \nSelectia muzicii \nSelectia masinii", "Okay", "Cancel");
					    		return 1;
					    	}
					    	else
					    	{
							    SendClientMessage(playerid, COLOR_GRAD2, "Afacerea nu mai are produse pe stoc");
							    return 1;
					    	}
				    	}
				    }
	        	}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/vhang", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pFunie] == 1)
		    {
		        if(IsPlayerInAnyVehicle(playerid))
		        {
		     	   	    if(GetPlayerState(playerid)==2)
		     	   	    {
							new Float:pX,Float:pY,Float:pZ;
							GetPlayerPos(playerid,pX,pY,pZ);
							new Float:vXX,Float:vYY,Float:vZZ;
							new Found=0;
							new vid=0;
							while((vid<MAX_VEHICLES)&&(!Found))
							{
			   					vid++;
			   					GetVehiclePos(vid,vXX,vYY,vZZ);
			   					if((floatabs(pX-vXX)<15.0)&&(floatabs(pY-vYY)<15.0)&&(floatabs(pZ-vZZ)<15.0)&&(vid!=GetPlayerVehicleID(playerid)))
								{
			   				    	Found=1;
			   				    	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			           				{
			   				        	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						           	}
						           	else
						           	{
										if (HandBrake[vid][hActiv] == 1)
										{
											HandBrake[vid][hActiv] = 0;
											HandBrake[vid][hX] = 0;
											HandBrake[vid][hY] = 0;
											HandBrake[vid][hZ] = 0;
											HandBrake[vid][hRZ] = 0;
										}
										if (VehicleInfo[GetPlayerVehicleID(playerid)][vSiren] == 0)
										{
											AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
										}
										else
										{
											DestroyObject(VehicleInfo[GetPlayerVehicleID(playerid)][vSiren]);
											VehicleInfo[GetPlayerVehicleID(playerid)][vSiren] = 0;
										}
									}
			 					}
			     			}
							if(!Found)
				 			{
			   					SendClientMessage(playerid, COLOR_GREY, "Nu este nici un vehicul in zona.");
			   				}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Trebuie sa fi soferul masinii");
							return 1;
						}
					}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu ai o funie/sufa in inventar!");
				return 1;
			}
		}
		return 1;
	}
 	if (strcmp(cmd, "/buygun", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerCash(playerid) < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani la tine!");
			    return 1;
			}
			if(PlayerInfo[playerid][pLevel] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu poti utiliza comanda la level 1.");
				return 1;
			}
			new gun;
			new gunid[16];
			new infostring[256];
			new guncharge;
			for(new i = 0; i < sizeof(Businesses); i++)
			{
				if (PlayerToPoint(25.0,playerid,Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == i)
	   				{
				    	if(Businesses[i][BizType] == 4)
			    		{
			    		    if(PlayerInfo[playerid][pWepLic] == 0)
		        		    {
		        				if(Businesses[i][Products] == 0)
		        				{
		        					GameTextForPlayer(playerid, "~r~Nu mai sunt pe stoc", 5000, 1);
									return 1;
			    				}
								tmp = strtok(cmdtext, idx);
								if(!strlen(tmp))
								{
									SendClientMessage(playerid, COLOR_WHITE,"*** Armele negre ***");
									SendClientMessage(playerid, COLOR_WHITE,"{AFAFAF}SYNTAX{FFFFFF}: /buygun [gunname] [ammoamount]");

									SendClientMessage(playerid, COLOR_GRAD2, "Arme: Cutit ($250)");

									SendClientMessage(playerid, COLOR_GRAD2, "Arme: Bata ($185) Lopata ($450)");

									SendClientMessage(playerid, COLOR_GRAD2, "Arme: Katana ($560) Cane ($230)");

									return 1;
								}
								strmid(gunid, tmp, 0, strlen(cmdtext), 255);
								if (strcmp(gunid, "Cutit", true, strlen(gunid)) == 0)
								{
									gun = 4; guncharge = 250;
								}
								else if (strcmp(gunid, "Bata", true, strlen(gunid)) == 0)
								{
									gun = 5; guncharge = 185;
								}
								else if (strcmp(gunid, "Lopata", true, strlen(gunid)) == 0)
								{
									gun = 6; guncharge = 450;
								}
								else if (strcmp(gunid, "Katana", true, strlen(gunid)) == 0)
								{
									gun = 8; guncharge = 560;
								}
								else if (strcmp(gunid, "Cane", true, strlen(gunid)) == 0)
								{
									gun = 15; guncharge = 230;
								}
								if((guncharge) > GetPlayerCash(playerid))
								{
									format(infostring, 256, "   Nu ai $%d",guncharge);
									SendClientMessage(playerid, COLOR_GRAD2, infostring);
									return 1;
								}
								if(GetPlayerCash(playerid) < (guncharge))
								{
						    		SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani");
						    		return 1;
								}
								if(gun == 4)
								{
								    SafeGivePlayerWeapon(playerid,4,1);
								}
								if(gun == 5)
								{
								    SafeGivePlayerWeapon(playerid,5,1);
								}
								if(gun == 6)
								{
								    SafeGivePlayerWeapon(playerid,6,1);
								}
								if(gun == 8)
								{
								    SafeGivePlayerWeapon(playerid,8,1);
								}
								if(gun == 15)
								{
								    SafeGivePlayerWeapon(playerid,15,1);
								}
								PlayerInfo[playerid][pFairMoney] = 1;
				        		SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
								new payout = guncharge;
								format(infostring, 256, "Bravo! Ti-ai cumparat o arma pentru $%d",payout);
								SendClientMessage(playerid, COLOR_GREEN, infostring);
								GivePlayerCash(playerid, - payout);
								Businesses[i][Products]--;
								Businesses[i][Till]+= payout;
								PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "%s cumpara o arma cu $%d de la bizul %d", sendername, payout, Businesses[i][BusinessName]);
								printf("%s", string);
								PayLog(string);
							}
						}
						else
						{
			    			SendClientMessage(playerid, COLOR_WHITE,"Nu esti in magazin.");
							return 1;
						}
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/buydrink", true) == 0)
	{
	 	if(IsPlayerConnected(playerid))
	 	{
   			for(new i = 0; i < sizeof(Businesses); i++)
			{
				if(PlayerToPoint(25.0,playerid,Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == i || GetPlayerVirtualWorld(playerid) == 0)
					{
			    		if(Businesses[i][BizType] == 7 || Businesses[i][BizType] == 20)
			    		{
			    			new x_info[128];
							x_info = strtok(cmdtext, idx);

							if(!strlen(x_info))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /buydrink [item]");
								SendClientMessage(playerid, COLOR_WHITE, "Beer - Pret: $2");
								SendClientMessage(playerid, COLOR_WHITE, "Vodka - Pret: $4");
								SendClientMessage(playerid, COLOR_WHITE, "Coke - Pret: $1");
								SendClientMessage(playerid, COLOR_WHITE, "Water - Pret: $1");
								SendClientMessage(playerid, COLOR_WHITE, "Whiskey - Pret: $5");
								SendClientMessage(playerid, COLOR_WHITE, "Brandy - Pret: $6");
								SendClientMessage(playerid, COLOR_WHITE, "Soda - Pret: $4");
								return 1;
							}
				        	if(Businesses[i][Products] != 0)
				        	{
				        	    new Float:HP;
				        	    GetPlayerHealth(playerid,HP);
								if(strcmp(x_info, "beer", true) == 0)
								{
									if(GetPlayerCash(playerid) >= 2)
									{
	           						GivePlayerCash(playerid,-2);
	           						PlayerDrunk[playerid] += 1;
	           						if(PlayerDrunk[playerid] >= 10) { GameTextForPlayer(playerid, "~w~Esti ~p~baut", 3500, 1); }
									if(GetPlayerVirtualWorld(playerid) == 0)
									{
                     		       		Businesses[32][Till] += 2;
                     		       		Businesses[32][Products]--;
									}
									else
									{
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Till] += 10;
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
									}
                        		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
                              		if(HP < 100)
                        		    {
                          		  		SetPlayerHealth(playerid,HP+15.0);
                          		  	}
							  		return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
									    return 1;
									}
								}
        						if(strcmp(x_info, "vodka", true) == 0)
								{
									if(GetPlayerCash(playerid) >= 4)
									{
	           						GivePlayerCash(playerid,-4);
	           						PlayerDrunk[playerid] += 2;
	           						if(PlayerDrunk[playerid] >= 10) { GameTextForPlayer(playerid, "~w~Esti ~p~baut", 3500, 1);
									}
									if(GetPlayerVirtualWorld(playerid) == 0)
									{
                     		       		Businesses[32][Till] += 4;
                     		       		Businesses[32][Products]--;
									}
									else
									{
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Till] += 4;
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
									}
                     		       	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
                              		if(HP < 100)
                        		    {
                          		  		SetPlayerHealth(playerid,HP+20.0);
                          		  	}
							  		return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
									    return 1;
									}
								}
        						if(strcmp(x_info, "coke", true) == 0)
								{
									if(GetPlayerCash(playerid) >= 1)
									{
	           						GivePlayerCash(playerid,-1);
									if(GetPlayerVirtualWorld(playerid) == 0)
									{
                     		       		Businesses[32][Till] += 1;
                     		       		Businesses[32][Products]--;
									}
									else
									{
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Till] += 1;
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
									}
                        		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                              		if(HP < 100)
                        		    {
                          		  		SetPlayerHealth(playerid,HP+2.0);
                          		  	}
							  		return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
									    return 1;
									}
								}
       	 						if(strcmp(x_info, "water", true) == 0)
								{
									if(GetPlayerCash(playerid) >= 1)
									{
	           						GivePlayerCash(playerid,-1);
									if(GetPlayerVirtualWorld(playerid) == 0)
									{
                     		       		Businesses[32][Till] += 1;
                     		       		Businesses[32][Products]--;
									}
									else
									{
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Till] += 1;
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
									}
                        		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                              		if(HP < 100)
                        		    {
                          		  		SetPlayerHealth(playerid,HP+1.0);
                          		  	}
							  		return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
									    return 1;
									}
								}
        						if(strcmp(x_info, "whiskey", true) == 0)
								{
									if(GetPlayerCash(playerid) >= 5)
									{
	           						GivePlayerCash(playerid,-5);
	           						PlayerDrunk[playerid] += 2;
	           						if(PlayerDrunk[playerid] >= 10) { GameTextForPlayer(playerid, "~w~Esti ~p~baut", 3500, 1); }
									if(GetPlayerVirtualWorld(playerid) == 0)
									{
                     		       		Businesses[32][Till] += 5;
                     		       		Businesses[32][Products]--;
									}
									else
									{
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Till] += 5;
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
									}
                        		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
                              		if(HP < 100)
                        		    {
                          		  		SetPlayerHealth(playerid,HP+15.0);
                          		  	}
							  		return 1;
									}
									else
									{
									    return 1;
									}
								}
								if(strcmp(x_info, "brandy", true) == 0)
								{
									if(GetPlayerCash(playerid) >= 6)
									{
	           						GivePlayerCash(playerid,-6);
	           						PlayerDrunk[playerid] += 2;
	           						if(PlayerDrunk[playerid] >= 10) { GameTextForPlayer(playerid, "~w~Esti ~p~baut", 3500, 1); }
									if(GetPlayerVirtualWorld(playerid) == 0)
									{
                     		       		Businesses[32][Till] += 6;
                     		       		Businesses[32][Products]--;
									}
									else
									{
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Till] += 6;
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
									}
                        		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
                              		if(HP < 100)
                        		    {
                          		  		SetPlayerHealth(playerid,HP+25.0);
                          		  	}
							  		return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
									    return 1;
									}
								}
        						if(strcmp(x_info, "soda", true) == 0)
								{
									if(GetPlayerCash(playerid) >= 1)
									{
	           						GivePlayerCash(playerid,-1);
									if(GetPlayerVirtualWorld(playerid) == 0)
									{
                     		       		Businesses[32][Till] += 1;
                     		       		Businesses[32][Products]--;
									}
									else
									{
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Till] += 1;
                     		       		Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
									}
                        		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                              		if(HP < 100)
                        		    {
                          		  		SetPlayerHealth(playerid,HP+2.0);
                          		  	}
							  		return 1;
									}
									else
									{
									    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
									    return 1;
									}
								}
							}
						}
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/farm", true) == 0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_nr[256];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /farm [item]");
				SendClientMessage(playerid, COLOR_WHITE, "harvest | stopharvest | plant");
			    return 1;
			}
			if(strcmp(x_nr, "harvest", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
			    {
					if(!IsAHarvest(idcar))
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o combina.");
					    return 1;
					}
					if(FarmerVar[playerid] == 1)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Ai inceput sa treieri,dute dupa checkpoint.");
					    return 1;
					}
					if(FarmerPickup[playerid][0] >= 22)
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Asteapta sa iti vina salariul dupa care revino aici.");
					    return 1;
					}
					if(PlayerInfo[playerid][pCanJob] == 23)
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Asteapta sa iti vina salariul dupa care revino aici.");
					    return 1;
					}
					if(PlayerInfo[playerid][pCanJob] == 22)
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Asteapta sa iti vina salariul dupa care revino aici.");
					    return 1;
					}
			        if(PlayerInfo[playerid][pJob] == 4)
			        {
			            JustStarted[playerid] = 1;
			            FarmerVar[playerid] = 1;
			            OnPlayerEnterCheckpoint(playerid);
			            SendClientMessage(playerid, COLOR_YELLOW, "Dute la checkpoint si incepe lucrul!");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Nu esti logat.");
			        return 1;
			    }
			}
			else if(strcmp(x_nr, "stopharvest", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
			    {
			        if(FarmerVar[playerid] == 0)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nu ai inceput sa lucrezi.");
					    return 1;
					}
					if(PlayerInfo[playerid][pJob] == 4)
					{
					    if(FarmerPickup[playerid][0] >= 1 && FarmerPickup[playerid][0] <= 22)
						{
							FarmerPickup[playerid][0]--;
						}
						JustStarted[playerid] = 0;
					    FarmerVar[playerid] = 0;
					    DisablePlayerCheckpoint(playerid);
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Nu esti logat.");
			        return 1;
			    }
			}
			else if(strcmp(x_nr, "plant", true) == 0)
			{
			    if(IsPlayerConnected(playerid))
			    {
				    if(PlayerInfo[playerid][pJob] != 4)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Nu esti fermier.");
					    return 1;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "You are not logged in.");
			        return 1;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Comanda invalida.");
			    return 1;
			}
		}
		return 1;
	}
 	if(strcmp(cmd, "/eatfood", true) == 0)
	{
	    for(new i = 0; i < sizeof(Businesses); i++)
		{
			if(PlayerToPoint(25.0,playerid,Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]))
			{
				if(GetPlayerVirtualWorld(playerid) == i)
	   			{
				    if(Businesses[i][BizType] == 1)
				    {
				        if(Businesses[i][Products] != 0)
				        {
					        if(GetPlayerCash(playerid) >= 5)
					        {
						        if(PlayerToPoint(25.0,playerid,377.0869,-68.1940,1001.5151))
						        {
           		                 	SendClientMessage(playerid, COLOR_WHITE, "Mananci in acest moment un hamburger. -$5");
	           						GivePlayerCash(playerid,-5);
                     		       	Businesses[i][Till] += 5;
                        		    Businesses[i][Products]--;
                          		  	SetPlayerHealth(playerid,100);
							  		PlayerActionMessage(playerid,15.0,"mananca un hamburger.");
									return 1;
        						}
		      					else if(PlayerToPoint(25.0,playerid,369.6264,-6.5964,1001.8589))
						        {
		          					SendClientMessage(playerid, COLOR_WHITE, "Mananci in acest moment pulpe de pui. -$5");
		          					GivePlayerCash(playerid,-5);
		          					Businesses[i][Till] += 5;
		          					Businesses[i][Products]--;
		          					SetPlayerHealth(playerid,100);
	   								PlayerActionMessage(playerid,15.0,"mananca pulpe de pui.");
									return 1;
								}
	  							else if(PlayerToPoint(25.0,playerid,375.7379,-119.1621,1001.4995))
						        {
		          					SendClientMessage(playerid, COLOR_WHITE, "Mananci in acest moment o pizza. -$5");
		          					GivePlayerCash(playerid,-5);
		          					Businesses[i][Till] += 5;
		          					Businesses[i][Products]--;
		          					SetPlayerHealth(playerid,100);
	   								PlayerActionMessage(playerid,15.0,"mananca o pizza.");
									return 1;
								}
								else if(PlayerToPoint(25.0,playerid,378.7731,-186.7205,1000.6328))
						        {
		          					SendClientMessage(playerid, COLOR_WHITE, "In acest moment,mananci gogosi umplute cu ciocolata. -$5");
		          					GivePlayerCash(playerid,-5);
		          					Businesses[i][Till] += 5;
		          					Businesses[i][Products]--;
		          					SetPlayerHealth(playerid,100);
	   								PlayerActionMessage(playerid,15.0,"mananca gogosi umplute cu ciocolata.");
									return 1;
								}
								else
								{
		          					SendClientMessage(playerid, COLOR_WHITE, "Bea un pahar de suc. -$5");
		          					GivePlayerCash(playerid,-5);
		          					Businesses[i][Till] += 5;
		          					Businesses[i][Products]--;
		          					SetPlayerHealth(playerid,100);
	   								PlayerActionMessage(playerid,15.0,"bea un pahar cu suc.");
									return 1;
        						}
							}
						}
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/advert", true) == 0 || strcmp(cmd, "/ad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
   			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: (/ad)vert [advert text]");
				return 1;
			}
   	    	for(new i = 0; i < sizeof(Businesses); i++)
			{
				if(PlayerToPoint(25.0,playerid,Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == i)
					{
			    		if(Businesses[i][BizType] == 5)
			    		{
				        	if(Businesses[i][Products] != 0)
				        	{
								if((!adds))
								{
									format(string, sizeof(string), "Trebuie sa astepti %d secunde pentru a se face public in ziar anuntul.",  (addtimer/1000));
									SendClientMessage(playerid, COLOR_GREY, string);
									return 1;

								}
								new payout = idx * 1;
								if(GetPlayerCash(playerid) < payout)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani!");
						            return 1;
						        }
						        if(PlayerInfo[playerid][pPlayingHours] < 2)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "Trebuie sa ai cel putin doua ore jucate pentru a putea face un anunt.");
						            return 1;
						        }
						        GivePlayerCash(playerid, - payout);
								Businesses[i][Till] += payout;
								Businesses[i][Products] --;
        						new str[128];
								if(strlen(result) > MAXLEN)
								{
									new pos = MAXLEN;
								    //while(result[--pos] < ' ') {}
								    if(pos < MAXLEN-1) pos = MAXLEN;
								    format(str, sizeof(string), "[Publicitate] %.*s ...",  pos, result);
									SendClientMessageToAll(COLOR_ADGREEN,str);
								    format(str, sizeof(str), "[Publicitate] ... %s, Contact:[%d]", result[pos], PlayerInfo[playerid][pPhoneNumber]);
								    SendClientMessageToAll(COLOR_ADGREEN,str);
								    format(string, sizeof(string), "[WARNING] %s a trimis un avertisment!",GetPlayerNameEx(playerid));
									AdministratorMessage(COLOR_LIGHTRED,string,1);
								    printf("%s", str);
								    printf("%s", string);
								}
								else
								{
									format(str, sizeof(string), "[Publicitate] %s, Contact:[%d]",  result, PlayerInfo[playerid][pPhoneNumber]);
									SendClientMessageToAll(COLOR_ADGREEN,str);
									format(string, sizeof(string), "[WARNING] %s a trimis un avertisment!",GetPlayerNameEx(playerid));
									AdministratorMessage(COLOR_LIGHTRED,string,1);
								    printf("%s", str);
								    printf("%s", string);
								}
						        SetTimer("AddsOn", addtimer, 0);
								adds = 0;
						        format(string, sizeof(string), "Anuntul a fost dat! | Numar caracatere: %d - Cost: $%d | Multumim din partea companiei %s", idx,payout,Businesses[i][BusinessName]);
								SendClientMessage(playerid,COLOR_WHITE,string);
								return 1;
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "Afacerea nu mai are ziare.");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Afacerea nu este una privata.");
						}
					}
	   			}
	   			else
				{
				}
			}
		}
		return 1;
	}
  	if(strcmp(cmd, "/cadvertise", true) == 0 || strcmp(cmd, "/cad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[256];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
   			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: (/cad)vertise [advert text]");
				return 1;
			}
   	    	for(new i = 0; i < sizeof(Businesses); i++)
			{
				if (PlayerToPoint(25.0,playerid,Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]))
				{
					if(GetPlayerVirtualWorld(playerid) == i)
					{
			    		if(Businesses[i][BizType] == 5)
			    		{
				        	if(Businesses[i][Products] != 0)
				        	{
								if ((!adds))
								{
									format(string, sizeof(string), "You must wait %d seconds before making another advertisement",  (addtimer/1000));
									SendClientMessage(playerid, COLOR_GREY, string);
									return 1;
								}
								new payout = idx * 1;
								if(GetPlayerCash(playerid) < payout)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "Nu ai suficienti bani!");
						            return 1;
						        }
						        if(PlayerInfo[playerid][pPlayingHours] < 2)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "You must have atleast played 2 hours to use this command.");
						            return 1;
						        }
						        new str[128];
								if(strlen(result) > MAXLEN)
								{
									new pos = MAXLEN;
								    //while(result[--pos] < ' ') {}
								    if(pos < MAXLEN-1) pos = MAXLEN;
								    format(str, sizeof(string), "[Publicitate Companie] %.*s ...",  pos, result);
									SendClientMessageToAll(COLOR_ADGREEN,str);
								    format(str, sizeof(str), "[Publicitate Companie] ... %s", result[pos]);
								    SendClientMessageToAll(COLOR_ADGREEN,str);
								    format(string, sizeof(string), "[WARNING] %s a trimis un avertisment!",GetPlayerNameEx(playerid));
									AdministratorMessage(COLOR_LIGHTRED,string,1);
								    printf("%s", str);
								    printf("%s", string);
								}
								else
								{
									format(str, sizeof(string), "[Company Advertisement] %s",  result);
									SendClientMessageToAll(COLOR_ADGREEN,str);
									format(string, sizeof(string), "[WARNING] %s a trimis un avertisment!",GetPlayerNameEx(playerid));
									AdministratorMessage(COLOR_LIGHTRED,string,1);
								    printf("%s", str);
								    printf("%s", string);
								}
						        GivePlayerCash(playerid, - payout);
								Businesses[i][Till] += payout;
								Businesses[i][Products] --;
						        SetTimer("AddsOn", addtimer, 0);
								adds = 0;
						        format(string, sizeof(string), "Characters Contained: %d - Cost: $%d - Thanks from %s", idx,payout,Businesses[i][BusinessName]);
								SendClientMessage(playerid,COLOR_WHITE,string);
								return 1;
							}
							else
							{
								SendClientMessage(playerid, COLOR_WHITE, "The business is out of products");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "This business is not an advertising company");
						}
					}
	   			}
			}
		}
		return 1;
	}
	//==========================================================================
	/*if(strcmp(cmd, "/phonebook", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pPhoneBook] == 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /phonebook [playerid/partofname]");
					return 1;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(gPlayerLogged[giveplayerid])
						{
					        if(PlayerInfo[giveplayerid][pListNumber])
					        {
								format(string, 128, "[Phone] Name: %s, Phone Number: %d",GetPlayerNameEx(giveplayerid),PlayerInfo[giveplayerid][pPhoneNumber]);
								SendClientMessage(playerid, COLOR_WHITE, string);
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "That players number is not publicly listed");
							}
						}
      					else
						{
    						SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "You do not have a phonebook");
			}
		}
		return 1;
	}*/
	if(strcmp(cmd, "/pickup", true) == 0 || strcmp(cmd, "/p", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Ai raspuns deja la telefon,foloseste(/hangup)");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(Mobile[i] == playerid)
					{
						Mobile[playerid] = i;
						PlayerInfo[i][pInCall] = 1;
						PlayerInfo[playerid][pInCall] = 1;
						SendClientMessage(i,  COLOR_GREY, " Ai raspuns la telefon.");
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
						PlayerActionMessage(playerid,15.0,"raspunde la telefon");
						if(IsValidPlayerObject(playerid, 8))
						{
							RemovePlayerAttachedObject(playerid, 8);
						}
						SetPlayerAttachedObject(playerid, 8, 18874, 6,0.08,0.01,0.00,1336.0,351.0,175.0,1.00,1.00,1.00);
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/createstrip",true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
		    if(!IsPlayerInAnyVehicle(playerid))
		    {
				if (PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
				{
					if(CopOnDuty[playerid] == 1)
					{
						new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
						GetPlayerPos(playerid, plocx, plocy, plocz);
						GetPlayerFacingAngle(playerid,ploca);
						CreateStrip(plocx,plocy,plocz,ploca);
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "** HQ Announcemenet : %s %s a amplasat o capcana cu tepi<<",GetRankName(playerid), sendername);
						SendFactionMessage(3, COLOR_LIGHTBLUE, string);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Nu esti duty.");
					}
				}
				else SendClientMessage(playerid, COLOR_GRAD2, "Nu esti membru LSPD.");
			}
		}
		return 1;
	}
	if(strcmp(cmd,"/removestrip",true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pFaction] == 3 || PlayerInfo[playerid][pFaction] == 1)
			{
				if(CopOnDuty[playerid] == 1)
				{
					DeleteClosestStrip(playerid);
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "** HQ Announcemenet : %s %s a inlaturat capcana cu tepi pe care a amplasat-o <<",GetRankName(playerid), sendername);
					SendFactionMessage(3, COLOR_LIGHTBLUE, string);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  Nu esti duty.");
				}
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "Nu esti membru LSPD.");
		}
		return 1;
	}
	if(strcmp(cmd,"/removeallstrips",true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if (PlayerInfo[playerid][pFaction] == 3)
			{
				if(CopOnDuty[playerid] == 1)
				{
					DeleteAllStrip();
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "** HQ Announcemenet : Toate capcanele cu tepi au fost inlaturate de %s %s <<",GetRankName(playerid), sendername);
					SendFactionMessage(3, COLOR_LIGHTBLUE, string);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  You are not on duty.");
				}
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "Nu esti membru LSPD.");
		}
		return 1;
	}
 	if(strcmp(cmd, "/sms", true) == 0 || strcmp(cmd, "/txt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   You havent logged in yet !");
	            return 1;
	        }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /sms [phonenumber] [message]");
				return 1;
			}
			if(PlayerInfo[playerid][pPhoneNumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu ai un telefon mobil.");
				return 1;
			}
			if(PlayerInfo[playerid][pJailed] != 0)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED,"Ti s-a confiscat telefonul.");
			    return 1;
			}
			new phonenumb = strval(tmp);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /sms [phonenumber] [message]");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPhoneNumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid])
						        {
						            SendClientMessage(playerid, COLOR_LIGHTRED, "Playerul are telefonul inchis");
						            return 1;
						        }
								if(PlayerInfo[playerid][pSex] == 1) { PlayerBubbleMessage(playerid,"deschide telefonul si scrie un sms."); } else { PlayerBubbleMessage(playerid,"takes out her cellphone and starts texting."); }
			              		new str[128];
								if(strlen(result) > MAXLEN)
								{
								    new pos = MAXLEN;
								    if(pos < MAXLEN-1) pos = MAXLEN;
									format(str, sizeof(str), "SMS: %.*s ...", pos, result);
									SendClientMessage(giveplayerid, COLOR_YELLOW, str);
									format(str, sizeof(str), "SMS: ... %s, : %s (%d)", result[pos], GetPlayerNameEx(playerid), PlayerInfo[playerid][pPhoneNumber]);
									SendClientMessage(giveplayerid, COLOR_YELLOW, str);

									format(str, sizeof(str), "SMS: %.*s ...", pos, result);
									SendClientMessage(playerid, COLOR_YELLOW, str);
									format(str, sizeof(str), "SMS: ... %s, Catre: %s (%d)", result[pos], GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pPhoneNumber]);
									SendClientMessage(playerid, COLOR_YELLOW, str);

									printf("%s",str);
								}
								else
								{
								    format(str, sizeof(str), "SMS: %s, Trimis de: %s (%d)", result, GetPlayerNameEx(playerid), PlayerInfo[playerid][pPhoneNumber]);
									SendClientMessage(giveplayerid, COLOR_YELLOW, str);
									format(str, sizeof(str), "SMS: %s, catre: %s (%d)", result, GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pPhoneNumber]);
									SendClientMessage(playerid, COLOR_YELLOW, str);
									printf("%s",str);
								}
								new Float:slx, Float:sly, Float:slz;
								GetPlayerPos(giveplayerid,slx,sly,slz);
								PlayerPlaySound(giveplayerid, 1138, slx, sly, slz);
								GivePlayerCash(playerid,-SMS_PRICE);
								if(PlayerInfo[playerid][pMaskuse] == 1)
								{
									format(string, sizeof(string), "Telefonul lui [Masca_%d] a inceput sa sune.", PlayerInfo[playerid][pMaskID]);
									SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
								} else {
									format(string, sizeof(string), "Telefonul lui %s a inceput sa sune", GetPlayerNameEx(playerid));
									SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
								}
								return 1;
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_LIGHTRED, "Trimiterea mesajului nu a fost posibila.");
		}
		return 1;
	}
 	if(strcmp(cmd, "/listnumber", true) == 0 )
	{
		if(PlayerInfo[playerid][pPhoneNumber] != 0)
		{
			if(PlayerInfo[playerid][pListNumber])
			{
			    SendClientMessage(playerid,  COLOR_WHITE, "Numarul tau nu mai este public.");
			    PlayerInfo[playerid][pListNumber] = 0;
			}
			else
			{
				SendClientMessage(playerid,  COLOR_WHITE, "Numarul tau este acum public.");
			 	PlayerInfo[playerid][pListNumber] = 1;
			}
		}
		else
		{
			SendClientMessage(playerid,  COLOR_GREY, "Nu ai un numar de telefon.");
		}
		return 1;
	}
	if(!strcmp(cmdtext, "/speaker", true))
	{
		if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pPhoneNumber] == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Nu ai un telefon.");
		        return 1;
		    }
			if(PlayerInfo[playerid][pSpeaker] == 0)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Speaker activat.");
				PlayerInfo[playerid][pSpeaker] = 1;
				if(PlayerInfo[playerid][pSex] == 1) { PlayerActionMessage(playerid,20.0,"apasa pe un buton dupa care activeaza speacker-ul telefonului."); } else { PlayerActionMessage(playerid,20.0,"presses a button on her cellphone turning speakerphone off"); }
			}
			else if(PlayerInfo[playerid][pSpeaker] == 1)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Speaker dezactivat.");
				PlayerInfo[playerid][pSpeaker] = 0;
				if(PlayerInfo[playerid][pSex] == 1) { PlayerActionMessage(playerid,20.0,"apasa pe un buton dupa care dezactiveaza speackerul telefonului."); } else { PlayerActionMessage(playerid,20.0,"presses a button on her cellphone turning speakerphone off"); }
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/hangup", true) == 0 || strcmp(cmd, "/h", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_WHITE, "Ai inchis!");
							SendClientMessage(playerid,  COLOR_WHITE, "Ai inchis!");
							Mobile[caller] = 255;
							Mobile[playerid] = 255;
							PlayerInfo[playerid][pInCall] = 0;
							PlayerInfo[caller][pInCall] = 0;
							PlayerActionMessage(playerid,15.0,"isi pune telefonul in buzunar.");
							if(StartedCall[playerid])
							{
								new callcost = random(5);
								GivePlayerCash(playerid,-callcost);
								StartedCall[playerid] = 0;
								PlayerInfo[playerid][pSpeaker] = 0;
							}
							else if(StartedCall[caller])
							{
								new callcost = random(12);
								GivePlayerCash(caller,-callcost);
								StartedCall[caller] = 0;
								PlayerInfo[playerid][pSpeaker] = 0;
							}
							RemovePlayerAttachedObject(playerid, 8);
							RemovePlayerAttachedObject(caller, 8);
							SetPlayerSpecialAction(caller,SPECIAL_ACTION_STOPUSECELLPHONE);
							SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
							Mobile[playerid] = 255;
							SendClientMessage(playerid, COLOR_WHITE, "Telefonul tau este in buzunar.");
						}
					}
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/payphone", true) == 0)
    {
		if(isatphone(playerid))
		{
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GREY, "{FFFFFF}Folosire: /payphone [phonenumber]");
                return 1;
            }
	        new str[160];
		    GetPlayerName(playerid, str, MAX_PLAYER_NAME);
            for (new i = 0; i < MAX_PLAYER_NAME; i++)
            if (str[i] == '_')
            str[i] = ' ';
            PlayerActionMessage(playerid,15.0,"pune o moneda la telefonul public,urmand sa sune pe cineva.");
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
            new phonenumb = strval(tmp);
            if(phonenumb == PlayerInfo[playerid][pPhoneNumber])
            {
                SendClientMessage(playerid, COLOR_GRAD2, "Ai primit ton de ocupat.");
                return 1;
            }
            if(Mobile[playerid] != 255)
            {
                SendClientMessage(playerid, COLOR_GRAD2, "Esti deja intr-un apel.");
                return 1;
            }
            for(new i = 0; i < MAX_PLAYERS; i++)
            {
                if(IsPlayerConnected(i))
                {
                    if(PlayerInfo[i][pPhoneNumber] == phonenumb && phonenumb != 0)
                    {
                        giveplayerid = i;
                        Mobile[playerid] = giveplayerid; //caller connecting
                        if(IsPlayerConnected(giveplayerid))
                        {
                            if(giveplayerid != INVALID_PLAYER_ID)
                            {
                                if(PhoneOnline[giveplayerid] > 0)
                                {
                                    SendClientMessage(playerid, COLOR_GREY, "Playerul are telefonul inchis!");
                                    return 1;
                                }
							    if(AdminDuty[giveplayerid] == 1)
							    {
                                    SendClientMessage(playerid, COLOR_GREY, "Playerul are telefonul inchis!");
                                    return 1;
							    }
                                if (Mobile[giveplayerid] == 255)
                                {
                                    SendClientMessage(giveplayerid, COLOR_YELLOW, "Telefonul tau suna! Scrie /pickup pentru a raspunde! Numar apelant: Numar ascuns.");
                                    GetPlayerName(giveplayerid, str, sizeof(str));
                                    format(str, sizeof(str), "* Telefonul lui %s incepe sa sune.", str);
                                    SendClientMessage(playerid, COLOR_WHITE, "Apasa T pentru a vorbi si /hangup pentru a incheia conversatia.");
                                    ProxDetector(30.0, i, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                    StartedCall[playerid] = 1;
                                    StartedCall[giveplayerid] = 0;
                                    UsingPayphone[playerid] = 1;
						            TogglePlayerControllable(playerid, false);
                                    return 1;
                                }
                            }
                        }
                    }
                }
            }
            SendClientMessage(playerid, COLOR_GRAD2, "Ai primit ton de ocupat.");
        }
        return 1;
    }
	if(strcmp(cmd, "/call", true) == 0)
	{
	 	if(IsPlayerConnected(playerid))
	 	{
			if(PhoneOnline[playerid])
			{
			    ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau -","Suna\nContacts\nAdauga Contact\nSterge Contact\nTurn OFF","Select","Cancel");
			} else {
	 	    	ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau -","Suna\nContacte\nAdauga Contact\nSterge Contact\nTurn OFF","Select","Cancel");
	 	    }
			if(PlayerInfo[playerid][pSex] == 1)
			{
				PlayerActionMessage(playerid,15.0,"si-a scos telefonul.");
			} else {
				PlayerActionMessage(playerid,15.0,"si-a scos telefonul.");
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/admintoggle", true) == 0 || strcmp(cmd, "/atoggle", true) == 0)
	{
	 	if(IsPlayerConnected(playerid))
	 	{
			if (PlayerInfo[playerid][pAdministrator] == 0)
			{
				return 1;
			}
			new x_info[128];
			x_info = strtok(cmdtext, idx);
			if(!strlen(x_info))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: (/atog)gle [item]");
	   			SendClientMessage(playerid, COLOR_WHITE, "Testerchat");
				return 1;
			}
			if(strcmp(x_info, "testerchat", true) == 0)
			{
		    	if(IsPlayerConnected(playerid))
		    	{
					if(TesterActivated[playerid] == 1)
					{
						TesterActivated[playerid] = 0;
						SendClientMessage(playerid, COLOR_GRAD2, "Testerchat a fost dezactivat");
					}
					else if(TesterActivated[playerid] == 0)
					{
						TesterActivated[playerid] = 1;
						SendClientMessage(playerid, COLOR_GRAD2, "Testerchat a fost activat.");
					}
				}
				return 1;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/mymail", true) == 0 || strcmp(cmd, "/mail", true) == 0)
	{
	 	if(IsPlayerConnected(playerid))
	 	{
		    if (!PlayerToPoint(30, playerid,2826.0137,-1679.5593,664.4708))
		    {
				SendClientMessage(playerid, COLOR_GRAD2, " Trebuie sa fi la posta.");
				return 1;
			}
			new x_info[128];
			x_info = strtok(cmdtext, idx);

			if(!strlen(x_info)) {
				SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /my(mail) [item]");
	   			SendClientMessage(playerid, COLOR_WHITE, "check | pay | subscription |");
				return 1;
			}
			if(strcmp(x_info, "check", true) == 0)
			{
		    	if(IsPlayerConnected(playerid))
		    	{
		    	    //new string[128];
					if(PlayerInfo[playerid][CarBill] != 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "{EE5555}Sender:{FFFFFF} LS Dealer Ship.");
						SendClientMessage(playerid, COLOR_WHITE, "{EE5555}Subject:{FFFFFF} Vehicle plates bill");
						format(string, sizeof(string), "{EE5555}Price:{FFFFFF} $%d", PlayerInfo[playerid][CarBill]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][BusinessBill] != 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "{EE5555}Sender:{FFFFFF} Alera Energy.");
						SendClientMessage(playerid, COLOR_WHITE, "{EE5555}Subject:{FFFFFF} Business Electricity Bill");
						format(string, sizeof(string), "{EE5555}Price:{FFFFFF} $%d", PlayerInfo[playerid][BusinessBill]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][NormalMail] != 0)
					{
						if(PlayerInfo[playerid][NormalMail] == 1)
						{
							SendClientMessage(playerid, COLOR_WHITE, "{EE5555}Sender:{FFFFFF} LS Post Office.");
							SendClientMessage(playerid, COLOR_WHITE, "{EE5555}Subject:{FFFFFF} Welcome customer.");
							SendClientMessage(playerid, COLOR_WHITE, "{EE5555}Text:{FFFFFF} Welcome customer, you are now registered as a customer of our service");
							SendClientMessage(playerid, COLOR_WHITE, "  you can sign up for home mail delivering, our post men will then bring out your mails directly to your door.");
							PlayerInfo[playerid][NormalMail] = 0;
						}
					}
					else if(PlayerInfo[playerid][HouseBill] != 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "{EE5555}Sender:{FFFFFF} Alera Energy.");
						SendClientMessage(playerid, COLOR_WHITE, "{EE5555}Subject:{FFFFFF} House Electricity Bill");
						format(string, sizeof(string), "{EE5555}Price:{FFFFFF} $%d", PlayerInfo[playerid][HouseBill]);
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "  You do not have any bills to pay.");
					}
				}
				return 1;
			}
			else if(strcmp(x_info, "pay", true) == 0)
			{
		    	if(IsPlayerConnected(playerid))
		    	{
					if(PlayerInfo[playerid][CarBill] != 0)
					{

					    return 1;
					}
					else if(PlayerInfo[playerid][BusinessBill] != 0)
					{

					    return 1;
					}
					else if(PlayerInfo[playerid][NormalMail] != 0)
					{

					    return 1;
					}
					else if(PlayerInfo[playerid][HouseBill] != 0)
					{

					    return 1;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "  You do not have any bills to pay.");
					}
				}
				return 1;
			}
		}
		return 1;
	}
	//==========================================================================
	if(strcmp(cmd, "/takelicenses", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerToPoint(700.0,playerid,1491.4063,1306.4121,1093.2964))
			{
				if(GetPlayerVirtualWorld(playerid) == 12)
				{
					if(Businesses[12][BizType] == 12)
					{
						ShowPlayerDialog(playerid, 1235, DIALOG_STYLE_LIST, "Licenta", "Condus\nZbor", "Alege", "Cancel");
					}
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "Nu esti in interiorul scolii auto.");
		}
	}
	if(strcmp(cmd, "/takedrivingtest", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		   if(DMVTest[playerid] == 0)
		   {
		       SendClientMessage(playerid, COLOR_WHITE, "Nu ai trecut inca de testul practic! Du-te inauntru si da-l.");
		       return 1;
		   }
		   new tmpcar = GetPlayerVehicleID(playerid);
		   if(DynamicCars[tmpcar][CarType] == 69)
		   {
			  SendClientMessage(playerid, COLOR_WHITE, "Testul pentru permis a inceput! Iti urez succes.");
			  TakingDrivingTest[playerid] = 1;
			  DrivingTestStep[playerid] = 1;
			  SetPlayerCheckpoint(playerid, 1210.4828,-1841.8555,13.3828, 5.0);
			  EngineStatus[GetPlayerVehicleID(playerid)] = 1;
			  GetVehicleParamsEx(tmpcar,engine,lights,alarm,doors,bonnet,boot,objective);
			  if(engine != VEHICLE_PARAMS_ON) { SetVehicleParamsEx(tmpcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective); }
			  new form[128];
			  format(form, sizeof(form), "porneste motorul masinii %s.", VehicleNames[GetVehicleModel(idcar)-400]);
			  PlayerActionMessage(playerid,20.0,form);
		   }
		   else SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-o masina unde poti da testul de permis.");
		}
	}
	if(strcmp(cmd, "/time", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if (watch[playerid] == 1)
			{
				new mtext[20];
				new year, month,day;
				getdate(year, month, day);
				if(month == 1) { mtext = "Ianuarie"; }
				else if(month == 2) { mtext = "Februarie"; }
				else if(month == 3) { mtext = "Martie"; }
				else if(month == 4) { mtext = "Aprilie"; }
				else if(month == 5) { mtext = "Mai"; }
				else if(month == 6) { mtext = "Iunie"; }
				else if(month == 7) { mtext = "Iulie"; }
				else if(month == 8) { mtext = "August"; }
				else if(month == 9) { mtext = "Septembrie"; }
				else if(month == 10) { mtext = "Octombrie"; }
				else if(month == 11) { mtext = "Noembrie"; }
				else if(month == 12) { mtext = "Decembrie"; }
				new hour,minuite,second;
				gettime(hour,minuite,second);
				FixHour(hour);
				hour = shifthour;
				format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d:%d~g~|", day, mtext, hour, minuite,second);
				GameTextForPlayer(playerid, string, 5000, 1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Nu ai un ceas pe mana foloseste /myclothes si pune-l iarasi.");
			}
	    }
	    return 1;
	}
 	}
	if(strcmp(cmd,"/changename",true)==0)
	{
    tmp = strtok(cmdtext, idx);
    if(strlen(tmp)==0) return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}SYNTAX{FFFFFF}: /changename [ID/PoN] [new name]");
    giveplayerid = ReturnUser(tmp);
    if(giveplayerid != INVALID_PLAYER_ID)
	{
        if(PlayerInfo[playerid][pAdministrator] >= 4)
		{
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
			{
                idx++;
            }
            new offset = idx;
            new result[80];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
        	// Duplicate shit
        	new Query[128];
		    format( Query, sizeof( Query ), "SELECT * FROM `Accounts` WHERE `Username` = '%s'", (result) );
		    mysql_query( Query );
		    printf(" SQL: %s",Query);
		    mysql_store_result();
		    if( mysql_num_rows() >= 1 )
			{
		    	mysql_free_result();
		        SendClientMessage( playerid, COLOR_WHITE, "Username-ul este deja luat!" );
		        return 1;
		    } else {
		        mysql_free_result();
			}
			// Duplicate shit done
	        new plname[MAX_PLAYER_NAME];
	        GetPlayerName(giveplayerid, plname, sizeof(plname));
			if(PlayerInfo[giveplayerid][pHouseKey] != 0 && strcmp(plname, Houses[PlayerInfo[giveplayerid][pHouseKey]][Owner], true) == 0)
			{
		   		strmid(Houses[PlayerInfo[giveplayerid][pHouseKey]][Owner], (result), 0, strlen((result)), 128);
		   		SaveHouses(PlayerInfo[giveplayerid][pHouseKey]);
			}
			// Business
			if(PlayerInfo[giveplayerid][pBizKey] != 255 && strcmp(plname, Businesses[PlayerInfo[giveplayerid][pBizKey]][Owner], true) == 0)
			{
		   		strmid(Businesses[PlayerInfo[giveplayerid][pBizKey]][Owner], (result), 0, strlen((result)), 128);
		   		SaveBusinesses(PlayerInfo[giveplayerid][pBizKey]);
			}
			// Garages
			if(PlayerInfo[giveplayerid][pGarageKey] != 0 && strcmp(plname, Garages[PlayerInfo[giveplayerid][pGarageKey]][Owner], true) == 0)
			{
		   		strmid(Garages[PlayerInfo[giveplayerid][pGarageKey]][Owner], (result), 0, strlen((result)), 128);
		   		SaveGarages(PlayerInfo[giveplayerid][pGarageKey]);
			}
			// CAR NUMBER 1 CHANGE
			if(strcmp(PlayerVehicle[giveplayerid][pVeh1], "None",true))
			{
		        new Str2[128];
				splitter(PlayerVehicle[giveplayerid][pVeh1], vehnamesplit, '.');
				// This is the new name and the vehicle name splitted so we can change his mysql stat
				format(Str2, sizeof(Str2), "%s.%s",(result),vehnamesplit[1]);
				strmid(PlayerVehicle[giveplayerid][pVeh1], Str2, 0, strlen(Str2), 255);
				// Update his MySQL vehicle number 1 stat to the new name.
		        format( string, sizeof( string ), "UPDATE `Accounts` SET `V1` = '%s' WHERE `UserID` = '%d'",Str2,PlayerInfo[ giveplayerid ][pDatabaseID]);
		        mysql_query(string);
				// Save the old name and car name into a string
		        new vstring[128];
		        format(vstring, sizeof(vstring), "IBP/Vehicles/%s.%s.cfg",plname,vehnamesplit[1]);
				if(dini_Exists(vstring))
				{
					// Save the new name and car name into a string
			        new str[128];
			        format(str, sizeof(str), "IBP/Vehicles/%s.%s.cfg",(result),vehnamesplit[1]);
					// Rename the file
			        frename(vstring,str);
			    }
			}
	        // CAR NUMBER 2 CHANGE
			if(strcmp(PlayerVehicle[giveplayerid][pVeh2], "None",true))
			{
		        new Str2[128];
				splitter(PlayerVehicle[giveplayerid][pVeh2], vehnamesplit, '.');
				// This is the new name and the vehicle name splitted so we can change his mysql stat
				format(Str2, sizeof(Str2), "%s.%s",(result),vehnamesplit[1]);
				strmid(PlayerVehicle[giveplayerid][pVeh2], Str2, 0, strlen(Str2), 255);
				// Update his MySQL vehicle number 1 stat to the new name.
		        format( string, sizeof( string ), "UPDATE `Accounts` SET `V2` = '%s' WHERE `UserID` = '%d'",Str2,PlayerInfo[ giveplayerid ][pDatabaseID]);
		        mysql_query(string);
				// Save the old name and car name into a string
		        new vstring[128];
		        format(vstring, sizeof(vstring), "IBP/Vehicles/%s.%s.cfg",plname,vehnamesplit[1]);
				if(dini_Exists(vstring))
				{
					// Save the new name and car name into a string
			        new str[128];
			        format(str, sizeof(str), "IBP/Vehicles/%s.%s.cfg",(result),vehnamesplit[1]);
					// Rename the file
			        frename(vstring,str);
			    }
			}
	        // CAR NUMBER 3 CHANGE
			if(strcmp(PlayerVehicle[giveplayerid][pVeh3], "None",true))
			{
		        new Str2[128];
				splitter(PlayerVehicle[giveplayerid][pVeh3], vehnamesplit, '.');
				// This is the new name and the vehicle name splitted so we can change his mysql stat
				format(Str2, sizeof(Str2), "%s.%s",(result),vehnamesplit[1]);
				strmid(PlayerVehicle[giveplayerid][pVeh3], Str2, 0, strlen(Str2), 255);
				// Update his MySQL vehicle number 1 stat to the new name.
		        format( string, sizeof( string ), "UPDATE `Accounts` SET `V3` = '%s' WHERE `UserID` = '%d'",Str2,PlayerInfo[ giveplayerid ][pDatabaseID]);
		        mysql_query(string);
				// Save the old name and car name into a string
		        new vstring[128];
		        format(vstring, sizeof(vstring), "IBP/Vehicles/%s.%s.cfg",plname,vehnamesplit[1]);
				if(dini_Exists(vstring))
				{
					// Save the new name and car name into a string
			        new str[128];
			        format(str, sizeof(str), "IBP/Vehicles/%s.%s.cfg",(result),vehnamesplit[1]);
					// Rename the file
			        frename(vstring,str);
			    }
			}
	        // CAR NUMBER 4 CHANGE
			if(strcmp(PlayerVehicle[giveplayerid][pVeh4], "None",true))
			{
		        new Str2[128];
				splitter(PlayerVehicle[giveplayerid][pVeh4], vehnamesplit, '.');
				// This is the new name and the vehicle name splitted so we can change his mysql stat
				format(Str2, sizeof(Str2), "%s.%s",(result),vehnamesplit[1]);
				strmid(PlayerVehicle[giveplayerid][pVeh4], Str2, 0, strlen(Str2), 255);
				// Update his MySQL vehicle number 1 stat to the new name.
		        format( string, sizeof( string ), "UPDATE `Accounts` SET `V4` = '%s' WHERE `UserID` = '%d'",Str2,PlayerInfo[ giveplayerid ][pDatabaseID]);
		        mysql_query(string);
				// Save the old name and car name into a string
		        new vstring[128];
		        format(vstring, sizeof(vstring), "IBP/Vehicles/%s.%s.cfg",plname,vehnamesplit[1]);
				if(dini_Exists(vstring))
				{
					// Save the new name and car name into a string
			        new str[128];
			        format(str, sizeof(str), "IBP/Vehicles/%s.%s.cfg",(result),vehnamesplit[1]);
					// Rename the file
			        frename(vstring,str);
			    }
			}
	        // CAR NUMBER 5 CHANGE
			if(strcmp(PlayerVehicle[giveplayerid][pVeh5], "None",true))
			{
		        new Str2[128];
				splitter(PlayerVehicle[giveplayerid][pVeh5], vehnamesplit, '.');
				// This is the new name and the vehicle name splitted so we can change his mysql stat
				format(Str2, sizeof(Str2), "%s.%s",(result),vehnamesplit[1]);
				strmid(PlayerVehicle[giveplayerid][pVeh5], Str2, 0, strlen(Str2), 255);
				// Update his MySQL vehicle number 1 stat to the new name.
		        format( string, sizeof( string ), "UPDATE `Accounts` SET `V5` = '%s' WHERE `UserID` = '%d'",Str2,PlayerInfo[ giveplayerid ][pDatabaseID]);
		        mysql_query(string);
				// Save the old name and car name into a string
		        new vstring[128];
		        format(vstring, sizeof(vstring), "IBP/Vehicles/%s.%s.cfg",plname,vehnamesplit[1]);
				if(dini_Exists(vstring))
				{
					// Save the new name and car name into a string
			        new str[128];
			        format(str, sizeof(str), "IBP/Vehicles/%s.%s.cfg",(result),vehnamesplit[1]);
					// Rename the file
			        frename(vstring,str);
			    }
			}
	        // More stupid shit
            SetPlayerName(giveplayerid,(result));
	        format( string, sizeof( string ), "UPDATE `Accounts` SET `Username` = '%s' WHERE `UserID` = '%d'",(result),PlayerInfo[ giveplayerid ][pDatabaseID]);
	        mysql_query(string);
	        PlayerInfo[giveplayerid][pArrested] = 0;
	        PlayerInfo[giveplayerid][pDeaths] = 0;
	        SetPlayerName(giveplayerid,(result));
        }
        else return SendClientMessage(playerid, COLOR_GREY, "   Nu esti autorizat sa folosesti aceasta comanda.");
    }
    else return SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
    return 1;
	}
	

	if(strcmp(cmd, "/lock", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new bouse = PlayerInfo[playerid][pHouseKey];
	        for(new i = 0; i < sizeof(Houses); i++)
			{
				new playername[MAX_PLAYER_NAME];
				GetPlayerName(playerid, playername, sizeof(playername));
				if(PlayerToPoint(3.0,playerid, Houses[i][EnterX], Houses[i][EnterY], Houses[i][EnterZ]) || PlayerToPoint(3.0, playerid, Houses[i][ExitX],Houses[i][ExitY],Houses[i][ExitZ]))
			    {
					if(Houses[i][Locked] == 0 && strcmp(playername, Houses[i][Owner], true) == 0)
					{
						Houses[i][Locked] = 1;
						GameTextForPlayer(playerid, "~w~Usa ~r~Incuiata", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
					if(Houses[i][Locked] == 1 && strcmp(playername, Houses[i][Owner], true) == 0)
					{
						Houses[i][Locked] = 0;
						GameTextForPlayer(playerid, "~w~Usa ~g~Descuiata", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
					else if(PlayerInfo[playerid][pToolkit] == 0 && strcmp(playername, Houses[i][Owner], false) == 0 && PlayerInfo[playerid][pHouseKey] != i)
					{
						GameTextForPlayer(playerid,"~r~",2000,3);
						return 1;
					}
					else if(PlayerInfo[playerid][pToolkit] == 1 && strcmp(playername, Houses[i][Owner], false) == 0 && PlayerInfo[playerid][pHouseKey] != i)
					{
					    if(Houses[i][Locked] == 1)
					    {
							GameTextForPlayer(playerid,"~r~",2000,3);
							return 1;
					    }
					    else
					    {
							GameTextForPlayer(playerid,"~r~",2000,3);
							return 1;
						}
					}
				}
				if(PlayerToPoint(3.0,playerid, Houses[bouse][EnterX], Houses[bouse][EnterY], Houses[bouse][EnterZ]) || PlayerToPoint(3.0, playerid, Houses[bouse][ExitX],Houses[bouse][ExitY],Houses[bouse][ExitZ]))
			    {
					if(bouse == i && Houses[bouse][Locked] == 1)
					{
						Houses[bouse][Locked] = 0;
						GameTextForPlayer(playerid, "~w~Usa ~g~descuiata", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
					if(bouse == i && Houses[bouse][Locked] == 0)
					{
						Houses[bouse][Locked] = 1;
						GameTextForPlayer(playerid, "~w~Usa ~r~Incuiata", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
			    }
			}
			for(new i = 0; i < sizeof(Businesses); i++)
			{
			    if(GetPlayerVirtualWorld(playerid) == i || (GetPlayerVirtualWorld(playerid) == 0))
			    {
					if(PlayerToPoint(3.0,playerid,Businesses[i][EnterX], Businesses[i][EnterY], Businesses[i][EnterZ]) || PlayerToPoint(3, playerid,Businesses[i][ExitX], Businesses[i][ExitY],Businesses[i][ExitZ]) || PlayerToPoint(3, playerid, Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]) || PlayerToPoint(3,playerid,Businesses[i][ExitX],Businesses[i][ExitZ], Businesses[i][ExitInterior]))
					{
						if(PlayerInfo[playerid][pBizKey] == i || PlayerInfo[playerid][pWorkOn] == i)
						{
							if(Businesses[i][Locked] == 1)
							{
								Businesses[i][Locked] = 0;
								GameTextForPlayer(playerid, "~w~Bussiness ~g~Deschis", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
							if(Businesses[i][Locked] == 0)
							{
								Businesses[i][Locked] = 1;
								GameTextForPlayer(playerid, "~w~Bussiness ~r~Inchis", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Nu ai cheile", 5000, 6);
							return 1;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(Garages); i++)
			{
			    if(GetPlayerVirtualWorld(playerid) == i || (GetPlayerVirtualWorld(playerid) == 0))
			    {
					if(PlayerToPoint(3.0,playerid,Garages[i][EnterX], Garages[i][EnterY], Garages[i][EnterZ]) || PlayerToPoint(3, playerid,Garages[i][ExitX], Garages[i][ExitY],Garages[i][ExitZ]) || PlayerToPoint(3, playerid, Garages[i][ExitX], Garages[i][ExitY], Garages[i][ExitZ]) || PlayerToPoint(3,playerid,Garages[i][ExitX],Garages[i][ExitZ], Garages[i][ExitInterior]))
					{
						if(PlayerInfo[playerid][pGarageKey] == i)
						{
							if(Garages[i][Locked] == 1)
							{
								Garages[i][Locked] = 0;
								GameTextForPlayer(playerid, "~w~Usa garajului ~g~Deschisa", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
							if(Garages[i][Locked] == 0)
							{
								Garages[i][Locked] = 1;
								GameTextForPlayer(playerid, "~w~Usa garajului ~r~Inchisa", 5000, 6);
								PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
								return 1;
							}
						}
						else
						{
							GameTextForPlayer(playerid, "~r~Nu ai cheile.", 5000, 6);
							return 1;
						}
					}
				}
			}
		    if(IsPlayerConnected(playerid))
		    {
		        {
				    new counter = 0;
				    new result;
				    new plyName[MAX_PLAYER_NAME];

				    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
				    for(new i; i != MAX_VEHICLES; i++)
				    {
				        new dist = CheckPlayerDistanceToVehicle(2.5, playerid, i);
				        if(dist)
				        {
			 	           result = i;
				           counter++;
				        }
				    }
				    switch(counter)
				    {
				        case 0:
				        {
							// Found no vehicles in range
				        }

				        case 1:
				        {
				            if(result <= IBPCARS)
				        	{
					        	return 1;
				        	}
							if(PlayerInfo[playerid][pCarKey] == result || PlayerInfo[playerid][pDupeKey] == VehicleInfo[result][vKey])
							{
								if (!IsABike(result))
								{
									if(VehicleInfo[result][vLock])
									{
										VehicleInfo[result][vLock] = 0;
										UnLockCar(result);
										new str[256];
										SetVehicleParamsForPlayer(result,playerid,0,0);
										format(str, sizeof(str), "~b~%s ~n~~g~deschis", VehicleNames[GetVehicleModel(result)-400]);
										GameTextForPlayer(playerid, str, 2000, 4);
									}
									else
									{
										VehicleInfo[result][vLock] = 1;
										PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
										LockCar(result);
										new str[256];
										SetVehicleParamsForPlayer(result,playerid,0,1);
										format(str, sizeof(str), "~b~%s ~n~~r~inchis", VehicleNames[GetVehicleModel(result)-400]);
										GameTextForPlayer(playerid, str, 2000, 4);
									}
								}
							}
							else if(VehicleInfo[result][vLock] == 1 && PlayerInfo[playerid][pToolkit] == 1)
							{
								IsJacking[playerid] = 1;
						        TogglePlayerControllable(playerid,0);
								new form[128];
								format(form, sizeof(form), "scoate un set de scule dupa care incepe sa sparga incuietoarea masinii %s.", VehicleNames[GetVehicleModel(result)-400]);
								PlayerActionMessage(playerid,20.0,form);
								// if the valarm is 3 or higher then it will nudge the police
								if(VehicleInfo[result][vAlarm] == 1)
								{
				                    GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    SetVehicleParamsEx(result,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
									format(string, sizeof(string), "* Alarma masinii: BEEP BEEP BEEP BEEP BEEP BEEP.");
									ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        new Float:x,Float:y,Float:z;
							        GetPlayerPos(playerid,x,y,z);
									PlayerPlaySound(playerid, 1138, x, y, z);
								}
								else if(VehicleInfo[result][vAlarm] == 2)
								{
				                    GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    SetVehicleParamsEx(result,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);

									format(string, sizeof(string), "* Alarma Masinii: BEEP BEEP BEEP BEEP BEEP BEEP.");
									ProxDetector(70.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        new Float:x,Float:y,Float:z;
							        GetPlayerPos(playerid,x,y,z);
									PlayerPlaySound(playerid, 1138, x, y, z);
								}
								else if(VehicleInfo[result][vAlarm] == 3)
								{
				                    GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    SetVehicleParamsEx(result,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);

									format(string, sizeof(string), "* Alarma Masinii: BEEP BEEP BEEP BEEP BEEP BEEP.");
									ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        new Float:x,Float:y,Float:z;
							        GetPlayerPos(playerid,x,y,z);
									PlayerPlaySound(playerid, 1138, x, y, z);
								}
								else if(VehicleInfo[result][vAlarm] == 4)
								{
				                    GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    SetVehicleParamsEx(result,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);

									new vZone[MAX_ZONE_NAME];
									GetVehicleZone(result, vZone, MAX_ZONE_NAME);
									format(string, sizeof(string), "Alarma: %s este localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
									SendFactionMessage(1, COLOR_LIGHTRED, string);
									format(string, sizeof(string), "Alarma: %s este localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
									SendFactionMessage(3, COLOR_LIGHTRED, string);

									format(string, sizeof(string), "* Alarma Masinii: BEEP BEEP BEEP BEEP BEEP BEEP.");
									ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							        new Float:x,Float:y,Float:z;
							        GetPlayerPos(playerid,x,y,z);
									PlayerPlaySound(playerid, 1138, x, y, z);
								}
								else if(VehicleInfo[result][vAlarm] == 5)
        						{
				                    GetVehicleParamsEx(result,engine,lights,alarm,doors,bonnet,boot,objective);
				                    SetVehicleParamsEx(result,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);


									new vZone[MAX_ZONE_NAME];
									GetVehicleZone(result, vZone, MAX_ZONE_NAME);
									format(string, sizeof(string), "Alarma: %s este localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
									SendFactionMessage(1, COLOR_LIGHTRED, string);
									format(string, sizeof(string), "Alarma: %s este localizata in %s.", VehicleNames[GetVehicleModel(result)-400], vZone);
									SendFactionMessage(3, COLOR_LIGHTRED, string);

									format(string, sizeof(string), "*Alarma Masinii: BEEP BEEP BEEP BEEP BEEP BEEP.");
									ProxDetector(100.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								    new Float:x,Float:y,Float:z;
					     			GetPlayerPos(playerid,x,y,z);
									PlayerPlaySound(playerid, 1138, x, y, z);
									for(new i = 0; i < MAX_PLAYERS; i++)
									{
								    	if(IsPlayerConnected(i))
								    	{
								        	if(result == PlayerInfo[i][pCarKey] || PlayerInfo[i][pCarKey] == result)
								        	{
								            	SendClientMessage(i, COLOR_YELLOW, "Masina ta este sparta in acest moment!Verifica GPS-ul si dute la ea.(4224)");
								        	}
								    	}
									}
								}
								PlayerInfo[playerid][pJackingDoorID] = result;
								if(VehicleInfo[result][vLockBuyed] == 0)
								{ PlayerInfo[playerid][pJackingDoor] = 60; }
								else if(VehicleInfo[result][vLockBuyed] == 1)
								{ PlayerInfo[playerid][pJackingDoor] = 120; }
								else if(VehicleInfo[result][vLockBuyed] == 2)
								{ PlayerInfo[playerid][pJackingDoor] = 180; }
								else if(VehicleInfo[result][vLockBuyed] == 3)
								{ PlayerInfo[playerid][pJackingDoor] = 240; }
								else if(VehicleInfo[result][vLockBuyed] == 4)
								{ PlayerInfo[playerid][pJackingDoor] = 300; }
								else if(VehicleInfo[result][vLockBuyed] == 5)
								{ PlayerInfo[playerid][pJackingDoor] = 360; }
							}
				        }

				        default:
				        {
				            SendClientMessage(playerid, COLOR_GREY, "");
				            return 1;
				        }
				    }
				    return 1;
				}
			}
	    }
	    return 1;
	}
    if(strcmp(cmd, "/v", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            SetTimerEx("VehicleReset", 2200, false, "i", playerid);
            new x_vehicle[128];
            x_vehicle = strtok(cmdtext, idx);
            if(!strlen(x_vehicle))
            {
                SendClientMessage(playerid, COLOR_WHITE, "_____________________________________________");
                SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: (/v)ehicle [item]");
                SendClientMessage(playerid, COLOR_GRAD2, "[Actiune] get, park, sell, lock, register, buy");
                SendClientMessage(playerid, COLOR_GRAD2, "[Actiune] info, duplicatekey, find, buyinsurance, buypark");
                SendClientMessage(playerid, COLOR_GRAD2, "[Distrugere] scrap ({FF0000}Atentie!{FFFFFF} Vei distruge masina permanent!)");
                SendClientMessage(playerid, COLOR_WHITE, "_____________________________________________");
                // Still needs to be done : faction and list needs some tweaking
                return 1;
            }
            if(strcmp(x_vehicle, "buypark", true) == 0)
            {
                if(!IsPlayerInAnyVehicle(playerid))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti intr-o masina !");
                    return 1;
                }
                new plname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, plname, sizeof(plname));
                new vehi = GetPlayerVehicleID(playerid);
                if(PlayerInfo[playerid][pCarKey] == vehi || PlayerInfo[playerid][pCarKey2] == vehi || (strcmp(plname, VehicleInfo[vehi][vOwner], true) == 0))
                {
                    new bouse = PlayerInfo[playerid][pGarageKey];
                    new Float:XX, Float:YY, Float:ZZ, Float:AA;
                    if(PlayerInfo[playerid][pGarageKey] != 0)
                    {
                        if(!PlayerToPoint(30.0,playerid, Garages[bouse][ExitX], Garages[bouse][ExitY], Garages[bouse][ExitZ]))
                        {
                            if(GetPlayerCash(playerid) < 249)
                            {
                                SendClientMessage(playerid, COLOR_LIGHTRED, "Nu iti permiti cumpararea unui nou loc de parcare.");
                                return 1;
                            }
                            GetVehiclePos(vehi, XX, YY, ZZ);
                            GetVehicleZAngle(vehi, AA);
                            VehicleInfo[vehi][vX] = XX;
                            VehicleInfo[vehi][vY] = YY;
                            VehicleInfo[vehi][vZ] = ZZ;
                            VehicleInfo[vehi][vAngle] = AA;
                            VehicleInfo[vehi][vModel] = GetVehicleModel(vehi);
                            SaveVehicles(playerid, vehi);
                            SendClientMessage(playerid, COLOR_GREEN,"Loc de parcare cumparat pentru $250.");
                            GivePlayerCash(playerid,-250);
                            return 1;
                        }
                        else
                        {
                            GetVehiclePos(vehi, XX, YY, ZZ);
                            GetVehicleZAngle(vehi, AA);
                            VehicleInfo[vehi][vX] = XX;
                            VehicleInfo[vehi][vY] = YY;
                            VehicleInfo[vehi][vZ] = ZZ;
                            VehicleInfo[vehi][vAngle] = AA;
                            VehicleInfo[vehi][vModel] = GetVehicleModel(vehi);
                            SaveVehicles(playerid, vehi);
                            SendClientMessage(playerid, COLOR_GREEN,"Loc de parcare a fost localizat in garajul tau.");
                            return 1;
                        }
                    }
                    else
                    {
                        GetVehiclePos(vehi, XX, YY, ZZ);
                        GetVehicleZAngle(vehi, AA);
                        VehicleInfo[vehi][vX] = XX;
                        VehicleInfo[vehi][vY] = YY;
                        VehicleInfo[vehi][vZ] = ZZ;
                        VehicleInfo[vehi][vAngle] = AA;
                        VehicleInfo[vehi][vModel] = GetVehicleModel(vehi);
                        SaveVehicles(playerid, vehi);
                        SendClientMessage(playerid, COLOR_GREEN,"Loc de parcare cumparat pentru $250.");
                        GivePlayerCash(playerid,-250);
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti proprietarul masinii!");
                }
                return 1;
            }
            else if(strcmp(x_vehicle, "find", true) == 0)
            {
                if(IsVehicleOccupied(PlayerInfo[playerid][pCarKey]) != 0)
                {
                    SendClientMessage(playerid, COLOR_GREY, "Cineva este in masina ta,nu poate fi localizata momentan.");
                    return 1;
                }
                if(PlayerInfo[playerid][pCarKey] == 0)
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu ai o masina spawnata.");
                    return 1;
                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] == 0)
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu ai un GPS instalat.");
                    return 1;
                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] == 1)
                {
                    new vZone[MAX_ZONE_NAME];
                    GetVehicleZone(PlayerInfo[playerid][pCarKey], vZone, MAX_ZONE_NAME);
                    format(string, sizeof(string), "[GPS] %s este localizata in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400], vZone);
                    SendClientMessage(playerid,COLOR_WHITE,string);
                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] == 2)
                {
                    new vZone[MAX_ZONE_NAME];
                    GetVehicleZone(PlayerInfo[playerid][pCarKey], vZone, MAX_ZONE_NAME);
                    format(string, sizeof(string), "[GPS] %s este localizata in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400], vZone);
                    SendClientMessage(playerid,COLOR_WHITE,string);

                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] == 3)
                {
                    new vZone[MAX_ZONE_NAME];
                    GetVehicleZone(PlayerInfo[playerid][pCarKey], vZone, MAX_ZONE_NAME);
                    format(string, sizeof(string), "[GPS] %s este localizata in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400], vZone);
                    SendClientMessage(playerid,COLOR_WHITE,string);
                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] == 4)
                {
                    new Float:x, Float:y, Float:z;
                    GetVehiclePos(PlayerInfo[playerid][pCarKey], x, y, z);
                    new vZone[MAX_ZONE_NAME];
                    GetVehicleZone(PlayerInfo[playerid][pCarKey], vZone, MAX_ZONE_NAME);
                    format(string, sizeof(string), "[GPS] %s este localizata in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400], vZone);
                    SendClientMessage(playerid,COLOR_WHITE,string);
                    SetPlayerCheckpoint(playerid, x, y, z, 5.0);
                    VCP[playerid] = 1;
                    ActiveCP[playerid] = 1;
                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] == 5)
                {
                    new Float:x, Float:y, Float:z;
                    GetVehiclePos(PlayerInfo[playerid][pCarKey], x, y, z);
                    new vZone[MAX_ZONE_NAME];
                    GetVehicleZone(PlayerInfo[playerid][pCarKey], vZone, MAX_ZONE_NAME);
                    format(string, sizeof(string), "[GPS] %s este localizata in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400], vZone);
                    SendClientMessage(playerid,COLOR_WHITE,string);
                    SetPlayerCheckpoint(playerid, x, y, z, 5.0);
                    VCP[playerid] = 1;
                    ActiveCP[playerid] = 1;
                }
                return 1;
            }
            else if(strcmp(x_vehicle, "find2", true) == 0)
            {
                if(IsVehicleOccupied(PlayerInfo[playerid][pCarKey2]) != 0)
                {
                    SendClientMessage(playerid, COLOR_GREY, "Cineva este in masina ta,nu poate fi localizata momentan.");
                    return 1;
                }
                if(PlayerInfo[playerid][pCarKey2] == 0)
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu ai o masina spawnata.");
                    return 1;
                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] == 0)
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu ai un GPS instalat.");
                    return 1;
                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] == 1)
                {
                    new vZone[MAX_ZONE_NAME];
                    GetVehicleZone(PlayerInfo[playerid][pCarKey2], vZone, MAX_ZONE_NAME);
                    format(string, sizeof(string), "[GPS] %s este localizata in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400], vZone);
                    SendClientMessage(playerid,COLOR_WHITE,string);
                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] == 2)
                {
                    new vZone[MAX_ZONE_NAME];
                    GetVehicleZone(PlayerInfo[playerid][pCarKey2], vZone, MAX_ZONE_NAME);
                    format(string, sizeof(string), "[GPS] %s este localizata in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400], vZone);
                    SendClientMessage(playerid,COLOR_WHITE,string);

                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] == 3)
                {
                    new vZone[MAX_ZONE_NAME];
                    GetVehicleZone(PlayerInfo[playerid][pCarKey2], vZone, MAX_ZONE_NAME);
                    format(string, sizeof(string), "[GPS] %s este localizata in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400], vZone);
                    SendClientMessage(playerid,COLOR_WHITE,string);
                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] == 4)
                {
                    new Float:x, Float:y, Float:z;
                    GetVehiclePos(PlayerInfo[playerid][pCarKey2], x, y, z);
                    new vZone[MAX_ZONE_NAME];
                    GetVehicleZone(PlayerInfo[playerid][pCarKey2], vZone, MAX_ZONE_NAME);
                    format(string, sizeof(string), "[GPS] %s este localizata in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400], vZone);
                    SendClientMessage(playerid,COLOR_WHITE,string);
                    SetPlayerCheckpoint(playerid, x, y, z, 5.0);
                    VCP[playerid] = 2;
                    ActiveCP[playerid] = 1;
                }
                if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] == 5)
                {
                    new Float:x, Float:y, Float:z;
                    GetVehiclePos(PlayerInfo[playerid][pCarKey2], x, y, z);
                    new vZone[MAX_ZONE_NAME];
                    GetVehicleZone(PlayerInfo[playerid][pCarKey2], vZone, MAX_ZONE_NAME);
                    format(string, sizeof(string), "[GPS] %s este localizata in %s.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400], vZone);
                    SendClientMessage(playerid,COLOR_WHITE,string);
                    SetPlayerCheckpoint(playerid, x, y, z, 5.0);
                    VCP[playerid] = 2;
                    ActiveCP[playerid] = 1;
                }
                return 1;
            }
            else if(strcmp(x_vehicle, "register", true) == 0)
            {
                if(!IsPlayerInAnyVehicle(playerid))
                {
                    SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul.");
                    return 1;
                }
                if(PlayerInfo[playerid][pFaction] == 8 || PlayerInfo[playerid][pFaction] == 3)
                {
                    ShowPlayerDialog(playerid,572,DIALOG_STYLE_INPUT,"{00ABFF}Numar de inmatriculare","{FFFFFF}Introdu numarul de inmatriculare pe care il doresti.","Ok","Refuza");
                }
                else SendClientMessage(playerid, COLOR_GREY, "Nu esti membru LSVR sau LSPD!");
                return 1;
            }
            else if(!strcmp(x_vehicle, "lock",true))
            {
                if(ProxDetectorV(2.5, playerid, PlayerInfo[playerid][pCarKey]))
                {
                    if (!IsABike(PlayerInfo[playerid][pCarKey]) || GetDoorStatus(PlayerInfo[playerid][pCarKey],DOOR_DRIVER)==DOOR_STATUS_OPEN && playerid)
                    {
                        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock])
                        {
                            VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] = 0;
                            UnLockCar(PlayerInfo[playerid][pCarKey]);
                            new str[256];
                            SetVehicleParamsForPlayer(PlayerInfo[playerid][pCarKey],playerid,0,0);
                            format(str, sizeof(str), "Masina ~b~%s ~n~~g~ este descuiata", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
                            GameTextForPlayer(playerid, str, 2000, 4);
                            format(string, sizeof(string), "%s a descuiat usa vehiculului %s.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
                            SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
                            format(string, sizeof(string), "~g~.");
                            
                        }
                        else
                        {
                            VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] = 1;
                            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                            LockCar(PlayerInfo[playerid][pCarKey]);
                            new str[256];
                            SetVehicleParamsForPlayer(PlayerInfo[playerid][pCarKey],playerid,0,1);
                            format(str, sizeof(str), "Masina ~b~%s ~n~~r~ este incuiata", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
                            GameTextForPlayer(playerid, str, 2000, 4);
                            format(string, sizeof(string), "%s a incuiat usa vehiculului %s.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
                            SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
                            format(string, sizeof(string), "~r~.");
                            
                        }
                    }
                }
                else if (ProxDetectorV(2.5, playerid, PlayerInfo[playerid][pCarKey2]))
                {
                    if (!IsABike(PlayerInfo[playerid][pCarKey2]))
                    {
                        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock])
                        {
                            VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] = 0;
                            UnLockCar(PlayerInfo[playerid][pCarKey2]);
                            new str[256];
                            SetVehicleParamsForPlayer(PlayerInfo[playerid][pCarKey2],playerid,0,0);
                            format(str, sizeof(str), "Masina ~b~%s ~n~~g~ este descuiata", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400]);
                            GameTextForPlayer(playerid, str, 2000, 4);
                            format(string, sizeof(string), "%s a descuiat usa vehiculului %s.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
                            SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
                            format(string, sizeof(string), "~g~.");
                            
                        }
                        else
                        {
                            VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] = 1;
                            PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                            LockCar(PlayerInfo[playerid][pCarKey2]);
                            new str[256];
                            SetVehicleParamsForPlayer(PlayerInfo[playerid][pCarKey2],playerid,0,1);
                            format(str, sizeof(str), "Masina ~b~%s ~n~~r~ este incuiata", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400]);
                            GameTextForPlayer(playerid, str, 2000, 4);
                            format(string, sizeof(string), "%s a incuiat usa vehiculului %s.", GetPlayerNameEx(playerid), VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
                            SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
                            format(string, sizeof(string), "~r~.");
                            
                        }
                    }
                }
            }
            else if(strcmp(x_vehicle,"color",true) == 0)
            {
                if(GetPlayerCash(playerid) < 49)
                {
                    SendClientMessage(playerid, COLOR_GREY,"Nu ai destui bani.Ai nevoie de 50$.");
                    return 1;
                }
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}SYNTAX{FFFFFF}: /v color [ID Culoare 1] [ID Culoare 2]");
                    return 1;
                }
                new color1;
                color1 = strval(tmp);
                if(color1 < 0 && color1 > 126)
                {
                    SendClientMessage(playerid, COLOR_GREY, "ID-ul culorii nu exista.");
                    return 1;
                }
                tmp = strtok(cmdtext, idx);
                if(!strlen(tmp))
                {
                    SendClientMessage(playerid, COLOR_GRAD2, "{AFAFAF}SYNTAX{FFFFFF}: /v color [ColorOneID] [ColorTwoID]");
                    return 1;
                }
                new color2;
                color2 = strval(tmp);
                if(color2 < 0 && color2 > 126)
                {
                    SendClientMessage(playerid, COLOR_GREY, "ID-ul culorii nu exista.");
                    return 1;
                }
                new plname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, plname, sizeof(plname));
                new vehi = GetPlayerVehicleID(playerid);
                if(IsPlayerInRangeOfPoint(playerid, 20, 1986.6340,-1860.2877,13.5504))
                {
                    if(PlayerInfo[playerid][pFaction] == 7)
                    {
                        if(IsPlayerInVehicle(playerid, vehi))
                        {
                            ChangeVehicleColor(vehi, color1, color2);
                            VehicleInfo[vehi][vColorOne] = color1;
                            VehicleInfo[vehi][vColorTwo] = color2;
                            GivePlayerCash(playerid,-50);
                            return 1;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GREY,"Trebuie sa te aflii in vehicul.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY,"Nu esti membru LSAS (Los Santos Auto Service).");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY,"Nu esti la sediu.");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle,"inspectdone",true) == 0)
            {
                new plname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, plname, sizeof(plname));
                new vehi = GetPlayerVehicleID(playerid);
                new Float:healthcar;
                new carrepair = GetPlayerVehicleID(playerid);
                GetVehicleHealth(carrepair, healthcar);
                if(IsPlayerInRangeOfPoint(playerid, 20, 1986.6340,-1860.2877,13.5504))
                {
                    if(PlayerInfo[playerid][pFaction] == 7)
                    {
                        if(healthcar < 999)
                        {
                            SendClientMessage(playerid, COLOR_LIGHTRED,"Aceasta masina nu este eligibila pentru inspectia tehnica.");
                            return 1;
                        }
                        if(IsPlayerInVehicle(playerid, vehi) && healthcar > 999)
                        {
                            new year, month,day;
                            getdate(year, month, day);
                            VehicleInfo[vehi][vVer1] = day;
                            VehicleInfo[vehi][vVer2] = month;
                            VehicleInfo[vehi][vVer3] = year;
                            VehicleInfo[vehi][vVerify] = 1;
                            SendClientMessage(playerid, COLOR_GREY,"Ai validat inspectia tehnica a acestei masini.");
                            return 1;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GREY,"Trebuie sa te aflii in vehicul.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY,"Nu esti membru LSAS (Los Santos Auto Service).");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY,"Nu esti la sediu.");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle,"mod",true) == 0)
            {
                if(GetPlayerCash(playerid) < 49)
                {
                    SendClientMessage(playerid, COLOR_GREY,"Nu ai destui bani.Ai nevoie de 50$.");
                    return 1;
                }
                new vehi = GetPlayerVehicleID(playerid);
                if(IsPlayerInRangeOfPoint(playerid, 20, 1986.6340,-1860.2877,13.5504))
                {
                    if(PlayerInfo[playerid][pFaction] == 7)
                    {
                        if(IsPlayerInVehicle(playerid, vehi))
                        {
                            ShowPlayerDialog(playerid,Vmod,DIALOG_STYLE_LIST, "Modificarile masinii","Repara masina\nAdaugare roti\nAdaugare PaintJob\nAdaugare Hidraulice\nAdaugare tunning\nAdaugare Spoiler\nStergere Tunning","Alege","Iesire");
                            return 1;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GREY,"Trebuie sa te aflii in vehicul.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY,"Nu esti membru LSAS (Los Santos Auto Service).");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY,"Nu esti la sediu.");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "buy", true) == 0)
            {
                if(IsPlayerInRangeOfPoint(playerid, 6, Businesses[7][EnterX],Businesses[7][EnterY],Businesses[7][EnterZ]))
                {
                    //ShowPlayerDialog(playerid, 998, DIALOG_STYLE_LIST, "Dealer", "Vehicule Normale\nVehicule Normale2\nBarci\nAvioane\nVehicule de joburi", "Select", "Cancel");
                    ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_LIST, "Dealership", "Masini\nMotoare\nBiciclete\nElicoptere\nAvioane\nBarci", "Selecteaza", "Refuza");
                }
            }
            else if(strcmp(x_vehicle, "payticket", true) == 0)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(vehicleid <= IBPCARS)
                {
                    return 1;
                }
                if(VehicleInfo[vehicleid][vTicket] != 0)
                {
                    new plname[MAX_PLAYER_NAME];
                    GetPlayerName(playerid, plname, sizeof(plname));
                    new vehi = GetPlayerVehicleID(playerid);
                    if(vehi == PlayerInfo[playerid][pCarKey] || vehi == PlayerInfo[playerid][pCarKey2] || (strcmp(plname, VehicleInfo[vehi][vOwner], true) == 0))
                    {
                        if(GetPlayerCash(playerid) >= VehicleInfo[vehicleid][vTicket]-1)
                        {
                            GivePlayerCash(playerid,-VehicleInfo[vehicleid][vTicket]);
                            format(string, sizeof(string), "Ai platit amenda in valuare de %d$",VehicleInfo[vehicleid][vTicket]);
                            SendClientMessage(playerid, COLOR_WHITE, string);
                            DynamicFactions[1][fBank] += VehicleInfo[vehicleid][vTicket];
                            VehicleInfo[vehicleid][vTicket] = 0;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GRAD2, " Nu iti permiti sa platesti amenda.");
                            return 1;
                        }
                    }
                    return 1;
                }
            }
            /*else if(strcmp(x_vehicle, "paycredit", true) == 0)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(vehicleid <= IBPCARS)
                {
                    return 1;
                }
                if(VehicleInfo[vehicleid][vCredit] != 0)
                {
                    new plname[MAX_PLAYER_NAME];
                    GetPlayerName(playerid, plname, sizeof(plname));
                    new vehi = GetPlayerVehicleID(playerid);
                    if(vehi == PlayerInfo[playerid][pCarKey] || (strcmp(plname, VehicleInfo[vehi][vOwner], true) == 0))
                    {
                        if(GetPlayerCash(playerid) >= PlayerInfo[playerid][pCarCredit])
                        {
                            GivePlayerCash(playerid,-PlayerInfo[playerid][pCarCredit]);
                            format(string, sizeof(string), "A-ti platit creditul tau in valuare de %d$",PlayerInfo[playerid][pCarCredit]);
                            SendClientMessage(playerid, COLOR_WHITE, string);
                            VehicleInfo[vehicleid][vCredit] = 0;
                            PlayerInfo[playerid][pCarCredit] = 0;
                            SaveVehicles(playerid, vehicleid);
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GRAD2, " Nu iti poti permite vehicolul.");
                            return 1;
                        }
                    }

                    return 1;
                }
            }*/
            else if(strcmp(x_vehicle,"info",true) == 0)
            {
                if(!IsPlayerInAnyVehicle(playerid))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti intr-un vehicul.");
                    return 1;
                }
                new plname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, plname, sizeof(plname));
                new vehi = GetPlayerVehicleID(playerid);
                if(PlayerInfo[playerid][pCarKey] == vehi || PlayerInfo[playerid][pCarKey2] == vehi || (strcmp(plname, VehicleInfo[vehi][vOwner], true) == 0))
                {
                    format(string, sizeof(string), "%s, Alarma[%d], Incuietoare[%d], Immobilizare[%d], GPS[%d], Asigurari[%d], Distrugeri[%d], Pretul urmatoarei asigurari[%d]", VehicleNames[GetVehicleModel(vehi)-400],
                    VehicleInfo[vehi][vAlarm], VehicleInfo[vehi][vLockBuyed], VehicleInfo[vehi][vImmob], VehicleInfo[vehi][vGPS], VehicleInfo[vehi][vInsurances], VehicleInfo[vehi][vDestroys], InsurancePrices[GetVehicleModel(vehi)-400] * VehicleInfo[vehi][vMaxInsurances]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                }
                return 1;
            }
            else if(strcmp(x_vehicle, "scrap", true) == 0)
            {
                if(!IsPlayerInAnyVehicle(playerid))
                {
                    SendClientMessage(playerid, COLOR_GRAD, "Nu esti in masina !");
                    return 1;
                }

                new plname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, plname, sizeof(plname));
                new vehi = GetPlayerVehicleID(playerid);
                if(VehicleInfo[vehi][vCredit] != 0) { SendClientMessage(playerid, COLOR_GRAD2, "Nu poti da masina aceata la casare cat timp ai un credit."); return 1; }
                if(DynamicCars[vehi][CarType] == 2) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este de inchiriat."); return 1; }
                if(DynamicCars[vehi][CarType] == 10) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este al unui job."); return 1; }
                if(DynamicCars[vehi][CarType] == 12) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este al unui job."); return 1; }
                if(DynamicCars[vehi][CarType] == 11) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este al unui job."); return 1; }
                if(DynamicCars[vehi][CarType] == 9) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][CarType] == 69) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][CarType] == 66) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][FactionCar] == 1) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][FactionCar] == 3) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][FactionCar] == 2) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][FactionCar] == 5) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][FactionCar] == 7) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][FactionCar] == 4) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][FactionCar] == 6) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][CarType] == 11) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][CarType] == 12) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(DynamicCars[vehi][CarType] == 14) { SendClientMessage(playerid, COLOR_GREY, "Nu poti da aceasta masina la casare pentru ca este a unui job."); return 1; }
                if(PlayerInfo[playerid][pCarKey] == vehi || (strcmp(plname, VehicleInfo[vehi][vOwner], true) == 0))
                {
                    if(VehicleInfo[vehi][vNeon] != 0) { DestroyObject(VehicleInfo[vehi][vNeon2]); DestroyObject(VehicleInfo[vehi][vNeon]); VehicleInfo[vehi][vNeon2] = 0; VehicleInfo[vehi][vNeon] = 0; }
                    PlayerInfo[playerid][pFairMoney] = 1;
                    SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
                    new PriceeS = (CarsPrices[GetVehicleModel(vehi)-400]*30)/100;
                    new Pricee = CarsPrices[GetVehicleModel(vehi)-400]-PriceeS;
                    format(string, sizeof(string), "Ti-ai dat masina %s la casare si ai obtinut $%d", VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                    SendClientMessage(playerid, COLOR_GREEN, string);
                    format(string, sizeof(string), "IBP/Vehicles/%s.%s.cfg", plname, VehicleNames[GetVehicleModel(vehi)-400]);
                    GivePlayerCash(playerid, Pricee);
                    PlayerInfo[playerid][pCarKey] = 0;
                    new y, m, d;
                    new h,mi,s;
                    getdate(y,m,d);
                    gettime(h,mi,s);
                    new str[256];
                    new vstring[256];
                    format(str, sizeof(str), "%s.%s.cfg", plname, VehicleNames[GetVehicleModel(vehi)-400]);
                    if(strfind(str, PlayerVehicle[playerid][pVeh1], true) == 0)
                    {
                        PlayerInfo[playerid][pCarKey] = 0;
                        VehicleInfo[vehi][vOwned] = 0;
                        format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] %s si-a dat masina %s la casare pentru $%d",d,m,y,h,mi,s,plname,VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                        ScrapLog(vstring);
                        DestroyVehicle(vehi);
                        fremove(string);
                        strmid(PlayerVehicle[playerid][pVeh1], "None", 0, strlen("None"), 255);
                        TogglePlayerControllable(playerid, 1);
                        return 1;
                    }
                    else if(strfind(str, PlayerVehicle[playerid][pVeh2], true) == 0)
                    {
                        PlayerInfo[playerid][pCarKey] = 0;
                        VehicleInfo[vehi][vOwned] = 0;
                        format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] %s si-a dat masina %s la casare pentru $%d",d,m,y,h,mi,s,plname,VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                        ScrapLog(vstring);
                        DestroyVehicle(vehi);
                        fremove(string);
                        strmid(PlayerVehicle[playerid][pVeh2], "None", 0, strlen("None"), 255);
                        TogglePlayerControllable(playerid, 1);
                        return 1;
                    }
                    else if(strfind(str, PlayerVehicle[playerid][pVeh3], true) == 0)
                    {
                        PlayerInfo[playerid][pCarKey] = 0;
                        VehicleInfo[vehi][vOwned] = 0;
                        format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] %s scrapped his %s for $%d",d,m,y,h,mi,s,plname,VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                        ScrapLog(vstring);
                        DestroyVehicle(vehi);
                        fremove(string);
                        strmid(PlayerVehicle[playerid][pVeh3], "None", 0, strlen("None"), 255);
                        TogglePlayerControllable(playerid, 1);
                        return 1;
                    }
                    else if(strfind(str, PlayerVehicle[playerid][pVeh4], true) == 0)
                    {
                        PlayerInfo[playerid][pCarKey] = 0;
                        VehicleInfo[vehi][vOwned] = 0;
                        format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] %s si-a dat masina %s la casare pentru $%d",d,m,y,h,mi,s,plname,VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                        ScrapLog(vstring);
                        DestroyVehicle(vehi);
                        fremove(string);
                        strmid(PlayerVehicle[playerid][pVeh4], "None", 0, strlen("None"), 255);
                        TogglePlayerControllable(playerid, 1);
                        return 1;
                    }
                    else if(strfind(str, PlayerVehicle[playerid][pVeh5], true) == 0)
                    {
                        PlayerInfo[playerid][pCarKey] = 0;
                        VehicleInfo[vehi][vOwned] = 0;
                        format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] %s si-a dat masina %s la casare pentru $%d",d,m,y,h,mi,s,plname,VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                        ScrapLog(vstring);
                        DestroyVehicle(vehi);
                        fremove(string);
                        strmid(PlayerVehicle[playerid][pVeh5], "None", 0, strlen("None"), 255);
                        TogglePlayerControllable(playerid, 1);
                        return 1;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti proprietarul acestei masini/deti o masina de inchiriat.");
                    }
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "scrap2", true) == 0)
            {
                if(!IsPlayerInAnyVehicle(playerid))
                {
                    SendClientMessage(playerid, COLOR_GRAD, "Nu esti intr-un vehicul!");
                    return 1;
                }
                new plname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, plname, sizeof(plname));
                new vehi = GetPlayerVehicleID(playerid);
                if(GetPlayerVehicleID(playerid) <= IBPCARS) { return 1; }
                if(vehi != PlayerInfo[playerid][pCarKey2]) { return 1; }
                if(VehicleInfo[vehi][vCredit] != 0) { SendClientMessage(playerid, COLOR_GRAD2, "Nu poti scapa de aceasta masina deoarece ai inca credit de platit."); return 1; }
                if((strcmp(plname, VehicleInfo[vehi][vOwner], true) == 0))
                {
                    if (PlayerToPoint(50.0, playerid, 2181.4631,-2318.6343,13.3188))
                    {
                        if(VehicleInfo[vehi][vNeon] != 0) { DestroyObject(VehicleInfo[vehi][vNeon2]); DestroyObject(VehicleInfo[vehi][vNeon]); VehicleInfo[vehi][vNeon2] = 0; VehicleInfo[vehi][vNeon] = 0; }
                        PlayerInfo[playerid][pFairMoney] = 1;
                        SetTimerEx("FairMoneyReset", 3000, false, "i", playerid);
                        new PriceeS = (CarsPrices[GetVehicleModel(vehi)-400]*30)/100;
                        new Pricee = CarsPrices[GetVehicleModel(vehi)-400]-PriceeS;
                        format(string, sizeof(string), "Ai dat masina %s spre distrugere pentru $%d", VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                        SendClientMessage(playerid, COLOR_GREEN, string);
                        format(string, sizeof(string), "IBP/Vehicles/%s.%s.cfg", plname, VehicleNames[GetVehicleModel(vehi)-400]);
                        GivePlayerCash(playerid, Pricee);
                        PlayerInfo[playerid][pCarKey2] = 0;
                        new y, m, d;
                        new h,mi,s;
                        getdate(y,m,d);
                        gettime(h,mi,s);
                        new str[256];
                        new vstring[256];
                        format(str, sizeof(str), "%s.%s.cfg", plname, VehicleNames[GetVehicleModel(vehi)-400]);
                        if(strfind(str, PlayerVehicle[playerid][pVeh1], true) == 0)
                        {
                            PlayerInfo[playerid][pCarKey2] = 0;
                            SpawnedCar[playerid][1] = 0;
                            VehicleInfo[vehi][vOwned] = 0;
                            format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] %s a dus masina %s la casare pentru $%d",d,m,y,h,mi,s,plname,VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                            ScrapLog(vstring);
                            DestroyVehicle(vehi);
                            fremove(string);
                            strmid(PlayerVehicle[playerid][pVeh1], "None", 0, strlen("None"), 255);
                            TogglePlayerControllable(playerid, 1);
                            return 1;
                        }
                        else if(strfind(str, PlayerVehicle[playerid][pVeh2], true) == 0)
                        {
                            PlayerInfo[playerid][pCarKey2] = 0;
                            SpawnedCar[playerid][1] = 0;
                            VehicleInfo[vehi][vOwned] = 0;
                            format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] %s a dus masina %s la casare pentru $%d",d,m,y,h,mi,s,plname,VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                            ScrapLog(vstring);
                            DestroyVehicle(vehi);
                            fremove(string);
                            strmid(PlayerVehicle[playerid][pVeh2], "None", 0, strlen("None"), 255);
                            TogglePlayerControllable(playerid, 1);
                            return 1;
                        }
                        else if(strfind(str, PlayerVehicle[playerid][pVeh3], true) == 0)
                        {
                            PlayerInfo[playerid][pCarKey2] = 0;
                            SpawnedCar[playerid][1] = 0;
                            VehicleInfo[vehi][vOwned] = 0;
                            format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] %s a dus masina %s la casare pentru $%d",d,m,y,h,mi,s,plname,VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                            ScrapLog(vstring);
                            DestroyVehicle(vehi);
                            fremove(string);
                            strmid(PlayerVehicle[playerid][pVeh3], "None", 0, strlen("None"), 255);
                            TogglePlayerControllable(playerid, 1);
                            return 1;
                        }
                        else if(strfind(str, PlayerVehicle[playerid][pVeh4], true) == 0)
                        {
                            PlayerInfo[playerid][pCarKey2] = 0;
                            SpawnedCar[playerid][1] = 0;
                            VehicleInfo[vehi][vOwned] = 0;
                            format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] %s a dus masina %s la casare pentru $%d",d,m,y,h,mi,s,plname,VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                            ScrapLog(vstring);
                            DestroyVehicle(vehi);
                            fremove(string);
                            strmid(PlayerVehicle[playerid][pVeh4], "None", 0, strlen("None"), 255);
                            TogglePlayerControllable(playerid, 1);
                            return 1;
                        }
                        else if(strfind(str, PlayerVehicle[playerid][pVeh5], true) == 0)
                        {
                            PlayerInfo[playerid][pCarKey2] = 0;
                            SpawnedCar[playerid][1] = 0;
                            VehicleInfo[vehi][vOwned] = 0;
                            format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] %s a dus masina %s la casare pentru $%d",d,m,y,h,mi,s,plname,VehicleNames[GetVehicleModel(vehi)-400], Pricee);
                            ScrapLog(vstring);
                            DestroyVehicle(vehi);
                            fremove(string);
                            strmid(PlayerVehicle[playerid][pVeh5], "None", 0, strlen("None"), 255);
                            TogglePlayerControllable(playerid, 1);
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GREY, "Nu esti la locul unde trebuie sa dai /v scrap, dute la checkpoint");
                        SetPlayerCheckpoint(playerid, 2181.4631,-2318.6343,13.3188, 3.0);
                        ScrapCP[playerid] = 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti proprietarul masinii!");
                }
                return 1;
            }
            else if(strcmp(x_vehicle, "accept", true) == 0)
            {
                if(pToAccept[playerid] == 255)
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai ce accepta.");
                    return 1;
                }
                if(GetPlayerCash(playerid) >= prToAccept[playerid])
                {
                    new pName[MAX_PLAYER_NAME];
                    new playername[MAX_PLAYER_NAME];
                    GetPlayerName(pToAccept[playerid], pName, sizeof(pName));
                    GetPlayerName(playerid, playername, sizeof(playername));
                    new str[256];
                    new str2[256];
                    new str3[256];
                    format(str, sizeof(str), "%s.%s.cfg", pName, VehicleNames[GetVehicleModel(vToAccept[playerid])-400]);
                    format(str2, sizeof(str2), "%s.%s", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400]);
                    format(str3, sizeof(str3), "IBP/Vehicles/%s.%s.cfg", pName, VehicleNames[GetVehicleModel(vToAccept[playerid])-400]);
                    if(strfind(str, PlayerVehicle[pToAccept[playerid]][pVeh1], true) == 0)
                    {
                        if(strcmp(PlayerVehicle[playerid][pVeh1], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh1], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh1], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh2], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh2], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh1], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh3], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh3], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh1], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            PlayerInfo[pToAccept[playerid]][pCarKey] = PlayerInfo[playerid][pCarKey];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh4], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh4], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh1], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh5], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh5], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh1], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_LIGHTRED, "Detii eja 5 masini si nu mai poti cumpara altele.");
                            SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, "Masina ta nu poate fi vanduta deoarece playerul are deja 5 masini..");
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                    }
                    else if(strfind(str, PlayerVehicle[pToAccept[playerid]][pVeh2], true) == 0)
                    {
                        if(strcmp(PlayerVehicle[playerid][pVeh1], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh1], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh2], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh2], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh2], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh2], "None", 0, strlen("None"), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh3], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh3], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh2], "None", 0, strlen("None"), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh4], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh4], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh2], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh5], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh5], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh2], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_LIGHTRED, "Detii eja 5 masini si nu mai poti cumpara altele.");
                            SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, "Masina ta nu poate fi vanduta deoarece playerul are deja 5 masini..");
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                    }
                    else if(strfind(str, PlayerVehicle[pToAccept[playerid]][pVeh3], true) == 0)
                    {
                        if(strcmp(PlayerVehicle[playerid][pVeh1], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh1], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh3], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh2], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh2], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh3], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh3], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            strmid(PlayerVehicle[playerid][pVeh3], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh3], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh4], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh4], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh3], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh5], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh5], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh3], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_LIGHTRED, "Detii eja 5 masini si nu mai poti cumpara altele.");
                            SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, "Masina ta nu poate fi vanduta deoarece playerul are deja 5 masini.");
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                    }
                    else if(strfind(str, PlayerVehicle[pToAccept[playerid]][pVeh4], true) == 0)
                    {
                        if(strcmp(PlayerVehicle[playerid][pVeh1], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh1], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh4], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh2], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh2], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh4], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh3], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh3], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh4], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh4], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh4], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh4], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh5], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            strmid(PlayerVehicle[playerid][pVeh5], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh4], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_LIGHTRED, "Detii eja 5 masini si nu mai poti cumpara altele.");
                            SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, "Masina ta nu poate fi vanduta deoarece playerul are deja 5 masini.");
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                    }
                    else if(strfind(str, PlayerVehicle[pToAccept[playerid]][pVeh5], true) == 0)
                    {
                        if(strcmp(PlayerVehicle[playerid][pVeh1], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh1], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh5], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh2], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh2], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh5], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh3], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh3], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh5], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh4], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh4], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh5], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else if(strcmp(PlayerVehicle[playerid][pVeh5], "None", true) == 0)
                        {
                            format(string, sizeof(string), "Ai acceptat masina %s de la %s pentru $%d.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName, prToAccept[playerid]);
                            SendClientMessage(playerid, COLOR_GREEN, string);
                            format(string, sizeof(string), "%s ti-a acceptat masina %s pentru $%d.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400], prToAccept[playerid]);
                            SendClientMessage(pToAccept[playerid], COLOR_GREEN, string);
                            GivePlayerCash(pToAccept[playerid], prToAccept[playerid]);
                            GivePlayerCash(playerid, -prToAccept[playerid]);
                            PlayerInfo[playerid][pCarKey] = vToAccept[playerid];
                            PlayerInfo[pToAccept[playerid]][pCarKey] = 0;
                            SpawnedCar[playerid][0] = SpawnedCar[pToAccept[playerid]][0];
                            SpawnedCar[pToAccept[playerid]][0] = 0;
                            fremove(str3);
                            strmid(PlayerVehicle[playerid][pVeh5], str2, 0, strlen(str2), 255);
                            strmid(VehicleInfo[vToAccept[playerid]][vOwner], playername, 0, strlen(playername), 255);
                            // v desc
                            strmid(VehicleInfo[vToAccept[playerid]][vDescription], str2, 0, strlen(str2), 255);
                            strmid(PlayerVehicle[pToAccept[playerid]][pVeh5], "None", 0, strlen("None"), 255);
                            SaveVehicles(playerid, vToAccept[playerid]);
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_LIGHTRED, "Detii eja 5 masini si nu mai poti cumpara altele.");
                            SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, "Masina ta nu poate fi vanduta deoarece playerul are deja 5 masini.");
                            pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                            return 1;
                        }
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai destui bani.");
                    SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, "Vehicolul tau nu poate fi vandut deoarece persoana nu are destui bani.");
                    pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                    return 1;
                }
                return 1;
            }
            else if(strcmp(x_vehicle, "get", true) == 0)
            {
                /*SendClientMessage(playerid, COLOR_INFO, "____ Vehicule___");
                if(strcmp(PlayerVehicle[playerid][pVeh1], "None",true))
                {
                    splitter(PlayerVehicle[playerid][pVeh1], vehnamesplit, '.');
                    format(string, sizeof(string), "1. %s",vehnamesplit[1]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                }
                else SendClientMessage(playerid, COLOR_WHITE, "1. Nu ai o masina.");

                if(strcmp(PlayerVehicle[playerid][pVeh2], "None",true))
                {
                    splitter(PlayerVehicle[playerid][pVeh2], vehnamesplit, '.');
                    format(string, sizeof(string), "2. %s",vehnamesplit[1]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                }
                else SendClientMessage(playerid, COLOR_WHITE, "2. Nu ai o masina.");

                if(strcmp(PlayerVehicle[playerid][pVeh3], "None",true))
                {
                    splitter(PlayerVehicle[playerid][pVeh3], vehnamesplit, '.');
                    format(string, sizeof(string), "3. %s ",vehnamesplit[1]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                }
                else SendClientMessage(playerid, COLOR_WHITE, "3.Nu ai o masina.");

                if(strcmp(PlayerVehicle[playerid][pVeh4], "None",true))
                {
                    splitter(PlayerVehicle[playerid][pVeh4], vehnamesplit, '.');
                    format(string, sizeof(string), "4. %s",vehnamesplit[1]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                }
                else SendClientMessage(playerid, COLOR_WHITE, "4. Nu ai o masina.");

                if(strcmp(PlayerVehicle[playerid][pVeh5], "None",true))
                {
                    splitter(PlayerVehicle[playerid][pVeh5], vehnamesplit, '.');
                    format(string, sizeof(string), "5. %s",vehnamesplit[1]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                }
                else SendClientMessage(playerid, COLOR_WHITE, "5. Nu ai o masina.");*/

                vehlist[playerid][0] = 1086;
                vehlist[playerid][1] = 1086;
                vehlist[playerid][2] = 1086;
                vehlist[playerid][3] = 1086;
                vehlist[playerid][4] = 1086;
                if(strcmp(PlayerVehicle[playerid][pVeh1], "None",true))
                {
                    splitter(PlayerVehicle[playerid][pVeh1], vehnamesplit, '.');
                    for (new i=0;i<212;i++)
                    {
                        if(!strcmp(vehnamesplit[1], VehicleNames[i],true))
                        {
                            vehlist[playerid][0] = i+400;
                        }
                    }
                }
                if(strcmp(PlayerVehicle[playerid][pVeh2], "None",true))
                {
                    splitter(PlayerVehicle[playerid][pVeh2], vehnamesplit, '.');
                    for (new i=0;i<212;i++)
                    {
                        if(!strcmp(vehnamesplit[1], VehicleNames[i],true))
                        {
                            vehlist[playerid][1] = i+400;
                        }
                    }
                }
                if(strcmp(PlayerVehicle[playerid][pVeh3], "None",true))
                {
                    splitter(PlayerVehicle[playerid][pVeh3], vehnamesplit, '.');
                    for (new i=0;i<212;i++)
                    {
                        if(!strcmp(vehnamesplit[1], VehicleNames[i],true))
                        {
                            vehlist[playerid][2] = i+400;
                        }
                    }
                }
                if(strcmp(PlayerVehicle[playerid][pVeh4], "None",true))
                {
                    splitter(PlayerVehicle[playerid][pVeh4], vehnamesplit, '.');
                    for (new i=0;i<212;i++)
                    {
                        if(!strcmp(vehnamesplit[1], VehicleNames[i],true))
                        {
                            vehlist[playerid][3] = i+400;
                        }
                    }
                }
                if(strcmp(PlayerVehicle[playerid][pVeh5], "None",true))
                {
                    splitter(PlayerVehicle[playerid][pVeh5], vehnamesplit, '.');
                    for (new i=0;i<212;i++)
                    {
                        if(!strcmp(vehnamesplit[1], VehicleNames[i],true))
                        {
                            vehlist[playerid][4] = i+400;
                        }
                    }
                }
                ShowModelSelectionMenuVlist(playerid, vehlist[playerid], 5, "Masinile Tale", 1699, 0.0, 0.0, -55.0);
                return 1;
            }
            else if(strcmp(x_vehicle, "park", true) == 0)
            {
                if(!IsPlayerInAnyVehicle(playerid))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti intr-o masina !");
                    return 1;
                }
                new vehi = GetPlayerVehicleID(playerid);
                new Float:vehicleHealth;
                GetVehicleHealth(vehi, vehicleHealth);
                if(vehicleHealth <= 360)
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Masina ta este aproape distrusa. Nu o poti parca");
                    return 1;
                }
                new plname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, plname, sizeof(plname));
                if(vehi == PlayerInfo[playerid][pCarKey])
                {
                    if(PlayerToPoint(5.0, playerid, VehicleInfo[vehi][vX], VehicleInfo[vehi][vY], VehicleInfo[vehi][vZ]))
                    {
                        if(VehicleInfo[vehi][vNeon] != 0)
                        {
                            DestroyObject(VehicleInfo[vehi][vNeon2]);
                            DestroyObject(VehicleInfo[vehi][vNeon]);
                            VehicleInfo[vehi][vNeon2] = 0;
                            VehicleInfo[vehi][vNeon] = 0;
                        }
                        SaveVehicles(playerid, vehi);
                        SendClientMessage(playerid, COLOR_GREEN, "Masina ta a fost parcata (despawnata).");
                        StopAudioStreamForPlayer(playerid);
                        PlayerInfo[playerid][pRadioHandle] = -1;
                        vRadio[GetPlayerVehicleID(playerid)][vVolume] = -1;
                        PlayerInfo[playerid][pCarKey] = 0;
                        VehicleInfo[vehi][vOwned] = 0;
                        HandBrake[vehi][hActiv] = 0;
                        DestroyVehicle(vehi);
                        TogglePlayerControllable(playerid, 1);
                        SpawnedCar[playerid][0] = 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti la locul de parcare!");
                        SendClientMessage(playerid, COLOR_WHITE, "Locul de parcare ti-a fost aratat pe harta.");
                        SetPlayerCheckpoint(playerid, VehicleInfo[PlayerInfo[playerid][pCarKey]][vX], VehicleInfo[PlayerInfo[playerid][pCarKey]][vY], VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ], 5.0);
                        VCP[playerid] = 1;
                        ActiveCP[playerid] = 1;
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Aceasta nu este masina ta !");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "park2", true) == 0)
            {
                if(!IsPlayerInAnyVehicle(playerid))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti intr-o masina !");
                    return 1;
                }
                new vehi = GetPlayerVehicleID(playerid);
                new Float:vehicleHealth;
                GetVehicleHealth(vehi, vehicleHealth);
                if(vehicleHealth <= 350)
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Masina ta este aproape distrusa. Nu o poti parca");
                    return 1;
                }
                new plname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, plname, sizeof(plname));
                if(vehi == PlayerInfo[playerid][pCarKey2])
                {
                    if(PlayerToPoint(5.0, playerid, VehicleInfo[vehi][vX], VehicleInfo[vehi][vY], VehicleInfo[vehi][vZ]))
                    {
                        if(VehicleInfo[vehi][vNeon] != 0)
                        {
                            DestroyObject(VehicleInfo[vehi][vNeon2]);
                            DestroyObject(VehicleInfo[vehi][vNeon]);
                            VehicleInfo[vehi][vNeon2] = 0;
                            VehicleInfo[vehi][vNeon] = 0;
                        }
                        SaveVehicles(playerid, vehi);
                        SendClientMessage(playerid, COLOR_GREEN, "Masina ta a fost parcata (despawnata).");
                        StopAudioStreamForPlayer(playerid);
                        PlayerInfo[playerid][pRadioHandle] = -1;
                        vRadio[GetPlayerVehicleID(playerid)][vVolume] = -1;
                        PlayerInfo[playerid][pCarKey2] = 0;
                        VehicleInfo[vehi][vOwned] = 0;
                        HandBrake[vehi][hActiv] = 0;
                        DestroyVehicle(vehi);
                        TogglePlayerControllable(playerid, 1);
                        SpawnedCar[playerid][1] = 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti la locul de parcare!");
                        SendClientMessage(playerid, COLOR_WHITE, "Locul de parcare ti-a fost aratat pe harta.");
                        SetPlayerCheckpoint(playerid, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vX], VehicleInfo[PlayerInfo[playerid][pCarKey2]][vY], VehicleInfo[PlayerInfo[playerid][pCarKey2]][vZ], 5.0);
                        VCP[playerid] = 2;
                        ActiveCP[playerid] = 1;
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Aceasta nu este masina ta !");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "sell", true) == 0)
            {
                if(!IsPlayerInAnyVehicle(playerid))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu detii un vehicol !");
                    return 1;
                }
                new vehi = GetPlayerVehicleID(playerid);
                if(DonatorVehicles(vehi))
                {
                    SendClientMessage(playerid, COLOR_WHITE, "ERROR:  Masinile de donator nu pot fi vandute.");
                    return 1;
                }
                if(GetPlayerVehicleID(playerid) <= 29)
                {
                    return 1;
                }
                new plname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, plname, sizeof(plname));
                if(strcmp(plname, VehicleInfo[vehi][vOwner], true) == 0)
                {
                    tmp = strtok(cmdtext, idx);
                    if(!strlen(tmp))
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "USAGE: /v sell [Playerid/PartOfName] [Price]");
                        return 1;
                    }
                    new user = ReturnUser(tmp);
                    if(user == INVALID_PLAYER_ID)
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Invalid Player ID !");
                        return 1;
                    }
                    if(user == playerid)
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Nu-ti poti vinde masina tie !");
                        return 1;
                    }
                    tmp = strtok(cmdtext, idx);
                    if(!strlen(tmp))
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "USAGE: /v offer [Playerid/PartOfName] [Price]");
                        return 1;
                    }
                    if(!ProxDetectorS(8, playerid, user))
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Esti prea departe de jucator!");
                        return 1;
                    }
                    if(PlayerInfo[user][pCarKey] != 0)
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Acest jucator are deja o masina spawnata");
                        return 1;
                    }

                    new price = strval(tmp);
                    if(price < 0) { return 1; }
                    new playername[MAX_PLAYER_NAME];
                    new pName[MAX_PLAYER_NAME];
                    GetPlayerName(user, pName, sizeof(pName));
                    GetPlayerName(playerid, playername, sizeof(playername));
                    format(string, sizeof(string), "%s ti-a oferit un %s pentru $%d, foloseste /v accept ori refuse.", playername, VehicleNames[GetVehicleModel(vehi)-400], price);
                    SendClientMessage(user, COLOR_YELLOW, string);
                    format(string, sizeof(string), "%s, Alarma[%d], Incuietoare[%d], Imobilizare[%d], GPS[%d], Asigurari[%d], Accidente[%d], Pretul urmatoarei asigurari[%d]", VehicleNames[GetVehicleModel(vehi)-400],
                    VehicleInfo[vehi][vAlarm], VehicleInfo[vehi][vLockBuyed], VehicleInfo[vehi][vImmob], VehicleInfo[vehi][vGPS], VehicleInfo[vehi][vInsurances], VehicleInfo[vehi][vDestroys], InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]);
                    SendClientMessage(user, COLOR_YELLOW, string);
                    format(string, sizeof(string), "Ai oferit un %s lui %s pentru $%d.", VehicleNames[GetVehicleModel(vehi)-400], pName, price);
                    SendClientMessage(playerid, COLOR_GREEN, string);
                    pToAccept[user] = playerid;
                    vToAccept[user] = vehi;
                    prToAccept[user] = price;
                    return 1;
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu detii un vehicol !");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "refuse", true) == 0)
            {
                if(pToAccept[playerid] == 255)
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti accepta ceva ce nu ti-a oferit nimeni.");
                    return 1;
                }
                new playername[MAX_PLAYER_NAME];
                new pName[MAX_PLAYER_NAME];
                GetPlayerName(pToAccept[playerid], pName, sizeof(pName));
                GetPlayerName(playerid, playername, sizeof(playername));
                format(string, sizeof(string), "Ai refuzat masina %s detinuta de %s.", VehicleNames[GetVehicleModel(vToAccept[playerid])-400], pName);
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string, sizeof(string), "%s ti-a refuzat oferta de vanzare pentru masina %s.", playername, VehicleNames[GetVehicleModel(vToAccept[playerid])-400]);
                SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, string);
                pToAccept[playerid] = 255; vToAccept[playerid] = 999; prToAccept[playerid] = 0;
                return 1;
            }
            else if(strcmp(x_vehicle, "duplicatekey", true) == 0)
            {
                if(!IsPlayerInAnyVehicle(playerid))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti intr-un vehicul!");
                    return 1;
                }
                new vehi = GetPlayerVehicleID(playerid);
                new plname[MAX_PLAYER_NAME];
                GetPlayerName(playerid, plname, sizeof(plname));
                if(VehicleInfo[vehi][vKey] == PlayerInfo[playerid][pCarKey]|| VehicleInfo[vehi][vKey] == PlayerInfo[playerid][pCarKey2] || (strcmp(plname, VehicleInfo[vehi][vOwner], true) == 0))
                {
                    tmp = strtok(cmdtext, idx);
                    if(!strlen(tmp))
                    {
                        SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /v duplicatekey [playerid/PartOfName]");
                        return 1;
                    }
                    giveplayerid = ReturnUser(tmp);
                    if(giveplayerid != INVALID_PLAYER_ID)
                    {
                        new Float:x, Float:y, Float:z;
                        GetPlayerPos(giveplayerid,x,y,z);
                        if(!PlayerToPoint(30, playerid, x, y, z))
                        {
                            SendClientMessage(playerid, COLOR_GREY, "Playerul nu este langa tine!");
                            return 1;
                        }
                        if(PlayerInfo[giveplayerid][pDupeKey] == VehicleInfo[vehi][vKey])
                        {
                            SendClientMessage(playerid, COLOR_LIGHTRED, "Acest jucator are deja cheia masinii tale!");
                            return 1;
                        }
                        PlayerInfo[giveplayerid][pDupeKey] = VehicleInfo[vehi][vKey];
                        PlayerPlayerActionMessage(playerid,giveplayerid,20.0,"ii da un set de chei lui");
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti proprietarul masinii !");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "buyinsurance", true) == 0)
            {
                new playername[MAX_PLAYER_NAME];
                GetPlayerName(playerid, playername, sizeof(playername));
                if (PlayerInfo[playerid][pCarKey] != 0)
                {
                    if(IsPlayerInRangeOfPoint(playerid, 20, 1986.6340,-1860.2877,13.5504))
                    {
                        if(GetPlayerVirtualWorld(playerid) == 9)
                        {
                            if(GetPlayerCash(playerid) >= InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances])
                            {
                                GivePlayerCash(playerid, -InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]);
                                VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances] += 1;
                                SaveVehicles(playerid, PlayerInfo[playerid][pCarKey]);
                                format(string, sizeof(string), "Ai cumparat o asigurare pentru $%d.", InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]);
                                SendClientMessage(playerid, COLOR_GREEN, string);
                                VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] += 1;
                            }
                            else
                            {
                                SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai destui bani.");
                                return 1;
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GRAD2, "Nu esti in interiorul companiei de asigurari.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Nu esti la compania de asigurari.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai o masina spawnata.");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "buyinsurance2", true) == 0)
            {
                new playername[MAX_PLAYER_NAME];
                GetPlayerName(playerid, playername, sizeof(playername));
                if (PlayerInfo[playerid][pCarKey2] != 0)
                {
                    if(IsPlayerInRangeOfPoint(playerid, 20, 1986.6340,-1860.2877,13.5504))
                    {
                        if(GetPlayerVirtualWorld(playerid) == 9)
                        {
                            if(GetPlayerCash(playerid) >= InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances])
                            {
                                GivePlayerCash(playerid, -InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances]);
                                VehicleInfo[PlayerInfo[playerid][pCarKey2]][vInsurances] += 1;
                                SaveVehicles(playerid, PlayerInfo[playerid][pCarKey2]);
                                format(string, sizeof(string), "Ai cumparat o asigurare pentru $%d.", InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances]);
                                SendClientMessage(playerid, COLOR_GREEN, string);
                                VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] += 1;
                            }
                            else
                            {
                                SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai destui bani.");
                                return 1;
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GRAD2, "Nu esti in interiorul companiei de asigurari.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Nu esti la compania de asigurari.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai o masina spawnata.");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "buylock", true) == 0)
            {
                if(IsPlayerInAnyVehicle(playerid))
                {
                    if(IsPlayerInRangeOfPoint(playerid, 100, 1986.6340,-1860.2877,13.5504))
                    {
                        if (PlayerInfo[playerid][pFaction] == 7)
                        {
                            tmp = strtok(cmdtext, idx);
                            if(!strlen(tmp))
                            {
                                SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /v buylock [level]");
                                SendClientMessage(playerid, COLOR_INFO, "Level 1: $150");
                                SendClientMessage(playerid, COLOR_INFO, "Level 2: $300");
                                SendClientMessage(playerid, COLOR_INFO, "Level 3: $450");
                                SendClientMessage(playerid, COLOR_INFO, "Level 4: $600");
                                SendClientMessage(playerid, COLOR_INFO, "Level 5: $750");
                                return 1;
                            }
                            new plname[MAX_PLAYER_NAME];
                            GetPlayerName(playerid, plname, sizeof(plname));
                            new lock;
                            lock = strval(tmp);
                            new vehicle = GetPlayerVehicleID(playerid);
                            if(lock < 1 || lock > 5) { SendClientMessage(playerid, COLOR_INFO, "Levelul incuietoarei este intre 1 si 5!"); return 1; }
                            if(VehicleInfo[vehicle][vLockBuyed] >= lock) { format(string, sizeof(string), "Detii deja aceasta incuietoare de level %d!", lock); SendClientMessage(playerid, COLOR_LIGHTRED, string); return 1; }
                            new lockcost = lock*150;
                            new playername[MAX_PLAYER_NAME];
                            GetPlayerName(playerid, playername, sizeof(playername));
                            if(GetPlayerCash(playerid) >= lockcost)
                            {
                                format(string, sizeof(string), "Ti-ai cumparat incuietoare de level %d.", lock);
                                SendClientMessage(playerid, COLOR_GREEN, string);
                                GivePlayerCash(playerid, -lockcost);
                                VehicleInfo[vehicle][vLockBuyed] = lock;
                                return 1;
                            }
                            else
                            {
                                SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai destui bani.");
                                return 1;
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GRAD2, "Nu esti membru LSAS.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Nu esti la sediu.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti intr-un vehicul.");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "buyalarm", true) == 0)
            {
                if(IsPlayerInAnyVehicle(playerid))
                {
                    if(IsPlayerInRangeOfPoint(playerid, 20, 1986.6340,-1860.2877,13.5504))
                    {
                        tmp = strtok(cmdtext, idx);
                        if(!strlen(tmp))
                        {
                            SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /v buyalarm [level]");
                            SendClientMessage(playerid, COLOR_INFO, "Level 1: $200");
                            SendClientMessage(playerid, COLOR_INFO, "Level 2: $400");
                            SendClientMessage(playerid, COLOR_INFO, "Level 3: $600");
                            SendClientMessage(playerid, COLOR_INFO, "Level 4: $800");
                            SendClientMessage(playerid, COLOR_INFO, "Level 5: $900");
                            return 1;
                        }
                        new plname[MAX_PLAYER_NAME];
                        GetPlayerName(playerid, plname, sizeof(plname));
                        new alarmer;
                        alarmer = strval(tmp);
                        new vehicle = GetPlayerVehicleID(playerid);
                        if(alarmer < 1 || alarmer > 5) { SendClientMessage(playerid, COLOR_INFO, "Level-ul alarmei este  intre 1 si 5!"); return 1; }
                        if(VehicleInfo[vehicle][vAlarm] >= alarmer) { format(string, sizeof(string), "Detii deja acest level de alarma %d!", alarmer); SendClientMessage(playerid, COLOR_LIGHTRED, string); return 1; }
                        new alarmcost = alarmer*200;
                        new playername[MAX_PLAYER_NAME];
                        GetPlayerName(playerid, playername, sizeof(playername));
                        if (PlayerInfo[playerid][pFaction] == 7)
                        {
                            if(GetPlayerCash(playerid) >= alarmcost)
                            {
                                format(string, sizeof(string), "Ti-ai cumparat o alarma de level %d.", alarmer);
                                SendClientMessage(playerid, COLOR_GREEN, string);
                                GivePlayerCash(playerid, -alarmcost);
                                VehicleInfo[vehicle][vAlarm] = alarmer;
                                return 1;
                            }
                            else
                            {
                                SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai destui bani");
                                return 1;
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GRAD2, "Nu esti membru LSAS.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Nu esti la sediu.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti intr-un vehicul!");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "buyimmob", true) == 0)
            {
                if(IsPlayerInAnyVehicle(playerid))
                {
                    if(IsPlayerInRangeOfPoint(playerid, 20, 1986.6340,-1860.2877,13.5504) || IsPlayerInRangeOfPoint(playerid, 20, 1774.8353,-1692.1329,13.4904))
                    {
                        tmp = strtok(cmdtext, idx);
                        if(!strlen(tmp))
                        {
                            SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /v buyimmob [level]");
                            SendClientMessage(playerid, COLOR_INFO, "Level 1: $250");
                            SendClientMessage(playerid, COLOR_INFO, "Level 2: $500");
                            SendClientMessage(playerid, COLOR_INFO, "Level 3: $750");
                            SendClientMessage(playerid, COLOR_INFO, "Level 4: $1000");
                            SendClientMessage(playerid, COLOR_INFO, "Level 5: $1250");
                            return 1;
                        }
                        new plname[MAX_PLAYER_NAME];
                        GetPlayerName(playerid, plname, sizeof(plname));
                        new immob;
                        immob = strval(tmp);
                        new vehicle = GetPlayerVehicleID(playerid);
                        if(immob < 1 || immob > 5) { SendClientMessage(playerid, COLOR_INFO, "Levelul imobilizatorului este intre 1 si 5"); return 1; }
                        if(VehicleInfo[vehicle][vImmob] >= immob) { format(string, sizeof(string), "Detii deja imobilizatorul %d!", immob); SendClientMessage(playerid, COLOR_LIGHTRED, string); return 1; }
                        new immobcost = immob*250;
                        new playername[MAX_PLAYER_NAME];
                        GetPlayerName(playerid, playername, sizeof(playername));
                        if (PlayerInfo[playerid][pFaction] == 7)
                        {
                            if(GetPlayerCash(playerid) >= immobcost)
                            {
                                format(string, sizeof(string), "Ti-ai cumparat imobilizator de level %d pentru $%d.", immob, immobcost);
                                SendClientMessage(playerid, COLOR_GREEN, string);
                                GivePlayerCash(playerid, -immobcost);
                                VehicleInfo[vehicle][vImmob] = immob;
                                return 1;
                            }
                            else
                            {
                                SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai destui bani.");
                                return 1;
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GRAD2, "Nu esti membru LSAS.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Nu esti la sediu.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti intr-o masina!");
                    return 1;
                }
            }
            else if(strcmp(x_vehicle, "buygps", true) == 0)
            {
                if(IsPlayerInAnyVehicle(playerid))
                {
                    if(IsPlayerInRangeOfPoint(playerid, 20, 1986.6340,-1860.2877,13.5504) || IsPlayerInRangeOfPoint(playerid, 20, 1774.8353,-1692.1329,13.4904))
                    {
                        tmp = strtok(cmdtext, idx);
                        if(!strlen(tmp))
                        {
                            SendClientMessage(playerid, COLOR_INFO, "{AFAFAF}SYNTAX{FFFFFF}: /v buygps [level]");
                            SendClientMessage(playerid, COLOR_INFO, "Level 1: $150");
                            SendClientMessage(playerid, COLOR_INFO, "Level 2: $300");
                            SendClientMessage(playerid, COLOR_INFO, "Level 3: $450");
                            SendClientMessage(playerid, COLOR_INFO, "Level 4: $600");
                            SendClientMessage(playerid, COLOR_INFO, "Level 5: $750");
                            return 1;
                        }
                        new plname[MAX_PLAYER_NAME];
                        GetPlayerName(playerid, plname, sizeof(plname));
                        new gps;
                        gps = strval(tmp);
                        new vehicle = GetPlayerVehicleID(playerid);
                        if(gps < 1 || gps > 5) { SendClientMessage(playerid, COLOR_INFO, "Levelul GPS-urilor este de la 1 la 5!"); return 1; }
                        if(VehicleInfo[vehicle][vGPS] >= gps) { format(string, sizeof(string), "Detii deja GPS de level %d!", gps); SendClientMessage(playerid, COLOR_LIGHTRED, string); return 1; }
                        new gpscost = gps*150;
                        new playername[MAX_PLAYER_NAME];
                        GetPlayerName(playerid, playername, sizeof(playername));
                        if (PlayerInfo[playerid][pFaction] == 7)
                        {
                            if(GetPlayerCash(playerid) >= gpscost)
                            {
                                format(string, sizeof(string), "Ti-ai cumparat GPS performand de level %d pentru $%d.", gps, gpscost);
                                SendClientMessage(playerid, COLOR_GREEN, string);
                                GivePlayerCash(playerid, -gpscost);
                                VehicleInfo[vehicle][vGPS] = gps;
                                return 1;
                            }
                            else
                            {
                                SendClientMessage(playerid, COLOR_LIGHTRED, "Nu ai destui bani");
                                return 1;
                            }
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti membru LSAS.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_GRAD2, "Nu esti la sediu.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu te aflii intr-un vehicul.");
                    return 1;
                }
            }
        }
        return 1;
    }
    return 1;
}



// OnPlayerUseItem
forward OnPlayerUseItem(playerid,ItemName[]);
public OnPlayerUseItem(playerid,ItemName[])
{
	if(!PlayerHasItem(playerid,ItemName))return SendClientMessage(playerid,COLOR_GREY,"  You do not have that item.");
	if(!strcmp(ItemName,"(Clip) Desert Eagle",true))
	{
	    if(GetPlayerWeapon(playerid) == 24)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(Clip) Desert Eagle"))SafeGivePlayerWeapon(playerid, 24, 7);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Desert Eagle{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) Desert Eagle",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(Weapon) Desert Eagle"))
		{
			SafeGivePlayerWeapon(playerid, 24, 7);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Desert Eagle{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) Desert Eagle",1);
		}
	}
	if(!strcmp(ItemName,"(C) Desert Eagle",true))
	{
	    if(GetPlayerWeapon(playerid) == 24)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) Desert Eagle"))SafeGivePlayerWeapon(playerid, 24, 7);
			RemoveItem(playerid,"(C) Desert Eagle",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) Desert Eagle"))
		{
			SafeGivePlayerWeapon(playerid, 24, 7);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Desert Eagle{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Desert Eagle",1);
		}
	}
	if(!strcmp(ItemName,"(C) AK47",true))
	{
	    if(GetPlayerWeapon(playerid) == 30)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) AK47"))SafeGivePlayerWeapon(playerid, 30, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}AK47{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) AK47",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) AK47"))
		{
			SafeGivePlayerWeapon(playerid, 30, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}AK47{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) AK47",1);
		}
	}
	if(!strcmp(ItemName,"(C) Uzi",true))
	{
	    if(GetPlayerWeapon(playerid) == 28)
	    {
	        if(GetPlayerAmmo(playerid) > 19)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) Uzi"))SafeGivePlayerWeapon(playerid, 28, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Uzi{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Uzi",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) Uzi"))
		{
			SafeGivePlayerWeapon(playerid, 28, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Uzi{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Uzi",1);
		}
	}
	if(!strcmp(ItemName,"(C) Tec9",true))
	{
	    if(GetPlayerWeapon(playerid) == 32)
	    {
	        if(GetPlayerAmmo(playerid) > 19)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) Tec9"))SafeGivePlayerWeapon(playerid, 32, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Tec9{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Tec9",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) Tec9"))
		{
			SafeGivePlayerWeapon(playerid, 32, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Tec9{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Tec9",1);
		}
	}
	if(!strcmp(ItemName,"(C) M4A1",true))
	{
	    if(GetPlayerWeapon(playerid) == 31)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) M4A1"))SafeGivePlayerWeapon(playerid, 31, 50);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}M4A1{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) M4A1",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) M4A1"))
		{
			SafeGivePlayerWeapon(playerid, 31, 50);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}M4A1{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) M4A1",1);
			return 1;
		}
	}
	if(!strcmp(ItemName,"(C) M4A1",true))
	{
	    if(GetPlayerWeapon(playerid) == 31)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) M4A1"))SafeGivePlayerWeapon(playerid, 31, 50);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}M4A1{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) M4A1",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) M4A1"))
		{
			SafeGivePlayerWeapon(playerid, 31, 50);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}M4A1{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) M4A1",1);
			return 1;
		}
	}
	if(!strcmp(ItemName,"(C) Rifle",true))
	{
	    if(GetPlayerWeapon(playerid) == 33)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) Rifle"))SafeGivePlayerWeapon(playerid, 33, 10);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Rifle{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Rifle",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) Rifle"))
		{
			SafeGivePlayerWeapon(playerid, 33, 10);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Rifle{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Rifle",1);
		}
	}
	if(!strcmp(ItemName,"(C) SD Pistol",true))
	{
	    if(GetPlayerWeapon(playerid) == 23)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
			    SendClientMessage(playerid,COLOR_WHITE,">> You do have enough bullets, no need to reload.");
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) SD Pistol"))SafeGivePlayerWeapon(playerid, 23, 15);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}SD Pistol{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) SD Pistol",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) SD Pistol"))
		{
			SafeGivePlayerWeapon(playerid, 23, 15);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}SD Pistol{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) SD Pistol",1);
		}
	}
	if(!strcmp(ItemName,"(C) Shotgun",true))
	{
	    if(GetPlayerWeapon(playerid) == 23)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) Shotgun"))SafeGivePlayerWeapon(playerid, 25, 12);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Shotgun{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Shotgun",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) Shotgun"))
		{
			SafeGivePlayerWeapon(playerid, 25, 12);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Shotgun{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Shotgun",1);
		}
	}
	if(!strcmp(ItemName,"(C) MP5",true))
	{
	    if(GetPlayerWeapon(playerid) == 29)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) MP5"))SafeGivePlayerWeapon(playerid, 29, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}MP5{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) MP5",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) MP5"))
		{
			SafeGivePlayerWeapon(playerid, 29, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}MP5{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) MP5",1);
		}
	}
	if(!strcmp(ItemName,"(Clip) AK47",true))
	{
	    if(GetPlayerWeapon(playerid) == 30)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(Clip) AK47"))SafeGivePlayerWeapon(playerid, 30, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}AK47{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) AK47",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(Weapon) AK47"))
		{
			SafeGivePlayerWeapon(playerid, 30, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}AK47{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) AK47",1);
		}
	}
	if(!strcmp(ItemName,"(Clip) Uzi",true))
	{
	    if(GetPlayerWeapon(playerid) == 28)
	    {
	        if(GetPlayerAmmo(playerid) > 19)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(Clip) Uzi"))SafeGivePlayerWeapon(playerid, 28, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Uzi{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) Uzi",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(Weapon) Uzi"))
		{
			SafeGivePlayerWeapon(playerid, 28, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Uzi{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) Uzi",1);
		}
	}
	if(!strcmp(ItemName,"(Clip) Tec9",true))
	{
	    if(GetPlayerWeapon(playerid) == 32)
	    {
	        if(GetPlayerAmmo(playerid) > 19)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(Clip) Tec9"))SafeGivePlayerWeapon(playerid, 32, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Tec9{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) Tec9",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(Weapon) Tec9"))
		{
			SafeGivePlayerWeapon(playerid, 32, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Tec9{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) Tec9",1);
		}
	}
	if(!strcmp(ItemName,"(Clip) M4A1",true))
	{
	    if(GetPlayerWeapon(playerid) == 31)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(Clip) M4A1"))SafeGivePlayerWeapon(playerid, 31, 50);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}M4A1{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) M4A1",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(Weapon) M4A1"))
		{
			SafeGivePlayerWeapon(playerid, 31, 50);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}M4A1{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) M4A1",1);
			return 1;
		}
	}
	if(!strcmp(ItemName,"(Clip) Rifle",true))
	{
	    if(GetPlayerWeapon(playerid) == 33)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(Clip) Rifle"))SafeGivePlayerWeapon(playerid, 33, 10);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Rifle{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) Rifle",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(Weapon) Rifle"))
		{
			SafeGivePlayerWeapon(playerid, 33, 10);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Rifle{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) Rifle",1);
		}
	}
	if(!strcmp(ItemName,"(Clip) SD Pistol",true))
	{
	    if(GetPlayerWeapon(playerid) == 23)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(Clip) SD Pistol"))SafeGivePlayerWeapon(playerid, 23, 15);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}SD Pistol{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) SD Pistol",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(Weapon) SD Pistol"))
		{
			SafeGivePlayerWeapon(playerid, 23, 15);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}SD Pistol{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) SD Pistol",1);
		}
	}
	if(!strcmp(ItemName,"(Clip) Shotgun",true))
	{
	    if(GetPlayerWeapon(playerid) == 23)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(Clip) Shotgun"))SafeGivePlayerWeapon(playerid, 25, 12);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Shotgun{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) Shotgun",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(Weapon) Shotgun"))
		{
			SafeGivePlayerWeapon(playerid, 25, 12);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Shotgun{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) Shotgun",1);
		}
	}
	if(!strcmp(ItemName,"(Clip) MP5",true))
	{
	    if(GetPlayerWeapon(playerid) == 29)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(Clip) MP5"))SafeGivePlayerWeapon(playerid, 29, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}MP5{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) MP5",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) { ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0); }
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) { ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0); }
			return 1;
	    }
		if(PlayerHasItem(playerid,"(Weapon) MP5"))
		{
			SafeGivePlayerWeapon(playerid, 29, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}MP5{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(Clip) MP5",1);
		}
	}

	if(!strcmp(ItemName,"(Outfit) Black Glasses",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	       ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
    	if(PlayerInfo[playerid][pSunglass] == 0)
        {
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your glasses");
             // you are cool now
            PlayerInfo[playerid][pSunglass] = 1;
            ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
            SetPlayerAttachedObject(playerid,GLASSES,19022,2,0.1,0.04,0.0,60.0,85.0,25.0,1.0,1.0,1.0);
		}
        else
        {
        	PlayerInfo[playerid][pSunglass] = 0;
        	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        	RemovePlayerAttachedObject(playerid, GLASSES);
       		SendClientMessage(playerid,COLOR_GREY,"You took off your glasses");
		}
		return 1;
	}

	if(!strcmp(ItemName,"(Outfit) Silver Watch",true))
	{
    	if(PlayerInfo[playerid][pItem] == 0)
        {
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your Silver Watch");
             // you are cool now
            PlayerInfo[playerid][pItem] = 1;
            SetPlayerAttachedObject(playerid,HAND,19043,4,6,-0,-0,-0,190,120,  1.1,1.1,1.26);
		}
        else
        {
        	PlayerInfo[playerid][pItem] = 0;
        	RemovePlayerAttachedObject(playerid, HAND);
       		SendClientMessage(playerid,COLOR_GREY,"You removed your Silver Watch");
		}
		return 1;
	}

	if(!strcmp(ItemName,"(Item) Fishing Pole",true))
	{
    	if(PlayerInfo[playerid][pItem] == 0)
        {
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your Fishing Pole");
            PlayerInfo[playerid][pItem] = 1;
            SetPlayerAttachedObject(playerid,RIGHTHAND,18632,4,6,-0,-0.001,-0,170,1,1,1,1);
		} else {
        	PlayerInfo[playerid][pItem] = 0;
        	RemovePlayerAttachedObject(playerid, RIGHTHAND);
       		SendClientMessage(playerid,COLOR_GREY,"You removed your Fishing Pole");
		}
		return 1;
	}

	if(!strcmp(ItemName,"(Outfit) Yellow Sunglasses",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	       ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
    	if(PlayerInfo[playerid][pSunglass] == 0)
        {
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your glasses");
            PlayerInfo[playerid][pSunglass] = 1;
            ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
            SetPlayerAttachedObject(playerid,GLASSES,19007,2,0.1,0.04,0.0,60.0,85.0,25.0,1.0,1.0,1.0);
		} else {
        	PlayerInfo[playerid][pSunglass] = 0;
        	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        	RemovePlayerAttachedObject(playerid, GLASSES);
       		SendClientMessage(playerid,COLOR_GREY,"You took off your glasses");
		}
		return 1;
	}


	if(!strcmp(ItemName,"(Outfit) Red Sunglasses",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	       ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
    	if(PlayerInfo[playerid][pSunglass] == 0)
        {
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your glasses");
            PlayerInfo[playerid][pSunglass] = 1;
            ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
            SetPlayerAttachedObject(playerid,GLASSES,19006,2,0.1,0.04,0.0,60.0,85.0,25.0,1.0,1.0,1.0);
		} else {
        	PlayerInfo[playerid][pSunglass] = 0;
        	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        	RemovePlayerAttachedObject(playerid, GLASSES);
       		SendClientMessage(playerid,COLOR_GREY,"You took off your glasses");
		}
		return 1;
	}

	if(!strcmp(ItemName,"(Outfit) Red Helmet",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	    	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
    	if(PlayerInfo[playerid][pHelmet] == 0)
        {
	        new skin = GetPlayerSkin(playerid);
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your Helmet/Hat.");
            PlayerInfo[playerid][pHelmet] = 1;
			SetPlayerAttachedObject(playerid, HELMET, 18645, 2, HelmetPos[skin][0], HelmetPos[skin][1], HelmetPos[skin][2], HelmetPos[skin][3], HelmetPos[skin][4], HelmetPos[skin][5]);
		} else {
        	PlayerInfo[playerid][pHelmet] = 0;
        	RemovePlayerAttachedObject(playerid, HELMET);
       		SendClientMessage(playerid,COLOR_GREY,"You took off your Helmet/Hat.");
		}
		return 1;
	}

	if(!strcmp(ItemName,"(Outfit) Black Bandana",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	    	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
    	if(PlayerInfo[playerid][pHelmet] == 0)
        {
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your Helmet/Hat.");
            PlayerInfo[playerid][pHelmet] = 1;
            PlayerInfo[playerid][pBandana] = 1;
			SetPlayerAttachedObject(playerid,HELMET,18912,2,0.0,0.0,0.0,90.0,-180.0,90.0,1.0,1.0,1.0);
		} else {
        	PlayerInfo[playerid][pHelmet] = 0;
        	RemovePlayerAttachedObject(playerid, HELMET);
       	 	PlayerInfo[playerid][pBandana] = 0;
       		SendClientMessage(playerid,COLOR_GREY,"You took off your Helmet/Hat.");
		}
		return 1;
	}

	if(!strcmp(ItemName,"(Outfit) Blue Bandana",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	    	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
    	if(PlayerInfo[playerid][pHelmet] == 0)
        {
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your Helmet/Hat.");
            PlayerInfo[playerid][pHelmet] = 1;
            PlayerInfo[playerid][pBandana] = 2;
   			SetPlayerAttachedObject(playerid, HELMET, 18908,2,0.0,0.0,0.0,90.0,-180.0,90.0,1.0,1.0,1.0);
		} else {
        	PlayerInfo[playerid][pHelmet] = 0;
        	PlayerInfo[playerid][pBandana] = 0;
        	RemovePlayerAttachedObject(playerid, HELMET);
       		SendClientMessage(playerid,COLOR_GREY,"You took off your Helmet/Hat.");
		}
		return 1;
	}

	if(!strcmp(ItemName,"(P) Parrot",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	    	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
        if(IsPlayerAttachedObjectSlotUsed(playerid,WATCH)) RemovePlayerAttachedObject(playerid,2);
        else SetPlayerAttachedObject(playerid, WATCH,19079,4,-0.00,-0.02,-0.01,-1083.0,-16.0,187.0,1.03,0.88,1.00);
		return 1;
	}

	if(!strcmp(ItemName,"(Outfit) Green Helmet",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	    	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
    	if(PlayerInfo[playerid][pHelmet] == 0)
        {
	        new skin = GetPlayerSkin(playerid);
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your Helmet/Hat.");
            PlayerInfo[playerid][pHelmet] = 1;
			SetPlayerAttachedObject(playerid, HELMET, 18979, 2, HelmetPos[skin][0], HelmetPos[skin][1], HelmetPos[skin][2], HelmetPos[skin][3], HelmetPos[skin][4], HelmetPos[skin][5]);
		} else {
        	PlayerInfo[playerid][pHelmet] = 0;
        	RemovePlayerAttachedObject(playerid, HELMET);
       		SendClientMessage(playerid,COLOR_GREY,"You have taken off your Helmet/Hat.");
		}
		return 1;
	}

	if(!strcmp(ItemName,"(Outfit) Blue Helmet",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	    	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
    	if(PlayerInfo[playerid][pHelmet] == 0)
        {
	        new skin = GetPlayerSkin(playerid);
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your Helmet/Hat.");
            PlayerInfo[playerid][pHelmet] = 1;
			SetPlayerAttachedObject(playerid, HELMET, 18978, 2, HelmetPos[skin][0], HelmetPos[skin][1], HelmetPos[skin][2], HelmetPos[skin][3], HelmetPos[skin][4], HelmetPos[skin][5]);
		} else {
        	PlayerInfo[playerid][pHelmet] = 0;
        	RemovePlayerAttachedObject(playerid, HELMET);
       		SendClientMessage(playerid,COLOR_GREY,"You have taken off your Helmet/Hat.");
		}
		return 1;
	}

	if(!strcmp(ItemName,"(Outfit) Red Striped Helmet",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	    	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
    	if(PlayerInfo[playerid][pHelmet] == 0)
        {
	        new skin = GetPlayerSkin(playerid);
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your Helmet/Hat.");
            PlayerInfo[playerid][pHelmet] = 1;
			SetPlayerAttachedObject(playerid, HELMET, 18977, 2, HelmetPos[skin][0], HelmetPos[skin][1], HelmetPos[skin][2], HelmetPos[skin][3], HelmetPos[skin][4], HelmetPos[skin][5]);
		} else {
        	PlayerInfo[playerid][pHelmet] = 0;
        	RemovePlayerAttachedObject(playerid, HELMET);
       		SendClientMessage(playerid,COLOR_GREY,"You have taken off your Helmet/Hat.");
		}
		return 1;
	}

	if(!strcmp(ItemName,"(Outfit) Motocross Helmet",true))
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
        {
	    	ApplyAnimation(playerid,"RIOT","RIOT_shout",2.0,0,0,0,0,0);
        }
    	if(PlayerInfo[playerid][pHelmet] == 0)
        {
	        new skin = GetPlayerSkin(playerid);
        	SendClientMessage(playerid,COLOR_GREY, "You have equipped your Helmet/Hat.");
            PlayerInfo[playerid][pHelmet] = 1;
			SetPlayerAttachedObject(playerid, HELMET, 18976, 2, HelmetPos[skin][0], HelmetPos[skin][1], HelmetPos[skin][2], HelmetPos[skin][3], HelmetPos[skin][4], HelmetPos[skin][5]);
		} else {
        	PlayerInfo[playerid][pHelmet] = 0;
        	RemovePlayerAttachedObject(playerid, HELMET);
       		SendClientMessage(playerid,COLOR_GREY,"You have taken off your Helmet/Hat.");

		}
		return 1;
	}

	if(!strcmp(ItemName,"(Item)Bomb",true))
	{
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if(RemoveItem(playerid,"(Item)Bomb",1))ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,1000);

		new Float:bx[MAX_PLAYERS], Float:by[MAX_PLAYERS], Float:bz[MAX_PLAYERS];

		TextDrawShowForPlayer(playerid, Meter1[playerid]);
		TextDrawShowForPlayer(playerid, Meter2[playerid]);
		TextDrawShowForPlayer(playerid, Meter3[playerid]);
		UpdateMeterTimer[playerid] = SetTimerEx("UpdateMeter", 500, 1, "i", playerid);

		GetPlayerPos(playerid, bx[playerid], by[playerid], bz[playerid]);
		C4[playerid] = CreateObject(1252, bx[playerid], by[playerid], bz[playerid]-1, -87.6624853592, 0.000000, 0.000000);
		Planted[playerid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "> Bomb planted - /detonatebomb to detonate it.");
		return 1;
	}

	if(!strcmp(ItemName,"(Item) Bomb",true))
	{
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { return 1; }
        if(RemoveItem(playerid,"(Item) Bomb",1))ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,0,0,0,0,1000);

		new Float:bx[MAX_PLAYERS], Float:by[MAX_PLAYERS], Float:bz[MAX_PLAYERS];

		TextDrawShowForPlayer(playerid, Meter1[playerid]);
		TextDrawShowForPlayer(playerid, Meter2[playerid]);
		TextDrawShowForPlayer(playerid, Meter3[playerid]);
		UpdateMeterTimer[playerid] = SetTimerEx("UpdateMeter", 500, 1, "i", playerid);

		GetPlayerPos(playerid, bx[playerid], by[playerid], bz[playerid]);
		C4[playerid] = CreateObject(1252, bx[playerid], by[playerid], bz[playerid]-1, -87.6624853592, 0.000000, 0.000000);
		Planted[playerid] = 1;
		SendClientMessage(playerid, COLOR_WHITE, "> Bomb planted - /detonatebomb to detonate it.");
		return 1;
	}

	if(!strcmp(ItemName,"(Drug) Marijuana",true))
	{
		if(RemoveItem(playerid,"(D) Marijuana",1))ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 2.0, 0, 0, 0, 0, 0);
		PlayerInfo[playerid][StonedEffect] = 450;
		SetTimerEx("MakeHigh", 6000, 0, "d", playerid);
		JustUsedDrug[playerid] = 1;
		SetTimerEx("DrugReset", 3000, false, "i", playerid);
		SendClientMessage(playerid,COLOR_WHITE,">> You have used one gram of your weed.");
		SaveInventoryMySQL(playerid);
		return 1;
	}

	if(!strcmp(ItemName,"(D) Marijuana",true))
	{
		if(RemoveItem(playerid,"(D) Marijuana",1))ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 2.0, 0, 0, 0, 0, 0);
		PlayerInfo[playerid][StonedEffect] = 450;
		SetTimerEx("MakeHigh", 6000, 0, "d", playerid);
		JustUsedDrug[playerid] = 1;
		SetTimerEx("DrugReset", 3000, false, "i", playerid);
		SendClientMessage(playerid,COLOR_WHITE,">> You have used one gram of your weed.");
		SaveInventoryMySQL(playerid);
		return 1;
	}

	if(!strcmp(ItemName,"(D) Cocaine",true))
	{
		if(RemoveItem(playerid,"(D) Cocaine",1))ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 2.0, 0, 0, 0, 0, 0);
		PlayerInfo[playerid][StonedEffect] = 560;
		SetTimerEx("MakeHigh", 6000, 0, "d", playerid);
		JustUsedDrug[playerid] = 1;
		SetTimerEx("DrugReset", 3000, false, "i", playerid);
		SendClientMessage(playerid,COLOR_WHITE,">> You have used one gram of your cocaine.");
		SaveInventoryMySQL(playerid);
		return 1;
	}

	if(!strcmp(ItemName,"(D) Amphetamine",true))
	{
		if(RemoveItem(playerid,"(D) Amphetamine",1))ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 2.0, 0, 0, 0, 0, 0);
		PlayerInfo[playerid][StonedEffect] = 500;
		SetTimerEx("MakeHigh", 6000, 0, "d", playerid);
		JustUsedDrug[playerid] = 1;
		SetTimerEx("DrugReset", 3000, false, "i", playerid);
		SendClientMessage(playerid,COLOR_WHITE,">> You have used one gram of your amphetamine.");
		SaveInventoryMySQL(playerid);
		return 1;
	}

	if(!strcmp(ItemName,"(D) Ecstasy",true))
	{
		if(RemoveItem(playerid,"(D) Ecstasy",1))ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 2.0, 0, 0, 0, 0, 0);
		PlayerInfo[playerid][StonedEffect] = 450;
		SetTimerEx("MakeHigh", 6000, 0, "d", playerid);
		JustUsedDrug[playerid] = 1;
		SetTimerEx("DrugReset", 3000, false, "i", playerid);
		SendClientMessage(playerid,COLOR_WHITE,">> You have used one gram of your ecstasy.");
		SaveInventoryMySQL(playerid);
		return 1;
	}

	if(!strcmp(ItemName,"(C) Desert Eagle LSPD",true))
	{
	    if(GetPlayerWeapon(playerid) == 24)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
			    SendClientMessage(playerid,COLOR_WHITE,">> You do have enough bullets, no need to reload.");
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) Desert Eagle LSPD"))SafeGivePlayerWeapon(playerid, 24, 7);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Desert Eagle{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Desert Eagle LSPD",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
			    ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0);
			}
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
			{
			    ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0);
			}
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) Desert Eagle LSPD"))
		{
			if(RemoveItem(playerid,"(W) Desert Eagle LSPD",1))SafeGivePlayerWeapon(playerid, 24, 7);
			else SendClientMessage(playerid,COLOR_GREY,"You do not have the correct weapon for this ammo.");
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Desert Eagle{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Desert Eagle LSPD",1);
		}
		else SendClientMessage(playerid,COLOR_GREY," You do not have the required weapon for this clip.");
	}
	if(!strcmp(ItemName,"(C) Sniper LSPD",true))
	{
	    if(GetPlayerWeapon(playerid) == 34)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
			    SendClientMessage(playerid,COLOR_WHITE,">> You do have enough bullets, no need to reload.");
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) Sniper LSPD"))SafeGivePlayerWeapon(playerid, 34, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Sniper{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Sniper LSPD",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
			    ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0);
			}
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
			{
			    ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0);
			}
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) Sniper LSPD"))
		{
			if(RemoveItem(playerid,"(W) Sniper LSPD",1))SafeGivePlayerWeapon(playerid, 34, 30);
			else SendClientMessage(playerid,COLOR_GREY,"You do not have the correct weapon for this ammo.");
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Sniper{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Sniper LSPD",1);
		}
		else SendClientMessage(playerid,COLOR_GREY," You do not have the required weapon for this clip.");
	}
	if(!strcmp(ItemName,"(C) M4A1 LSPD",true))
	{
	    if(GetPlayerWeapon(playerid) == 31)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
			    SendClientMessage(playerid,COLOR_WHITE,">> You do have enough bullets, no need to reload.");
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) M4A1 LSPD"))SafeGivePlayerWeapon(playerid, 31, 50);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}M4A1{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) M4A1 LSPD",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
			    ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0);
			}
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
			{
			    ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0);
			}
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) M4A1 LSPD"))
		{
			if(RemoveItem(playerid,"(W) M4A1 LSPD",1))SafeGivePlayerWeapon(playerid, 31, 50);
			else SendClientMessage(playerid,COLOR_GREY,"You do not have the correct weapon for this ammo.");
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}M4A1{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) M4A1 LSPD",1);
			return 1;
		}
		else SendClientMessage(playerid,COLOR_GREY," You do not have the required weapon for this clip.");
	}

	if(!strcmp(ItemName,"(C) SD Pistol LSPD",true))
	{
	    if(GetPlayerWeapon(playerid) == 23)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) SD Pistol LSPD"))SafeGivePlayerWeapon(playerid, 23, 15);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}SD Pistol{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) SD Pistol LSPD",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
			    ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0);
			}
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
			{
			    ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0);
			}
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) SD Pistol LSPD"))
		{
			if(RemoveItem(playerid,"(W) SD Pistol LSPD",1))SafeGivePlayerWeapon(playerid, 23, 15);
			else SendClientMessage(playerid,COLOR_GREY,"You do not have the correct weapon for this ammo.");
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}SD Pistol{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) SD Pistol LSPD",1);
		}
	}

	if(!strcmp(ItemName,"(C) Shotgun LSPD",true))
	{
	    if(GetPlayerWeapon(playerid) == 23)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) Shotgun LSPD"))SafeGivePlayerWeapon(playerid, 25, 12);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Shotgun{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Shotgun LSPD",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
			    ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0);
			}
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
			{
			    ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0);
			}
			return 1;
	    }
		if(PlayerHasItem(playerid,"(W) Shotgun LSPD"))
		{
			if(RemoveItem(playerid,"(W) Shotgun LSPD",1))SafeGivePlayerWeapon(playerid, 25, 12);
			else SendClientMessage(playerid,COLOR_GREY,"You do not have the correct weapon for this ammo.");
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Shotgun{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) Shotgun LSPD",1);
		}
		else SendClientMessage(playerid,COLOR_GREY," You do not have the required weapon for this clip.");
	}

	if(!strcmp(ItemName,"(C) MP5 LSPD",true))
	{
	    if(GetPlayerWeapon(playerid) == 29)
	    {
	        if(GetPlayerAmmo(playerid) > 3)
			{
				return 1;
			}
			if(PlayerHasItem(playerid,"(C) MP5 LSPD"))SafeGivePlayerWeapon(playerid, 29, 30);
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}MP5{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) MP5 LSPD",1);
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
			    ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0);
			}
			if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
			{
			    ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0);
			}
			return 1;
	    }

		if(PlayerHasItem(playerid,"(W) MP5 LSPD"))
		{
			if(RemoveItem(playerid,"(W) MP5 LSPD",1))SafeGivePlayerWeapon(playerid, 29, 30);
			else SendClientMessage(playerid,COLOR_GREY,"You do not have the correct weapon for this ammo.");
			SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}MP5{FFFFFF} clip, its now loaded.");
			RemoveItem(playerid,"(C) MP5 LSPD",1);
		}
		else SendClientMessage(playerid,COLOR_GREY," You do not have the required weapon for this clip.");
	}
	SaveInventoryMySQL(playerid);
	return 1;
}

// LoadLocations

forward LoadLocations();

public LoadLocations()
{
	for(new i = 0; i < sizeof(Houses); i++)
	{
		Houses[i][EnterX] = 1472.3542;
		Houses[i][EnterY] = -1084.6069;
		Houses[i][EnterZ] = 122.0994;
	}
	for(new b = 0; b < sizeof(Businesses); b++)
	{
		Businesses[b][EnterX] = 1472.3542;
		Businesses[b][EnterY] = -1084.6069;
		Businesses[b][EnterZ] = 122.0994;
	}
	for(new c = 0; c < sizeof(Building); c++)
	{
		Building[c][EnterX] = 1472.3542;
		Building[c][EnterY] = -1084.6069;
		Building[c][EnterZ] = 122.0994;
	}
	// Arms dealer job
    ArmsDealerJob[X] = 2350.1433;
	ArmsDealerJob[Y] = -647.3157;
	ArmsDealerJob[Z] = 128.0547;
	CreateDynamicPickup(1239, 1, ArmsDealerJob[X], ArmsDealerJob[Y], ArmsDealerJob[Z], -1, -1, -1, 25.0);
	// Drug job buy
	DrugJob[BuyDrugsX] = 1688.8424;
	DrugJob[BuyDrugsY] = -1974.9429;
	DrugJob[BuyDrugsZ] = 8.8255;
	CreateDynamicPickup(1239, 1, DrugJob[BuyDrugsX], DrugJob[BuyDrugsY], DrugJob[BuyDrugsZ], -1, -1, -1, 25.0);
	// Drug job dropoff
	DrugJob[DeliverX] = 2779.7112;
	DrugJob[DeliverY] = -1416.3362;
	DrugJob[DeliverZ] = 24.7453;
	CreateDynamicPickup(1239, 1, DrugJob[DeliverX], DrugJob[DeliverY], DrugJob[DeliverZ], -1, -1, -1, 25.0);
	// Drug job take job position
	DrugJob[TakeJobX] = 1420.1538;
	DrugJob[TakeJobY] = -1355.6440;
	DrugJob[TakeJobZ] = 13.5640;
	CreateDynamicPickup(1239, 1, DrugJob[TakeJobX], DrugJob[TakeJobY], DrugJob[TakeJobZ], -1, -1, -1, 25.0);
	// Medic Duty position
	MedicDutyPosition[X] = -196.8563;
	MedicDutyPosition[Y] = -1748.7970;
	MedicDutyPosition[Z] = 675.7687;
	// Products Job
	ProductsSellerJob[BuyProductsX] = 2182.5217; 
	ProductsSellerJob[BuyProductsY] = -2260.0022;
	ProductsSellerJob[BuyProductsZ] = 13.3908;
	CreateDynamicPickup(1239, 1, ProductsSellerJob[BuyProductsX], ProductsSellerJob[BuyProductsY], ProductsSellerJob[BuyProductsZ], -1, -1, -1, 25.0);
	// Sheriff Duty pos
	PoliceDutyPosition[X] = -1137.1680;
	PoliceDutyPosition[Y] = 2908.8301;
	PoliceDutyPosition[Z] = 598.2974;
	// /bank position
    BankPosition[X] = 1433.1531;
    BankPosition[Y] = -979.6608;
    BankPosition[Z] = 996.0681;
	printf("Pozitiile job-urilor s-au incarcat.");

	// /buy drug position
	CreateDynamicPickup(1239, 1, -1110.8562,-1620.9198,76.2005, -1, -1, -1, 25.0);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{

	new veh = GetPlayerVehicleID(vehicleid);
	Delete3DTextLabel(vehicle_callsign[veh]);
   	veicolo_callsign_status[veh] = 0;
	KillTimer(MatarMotor[killerid]);
    if(VehicleInfo[vehicleid][vNeon] != 0) { DestroyObject(VehicleInfo[vehicleid][vNeon2]); DestroyObject(VehicleInfo[vehicleid][vNeon]); VehicleInfo[vehicleid][vNeon2] = 0; VehicleInfo[vehicleid][vNeon] = 0; }
	for(new i=0; i<MAX_PLAYERS; i++) { if(IsPlayerConnected(i)) { if(HireCar[i] == vehicleid) { HireCar[i] = 999; } } }
	if(vehicleid <= IBPCARS) { return 1; }
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
        new plname[MAX_PLAYER_NAME];
        GetPlayerName(i, plname, sizeof(plname));
        if(strcmp(plname, VehicleInfo[vehicleid][vOwner], true) == 0)
		{
		    if(IsPlayerConnected(i))
		    {
	            if(VehicleInfo[vehicleid][vOwned])
				{
					new string[128];
	                if(VehicleInfo[vehicleid][vInsurances] >=  1)
					{

	                    VehicleInfo[vehicleid][vInsurances]--;
	                    VehicleInfo[vehicleid][vDestroys] += 1;
						VehicleInfo[vehicleid][vTrunk1] = 0;
						VehicleInfo[vehicleid][vTrunka1] = 0;
						VehicleInfo[vehicleid][vTrunk2] = 0;
						VehicleInfo[vehicleid][vTrunka2] = 0;
						VehicleInfo[vehicleid][vTrunk3] = 0;
						VehicleInfo[vehicleid][vTrunka3] = 0;
						VehicleInfo[vehicleid][vTrunk4] = 0;
						VehicleInfo[vehicleid][vTrunka4] = 0;
						VehicleInfo[vehicleid][vEngineLife] -= 25;
	                    if(PlayerInfo[i][pCarKey] == vehicleid || PlayerInfo[i][pCarKey2] == vehicleid)
						{
			                format(string, sizeof(string), "Masina %s s-a distrus, numar total de distrugeri %d",VehicleNames[GetVehicleModel(vehicleid)-400],VehicleInfo[vehicleid][vDestroys]);
			                SendClientMessage(i, COLOR_LIGHTRED, string);
		                    format(string, sizeof(string), "Mai ai %d asigurari.",VehicleInfo[vehicleid][vInsurances]);
		                    SendClientMessage(i, COLOR_LIGHTRED, string);
	                    }
						if(PlayerInfo[i][pCarKey] == vehicleid)
						{
							SpawnedCar[i][0] = 0;
						}
						if(PlayerInfo[i][pCarKey2] == vehicleid)
						{
							SpawnedCar[i][1] = 0;
						}
	                    new file[256];
	                    format(file, sizeof(file), "IBP/Vehicles/%s.%s.cfg", plname, VehicleNames[GetVehicleModel(vehicleid)-400]);
	                    if(dini_Exists(file))
						{
	                        dini_IntSet(file, "Destroys", VehicleInfo[vehicleid][vDestroys]);
	                        dini_IntSet(file, "Insurances", VehicleInfo[vehicleid][vInsurances]);
	                    }
	                    SaveVehiclesViaDesc(VehicleInfo[vehicleid][vDescription],vehicleid);
                     	DestroyVehicle(vehicleid);
                     	PlayerInfo[i][pCarKey] = 0;
	                    return 1;
	                }
	                if(VehicleInfo[vehicleid][vInsurances] ==  0)
					{
						new y, m, d,h,mi,s;
						getdate(y,m,d);
						gettime(h,mi,s);
	                    if(vehicleid == PlayerInfo[i][pCarKey] || PlayerInfo[i][pCarKey] == vehicleid)
					    { format(string, sizeof(string), "Masina ta %s a fost distrusa, nu va fi inapoiata cat timp nu ai avut asigurari.",VehicleNames[GetVehicleModel(vehicleid)-400]); SendClientMessage(i, COLOR_LIGHTRED, string); }
		                new plnamer[MAX_PLAYER_NAME];
		                GetPlayerName(i, plnamer, sizeof(plnamer));
	                    if(IsPlayerConnected(i))
	                    {
	                    	new vstring[128];
							format(vstring, sizeof(vstring), "(%d/%d/%d)[%d:%d:%d] Masina %s a fost distrusa ( fara asigurari )",d,m,y,h,mi,s,VehicleInfo[vehicleid][vDescription]);
							ScrapLog(vstring);
						}
		                if(VehicleInfo[vehicleid][vCredit] != 0)
		                { PlayerInfo[i][pCarCredit] = 0; }
	                    if(strcmp(plnamer, VehicleInfo[vehicleid][vOwner], true) == 0)
						{
	                        format(string, sizeof(string), "IBP/Vehicles/%s.%s.cfg", plnamer, VehicleNames[GetVehicleModel(vehicleid)-400]);
	                        new str[128];
	                        new String[128];
							format(str, sizeof(str), "%s.%s", plnamer, VehicleNames[GetVehicleModel(vehicleid)-400]);
	                        if(strfind(str, PlayerVehicle[i][pVeh1], true) == 0)
							{
	                            strmid(PlayerVehicle[i][pVeh1], "None", 0, strlen("None"), 255);
	                            PlayerInfo[i][pCarKey] = 0;
						    	format( String, sizeof( String ), "UPDATE `Accounts` SET `V1` = 'None' WHERE `Username` = '%s'", VehicleInfo[vehicleid][vOwner] );
						    	mysql_query(String);
						    	printf("Query: %s",String);
	                            fremove(string);
	                            DestroyVehicle(vehicleid);
	                            return 1;
	                        }
	                        if(strfind(str, PlayerVehicle[i][pVeh2], true) == 0)
							{
	                            strmid(PlayerVehicle[i][pVeh2], "None", 0, strlen("None"), 255);
	                            PlayerInfo[i][pCarKey] = 0;
						    	format( String, sizeof( String ), "UPDATE `Accounts` SET `V2` = 'None' WHERE `Username` = '%s'", VehicleInfo[vehicleid][vOwner] );
						    	mysql_query(String);
						    	printf("Query: %s",String);
	                            fremove(string);
	                            DestroyVehicle(vehicleid);
	                            return 1;
	                        }
	                        if(strfind(str, PlayerVehicle[i][pVeh3], true) == 0)
							{
	                            strmid(PlayerVehicle[i][pVeh3], "None", 0, strlen("None"), 255);
	                            PlayerInfo[i][pCarKey] = 0;
						    	format( String, sizeof( String ), "UPDATE `Accounts` SET `V3` = 'None' WHERE `Username` = '%s'", VehicleInfo[vehicleid][vOwner] );
						    	mysql_query(String);
						    	printf("Query: %s",String);
	                            fremove(string);
	                            DestroyVehicle(vehicleid);
	                            return 1;
	                        }
	                        if(strfind(str, PlayerVehicle[i][pVeh4], true) == 0)
							{
	                            strmid(PlayerVehicle[i][pVeh4], "None", 0, strlen("None"), 255);
	                            PlayerInfo[i][pCarKey] = 0;
						    	format( String, sizeof( String ), "UPDATE `Accounts` SET `V4` = 'None' WHERE `Username` = '%s'", VehicleInfo[vehicleid][vOwner] );
						    	mysql_query(String);
						    	printf("Query: %s",String);
	                            fremove(string);
	                            DestroyVehicle(vehicleid);
	                            return 1;
	                        }
	                        if(strfind(str, PlayerVehicle[i][pVeh5], true) == 0)
							{
	                            strmid(PlayerVehicle[i][pVeh5], "None", 0, strlen("None"), 255);
	                            PlayerInfo[i][pCarKey] = 0;
						    	format( String, sizeof( String ), "UPDATE `Accounts` SET `V5` = 'None' WHERE `Username` = '%s'", VehicleInfo[vehicleid][vOwner] );
						    	mysql_query(String);
						    	printf("Query: %s",String);
	                            fremove(string);
	                            DestroyVehicle(vehicleid);
	                            return 1;
	                        }
	                    }
	                }
	                return 1;
	            }
			}
        }
    }
	return 1;
}
public OnVehicleSpawn(vehicleid)
{

    arecallsign[vehicleid] = 0;
    VehicleInfo[vehicleid][vGear] = 1;
    if(vehicleid <= IBPCARS){ VehicleInfo[vehicleid][vEngineLife] = 100; }
	if(vehicleid > IBPCARS) { LoadComp(vehicleid); }
    if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
	{
        GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
        SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	    EngineStatus[vehicleid] = 1;
	} else {
        GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
        SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective );
		EngineStatus[vehicleid] = 0;
	}
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	foreach(Player, i)
	{
	    if(Spectating[i] == 1 && gSpectateID[i] == playerid)
	    {
	        SetPlayerInterior(i, newinteriorid);
	        SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
		}
	}
}
/*
public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(!IsPlayerSpawned(playerid)) return 1;
	if(!IsValidDynamicArea(areaid)) return 1;
	new area_data[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, area_data);
	if(!area_data[0]) return 1;
	LastGridID[playerid] = area_data[1];


	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    if(!IsPlayerSpawned(playerid)) return 1;
    if(!IsValidDynamicArea(areaid)) return 1;
    new area_data[2];
	Streamer_GetArrayData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID, area_data);
	if(!area_data[0]) return 1;
	LastGridID[playerid] = -1;
	return 1;
}

forward UpdateTimes();
public UpdateTimes()
{
	for(new i; i <= GetPlayerPoolSize(); ++i)
	{
	    if(!IsPlayerConnected(i)) continue;
	    if(!IsPlayerSpawned(i)) continue;
	    if(LastGridID[i] == -1) continue;
	    if(GetPlayerInterior(i) > 0) continue;
		if(!IsPlayerInAnyDynamicArea(i)) continue;
		TimeSpent[i][ LastGridID[i] ]++;

		if(TimeSpent[i][ LastGridID[i] ] <= UNLOCK_TIME)
		{
			if(TimeSpent[i][ LastGridID[i] ] == floatround(UNLOCK_TIME / 2)) {
			    GangZoneShowForPlayer(i, ZoneID[ LastGridID[i] ], 0x000000DD);

			}else if(TimeSpent[i][ LastGridID[i] ] == UNLOCK_TIME) {
			    GangZoneStopFlashForPlayer(i, ZoneID[ LastGridID[i] ]);
			    GangZoneHideForPlayer(i, ZoneID[ LastGridID[i] ]);

				SaveTimes(i);
			}else if((UNLOCK_TIME - TimeSpent[i][ LastGridID[i] ]) < 5) {
			    GangZoneFlashForPlayer(i, ZoneID[ LastGridID[i] ], 0x00000000);
			}
		}
	}

	return 1;
}

forward LoadTimes(playerid, name[], value[]);
public LoadTimes(playerid, name[], value[])
{
	new key[24];
	for(new i; i < MAX_GRID; ++i)
	{
		format(key, sizeof(key), "SecondsSpent_%d", i);
		INI_Int(key, TimeSpent[playerid][i]);
	}

	return 1;
}
*/
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	switch(GetPlayerState(playerid))
	{
        case PLAYER_STATE_DRIVER:
		{
            MatarMotor[playerid] = SetTimerEx("MotorRoto", 100, true, "ii", playerid, GetPlayerVehicleID(playerid)); //Creamos el SetTimerEx obteniendo el Id del player y vehiculos Correspondiente.
        }
        case PLAYER_STATE_ONFOOT:
		{
            KillTimer(MatarMotor[playerid]); //We killed the Corresponding SetTimer.
        }
    }
    
/*    // ======================== SPEEDOMETER ===============

    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{


	    TextDrawShowForPlayer(playerid, bg);
		TextDrawShowForPlayer(playerid, barsus);
		TextDrawShowForPlayer(playerid, vitezakm);
	    TextDrawShowForPlayer(playerid, viteza);
		TextDrawShowForPlayer(playerid, tipmasina);

	}
	else if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    TextDrawHideForPlayer(playerid, bg);
		TextDrawHideForPlayer(playerid, barsus);
		TextDrawHideForPlayer(playerid, vitezakm);
		TextDrawHideForPlayer(playerid, tipmasina);
		TextDrawHideForPlayer(playerid, viteza);

	}

*/    // ==================================================
    if(oldstate == PLAYER_STATE_PASSENGER && newstate == PLAYER_STATE_ONFOOT)
    {
        if(GetPVarInt( playerid, "CAMERAActive" ) == 1)
                {
            CAMERAOFF( playerid );
                }
    }
	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    foreach(Player, i)
	    {
	        if(Spectating[i] == 1 && gSpectateID[i]==playerid)
	        {
	            gSpectateType[playerid] = ADMIN_SPEC_TYPE_VEHICLE;
				PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
				SetPlayerInterior(i, GetPlayerInterior(playerid));
				SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			}
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    foreach(Player, i)
	    {
	        if(Spectating[i] == 1 && gSpectateID[i]==playerid)
	        {
	            gSpectateType[playerid] = ADMIN_SPEC_TYPE_PLAYER;
				PlayerSpectatePlayer(i, playerid);
				SetPlayerInterior(i, GetPlayerInterior(playerid));
				SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(playerid));
			}
		}
	}
    new string[128];
	 if(newstate == PLAYER_STATE_DRIVER)
	{
	    gLastCar[playerid] = GetPlayerVehicleID(playerid);
		SetPlayerArmedWeapon(playerid, 0);
		if(EngineStatus[GetPlayerVehicleID(playerid)] == 0 && !IsAdonatebike(GetPlayerVehicleID(playerid))) { SendClientMessage(playerid, COLOR_GREEN, "Motorul masinii tale nu este pornit. (/engine)"); }
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 596 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 597 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 598 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 599) { PlayerInfo[playerid][pShotgun] = 1; }
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 427) { PlayerInfo[playerid][pGotArmour] = 1; }
	 	if(PlayerInfo[playerid][pCarLic] == 0 || PlayerInfo[playerid][pCarLic] == 2 && !IsAdonatebike(GetPlayerVehicleID(playerid)))
		{
			if (DMVTest[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Conduci fara permis de conducere. Ai grija la politie.");
			}
		}
		if(DynamicCars[GetPlayerVehicleID(playerid)][CarType] == 2) {
			if (HireCar[playerid] != GetPlayerVehicleID(playerid)) {
				TogglePlayerControllable(playerid, 0);
				
				format(string, sizeof(string), "Poti inchiria acest vehicul pentru $150\nAdu-ti aminte cand numai ai nevoie de masina tasteaza /unrentcar");
				ShowPlayerDialog(playerid,4553,DIALOG_STYLE_MSGBOX,"Rent Car Company Los Santos",string,"Rent","Exit");
			}
		} 
		if(DynamicCars[GetPlayerVehicleID(playerid)][CarType] == 69) {
		    if(PlayerInfo[playerid][pCarLic] == 0)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Bine ai venit tasteaza /takedrivingtest pentru a da licenta de condus.");
			}
			else
			{
			    RemoveDriverFromVehicle(playerid);
			}
		}
		if(DynamicCars[GetPlayerVehicleID(playerid)][CarType] == 10)
		{
			if(PlayerInfo[playerid][pJob] == 10)
			{
				if(Sweep[playerid] == 0)
				{
					if (PlayerInfo[playerid][pCanJob] == 10)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Asteapta pana cand vei primi {D00000}salariul{FFFFFF}, pentru a curata strazile.");
						RemoveDriverFromVehicle(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Tasteaza {D00000}/startsweep{FFFFFF} pentru a incepe curatarea strazilor.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nu detii acest {D00000}job{FFFFFF}.");
				RemoveDriverFromVehicle(playerid);
			}
		}
		if(DynamicCars[GetPlayerVehicleID(playerid)][CarType] == 14)
		{
			if(PlayerInfo[playerid][pJob] == 14)
			{
				if(Mobilier[playerid] == 0)
				{
					if (PlayerInfo[playerid][pCanJob] == 14)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Asteapta pana cand vei primi {D00000}salariul{FFFFFF}, pentru a livra mobilier.");
						RemoveDriverFromVehicle(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Tasteaza {D00000}/startdelivery{FFFFFF} pentru a incepe livrarea mobilier-ului.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nu detii acest {D00000}job{FFFFFF}.");
				RemoveDriverFromVehicle(playerid);
			}
		}
		if(DynamicCars[GetPlayerVehicleID(playerid)][CarType] == 11)
		{
			if(PlayerInfo[playerid][pJob] == 11)
			{
				if(Pizza[playerid] == 0)
				{
					if (PlayerInfo[playerid][pCanJob] == 10)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Asteapta pana cand vei primi {D00000}salariul{FFFFFF}, pentru a livra pizza.");
						RemoveDriverFromVehicle(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Tasteaza {D00000}/startpizza{FFFFFF} pentru a livra pizza.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nu detii acest {D00000}job{FFFFFF}.");
				RemoveDriverFromVehicle(playerid);
			}
		}
		if(DynamicCars[GetPlayerVehicleID(playerid)][CarType] == 12)
		{
			if(PlayerInfo[playerid][pJob] == 12)
			{
				if(Hay[playerid] == 0)
				{
					if (PlayerInfo[playerid][pCanJob] == 10)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Asteapta pana cand vei primi {D00000}salariul{FFFFFF}, pentru a livra baloti.");
						RemoveDriverFromVehicle(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Tasteaza {D00000}/starthay{FFFFFF} pentru a livra baloti.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nu detii acest {D00000}job{FFFFFF}.");
				RemoveDriverFromVehicle(playerid);
			}
		}
		if(DynamicCars[GetPlayerVehicleID(playerid)][CarType] == 66)
		{
			if(PlayerInfo[playerid][pJob] == 4)
			{
                if(FarmerPickup[playerid][0] <= 22)
				{
					if (PlayerInfo[playerid][pCanJob] == 10)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Asteapta pana cand vei primi {D00000}salariul{FFFFFF}, pentru a iti face job-ul.");
						RemoveDriverFromVehicle(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Tasteaza {D00000}/farm harvest{FFFFFF} pentru a-ti face job-ul.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nu detii acest {D00000}job{FFFFFF}.");
				RemoveDriverFromVehicle(playerid);
			}
		}
		if(DynamicCars[GetPlayerVehicleID(playerid)][CarType] == 9)
		{
			if(PlayerInfo[playerid][pJob] == 9)
			{
				if (PlayerInfo[playerid][pCanJob] == 10)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Asteapta pana cand vei primi {D00000}salariul{FFFFFF}, pentru a putea livra.");
					RemoveDriverFromVehicle(playerid);
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Tasteaza {D00000}/truck{FFFFFF} pentru a incepe truck.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nu detii acest {D00000}job{FFFFFF}.");
				RemoveDriverFromVehicle(playerid);
			}
		}
		if(GetPlayerVehicleID(playerid) > IBPCARS){
			if(PlayerInfo[playerid][pCarKey] == GetPlayerVehicleID(playerid)) {
				if(VehicleInfo[GetPlayerVehicleID(playerid)][vTicket] != 0) {
					format(string, sizeof(string), "You have a unpaid parking ticket (%d$), pay it with /v payticket.", VehicleInfo[GetPlayerVehicleID(playerid)][vTicket]);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
				}
				if(VehicleInfo[GetPlayerVehicleID(playerid)][vPlate] < 500) {
				    SendClientMessage(playerid, COLOR_LIGHTRED, "Your vehicle is not registered yet, head to the dealership and register it (/v register)");
				}
			}
		}
	}
	else if(newstate == PLAYER_STATE_PASSENGER)
	{
    	if(GetPlayerWeapon(playerid) == 24) { SetPlayerArmedWeapon(playerid, 0); }
   		for(new i = 0; i < MAX_PLAYERS; i++)
    	{
    		if(IsPlayerConnected(i))
     		{
      			if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
        		{
	               	if(GetPlayerMoney(playerid) < TransportValue[i])
	               	{
                 		format(string, sizeof(string), "You need $%d to enter the vehicle", TransportValue[i]);
						SendClientMessage(playerid, COLOR_WHITE, string);
						RemovePlayerFromVehicle(playerid);
						TogglePlayerControllable(playerid, 1);
     				}
        			else
          			{
             			if(TransportDuty[i] == 1)
                		{
                  			format(string, sizeof(string), "You paid $%d to the driver", TransportValue[i]);
							SendClientMessage(playerid, COLOR_WHITE, string);
							TransportTime[i] = 1;
		                   	TransportTime[playerid] = 1;
		                   	TransportCost[playerid] = TransportValue[i];
		                   	TransportCost[i] = TransportValue[i];
		                   	TransportDriver[playerid] = i;
      					}
						GivePlayerCash(playerid, - TransportValue[i]);
						TransportMoney[i] += TransportValue[i];
	            	}
	        	}
	    	}
		}
	}
	else if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
 			if(IsPlayerConnected(TransportDriver[playerid]))
			{
   				TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			    TransportTime[TransportDriver[playerid]] = 0;
			    TransportCost[TransportDriver[playerid]] = 0;
			    format(string, sizeof(string), "~w~The transportation cost:~n~~r~$%d",TransportCost[playerid]);
			    GameTextForPlayer(playerid, string, 4200, 1);
			    format(string, sizeof(string), "~w~Passenger left the vehicle~n~~g~Earned: $%d",TransportCost[playerid]);
			    GameTextForPlayer(TransportDriver[playerid], string, 4200, 1);
				GivePlayerCash(playerid, -TransportCost[playerid]);
				TransportCost[playerid] = 0;
				TransportTime[playerid] = 0;
				TransportDriver[playerid] = 999;
			}
		}
		TransportMoney[playerid] = 0;
	}
}
/*

forward Speedometer(playerid);
public Speedometer(playerid)
{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
	    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
	    {
			new string[32], string2[32];
			format(string, sizeof(string), "%s", VehicleNames[GetVehicleModel(GetPlayerVehicleID(i))-400]);
			TextDrawSetString(tipmasina, string);

			format(string2, sizeof(string2), "%d", GetPlayerSpeed(i, 0));
			TextDrawSetString(viteza, string2);
	    }
		}
		return 1;
}
*/
public CAMERAON( playerid, veh )
{
                
                TextDrawDestroy( crosshair[playerid] );
		        crosshair[playerid] = TextDrawCreate(277.600067, 216.533370, "hud:radarRingPlane");
		        TextDrawLetterSize( crosshair[playerid], 0.000000, 0.000000);
				TextDrawTextSize( crosshair[playerid], 89.599998, 48.533340);
				TextDrawTextSize( crosshair[playerid], 89.599998, 48.533340);
				TextDrawAlignment( crosshair[playerid], 1);
				TextDrawColor( crosshair[playerid], -1);
				TextDrawSetShadow( crosshair[playerid], 0);
				TextDrawSetOutline( crosshair[playerid], 0);
				TextDrawFont( crosshair[playerid], 4);

				TextDrawShowForPlayer( playerid, crosshair[playerid] );
                objectids[veh] = CreateObject( 3785,0,0,0,0,0,0,80 );
                AttachObjectToVehicle( objectids[veh], veh, 0.000000, 2.599999, -0.800000, 0.000000, 0.000000, 0.000000 );
				SetObjectMaterial(objectids[veh], 0, 0, "NONE", "NONE", 0xFFFFFFFF);
                AttachCameraToObject( playerid, objectids[veh] );
                SetPVarInt( playerid, "CAMERAActive", 1 );
                playervehi[playerid] = veh;
                return 1;
}



public CAMERAOFF(playerid)
{
                
                TextDrawDestroy( crosshair[playerid] );
                new vehid = playervehi[playerid];
                DeletePVar( playerid,"CAMERAActive" );
                SetCameraBehindPlayer( playerid );
                DestroyObject(objectids[vehid]);
                return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
    	new string[128];
	    for(new c = 0; c < sizeof(Houses); c++) // House checkpoints
		{
				if (PlayerToPoint(1.4,playerid,Houses[c][EnterX], Houses[c][EnterY], Houses[c][EnterZ]))
				{
				    if(Houses[c][HousePrice] != 0)
				    {
					    if(Houses[c][Owned] == 0)
					    {
							SendClientMessage(playerid, COLOR_GREEN, "Ai dori sa o cumperi?");
							format(string, sizeof(string), "Pret: $%d", Houses[c][HousePrice]);
					    	SendClientMessage(playerid, COLOR_GREEN, string);
					    	SendClientMessage(playerid, COLOR_WHITE, "Comenzile avabile: /enter, /ds(hout)");
					    	SendClientMessage(playerid, COLOR_WHITE, "/buyhouse");
						}
						else
						{
						    if(Houses[c][Rentable] == 1)
						    {
						        new string2[128];
								format(string, sizeof(string), "[Adresa: %d] Stai pe veranda lui %s.",c,Houses[c][Owner]);
						    	SendClientMessage(playerid, COLOR_GREEN, string);
								format(string2, sizeof(string2), "Comenzile avabile: /enter, /ds(hout), /rentroom (Pret: $%d)", Houses[c][RentCost]);
					    		SendClientMessage(playerid, COLOR_WHITE, string2);
						    }
						    else
						    {
								format(string, sizeof(string), "[Adresa: %d] Stai pe veranda lui %s.",c,Houses[c][Owner]);
						    	SendClientMessage(playerid, COLOR_GREEN, string);
						    	SendClientMessage(playerid, COLOR_WHITE, "Comenzile avabile: /enter, /ds(hout)");
					    	}
						}
					}
				}
		}
	}
	return 1;
}

forward ReloadHim(playerid,reload);
public ReloadHim(playerid,reload)
{
	if(reload == 24) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{ ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0); }
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
	{ ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0); } }
	if(reload == 23) {
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{ ApplyAnimation(playerid, "COLT45", "colt45_reload", 2.0, 0, 0, 0, 0, 0); }
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
	{ ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 2.0, 0, 0, 0, 0, 0); } }
	if(reload == 28){
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{ ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
	{ ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); } }
	if(reload == 29){
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{ ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
	{ ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); } }
	if(reload == 32){
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{ ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
	{ ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); } }
	if(reload == 31){
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{ ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
	{ ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); } }
	if(reload == 30){
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{ ApplyAnimation(playerid, "TEC", "TEC_reload", 2.0, 0, 0, 0, 0, 0); }
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
	{ ApplyAnimation(playerid, "TEC", "TEC_crouchreload", 2.0, 0, 0, 0, 0, 0); } }
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    new bool:DesyncBugStarted = false;
    //----------------------------[ cBug ] ---------------------------
    if(newkeys & KEY_FIRE && oldkeys & KEY_CROUCH)
    {
        new weapon = GetPlayerWeapon(playerid);
        if(weapon == 22 || weapon == 23 || weapon == 24 || weapon == 25 || weapon == 26 || weapon == 27 || weapon == 28 || weapon == 29 || weapon == 30 || weapon == 31 || weapon == 32 || weapon == 33 || weapon == 34 || weapon == 35 || weapon == 36 || weapon == 37 || weapon == 38)
        { ApplyAnimation(playerid,"GYMNASIUM","gym_tread_falloff",1.0,0,0,0,0,0); }
     	DesyncBugStarted = true;
    }

	if((newkeys==KEY_CROUCH))
    {
        //=====================================PECO NORD SERVICE===========================//
        if(PlayerToPoint(12.0,playerid,1017.5701, -922.0805, 42.5139))
	    {
 			MoveObject(servicepeconord, 1012.4966, -922.7550, 42.5139, 1.0,0.0000, 0.0000, -82.6800);
 			timergate[playerid] = SetTimerEx("servicepeconordclose",10000,false,"i",playerid);
		}
		//=====================================PECO SUD SERVICE===========================//
        if(PlayerToPoint(12.0,playerid,1912.0736, -1771.8940, 13.7736))
	    {
 			MoveObject(servicepecosud, 1917.1736, -1771.8940, 13.7736, 1.0,0.0000, 0.0000, 90);
 			timergate[playerid] = SetTimerEx("servicepecosudclose",10000,false,"i",playerid);
		}
		//=====================================FORT CARSON SERVICE===========================//
        if(PlayerToPoint(12.0,playerid,-112.0689, 1125.3260, 19.7314))
	    {
 			MoveObject(servicefortcarson, -116.2689, 1125.3260, 19.7314, 1.0,0.0000, 0.0000, 90);
 			timergate[playerid] = SetTimerEx("servicefortcarsonclose",10000,false,"i",playerid);
		}
	}
    //--------------------------- [ Desync Bug ] ---------------------
    if(DesyncBugStarted && newkeys & KEY_JUMP)
    {
        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_falloff",1.0,0,0,0,0,0);
    	DesyncBugStarted = false;
    }
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) // Allows the player to exit his car when he has turned the engine off.
	{
		if (newkeys & KEY_SECONDARY_ATTACK)
		{
	        if(EngineStatus[GetPlayerVehicleID(playerid)] == 0)
			{
				RemoveDriverFromVehicle(playerid);
				TogglePlayerControllable(playerid,1);
			}
		}
	}
	if(PlayerInfo[playerid][pReload] == 1)
	{
		if ((newkeys & KEY_WALK) && !(oldkeys & KEY_WALK))
		{
		    if(GetPlayerWeapon(playerid) != 0 && GetPlayerWeapon(playerid) != 1 && GetPlayerWeapon(playerid) != 4 && GetPlayerWeapon(playerid) != 5 && GetPlayerWeapon(playerid) != 41)
		    {
				new reload = PlayerInfo[playerid][pLastEquipped];

				if(reload == 23 && CopOnDuty[playerid] == 1) { if(PlayerHasItem(playerid,"(C) SD Pistol LSPD")) { SafeGivePlayerWeapon(playerid, reload, 15); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) SD Pistol LSPD",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}SD Pistol{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 24 && CopOnDuty[playerid] == 1) { if(PlayerHasItem(playerid,"(C) Desert Eagle LSPD")) { SafeGivePlayerWeapon(playerid, reload, 7); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) Desert Eagle LSPD",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Desert Eagle{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 25 && CopOnDuty[playerid] == 1) { if(PlayerHasItem(playerid,"(C) Shotgun LSPD")) { SafeGivePlayerWeapon(playerid, reload, 12); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) Shotgun LSPD",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Shotgun{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 29 && CopOnDuty[playerid] == 1) { if(PlayerHasItem(playerid,"(C) MP5 LSPD")) { SafeGivePlayerWeapon(playerid, reload, 30); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) MP5 LSPD",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}MP5{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 31 && CopOnDuty[playerid] == 1) { if(PlayerHasItem(playerid,"(C) M4A1 LSPD")) { SafeGivePlayerWeapon(playerid, reload, 50); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) M4A1 LSPD",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}M4A1{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 34 && CopOnDuty[playerid] == 1) { if(PlayerHasItem(playerid,"(C) Sniper LSPD")) { SafeGivePlayerWeapon(playerid, reload, 10); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) Sniper LSPD",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Sniper{FFFFFF} clip, its now loaded."); return 1; } }


				else if(reload == 24) { if(PlayerHasItem(playerid,"(C) Desert Eagle")) { SafeGivePlayerWeapon(playerid, reload, 7); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) Desert Eagle",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Desert Eagle{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 25) { if(PlayerHasItem(playerid,"(C) Shotgun")) { SafeGivePlayerWeapon(playerid, reload, 12); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) Shotgun",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Shotgun{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 28) { if(PlayerHasItem(playerid,"(C) Uzi")) { SafeGivePlayerWeapon(playerid, reload, 30); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) Uzi",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}UZI{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 29) { if(PlayerHasItem(playerid,"(C) MP5")) { SafeGivePlayerWeapon(playerid, reload, 30); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) MP5",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}MP5{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 30) { if(PlayerHasItem(playerid,"(C) AK47")) { SafeGivePlayerWeapon(playerid, reload, 30); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) AK47",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}AK47{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 31) { if(PlayerHasItem(playerid,"(C) M4A1")) { SafeGivePlayerWeapon(playerid, reload, 50); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) M4A1",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}M4A1{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 32) { if(PlayerHasItem(playerid,"(C) Tec9")) { SafeGivePlayerWeapon(playerid, reload, 30); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) Tec9",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Tec9{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 33) { if(PlayerHasItem(playerid,"(C) Rifle")) { SafeGivePlayerWeapon(playerid, reload, 10); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) Rifle",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}Rifle{FFFFFF} clip, its now loaded."); return 1; } }
				else if(reload == 23) { if(PlayerHasItem(playerid,"(C) SD Pistol")) { SafeGivePlayerWeapon(playerid, reload, 15); ReloadHim(playerid,reload); RemoveItem(playerid,"(C) SD Pistol",1); SendClientMessage(playerid,COLOR_WHITE,">> You used your {EE5555}SD Pistol{FFFFFF} clip, its now loaded."); return 1; } }
		        PlayerInfo[playerid][pReload] = 0;
		        InfoForPlayer(playerid, "You have reloaded your weapon.");
		    }
		}
	}
	if (PRESSED(KEY_SPRINT)) // Pd lobby door
	{
		if(PlayerInfo[playerid][pFaction] == 1)
		{
   			if(IsPlayerConnected(playerid))
			{
				if(PlayerToPoint(5, playerid,238.9094,117.6963,1003.2188) || PlayerToPoint(5, playerid,239.59156799316, 118.50074005127, 1006.3226318359))
				{
		            MoveObject(pdmain, 239.59156799316, 118.50074005127, 1006.3226318359, 2.0);
		            SetTimer("PdClose", 4000, 0);
				    return 1;
				}
			}
		}
	}
	if ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE))
	{
		if(PlayerInfo[playerid][pFaction] != 0)
		{
   			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(PlayerToPoint(20, playerid,1219.1379,-1413.7102,13.3358))// Fire department gate
				{
					if(PlayerInfo[playerid][pFaction] == 2)
					{
		                 MoveDynamicObject(FIREFIGHTER, 1221.10192871,-1415.93847656,8.15445518, 0.8);
		                 SetTimer("FDClose", 10000, 0);
		                 return 1;
		 			}
		 		}
				if(PlayerToPoint(5, playerid,238.9094,117.6963,1003.2188) || PlayerToPoint(5, playerid,239.59156799316, 118.50074005127, 1006.3226318359))
				{
					if(PlayerInfo[playerid][pFaction] == 1)
					{
				    	MoveObject(pdmain, 239.59156799316, 118.50074005127, 1006.3226318359, 2.0);
				        SetTimer("PdClose", 4000, 0);
					    return 1;
					}
				}
			}
		}
	}

	if (PRESSED(KEY_SPRINT)) // San Gate
	{
		if(PlayerToPoint(15, playerid,1547.5212,-1366.5671,326.2109))
		{
			if(PlayerInfo[playerid][pFaction] == 4)
			{
			    if(sanroof == 0)
			    {
       				MoveObject(sanroof2, 1546.2685546875, -1365.2958984375, 320.2109375, 2.00);
	             	sanroof = 1;
       			} else {
       			    MoveObject(sanroof2, 1546.2689208984, -1365.2965087891, 325.2109375, 2.00);
	             	sanroof = 0;
				}
 			}
 		}
 	}
	if ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE)) // Fire department gate
	{
		if(PlayerToPoint(20, playerid,1219.1379,-1413.7102,13.3358))
		{
			if(PlayerInfo[playerid][pFaction] == 2)
			{
                 MoveDynamicObject(FIREFIGHTER, 1221.10192871,-1415.93847656,8.15445518, 0.8);
                 SetTimer("FDClose", 10000, 0);
                 return 1;
 			}
 		}
 	}
	if(((oldkeys & KEY_FIRE) && !(newkeys & KEY_FIRE)) || ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE)) ||  (newkeys & KEY_FIRE)) // Trucker deattach trailer button
	{
		if(PlayerInfo[playerid][pJob] == 9)
		{
   			if(IsPlayerConnected(playerid))
			{
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID( playerid )))
				{
                    DetachTrailerFromVehicle(GetPlayerVehicleID( playerid ));
				}
			}
		}
	}
	if(gPlayerUsingLoopingAnim[playerid] == 1 && Wounded[playerid] == 0)
	{ if ((newkeys & KEY_SPRINT) && !(oldkeys & KEY_SPRINT)) { StopLoopingAnim(playerid); } }
    if ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE) && (GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
	{
		switch(GetPVarInt(playerid, "vMainOn"))
		{
		    case 0:
			{
                GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
                SetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
                VehicleLightsOn[GetPlayerVehicleID(playerid)] = true;
      			SetPVarInt(playerid, "vMainOn", 1);
      			return 1;
			}
			case 1:
			{
                GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
                SetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);

                VehicleLightsOn[GetPlayerVehicleID(playerid)] = false;
				SetPVarInt(playerid, "vMainOn", 0);
				return 1;
			}
		}
	}
	if(((oldkeys & KEY_FIRE) && !(newkeys & KEY_FIRE)) || ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE)) ||  (newkeys & KEY_FIRE))
	{
		if(CopOnDuty[playerid] == 1)
		{
			if(GetPlayerWeapon(playerid) == 23)
			{
			    if(IsPlayerAiming(playerid))
			    {
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(i == playerid) continue;
						if(IsPlayerConnected(i))
						{
							if(IsPlayerAimingAtPlayer(playerid, i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
							{
							    if( GetDistanceBetweenPlayers( playerid, i ) < 25 )
							    {
									new target = i;
									TogglePlayerControllable(target, 0);
									ApplyAnimation(target, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
									SetTimerEx("StopAnim", 1200000, 0, "d",target);
									PlayerActionMessage(target,15.0,"este lovit de glontul unui tazer si cade pe jos.");
									return 1;
								}
							}
						}
					}
				}
			}
		}
	}
	if(((oldkeys & KEY_FIRE) && !(newkeys & KEY_FIRE)) || ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE)) ||  (newkeys & KEY_FIRE))
	{
		if(CopOnDuty[playerid] == 1)
		{
			if(GetPlayerWeapon(playerid) == 25)
			{
			    if(IsPlayerAiming(playerid))
			    {
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(i == playerid) continue;
						if(IsPlayerConnected(i))
						{
							if(IsPlayerAimingAtPlayer(playerid, i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
							{
							    if( GetDistanceBetweenPlayers( playerid, i ) < 25 )
							    {
									new target = i;
									TogglePlayerControllable(target, 0);
									ApplyAnimation(target, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
									SetTimerEx("StopAnim", 1200000, 0, "d",target);
									SetPlayerDrunkLevel (target, 3000);
									PlayerActionMessage(target,15.0,"este lovit de glontul unui beanbag si cade pe jos.");
									return 1;
								}
							}
						}
					}
				}
			}
		}
	}
	if((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE))
	{
	    if(IsPlayerAiming(playerid))
	    {
			if(GetPlayerWeapon(playerid) == 23 ||
			GetPlayerWeapon(playerid) == 24 ||
			GetPlayerWeapon(playerid) == 25||
			GetPlayerWeapon(playerid) == 28||
			GetPlayerWeapon(playerid) == 29||
			GetPlayerWeapon(playerid) == 30||
			GetPlayerWeapon(playerid) == 31||
			GetPlayerWeapon(playerid) == 32||
			GetPlayerWeapon(playerid) == 33 && GetPlayerAmmo(playerid) > 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(i == playerid) continue;
					if(IsPlayerConnected(i))
					{
						if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
						{
						    if(IsPlayerAimingTargetBodyPart(playerid, i, 1)) // BODY_PART_HEAD
						    {
								DoDamage(playerid, i, 1, GetPlayerWeapon(playerid));
								gloanteshot[i][1][GetPlayerWeapon(playerid)] += 1;
							}
						    else if(IsPlayerAimingTargetBodyPart(playerid, i, 2)) // BODY_PART_TORSO
						    {
								DoDamage(playerid, i, 2, GetPlayerWeapon(playerid));
								gloanteshot[i][2][GetPlayerWeapon(playerid)] += 1;
							}
						    else if(IsPlayerAimingTargetBodyPart(playerid, i, BODY_PART_LEGS)) // BODY_PART_LEGS
						    {
								DoDamage(playerid, i, 3, GetPlayerWeapon(playerid));
								gloanteshot[i][3][GetPlayerWeapon(playerid)] += 1;
							}
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	InventoryOnDialogResponse(playerid, dialogid, response, listitem, inputtext);
    new giveplayerid;
	new iMDCAdd;
    switch( dialogid )
	{
		///////////////////////////////////////////////////////////////////LOGIN////////////////////////////////////////////////////////////////////////////////////
        case 1:
        {
		    if(response)
			{
	            if( strlen( inputtext ) == 0 )
				{
				    gPlayerLogTries[playerid] += 1;
				    if(gPlayerLogTries[playerid] == 5)
					{
						Kick(playerid);
						return 1;
					}

	                ShowPlayerDialog( playerid, 1, DIALOG_STYLE_PASSWORD, "{FFA700}Express Roleplay {FFFFFF}", "{F81414}Parola Gresita.{FFFFFF}\nAi 60 de secunde sa te loghezi\n\tIntrodu-ti parola", "Login", "Exit" );
                 return 1;
	            }
	            GetFromAccount( PlayerInfo[playerid][pDatabaseID], "Password", PlayerInfo[playerid][pKey]);
	            if( strcmp( inputtext, PlayerInfo[playerid][pKey], true ) == 0 )
				{
	                // Log him in man
	                SetCameraBehindPlayer( playerid );
	                LoadAccountVariables( playerid );
	                gPlayerLogged[playerid] = 1;

					if (PlayerInfo[playerid][pPlayingHours] == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Cumpara un ziar pentru a vedea locatiile de pe server !");
					}
	            }
	            else
				{
				    gPlayerLogTries[playerid] += 1;
				    if(gPlayerLogTries[playerid] == 5)
					{
						Kick(playerid);
						return 1;
					}
				    ShowPlayerDialog( playerid, 1, DIALOG_STYLE_PASSWORD,"{FFA700}Express Roleplay {FFFFFF}", "{F81414}Parola Gresita.{FFFFFF}\nAi 60 de secunde sa te loghezi\n\tIntrodu-ti parola", "Login", "Exit" );
				    return 1;
	            }
	        }
        }
		////////////////////////////////////////////////////////////////////////////////////LOGIN////////////////////////////////////////////////////////////////////////////////////
        case 2:
        {
            if( strlen( inputtext ) >= 30 )
			{
                ShowPlayerDialog( playerid, 2, DIALOG_STYLE_PASSWORD, "{FFA700}Express Roleplay {FFFFFF}", "{F81414}Parola este prea lunga.{FFFFFF}\n\nAi 60 de secunde sa te inregistrezi\n in curand\n\n\tIntrodu o parola", "Register", "Cancel" );
            }
            else
			{
                if( strlen( inputtext ) >= 1 )
				{
					if(CheckInput(inputtext))
					{
					    ShowPlayerDialog( playerid, 2, DIALOG_STYLE_PASSWORD, "{FFA700}Express Roleplay {FFFFFF}", "{F81414}Caractere invalide.{FFFFFF}\nAi 60 de secunde sa te inregistrezi\n in curand\n\n\tIntrodu o parola", "Register", "Cancel" );
					    return 1;
					}
                    new EscapedPassword[ 30 ], Query[ 128 ], Name[ MAX_PLAYER_NAME ], EscapedName[ MAX_PLAYER_NAME ];
                    GetPlayerName( playerid, Name, sizeof( Name ) );
                    mysql_real_escape_string( Name, EscapedName );
                    mysql_real_escape_string( inputtext, EscapedPassword );
					#pragma unused Name
                    format( Query, sizeof( Query ), "INSERT INTO `Accounts` (`Username`, `Password`, `Tutorial`) VALUES('%s', '%s', '0')", EscapedName, EscapedPassword );
                    mysql_query( Query );
                    InitPlayerConnection( playerid );


                }
                else
				{
                    ShowPlayerDialog( playerid, 2, DIALOG_STYLE_PASSWORD, "{FFA700}Express Roleplay {FFFFFF}", "{F81414}Scrie o parola mai lunga.{FFFFFF}\nAi 60 de secunde sa te inregistrezi\n in curand\n\n\tIntrodu o parola", "Register", "Cancel" );
                }
            }
        }


		////////////////////////////////////////////////////////////////////////////////////MDC MAIN////////////////////////////////////////////////////////////////////////////////////
		case LSPD_MDC_DIALOG: // /mdc
		{
			if(response)
			{
				ShowPlayerDialog(playerid, LSPD_MDC_SEARCH, DIALOG_STYLE_INPUT, "Mobile Data Computer - Cautare", "Te rog introdu numele sau id-ul suspectului pe care vrei sa il cauti.", "Ok", "Iesire");
				return 1;
			}
		}
		////////////////////////////////////////////////////////////////////////////////////MDC RECORD////////////////////////////////////////////////////////////////////////////////////
		case LSPD_MDC_ADD_RECORD_1: // MDC Add Record (playerid)
		{
			if(response)
			{
				if(sscanf(inputtext, "u", iMDCAdd))
				{
					return SendErrorMessage(playerid, "USAGE: Input a PlayerID/PartOfName into the window");
				}
	            if( strlen( inputtext ) == 0 )
				{
					return SendErrorMessage(playerid, "USAGE: Input a PlayerID/PartOfName into the window");
	            }
             	iMDCAdd = strval(inputtext);
				ShowPlayerDialog(playerid, LSPD_MDC_ADD_RECORD_2, DIALOG_STYLE_INPUT, "LSPD Mobile Data Computer - Add", "Please enter the charge to be added onto the suspect below", "Enter", "Escape");
				return 1;
			}
		}
		////////////////////////////////////////////////////////////////////////////////////MDC CHARGE////////////////////////////////////////////////////////////////////////////////////
		case LSPD_MDC_ADD_RECORD_2: // MDC Add Record (charge)
		{
			if(response)
			{
				new szCharge[84];
				if(sscanf(inputtext, "s[84]", szCharge))
				{
					return SendErrorMessage(playerid, "USAGE: Input the charge to be added in the field");
				}
				if(AddCriminalRecord(iMDCAdd, szCharge, playerid))
				{
					return SendClientMessage(playerid,COLOR_WHITE,"Successfully added the charges onto the player");
				}
				return SendErrorMessage(playerid, "Charges could not be added");
			}
		}
		////////////////////////////////////////////////////////////////////////////////////MDC SEARCH////////////////////////////////////////////////////////////////////////////////////
		case LSPD_MDC_SEARCH:
		{
			new iPlayerID;

			if(sscanf(inputtext, "u", iPlayerID))
			{
				return SendErrorMessage(playerid, "FOLOSIRE: Introdu numele sau id-ul suspectului pe care doresti sa il cauti.");
			}

			new houselocation[MAX_ZONE_NAME],
				szMessage[512],
				szMessage2[512],
				carlic[128],
				weaponlic[128],
				jobtext[128],
				factiontext[128],
				masinatext[128],
				flylic[128];
			GetCoords2DZone(Houses[PlayerInfo[iPlayerID][pHouseKey]][EnterX],Houses[PlayerInfo[iPlayerID][pHouseKey]][EnterY], houselocation, MAX_ZONE_NAME);
			switch(PlayerInfo[iPlayerID][pCarLic])
			{
			    case 0: carlic = "Fara";
			    case 1: carlic = "Da";
			}
			switch(PlayerInfo[iPlayerID][pWepLic])
			{
			    case 0: weaponlic = "Fara";
			    case 1: weaponlic = "Da";
			}
			switch(PlayerInfo[iPlayerID][pFlyLic])
			{
			    case 0: flylic = "Fara";
			    case 1: flylic = "Da";
			}
			switch(PlayerInfo[iPlayerID][pJob])
			{
			    case 0: jobtext = "Fara";
			    case 1: jobtext = "Livrator de materiale";
			    case 2: jobtext = "Dealer de droguri";
			    case 3: jobtext = "Detectiv";
			    case 4: jobtext = "Fermier";
			    case 5: jobtext = "Sofer de taxi";
			    case 7: jobtext = "Gardian la inchisoare";
			    case 8: jobtext = "Dealer de arme";
			    case 9: jobtext = "Tirist";
				case 10: jobtext = "Maturator Strazi";
				case 11: jobtext = "Livrator de Pizza";
				case 12: jobtext = "Transportator de baloti";
				case 13: jobtext = "Hot de masini";
			}
			
			switch(PlayerInfo[iPlayerID][pFaction])
			{
				case 0:
				{
					factiontext = "Fara";
				}
				case 1:
				{
					factiontext = "LSPD";
				}
				case 2:
				{
					factiontext = "EMS";
				}
				case 3:
				{
					factiontext = "SASD";
				}
				case 4:
				{
					factiontext = "SAN NEWS";
				}
				case 5:
				{
					factiontext = "Fara";
				}
				case 6:
				{
					factiontext = "GOUVERMENT";
				}
				case 7:
				{
					factiontext = "BSC";
				}
			}
			if (PlayerInfo[iPlayerID][pCarKey] == 0)
			{
				masinatext = "Fara";
			}
			else
			{
				strins(masinatext,VehicleNames[GetVehicleModel(PlayerInfo[iPlayerID][pCarKey])-400],0);
			}
			if (PlayerInfo[iPlayerID][pPhoneNumber] == 0)
			{
				format(szMessage, sizeof(szMessage),"{BC0000}Date personale:{FFFFFF}\nNume: %s\nVarsta: %d\nAdresa: %d %s\nCNP: %d\nTelefon: Fara\nLoc de munca: %s\nOcupatie: %s\nMasina: %s", GetPlayerNameEx(iPlayerID), PlayerInfo[iPlayerID][pAge], PlayerInfo[iPlayerID][pHouseKey], houselocation,PlayerInfo[iPlayerID][pSocial],jobtext,factiontext,masinatext);
				format(szMessage2, sizeof(szMessage2),"\n\n{BC0000}Licente:{FFFFFF}\nPermis de conducere: %s\nLicenta de port arma: %s\n\n{BC0000}Infractiuni:{FFFFFF}\nArestari: %d\nAcuzat: %s", carlic, weaponlic,PlayerInfo[iPlayerID][pArrested],PlayerInfo[iPlayerID][pWanted]);
				strcat(szMessage,szMessage2);
			}
			else
			{
				format(szMessage, sizeof(szMessage),"{BC0000}Date personale:{FFFFFF}\nNume: %s\nVarsta: %d\nAdresa: %d %s\nCNP: %d\nTelefon: %d\nLoc de munca: %s\nOcupatie: %s\nMasina: %s", GetPlayerNameEx(iPlayerID), PlayerInfo[iPlayerID][pAge], PlayerInfo[iPlayerID][pHouseKey], houselocation,PlayerInfo[iPlayerID][pSocial],PlayerInfo[iPlayerID][pPhoneNumber],jobtext,factiontext,masinatext);
				format(szMessage2, sizeof(szMessage2),"\n\n{BC0000}Licente:{FFFFFF}\nPermis de conducere: %s\nLicenta de port arma: %s\nLicenta de pilotaj: %s\n\n{BC0000}Infractiuni:{FFFFFF}\nArestari: %d\nAcuzat: %s", carlic, weaponlic,flylic,PlayerInfo[iPlayerID][pArrested],PlayerInfo[iPlayerID][pWanted]);
				strcat(szMessage,szMessage2);
			}
			ShowPlayerDialog(playerid, LSPD_MDC_SEARCH_RESULT, DIALOG_STYLE_MSGBOX, "{009EFF}Mobile Data Computer{FFFFFF}", szMessage, "Ok", "Iesi");

			return 1;
		}
























		////////////////////////////////////////////////////////////////////////////////////GRAFFITY////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////MAIN MENU////////////////////////////////////////////////////////////////////////////////////
		case RADIO_DIALOG:
		{
			switch(listitem)
			{
				case 0: ///////////////STATION////////////////
				{
					if(response)
					{
						return ShowPlayerDialog(playerid, RADIO_DIALOG_STATION, DIALOG_STYLE_LIST, "Car Radio", "Pro FM\nTechno Base\nHot Jams\nRock\nGreu de difuzar\nTraditional\nSoma FM\nOpreste", "Set", "Cancel");
					}
				}
				case 1: ////////////VOLUME/////////////
				{
					if(response)
					{
						return ShowPlayerDialog(playerid, RADIO_DIALOG_VOLUME, DIALOG_STYLE_INPUT, "Car Radio", "Please input a volume (1-100)", "Set", "Cancel");
					}
				}
			}
		}

		////////////////////////////////////////////////////////////////////////////////////STATION MENU////////////////////////////////////////////////////////////////////////////////////
		case RADIO_DIALOG_STATION:
		{
			switch(listitem)
			{
				case 0: // TECHNO BASE
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
						{
							PlayerInfo[i][pRadioHandle] = Audio_PlayStreamed(i, "http://stream.profm.ro:8012/profm.mp3", false, false, false);
							Audio_SetVolume(i, PlayerInfo[i][pRadioHandle], 25);
						}
					}
					sscanf("http://stream.profm.ro:8012/profm.mp3", "s[43]", vRadio[GetPlayerVehicleID(playerid)][vChannel]);
					vRadio[GetPlayerVehicleID(playerid)][vVolume] = 25;
				}
				case 1:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
						{
							PlayerInfo[i][pRadioHandle] = Audio_PlayStreamed(i, "http://listen.technobase.fm/tunein-mp3-pls", false, false, false);
							Audio_SetVolume(i, PlayerInfo[i][pRadioHandle], 25);
						}
					}
					sscanf("http://listen.technobase.fm/tunein-mp3-pls", "s[43]", vRadio[GetPlayerVehicleID(playerid)][vChannel]);
					vRadio[GetPlayerVehicleID(playerid)][vVolume] = 25;
				}
				case 2:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
						{
							PlayerInfo[i][pRadioHandle] = Audio_PlayStreamed(i, "http://hot108.com/hot108.pls", false, false, false);
							Audio_SetVolume(i, PlayerInfo[i][pRadioHandle], 25);
						}
					}
					sscanf("http://hot108.com/hot108.pls", "s[43]", vRadio[GetPlayerVehicleID(playerid)][vChannel]);
					vRadio[GetPlayerVehicleID(playerid)][vVolume] = 25;
				}
				case 3:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
						{
							PlayerInfo[i][pRadioHandle] = Audio_PlayStreamed(i, "http://radiogmusic.com/rock.m3u", false, false, false);
							Audio_SetVolume(i, PlayerInfo[i][pRadioHandle], 25);
						}
					}
					sscanf("http://radiogmusic.com/rock.m3u", "s[43]", vRadio[GetPlayerVehicleID(playerid)][vChannel]);
					vRadio[GetPlayerVehicleID(playerid)][vVolume] = 25;
				}
				case 4:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
						{
							PlayerInfo[i][pRadioHandle] = Audio_PlayStreamed(i, "http://nextgen.go.ro:8012", false, false, false);
							Audio_SetVolume(i, PlayerInfo[i][pRadioHandle], 25);
						}
					}
					sscanf("http://nextgen.go.ro:8012", "s[43]", vRadio[GetPlayerVehicleID(playerid)][vChannel]);
					vRadio[GetPlayerVehicleID(playerid)][vVolume] = 25;
				}
				case 5:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
						{
							PlayerInfo[i][pRadioHandle] = Audio_PlayStreamed(i, "http://radiotraditional.ro/hip-hop.m3u", false, false, false);
							Audio_SetVolume(i, PlayerInfo[i][pRadioHandle], 25);
						}
					}
					sscanf("http://radiotraditional.ro/hip-hop.m3u", "s[43]", vRadio[GetPlayerVehicleID(playerid)][vChannel]);
					vRadio[GetPlayerVehicleID(playerid)][vVolume] = 25;
				}
				case 6:
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
						{
							PlayerInfo[i][pRadioHandle] = Audio_PlayStreamed(i, "http://somafm.com/tags.pls", false, false, false);
							Audio_SetVolume(i, PlayerInfo[i][pRadioHandle], 25);
						}
					}
					sscanf("http://somafm.com/tags.pls", "s[43]", vRadio[GetPlayerVehicleID(playerid)][vChannel]);
					vRadio[GetPlayerVehicleID(playerid)][vVolume] = 25;
				}
				case 7: // OFF
				{
					foreach(Player, i)
					{
						if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
						{
							Audio_Stop(i, PlayerInfo[i][pRadioHandle]);
							PlayerInfo[i][pRadioHandle] = -1;
						}
					}
					vRadio[GetPlayerVehicleID(playerid)][vVolume] = -1;
				}
			}
		}



		////////////////////////////////////////////////////////////////////////////////////VOLUME MENU////////////////////////////////////////////////////////////////////////////////////
		case RADIO_DIALOG_VOLUME:
		{
			new iVolume,
				szMessage[23+2];

			if(sscanf(inputtext, "d", iVolume))
			{
				return SendErrorMessage(playerid, "USAGE: Input a volume between 1-100 in the textfield");
			}

			if(iVolume < 1 || iVolume > 100)
			{
				return SendErrorMessage(playerid, "USAGE: Volume must be between 1 - 100");
			}

			if(PlayerInfo[playerid][pRadioHandle] == -1)
			{
				return SendErrorMessage(playerid, "You have not yet tuned into a radiostation");
			}

			foreach(Player, i)
			{
				if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
				{
					Audio_SetVolume(i, PlayerInfo[i][pRadioHandle], iVolume);
				}
			}
			vRadio[GetPlayerVehicleID(playerid)][vVolume] = iVolume;

			format(szMessage, 23+2,"[RADIO] Volume set to %d", iVolume);
			SendClientMessage(playerid,COLOR_YELLOW,szMessage);

			return 1;
		}


		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    }
    new vehicleid = GetPlayerVehicleID(playerid);
    new comp=0;
    new comp1=0;
    new comp2=0;
    new comp3=0;
    new comp4=0;
    new comp5=0;
    new comp6=0;
    new comp7=0;
	new string[256];
	
	    if(dialogid == 184)
        {
             for(new i =0;i<MAX_PLAYERS;i++)
             {
                if(!strlen(inputtext)){
                    SendClientMessage(playerid,0xFF99FFFF,"Nu ai introdus un URL!");
                    return 1;
                }else{
                    PlayAudioStreamForPlayer(i,inputtext, 476.1028,-14.7950,1003.6953, 100.0,true);
            }
        }
    }

    if(dialogid == 4553)
    {
        if(response)
        {
		    if(IsPlayerConnected(playerid))
			{
				if(DynamicCars[GetPlayerVehicleID(playerid)][CarType] == 2)
				{
					if(PlayerInfo[playerid][pBizKey] == 28)
					{
						GameTextForPlayer(playerid, "~w~Deoarece esti proprietarul magazinului nu platesti nimic.", 5000, 3);
						HireCar[playerid] = GetPlayerVehicleID(playerid);
						EngineStatus[GetPlayerVehicleID(playerid)] = 1;
						GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(GetPlayerVehicleID(playerid),VEHICLE_PARAMS_ON,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
						TogglePlayerControllable(playerid, 1);
						return 1;
					}
					if(GetPlayerCash(playerid) < Businesses[28][EntranceCost])
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   Nu ai atatia bani !");
						RemovePlayerFromVehicle(playerid);
		    			TogglePlayerControllable(playerid,1);
						return 1;
					}
					if(HireCar[playerid] != 999)
					{
						SendClientMessage(playerid, COLOR_GREY, "Inchiriezi deja o masina !");
						RemovePlayerFromVehicle(playerid);
		    			TogglePlayerControllable(playerid,1);
						return 1;
					}
					for(new i=0; i<MAX_PLAYERS; i++)
					{
					    if(IsPlayerConnected(i))
				    	{
						    if(HireCar[i] == GetPlayerVehicleID(playerid))
						    {
						        SendClientMessage(playerid, COLOR_GREY, "    Someone already rents this car !");
						        RemoveDriverFromVehicle(playerid);
						        return 1;
						    }
						}
					}
					GivePlayerCash(playerid,-Businesses[28][EntranceCost]);
					Businesses[28][Till] += Businesses[28][EntranceCost];
					HireCar[playerid] = GetPlayerVehicleID(playerid);
					format(string, sizeof(string), "~w~Nu uita sa folosesti ~b~/unrentcar !~n~~g~/engine ~w~ca sa pornesti masina");
					GameTextForPlayer(playerid, string, 5000, 3);
					EngineStatus[GetPlayerVehicleID(playerid)] = 1;
					GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(GetPlayerVehicleID(playerid),VEHICLE_PARAMS_ON,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
					TogglePlayerControllable(playerid, 1);
				}
			}
			return 1;
		}
		else
		{
		    RemovePlayerFromVehicle(playerid);
		    TogglePlayerControllable(playerid,1);
		}
	}
	if(dialogid == 1514)
	{
	    if(response)
		{
	        ShowPlayerDialog(playerid, CAR_DIALOG, DIALOG_STYLE_INPUT, "Commerce Dealer Ship","\n              Type the model ID of the car what you want to buy!", "Buy", "Cancel");
	    }
		else
		{
	        ShowPlayerDialog(playerid, CAR_DIALOG_CASH, DIALOG_STYLE_INPUT, "Commerce Dealer Ship - Car Credit Payment","\n              Type the model ID of the car what you want to buy!", "Buy", "Cancel");
		}
	}
	if(dialogid == HouseDialog)
	{
        if(response)
        {
			switch(listitem)
		    {
		    	case 0:
		        {
		            format(string, sizeof(string), "Safetybox Contains - \n\n| Marijuana - [%d/100] \n| Ecstasy - [%d/100] \n| Cocaine - [%d/100]",Houses[GetPlayerVirtualWorld(playerid)][hWeed],Houses[GetPlayerVirtualWorld(playerid)][hEsctasy],Houses[GetPlayerVirtualWorld(playerid)][hCocaine]);
					ShowPlayerDialog(playerid, STATUSDIALOG, DIALOG_STYLE_MSGBOX,"Your status", string, "Okay", "Cancel");
	            }
		    	case 1:
		        {
		            ShowPlayerDialog(playerid,422,DIALOG_STYLE_LIST,"Safetybox - Drug Menu","Marijuana\nEcstasy\nCocaine","Select","Close");
	            }
		        case 2:
		        {
		            ShowPlayerDialog(playerid,HouseDialog,DIALOG_STYLE_LIST,"Safetybox - Main Menu","Stash Info\nDrugs\nMoney","Select","Cancel");
		        }
			}
		}
	}
	if(dialogid == 422)
	{
        if(response)
        {
			switch(listitem)
		    {
		    	case 0: // Marijuana
		        {
					ShowPlayerDialog(playerid,HouseWeed1,DIALOG_STYLE_MSGBOX,"Safetybox - Marijuana","Would you like the withdraw or deposit Marijuana from your safetybox","Withdraw","Deposit");
	            }
		    	case 1: // Ecstasy
		        {
					ShowPlayerDialog(playerid,HouseEcstasy1,DIALOG_STYLE_MSGBOX,"Safetybox - Ecstasy","Would you like the withdraw or deposit Ecstasy from your safetybox","Withdraw","Deposit");
	            }
		        case 2: // Cocaine
		        {
		            ShowPlayerDialog(playerid,HouseCocaine1,DIALOG_STYLE_MSGBOX,"Safetybox - Cocaine","Would you like the withdraw or deposit Cocaine from your safetybox","Withdraw","Deposit");
		        }
			}
		}
	}

	new dstring[128];
	if(dialogid == HouseEcstasy1) // Pot Safe Menu
    {
        if (response == 1) // Withdraw
        {
			format(dstring, sizeof(dstring), "How much would you like to withdraw from your safe?\n\nNote: You currently have %d grams of Ecstasy inside your safetybox..",Houses[PlayerInfo[playerid][pHouseKey]][hEsctasy]);
			ShowPlayerDialog(playerid,HouseEcstasy2,DIALOG_STYLE_INPUT,"Safetybox - Ecstasy Withdraw",dstring,"Withdraw","Back");
		}
		else // Deposit
		{
		    format(dstring, sizeof(dstring), "How much would you like to deposit in your safe?\n\nNote: You currently have %d grams of Ecstasy inside your safetybox.",Houses[PlayerInfo[playerid][pHouseKey]][hEsctasy]);
			ShowPlayerDialog(playerid,HouseEcstasy3,DIALOG_STYLE_INPUT,"Safetybox - Ecstasy Deposit",dstring,"Deposit","Back");
		}
	}
	if(dialogid == HouseEcstasy2) // House Pot Menu 2
    {
        if (response == 1) // Withdraw Input
        {
            if(IsNull(inputtext))
            {
                format(dstring, sizeof(dstring), "How much would you like to withdraw from your safe?\n\nNote: You currently have %d grams of Ecstasy inside your safetybox.",Houses[PlayerInfo[playerid][pHouseKey]][hEsctasy]);
				ShowPlayerDialog(playerid,HouseEcstasy2,DIALOG_STYLE_INPUT,"Safetybox - Ecstasy Withdraw",dstring,"Withdraw","Back");
                return 1;
			}
            if (strval(inputtext) > Houses[PlayerInfo[playerid][pHouseKey]][hEsctasy] || strval(inputtext) < 1)
			{
			    format(dstring, sizeof(dstring), "How much would you like to withdraw from your safe?\n\nNote: You currently have %d grams of Ecstasy inside your safetybox.",Houses[PlayerInfo[playerid][pHouseKey]][hEsctasy]);
				ShowPlayerDialog(playerid,HouseEcstasy2,DIALOG_STYLE_INPUT,"Safetybox - Ecstasy Withdraw",dstring,"Withdraw","Back");
				return 1;
			}
			AddItem(playerid,"(D) Ecstasy",strval(inputtext));
			Houses[PlayerInfo[playerid][pHouseKey]][hEsctasy] -= strval(inputtext);
		}
	}
	if(dialogid == HouseEcstasy3) // House Pot Menu 3
    {
        if (response == 1) // Deposit Input
        {
            if(IsNull(inputtext))
            {
                format(dstring, sizeof(dstring), "How much would you like to deposit?\n\n You currently have %d grams of Ecstasy inside your safetybox.", Houses[PlayerInfo[playerid][pHouseKey]][hEsctasy]);
				ShowPlayerDialog(playerid,HouseEcstasy3,DIALOG_STYLE_INPUT,"Safetybox - Ecstasy Deposit",dstring,"Deposit","Back");
				return 1;
			}
			new amountecstasy = PlayerHasItem(playerid,"(D) Ecstasy");
			if (strval(inputtext) > amountecstasy || strval(inputtext) < 1)
			{
			    format(dstring, sizeof(dstring), "How much would you like to deposit in your safe?\n\nNote: You currently have %d grams of Ecstasy in your safe.",Houses[PlayerInfo[playerid][pHouseKey]][hEsctasy]);
				ShowPlayerDialog(playerid,HouseEcstasy3,DIALOG_STYLE_INPUT,"Safetybox - Ecstasy Deposit",dstring,"Deposit","Back");
				return 1;
			}
			RemoveItem(playerid,"(D) Ecstasy",strval(inputtext));
			Houses[PlayerInfo[playerid][pHouseKey]][hEsctasy] += strval(inputtext);
		}
	}
	if(dialogid == HouseCocaine1) // Pot Safe Menu
    {
        if (response == 1) // Withdraw
        {
			format(dstring, sizeof(dstring), "How much would you like to withdraw from your safe?\n\nNote: You currently have %d grams of Cocaine inside your safetybox..",Houses[PlayerInfo[playerid][pHouseKey]][hCocaine]);
			ShowPlayerDialog(playerid,HouseCocaine2,DIALOG_STYLE_INPUT,"Safetybox - Cocaine Withdraw",dstring,"Withdraw","Back");
		}
		else // Deposit
		{
		    format(dstring, sizeof(dstring), "How much would you like to deposit in your safe?\n\nNote: You currently have %d grams of Cocaine inside your safetybox.",Houses[PlayerInfo[playerid][pHouseKey]][hCocaine]);
			ShowPlayerDialog(playerid,HouseCocaine3,DIALOG_STYLE_INPUT,"Safetybox - Cocaine Deposit",dstring,"Deposit","Back");
		}
	}
	if(dialogid == HouseCocaine2) // House Pot Menu 2
    {
        if (response == 1) // Withdraw Input
        {
            if(IsNull(inputtext))
            {
                format(dstring, sizeof(dstring), "How much would you like to withdraw from your safe?\n\nNote: You currently have %d grams of Cocaine inside your safetybox.",Houses[PlayerInfo[playerid][pHouseKey]][hCocaine]);
				ShowPlayerDialog(playerid,HouseCocaine2,DIALOG_STYLE_INPUT,"Safetybox - Cocaine Withdraw",dstring,"Withdraw","Back");
                return 1;
			}
            if (strval(inputtext) > Houses[PlayerInfo[playerid][pHouseKey]][hCocaine] || strval(inputtext) < 1)
			{
			    format(dstring, sizeof(dstring), "How much would you like to withdraw from your safe?\n\nNote: You currently have %d grams of Cocaine inside your safetybox.",Houses[PlayerInfo[playerid][pHouseKey]][hCocaine]);
				ShowPlayerDialog(playerid,HouseCocaine2,DIALOG_STYLE_INPUT,"Safetybox - Cocaine Withdraw",dstring,"Withdraw","Back");
				return 1;
			}
			AddItem(playerid,"(D) Cocaine",strval(inputtext));
			Houses[PlayerInfo[playerid][pHouseKey]][hCocaine] -= strval(inputtext);
		}
	}
	if(dialogid == HouseCocaine3) // House Pot Menu 3
    {
        if (response == 1) // Deposit Input
        {
            if(IsNull(inputtext))
            {
                format(dstring, sizeof(dstring), "How much would you like to deposit?\n\n You currently have %d grams of Cocaine inside your safetybox.", Houses[PlayerInfo[playerid][pHouseKey]][hCocaine]);
				ShowPlayerDialog(playerid,HouseCocaine3,DIALOG_STYLE_INPUT,"Safetybox - Cocaine Deposit",dstring,"Deposit","Back");
				return 1;
			}
			new amountcoke = PlayerHasItem(playerid,"(D) Cocaine");
			if (strval(inputtext) > amountcoke || strval(inputtext) < 1)
			{
			    format(dstring, sizeof(dstring), "How much would you like to deposit in your safe?\n\nNote: You currently have %d grams of Cocaine in your safe.",Houses[PlayerInfo[playerid][pHouseKey]][hCocaine]);
				ShowPlayerDialog(playerid,HouseCocaine3,DIALOG_STYLE_INPUT,"Safetybox - Cocaine Deposit",dstring,"Deposit","Back");
				return 1;
			}
			RemoveItem(playerid,"(D) Cocaine",strval(inputtext));
			Houses[PlayerInfo[playerid][pHouseKey]][hCocaine] += strval(inputtext);
		}
	}
	if(dialogid == CAR_DIALOG && response)
	{
	    if(!strval(inputtext))
		{
	//	BuyAbleVeh(playerid);
	        return 1;
	    }
		if(PlayerInfo[playerid][pCarCredit] != 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "  You are already paying a car on credit, pay it first.");
			return 1;
		}
		if(PlayerInfo[playerid][pCarLic] == 0)
	    {
	    	SendClientMessage(playerid, COLOR_GRAD2, "  You need a drivers license to buy a vehicle.");
	    }
		if(PlayerInfo[playerid][pCarKey] != 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: You have already spawned a vehicle.");
			return 1;
		}
		if(Businesses[7][Products] == 0)
		{
			GameTextForPlayer(playerid, "~r~No Products", 5000, 1);
			return 1;
		}
	    new car = strval(inputtext);
	    if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_GREY, "ERROR:  Vehicle Number can't be below 400 or above 611!"); return 1; }
	    if(CarsPrices[car-400] == 0)
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "That car is not for sale." , "Okay", "Exit");
	        return 1;
	    }
	    if(CarsPrices[car-400] == 481 && PlayerInfo[playerid][pDonator] == 0)
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "You need to be a donator for this vehicle." , "Okay", "Exit");
	        return 1;
	    }
	    if(CarsPrices[car-400] == 403 && PlayerInfo[playerid][pJob] != 9) // Line Runner
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "You need to be a Truck Driver for this vehicle." , "Okay", "Exit");
	        return 1;
	    }
	    if(CarsPrices[car-400] == 514 && PlayerInfo[playerid][pJob] != 9) // Petrol Tanker
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "You need to be a Truck Driver for this vehicle." , "Okay", "Exit");
	        return 1;
	    }
	    if(CarsPrices[car-400] == 468 && PlayerInfo[playerid][pDonator] <= 2)
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "You need to be atleast a silver donator for this vehicle." , "Okay", "Exit");
	        return 1;
	    }
	    if(CarsPrices[car-400] == 541 || CarsPrices[car-400] == 521 && PlayerInfo[playerid][pDonator] <= 3)
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "You need to be a gold donator for this vehicle." , "Okay", "Exit");
	        return 1;
	    }
	    if(GetPlayerCash(playerid) < CarsPrices[car-400])
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "You don't have enough money." , "Okay", "Exit");
	        return 1;
	    }
	    if(!CheckCarF(playerid,car))
		{
	        pCar[playerid] = car;
	        pColorS[playerid] = 1;
	        pColor2S[playerid] = 1;
	        GivePlayerCash(playerid, -CarsPrices[pCar[playerid]-400]);
	        BuyingVeh(playerid);
	    }
	}
	if(dialogid == 984)
    {
        if(response)
        {
        ShowPlayerDialog(playerid,982, DIALOG_STYLE_INPUT, "Scrieti font-ul", "Introduceti font-ul dorit", "Submit", "Cancel");
        strmid(grafftext[playerid], inputtext, 0, strlen(inputtext), 999);
		}
        return 1;
    }
    if(dialogid == 982)
    {
        if(response)
        {
        ShowPlayerDialog(playerid,983, DIALOG_STYLE_LIST, "Alegeti Culoarea", "Rosu\nGrii\nAlbastru", "Submit", "Cancel");
        strmid(grafffont[playerid], inputtext, 0, strlen(inputtext), 999);
		}
        return 1;
    }
	if(dialogid == 983)
	{
	    new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x, y, z);
        new graffityobject = CreateObject(19353, x+1, y+1, z+1.5, 0.0, 0.0, 0.0);
        EditObject(playerid, graffityobject);
		if(response)
		 {
                switch(listitem)
                {
					case 0: SetObjectMaterialText(graffityobject, grafftext[playerid], 0, OBJECT_MATERIAL_SIZE_256x128, grafffont[playerid], 28, 0, 0xFFFF0000, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
					case 1: SetObjectMaterialText(graffityobject, grafftext[playerid], 0, OBJECT_MATERIAL_SIZE_256x128, grafffont[playerid], 28, 0, 0xFFC4C4C4, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
					case 2: SetObjectMaterialText(graffityobject, grafftext[playerid], 0, OBJECT_MATERIAL_SIZE_256x128, grafffont[playerid], 28, 0, 0xFF0C5774, 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
				}
        }
		graffity[playerid] = 1;
		return 1;
	}
	if(dialogid == 143)
	{
	    if(response)
		{
	        switch(listitem)
			{
	            case 0:
	            {
					ShowPlayerDialog(playerid, 142,DIALOG_STYLE_INPUT,"Suma bani","{FFFFFF}Introdu suma","Ok","Refuza");
	                return 1;
	            }
	            case 1:
	            {
	                format(string, sizeof(string), "Bani depozitati: %d$\nEconomii: %d$",PlayerInfo[playerid][pBank], PlayerInfo[playerid][pSavings]);
	                ShowPlayerDialog(playerid, 141, DIALOG_STYLE_MSGBOX,"Balanta", string, "Ok", "Refuza");
	                return 1;
	            }
	        }
	    }
	}

	if(dialogid == 140)
	{
	    if(response)
		{
	        format(string, sizeof(string), "Bani depozitati: %d$\nEconomii: %d$",PlayerInfo[playerid][pBank], PlayerInfo[playerid][pSavings]);
	        ShowPlayerDialog(playerid, 141, DIALOG_STYLE_MSGBOX,"Balanta", string, "Ok", "Refuza");
	        return 1;
	    }
	}
	if(dialogid == 142)
	{
	    if(response)
		{
			if (!strval(inputtext))
			{
				return 1;
			}
			if (strval(inputtext) <= 10000 && strval(inputtext) > 0)
			{
				if (PlayerInfo[playerid][pBank] >= strval(inputtext))
				{
					GivePlayerCash(playerid, strval(inputtext));
					PlayerInfo[playerid][pBank] -= strval(inputtext);
					ShowPlayerDialog(playerid, 140, DIALOG_STYLE_MSGBOX,"ATM", "Va multumim pentur tranzactie.\n\nDoriti sa vedeti balanta noua?", "Da", "Nu");
				}
				else SendClientMessage(playerid, COLOR_WHITE, "Nu ai atatia bani in banca.");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Ne pare rau puteti extrage maxim 10.000$ si minim 1$");
			return 1;
   	 }
	}
	if(dialogid == 7890)
	{
	    if(response)
		{
			if (!strval(inputtext))
			{
				return 1;
			}
			if (strval(inputtext) == BancaInfo[playerid][bPin])
			{
				SendClientMessage(playerid, COLOR_GREEN, "PIN corect.");
				ShowPlayerDialog(playerid, 143, DIALOG_STYLE_LIST, "ATM", "Scoate bani\nVerifica balanta", "Select", "Cancel");
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "PIN gresit. Te rugam sa reincerci.");
				ShowPlayerDialog(playerid, 7890,DIALOG_STYLE_INPUT,"ATM - Introdu PIN","{FFFFFF}Te rugam sa introduci codul PIN.","Ok","Refuza");
			}
			return 1;
	    }
	}
	if (dialogid == 9832)
	{
		if (response)
		{
			if(PlayerInfo[playerid][pCarKey] == 0)
			{
				if (GetPlayerCash(playerid) >= CarsPrices[carsds[playerid]-400])
				{
					if(!CheckCarF(playerid,carsds[playerid]))
					{
						pCar[playerid] = carsds[playerid];
						pColorS[playerid] = 1;
						pColor2S[playerid] = 1;
						GivePlayerCash(playerid, -CarsPrices[carsds[playerid]-400]);
						BuyingVeh(playerid);
						carsds[playerid] = 0;
						Stocuri[pCar[playerid]] -= 1;
						SaveStocuri(pCar[playerid]);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "   Nu ai suficienti bani pentru a cumpara masina aceasta !");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Ai o masina spawnata.");
			}
			return 1;
		}
	}
	if (dialogid == 9843)
	{
		if (response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowModelSelectionMenu(playerid, carslist, "Masini");
				}
				case 1:
				{
					ShowModelSelectionMenu(playerid, bikelist, "Motoare");
				}
				case 2:
				{
					ShowModelSelectionMenu(playerid, bicicletelist, "Biciclete");
				}
				case 3:
				{
					ShowModelSelectionMenu(playerid, helilist, "Elicoptere");
				}
				case 4:
				{
					ShowModelSelectionMenu(playerid, planelist, "Avioane");
				}
				case 5:
				{
					ShowModelSelectionMenu(playerid, boatlist, "Barci");
				}
			}
			return 1;
		}
	}
	if(dialogid == 6800)
	{
	    if(response)
		{
			if(PlayerInfo[playerid][pJob] != 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "ERROR: You already have a job, quit it first.");
				return 1;
		 	}
	        switch(listitem)
			{
	            case 0:
	            {
	            	PlayerInfo[playerid][pJob] = 9;
					SendClientMessage(playerid, COLOR_GREY, "Felicitari: Ai semnat contractul pentru jobul de tirist.");
					PlayerInfo[playerid][pContractTime] = 12;
					return 1;
	            }
	            case 1:
	            {
	            	PlayerInfo[playerid][pJob] = 3;
					SendClientMessage(playerid, COLOR_GREY, "Felicitari: Ai semnat contractul pentru jobul de detectiv.");
					PlayerInfo[playerid][pContractTime] = 12;
					return 1;
	            }
	            case 2:
	            {
	            	PlayerInfo[playerid][pJob] = 4;
					SendClientMessage(playerid, COLOR_GREY, "Felicitari: Ai semnat contractul pentru jobul de fermier.");
					PlayerInfo[playerid][pContractTime] = 12;
					return 1;
	            }
	            case 3:
	            {
	            	PlayerInfo[playerid][pJob] = 1;
					SendClientMessage(playerid, COLOR_GREY, "Felicitari: Ai semnat contractul pentru jobul de livrator de materiale.");
					PlayerInfo[playerid][pContractTime] = 12;
					return 1;
	            }
				case 4:
				{
					PlayerInfo[playerid][pJob] = 10;
					SendClientMessage(playerid, COLOR_GREY, "Felicitari: Ai semnat contractul pentru jobul de maturator de strazi.");
					PlayerInfo[playerid][pContractTime] = 12;
					return 1;
				}
				case 5:
				{
					PlayerInfo[playerid][pJob] = 11;
					SendClientMessage(playerid, COLOR_GREY, "Felicitari: Ai semnat contractul pentru jobul de livrator de pizza.");
					PlayerInfo[playerid][pContractTime] = 12;
					return 1;
				}
				case 6:
				{
					PlayerInfo[playerid][pJob] = 12;
					SendClientMessage(playerid, COLOR_GREY, "Felicitari: Ai semnat contractul pentru jobul de transportator de baloti.");
					PlayerInfo[playerid][pContractTime] = 12;
					return 1;
				}
	        }
	    }
	}
	if(dialogid == ILLEGAL_JOB_DIALOG)
	{
	    if(response)
		{
			if(PlayerInfo[playerid][pJob] != 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Ai deja un job. /quitjob pentru a demisiona.");

				return 1;
		 	}
	        switch(listitem)
			{
	            case 0:
	            {
	            	PlayerInfo[playerid][pJob] = 13;
					SendClientMessage(playerid, COLOR_GREY, "Felicitari: Acum esti hot de masini.");
					SendClientMessage(playerid, COLOR_WHITE, "Comenzile acestui job sunt formate din comenzile de baza ale trusei de scule.");
					SendClientMessage(playerid, COLOR_WHITE, "De asemenea ai comanda  /dropcar.");
					PlayerInfo[playerid][pContractTime] = 12;
					return 1;
	            }
	        }
	    }
	}
	if(dialogid == CAR_DIALOG_CASH && response)
	{
	    if(!strval(inputtext))
		{
	        return 1;
	    }
		if(PlayerInfo[playerid][pCarKey] != 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "ERROR: You have already spawned a vehicle.");
			return 1;
		}
		if(PlayerInfo[playerid][pCarLic] == 0)
	    {
	    	SendClientMessage(playerid, COLOR_GRAD2, "  You need a drivers license to buy a vehicle.");
	    }
		if(Businesses[13][Products] == 0)
		{
			GameTextForPlayer(playerid, "~r~No Products", 5000, 1);
			return 1;
		}
		if(PlayerInfo[playerid][pCarCredit] != 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "  You are already paying a car on credit, pay it first.");
			return 1;
		}
	    new car = strval(inputtext);
	    if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_GREY, "ERROR:  Vehicle Number can't be below 400 or above 611!"); return 1; }
	    if(CarsPrices[car-400] == 0)
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "That car is not for sale." , "Okay", "Exit");
	        return 1;
	    }
	    if(CarsPrices[car-400] == 481 && PlayerInfo[playerid][pDonator] == 0)
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "You need to be a donator for this vehicle." , "Okay", "Exit");
	        return 1;
	    }
	    if(CarsPrices[car-400] == 403 && PlayerInfo[playerid][pJob] != 9) // Line Runner
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "You need to be a Truck Driver for this vehicle." , "Okay", "Exit");
	        return 1;
	    }
	    if(CarsPrices[car-400] == 514 && PlayerInfo[playerid][pJob] != 9) // Petrol Tanker
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "You need to be a Truck Driver for this vehicle." , "Okay", "Exit");
	        return 1;
	    }
	    if(CarsPrices[car-400] == 468 || CarsPrices[car-400] == 541 || CarsPrices[car-400] == 521 && PlayerInfo[playerid][pDonator] <= 2)
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "You need to be a gold donator for this vehicle." , "Okay", "Exit");
	        return 1;
	    }
	    if(CarsPrices[car-400] >= 10000)
		{
	        ShowPlayerDialog(playerid, 1112, DIALOG_STYLE_MSGBOX, "Talk", "That car is to expensive, choose a cheaper car [$10000]." , "Okay", "Exit");
	        return 1;
	    }
	    if(!CheckCarF(playerid,car))
		{
	        pCar[playerid] = car;
	        pColorS[playerid] = 1;
	        pColor2S[playerid] = 1;
	        PlayerInfo[playerid][pCarCredit] += CarsPrices[pCar[playerid]-400];
			BuyingVeh(playerid);
	    }
	}
	if (dialogid == 1243)
	{
		if (response)
		{
			for (new i=0;i<3000;i++)
			{
				if (PlayerToPoint(5.0, playerid, BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz]))
				{
					if (BoomBox[i][bObject] == 0)
					{
						return 1;
					}
					for (new j=0;j<MAX_PLAYERS;j++)
					{
						if (PlayerToPoint(20.0, j, BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz]))
						{
							switch(listitem)
							{
								case 0:
								{
									boomboxmusic[j] = i;
									PlayAudioStreamForPlayer(j, "http://stream.profm.ro:8012/profm.mp3" , BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz], 20.0, 1);
								}
								case 1:
								{
									boomboxmusic[j] = i;
									PlayAudioStreamForPlayer(j, "http://listen.technobase.fm/tunein-mp3-pls" , BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz], 20.0, 1);
								}
								case 2:
								{
									boomboxmusic[j] = i;
									PlayAudioStreamForPlayer(j, "http://hot108.com/hot108.pls", BoomBox[i][bPosx] , BoomBox[i][bPosy], BoomBox[i][bPosz], 20.0, 1);
								}
								case 3:
								{
									boomboxmusic[j] = i;
									PlayAudioStreamForPlayer(j, "http://radiogmusic.com/rock.m3u" , BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz], 20.0, 1);
								}
								case 4:
								{
									boomboxmusic[j] = i;
									PlayAudioStreamForPlayer(j, "http://nextgen.go.ro:8012" , BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz], 20.0, 1);
								}
								case 5:
								{
									boomboxmusic[j] = i;
									PlayAudioStreamForPlayer(j, "http://radiotraditional.ro/hip-hop.m3u" , BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz], 20.0, 1);
								}
								case 6:
								{
									boomboxmusic[j] = i;
									PlayAudioStreamForPlayer(j, "http://somafm.com/tags.pls" , BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz], 20.0, 1);
								}
								case 7:
								{
									ShowPlayerDialog(playerid,1250,DIALOG_STYLE_INPUT,"URL","Introdu url-u aici","Porneste","Refuza");
								}
								case 8:
								{
									for (new k=0;k<MAX_PLAYERS;k++)
									{
										if (boomboxmusic[k] == i)
										{
											boomboxmusic[k] = 0;
											StopAudioStreamForPlayer(k);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return 1;
	}
	if(dialogid == 1250)
    {
        if(response)
        {
			for (new i=0;i<3000;i++)
			{
				if (PlayerToPoint(5.0, playerid, BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz]))
				{
					if (BoomBox[i][bObject] == 0)
					{
						return 1;
					}
					for (new j=0;j<MAX_PLAYERS;j++)
					{
						if (PlayerToPoint(20.0, j, BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz]))
						{
							boomboxmusic[j] = i;
							PlayAudioStreamForPlayer(j, inputtext , BoomBox[i][bPosx], BoomBox[i][bPosy], BoomBox[i][bPosz], 20.0, 1);
						}
					}
				}
			}
		}
	}
	if(dialogid == 1223)
    {
        if(response)
        {
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid,1224,DIALOG_STYLE_INPUT,"ID Obiect","Introdu id-ul obiectului","Ok","Refuza");
				}
				case 1:
				{
					for (new i=0;i<5000;i++)
					{
						if (PlayerToPoint(2.0, playerid, Furniture[i][furnitureX], Furniture[i][furnitureY], Furniture[i][furnitureZ]))
						{
							DestroyDynamicObject(Furniture[i][furnitureObject2]);
							Furniture[i][furnitureObject]=CreateObject(Furniture[i][furnitureModel], Furniture[i][furnitureX], Furniture[i][furnitureY], Furniture[i][furnitureZ], Furniture[i][furnitureRX], Furniture[i][furnitureRY], Furniture[i][furnitureRZ]);
							EditObject(playerid, Furniture[i][furnitureObject]);
							furnitureedit[playerid]=i;

							i=5000;
						}
					}
				}
				case 2:
				{
					for (new i=0;i<5000;i++)
					{
						if (PlayerToPoint(2.0, playerid, Furniture[i][furnitureX], Furniture[i][furnitureY], Furniture[i][furnitureZ]))
						{
							DestroyDynamicObject(Furniture[i][furnitureObject2]);
							new query[1024];
							format(query, sizeof(query), "DELETE FROM furniture WHERE ID=%d",i);
							mysql_query(query);
							Furniture[i][furnitureX]=0;
							Furniture[i][furnitureY]=0;
							Furniture[i][furnitureZ]=0;

							i=5000;
						}
					}
				}
			}
		}
	}
	if(dialogid == 1224)
	{
		if(response)
		{
			if(strval(inputtext) < 1 || strval(inputtext) > 11000)
			{
				SendClientMessage(playerid, COLOR_GREY, "Obiect invalid");
				return 1;
			}
			if (GetPlayerCash(playerid) < 300)
			{
				SendClientMessage(playerid, COLOR_GREY, "Pretul unui obiect este de 300$, iar tu nu ai destui bani.");
				return 1;
			}
			GivePlayerCash(playerid, -300);
			furnitureedit[playerid]=furnitureid;
			Furniture[furnitureedit[playerid]][furnitureHouse]=GetPlayerVirtualWorld(playerid);
			Furniture[furnitureedit[playerid]][furnitureInterior]=GetPlayerInterior(playerid);
			Furniture[furnitureedit[playerid]][furnitureModel]=strval(inputtext);
			GetPlayerPos(playerid,Furniture[furnitureedit[playerid]][furnitureX],Furniture[furnitureedit[playerid]][furnitureY],Furniture[furnitureedit[playerid]][furnitureZ]);
			Furniture[furnitureedit[playerid]][furnitureX]+=0.5;
			Furniture[furnitureedit[playerid]][furnitureZ]+=0.5;
			Furniture[furnitureedit[playerid]][furnitureY]+=0.5;
			Furniture[furnitureedit[playerid]][furnitureObject] = CreateObject(Furniture[furnitureedit[playerid]][furnitureModel], Furniture[furnitureedit[playerid]][furnitureX], Furniture[furnitureedit[playerid]][furnitureY], Furniture[furnitureedit[playerid]][furnitureZ], Furniture[furnitureedit[playerid]][furnitureRX], Furniture[furnitureedit[playerid]][furnitureRY], Furniture[furnitureedit[playerid]][furnitureRZ]);
			EditObject(playerid,Furniture[furnitureedit[playerid]][furnitureObject]);
			new query[1024];
			format(query, sizeof(query), "INSERT INTO furniture(ID,HouseID,Model,X,Y,Z,RX,RY,RZ,Interior) VALUES (%d,%d,%d,%f,%f,%f,%f,%f,%f,%d)",
			furnitureedit[playerid],
			Furniture[furnitureedit[playerid]][furnitureHouse],
			Furniture[furnitureedit[playerid]][furnitureModel],
			Furniture[furnitureedit[playerid]][furnitureX],
			Furniture[furnitureedit[playerid]][furnitureY],
			Furniture[furnitureedit[playerid]][furnitureZ],
			Furniture[furnitureedit[playerid]][furnitureRX],
			Furniture[furnitureedit[playerid]][furnitureRY],
			Furniture[furnitureedit[playerid]][furnitureRZ],
			Furniture[furnitureedit[playerid]][furnitureInterior]);
			mysql_query(query);
			furnitureid++;
		}
	}
	if(dialogid == 1230)
	{
		if(response)
		{
			if(listitem == 2)
			{
				ShowPlayerDialog(playerid, 1231, DIALOG_STYLE_LIST, "Care este viteza cu care trebuie sa circulati in oras?", "100km\n30km\n40km\n50km", "Alege", "Cancel");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Ne pare rau dar ati raspuns gresit si ati picat testul");
		}
	}
	if(dialogid == 1231)
	{
		if(response)
		{
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, 1232, DIALOG_STYLE_LIST, "Cand ai voie sa opresti?", "Cand stationez, dar niciodata pe strada\nNu am voie", "Alege", "Cancel");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Ne pare rau dar ati raspuns gresit si ati picat testul");
		}
	}
	if(dialogid == 1232)
	{
		if(response)
		{
			if(listitem == 0)
			{
				ShowPlayerDialog(playerid, 1233, DIALOG_STYLE_LIST, "Politia aprinde semnalele sonore ce faci?", "Imi continui drumul\nMa bag in fata ei\nClaxonez si eu\nMa dau pe partea dreapta a carosabilului", "Alege", "Cancel");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Ne pare rau dar ati raspuns gresit si ati picat testul");
		}
	}
	if(dialogid == 1233)
	{
		if(response)
		{
			if(listitem == 3)
			{
				ShowPlayerDialog(playerid, 1234, DIALOG_STYLE_LIST, "Ce faci cand faci un accident?", "Sun la politie\nStau in masina\nPlec linistit", "Alege", "Cancel");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Ne pare rau dar ati raspuns gresit si ati picat testul");
		}
	}
	if(dialogid == 1234)
	{
		if(response)
		{
			if(listitem == 0)
			{
				DMVTest[playerid] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "Mergi la o masina din afara {009900}DMV-ului{FFFFFF} unde te asteapta instructorul si urca in aceasta.");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Ne pare rau dar ati raspuns gresit si ati picat testul");
		}
	}
	if(dialogid == 1235)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if(PlayerInfo[playerid][pCarLic] == 0)
					{
						if (DMVTest[playerid] == 1)
						{
							SendClientMessage(playerid, COLOR_WHITE, "Mergi la o masina din afara {009900}DMV-ului{FFFFFF} unde te asteapta instructorul si urca in aceasta.");
							return 1;
						}
						if(GetPlayerCash(playerid) < Businesses[12][EntranceCost])
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
						ShowPlayerDialog(playerid, 1230, DIALOG_STYLE_LIST, "Cand ai voie sa depasesti?", "Oricand\nPe linie continua\nPe linie intrerupta", "Alege", "Cancel");
					}
					else SendClientMessage(playerid, COLOR_GREY, "Ai deja o licenta de condus.");
				}
				case 1:
				{
					if(PlayerInfo[playerid][pFlyLic] == 0)
					{
						if(GetPlayerCash(playerid) < 5000)
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
						GivePlayerCash(playerid,-5000);
						Businesses[12][Till] += 5000;
						SendClientMessage(playerid, COLOR_WHITE, "Ai cumparat o licenta de zbor.");
						PlayerInfo[playerid][pFlyLic] = 1;
					}
					else SendClientMessage(playerid, COLOR_GREY, "Ai deja o licenta.");
				}
			}
		}
	}
	if(dialogid == 1225)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowModelSelectionMenu(playerid, hatlist, "Palarii");
				}
				case 1:
				{
					ShowModelSelectionMenu(playerid, masklist, "Bandane");
				}
				case 2:
				{
					ShowModelSelectionMenu(playerid, glasseslist, "Ochelari");
				}
				case 3:
				{
					ShowModelSelectionMenu(playerid, guitarlist, "Chitari");
				}
				case 4:
				{
					ShowModelSelectionMenu(playerid, headphonelist, "Casti");
				}
				case 5:
				{
					ShowModelSelectionMenu(playerid, watchlist, "Ceasuri");
				}
				case 6:
				{
					ShowModelSelectionMenu(playerid, helmetlist, "Casti motor");
				}
				case 7:
				{
					if (GetPlayerCash(playerid) < 10)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani, pretul este de 10$");
						return 1;
					}
					GivePlayerCash(playerid, -10);
					if(IsValidPlayerObject(playerid, 8))
					{
						RemovePlayerAttachedObject(playerid, 8);
					}
					SetPlayerAttachedObject(playerid, 8, 18643,6,0.07,0.04,0.00,621.0,-12.0,-91.0,1.00,1.00,1.00);
					EditAttachedObject(playerid, 8);
					SendClientMessage(playerid,COLOR_GREY, "Pentru a putea edita obiectele /editclothes, iar pentru a le sterge /removeclothes");
					PlayerInfo[playerid][pLaser] = 18643;
				}
			}
		}
	}
	if(dialogid == 1226)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					EditAttachedObject(playerid, 3);
				}
				case 1:
				{
					EditAttachedObject(playerid, 2);
				}
				case 2:
				{
					EditAttachedObject(playerid, 4);
				}
				case 3:
				{
					EditAttachedObject(playerid, 6);
				}
				case 4:
				{
					EditAttachedObject(playerid, 7);
				}
				case 5:
				{
					EditAttachedObject(playerid, 8);
				}
				case 6:
				{
					EditAttachedObject(playerid, 1);
				}
				case 7:
				{
					EditAttachedObject(playerid, 9);
				}
			}
		}
	}
	if(dialogid == 1251)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					EditAttachedObject(playerid, 3);
				}
				case 1:
				{
					RemovePlayerAttachedObject(playerid, 3);
					PlayerInfo[playerid][pHair] = 0;
				}
			}
		}
	}
	if (dialogid == 1256)
	{
		if (response)
		{
			strmid(PlayerInfo[playerid][pAccent], inputtext, 0, strlen(inputtext), 999);
		}
	}
	if (dialogid == 1255)
	{
		if (response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid,1256,DIALOG_STYLE_INPUT,"Accent","Introdu accentul dorit.","Ok","Refuza");
				}
				case 1:
				{
					new textaccent[128];
					textaccent = "Fara";
					strmid(PlayerInfo[playerid][pAccent], textaccent, 0, strlen(textaccent), 999);
				}
			}
		}
	}
	if (dialogid == 1253)
	{
		if (response)
		{
			new string2[128];
			format(string2, sizeof(string2), "%s",inputtext);
			if (Tattoo[playerid][tID] == 1)
			{
				Tattoo[playerid][tBratStang] = string2;
			}
			else if (Tattoo[playerid][tID] == 2)
			{
				Tattoo[playerid][tBratDrept] = string2;
			}
			else if (Tattoo[playerid][tID] == 3)
			{
				Tattoo[playerid][tPiept] = string2;
			}
			else if (Tattoo[playerid][tID] == 4)
			{
				Tattoo[playerid][tSpate] = string2;
			}
			else if (Tattoo[playerid][tID] == 5)
			{
				Tattoo[playerid][tPiciorDrept] = string2;
			}
			else if (Tattoo[playerid][tID] == 6)
			{
				Tattoo[playerid][tPiciorStang] = string2;
			}
		}
	}
	if (dialogid == 1254)
	{
		if (response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid,1253,DIALOG_STYLE_INPUT,"Text Tattoo","Introdu aici descrierea tatuajului","Accepta","Refuza");
					Tattoo[playerid][tID] = 1;
				}
				case 1:
				{
					ShowPlayerDialog(playerid,1253,DIALOG_STYLE_INPUT,"Text Tattoo","Introdu aici descrierea tatuajului","Accepta","Refuza");
					Tattoo[playerid][tID] = 2;
				}
				case 2:
				{
					ShowPlayerDialog(playerid,1253,DIALOG_STYLE_INPUT,"Text Tattoo","Introdu aici descrierea tatuajului","Accepta","Refuza");
					Tattoo[playerid][tID] = 3;
				}
				case 3:
				{
					ShowPlayerDialog(playerid,1253,DIALOG_STYLE_INPUT,"Text Tattoo","Introdu aici descrierea tatuajului","Accepta","Refuza");
					Tattoo[playerid][tID] = 4;
				}
				case 4:
				{
					ShowPlayerDialog(playerid,1253,DIALOG_STYLE_INPUT,"Text Tattoo","Introdu aici descrierea tatuajului","Accepta","Refuza");
					Tattoo[playerid][tID] = 5;
				}
				case 5:
				{
					ShowPlayerDialog(playerid,1253,DIALOG_STYLE_INPUT,"Text Tattoo","Introdu aici descrierea tatuajului","Accepta","Refuza");
					Tattoo[playerid][tID] = 6;
				}
			}
		}
	}
	if(dialogid == 1229)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, 1228, DIALOG_STYLE_LIST, "Clothes", "Chitara\nCeas\nCasca motor\nBandana\nSapca\nOchelari\nCasti\nLaser", "Alege", "Cancel");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, 1226, DIALOG_STYLE_LIST, "Clothes", "Palarii\nBandane\nOchelari\nCasti\nCeas\nLaser\nChitara\nCasca motor", "Alege", "Cancel");
				}
				case 2:
				{
					ShowPlayerDialog(playerid, 1227, DIALOG_STYLE_LIST, "Clothes", "Palarii\nBandane\nOchelari\nCasti\nCeasuri\nLaser\nChitara\nCasca motor", "Alege", "Cancel");
				}
			}
		}
	}
	if(dialogid == 1228)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if (PlayerInfo[playerid][pGuitar] == 0)
					{
						SendClientMessage(playerid,COLOR_GREY,"Nu ai o chitara, poti cumpara de la binco");
						return 1;
					}
					if(IsValidPlayerObject(playerid, 1))
					{
						RemovePlayerAttachedObject(playerid, 1);
					}
					SetPlayerAttachedObject(playerid, 1, PlayerInfo[playerid][pGuitar],1,0.22,-0.10,0.02,359.0,73.0,-4.0,1.00,1.00,1.00);
					EditAttachedObject(playerid, 1);
				}
				case 1:
				{
					if (PlayerInfo[playerid][pWatch] == 0)
					{
						SendClientMessage(playerid,COLOR_GREY,"Nu ai un ceas, poti cumpara de la binco");
						return 1;
					}
					if(IsValidPlayerObject(playerid, 7))
					{
						RemovePlayerAttachedObject(playerid, 7);
					}
					PlayerActionMessage(playerid,15.0,"isi pune un ceas pe mana.");
					SetPlayerAttachedObject(playerid, 7, PlayerInfo[playerid][pWatch],5,0.00,-0.01,-0.03,351.0,117.0,-91.0,1.00,1.00,1.00);
					EditAttachedObject(playerid, 7);
					watch[playerid] = 1;
				}
				case 2:
				{
					if (PlayerInfo[playerid][pHelmet] == 0)
					{
						SendClientMessage(playerid, COLOR_GREY, "Nu ai o casca de motor, poti cumpara de la binco.");
						return 1;
					}
					helmet[playerid] = 1;
					PlayerActionMessage(playerid,15.0,"isi pune casca pe cap.");
					if(IsValidPlayerObject(playerid, 9))
					{
						RemovePlayerAttachedObject(playerid, 9);
					}
					SetPlayerAttachedObject(playerid, 9, PlayerInfo[playerid][pHelmet], 2, 0.079577, 0.016865, 0.005709, 171.620758, 93.131149, 280.057983, 1.000000, 1.000000, 1.000000 );
					EditAttachedObject(playerid, 9);
				}
				case 3:
				{
					if (PlayerInfo[playerid][pMaskobject] == 0)
					{
						SendClientMessage(playerid,COLOR_GREY,"Nu ai o masca vizuala pentru fata, poti cumpara de la binco.");
						return 1;
					}
					if(IsValidPlayerObject(playerid, 2))
					{
						RemovePlayerAttachedObject(playerid, 2);
					}
					SetPlayerAttachedObject(playerid, 2, PlayerInfo[playerid][pMaskobject],2,0.04,0.02,0.00,273.0,4.0,-93.0,1.00,1.00,1.00);
					EditAttachedObject(playerid, 2);
				}
				case 4:
				{
					if (PlayerInfo[playerid][pHat] == 0)
					{
						SendClientMessage(playerid,COLOR_GREY,"Nu ai o sapca, poti cumpara de la binco.");
						return 1;
					}
					if(IsValidPlayerObject(playerid, 3))
					{
						RemovePlayerAttachedObject(playerid, 3);
					}
					SetPlayerAttachedObject(playerid, 3, PlayerInfo[playerid][pHat],2,0.20,0.01,0.01,528.0,5.0,12.0,1.00,1.00,1.00);
					EditAttachedObject(playerid, 3);
				}
				case 5:
				{
					if (PlayerInfo[playerid][pGlasses] == 0)
					{
						SendClientMessage(playerid,COLOR_GREY,"Nu ai ochelari, poti cumpara de la binco.");
						return 1;
					}
					if(IsValidPlayerObject(playerid, 4))
					{
						RemovePlayerAttachedObject(playerid, 4);
					}
					SetPlayerAttachedObject(playerid, 4, PlayerInfo[playerid][pGlasses],2,0.10,0.06,0.00,570.0,93.0,-123.0,1.00,1.00,1.00);
					EditAttachedObject(playerid, 4);
				}
				case 6:
				{
					if (PlayerInfo[playerid][pHeadphone] == 0)
					{
						SendClientMessage(playerid,COLOR_GREY,"Nu ai casti, poti cumpara de la binco.");
						return 1;
					}
					if(IsValidPlayerObject(playerid, 6))
					{
						RemovePlayerAttachedObject(playerid, 6);
					}
					SetPlayerAttachedObject(playerid, 6, PlayerInfo[playerid][pHeadphone],2,0.04,-0.00,0.00,1538.0,2.0,-93.0,1.00,1.00,1.00);
					EditAttachedObject(playerid, 6);
				}
				case 7:
				{
					if (PlayerInfo[playerid][pLaser] == 0)
					{
						SendClientMessage(playerid,COLOR_GREY,"Nu ai laser, poti cumpara de la binco.");
						return 1;
					}
					if(IsValidPlayerObject(playerid, 8))
					{
						RemovePlayerAttachedObject(playerid, 8);
					}
					SetPlayerAttachedObject(playerid, 8, PlayerInfo[playerid][pLaser],6,0.07,0.04,0.00,621.0,-12.0,-91.0,1.00,1.00,1.00);
					EditAttachedObject(playerid, 8);
				}
			}
		}
	}
	if(dialogid == 1227)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					RemovePlayerAttachedObject(playerid, 3);
				}
				case 1:
				{
					RemovePlayerAttachedObject(playerid, 2);
				}
				case 2:
				{
					RemovePlayerAttachedObject(playerid, 4);
				}
				case 3:
				{
					RemovePlayerAttachedObject(playerid, 6);
				}
				case 4:
				{
					RemovePlayerAttachedObject(playerid, 7);
					watch[playerid] = 0;
				}
				case 5:
				{
					RemovePlayerAttachedObject(playerid, 8);
				}
				case 6:
				{
					RemovePlayerAttachedObject(playerid, 1);
				}
				case 7:
				{
					helmet[playerid] = 0;
					PlayerActionMessage(playerid,15.0,"isi da jos casca de pe cap.");
					RemovePlayerAttachedObject(playerid, 9);
				}
			}
		}
	}
	if(dialogid == 752)
    {
        if(response)
        {
            for(new i = 0; i < sizeof(Businesses); i++)
            {
		        switch(listitem)
		        {
		            case 0:
		            {
						if(GetPlayerCash(playerid) >= 150)
						{
							PlayerInfo[playerid][pRadio] = 1;
							GivePlayerCash(playerid,-150);
							SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat o statie foloseste /setfreq");
							Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
							Businesses[GetPlayerVirtualWorld(playerid)][Till]+=150;
							PlayerActionMessage(playerid,15.0,"a platit statia dupa care a primit statia de la vanzator");
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 1:
		            {
						if(GetPlayerCash(playerid) >= 10)
						{
						    PlayerInfo[playerid][pBaseball] = 1;
							SafeGivePlayerWeapon(playerid,5,1);
							GivePlayerCash(playerid,-10);
							SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat o bata");
							Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
							Businesses[GetPlayerVirtualWorld(playerid)][Till]+=10;
							PlayerActionMessage(playerid,15.0,"a platit bata dupa care a primit bata de la vanzator");
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 2:
		            {
						if(GetPlayerCash(playerid) >= 100)
						{
							GivePlayerCash(playerid,-100);
							SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat o trusa de scule");
							SendClientMessage(playerid, COLOR_WHITE, "[OPTIONAL] /takehammer, /hidetool  ");
							Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
							Businesses[GetPlayerVirtualWorld(playerid)][Till]+=100;
							PlayerInfo[playerid][pToolkit] = 1;
							PlayerActionMessage(playerid,15.0,"a platit trusa de scule dupa care a primit trusa de la vanzator");
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 3:
		            {
						if(GetPlayerCash(playerid) >= 50)
						{
	                 		GivePlayerCash(playerid,-50);
							Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
							Businesses[GetPlayerVirtualWorld(playerid)][Till]+=50;
							PlayerInfo[playerid][pCigarettes] += 15;
							format(string, sizeof(string), "Acum ai %d tigari.", PlayerInfo[playerid][pCigarettes]);
		                    SendClientMessage(playerid, COLOR_WHITE, string);
							SendClientMessage(playerid, COLOR_WHITE, "[Info] Foloseste /smoke pentru a fuma o tigara.");
							PlayerActionMessage(playerid,15.0,"a platit tigarile dupa care a primit tigarile de la vanzator");
						    return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 4:
		            {
						if(GetPlayerCash(playerid) >= 5)
						{
	                 		GivePlayerCash(playerid,-5);
							Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
							Businesses[GetPlayerVirtualWorld(playerid)][Till]+=5;
	      					PlayerInfo[playerid][pLighter] += 30;
							PlayerActionMessage(playerid,15.0,"a platit bricheta dupa care a primit bricheta de la vanzator");
				            return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 5:
		            {
						if(GetPlayerCash(playerid) >= 35)
						{
							GivePlayerCash(playerid,-35);
							Businesses[GetPlayerVirtualWorld(playerid)][Till]+=35;
							new prize;
							new symb1[32]; new symb2[32]; new symb3[32];
							new randcard1 = random(10);
							new randcard2 = random(10);
							new randcard3 = random(10);
							if(randcard1 >= 5)
							{
								format(symb1, sizeof(symb1), "~b~]");
								randcard1 = 1;
							}
							else if(randcard1 <= 4 && randcard1 >= 2)
							{
								format(symb1, sizeof(symb1), "~g~]");
								randcard1 = 2;
							}
							else if(randcard1 < 2)
							{
								format(symb1, sizeof(symb1), "~y~]");
								randcard1 = 3;
							}
							if(randcard2 >= 5)
							{
								format(symb2, sizeof(symb2), "~b~]");
								randcard2 = 1;
							}
							else if(randcard2 <= 4 && randcard2 >= 2)
							{
								format(symb2, sizeof(symb2), "~g~]");
								randcard2 = 2;
							}
							else if(randcard2 < 2)
							{
								format(symb2, sizeof(symb2), "~y~]");
								randcard2 = 3;
							}
							if(randcard3 >= 5)
							{
								format(symb3, sizeof(symb3), "~b~]");
								randcard3 = 1;
							}
							else if(randcard3 <= 4 && randcard3 >= 2)
							{
								format(symb3, sizeof(symb3), "~g~]");
								randcard3 = 2;
							}
							else if(randcard3 < 2)
							{
								format(symb3, sizeof(symb3), "~y~]");
								randcard3 = 3;
							}
							if(randcard1 == randcard2 && randcard1 == randcard3)
							{
								if(randcard1 > 5)
								{
									prize = 250;
								}
								if(randcard1 <= 4 && randcard1 >= 2)
								{
									prize = 150;
								}
								if(randcard1 < 2)
								{
									prize = 50;
								}
								GivePlayerCash(playerid,prize);
								Businesses[GetPlayerVirtualWorld(playerid)][Till]-= prize;
								Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
								format(string, sizeof(string), "%s %s %s ~n~~n~~w~~g~$%d",symb1,symb2,symb3, prize);
							}
							else
							{
								format(string, sizeof(string), "%s %s %s ~n~~n~~w~~r~$0",symb1,symb2,symb3);
							}
							GameTextForPlayer(playerid, string, 3000, 3);
							PlayerActionMessage(playerid,15.0,"a platit lozul dupa care asteapta extragerea");
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 6:
		            {
						if(GetPlayerCash(playerid) >= 50)
						{
							GivePlayerCash(playerid,-50);
							SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat o canistra cu benzina (/fillup)");
						 	Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
							Businesses[GetPlayerVirtualWorld(playerid)][Till]+=50;
							PlayerInfo[playerid][pFuel] += 1;
							PlayerActionMessage(playerid,15.0,"a platit canistra dupa care a primit canistra de la vanzator");
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 7:
		            {
		                if(GetPlayerCash(playerid) >= 250)
		                {
				            GivePlayerCash(playerid,-250);
							SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat o masca foloeste /maskon");
							Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
							FakeMask[playerid] = 1;
							Businesses[GetPlayerVirtualWorld(playerid)][Till]+=250;
							PlayerActionMessage(playerid,15.0,"a platit masca dupa care a primit masca de la vanzator");
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 8:
		            {
		                if(GetPlayerCash(playerid) >= 10)
		                {
		                    SafeGivePlayerWeapon(playerid,6,1);
		                    PlayerInfo[playerid][pShovel] = 1;
		                    GivePlayerCash(playerid,-10);
		                    SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat o lopata.");
		                    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
		                    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=10;
		                    PlayerActionMessage(playerid,15.0,"a platit lopata dupa care a primit lopata de la vanzator");
		                    return 1;
		                }
		                else
		                {
		                    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
	                 	}
		            }
		            case 9:
		            {
						if(GetPlayerCash(playerid) >= 2)
						{
						    GivePlayerCash(playerid,-2);
							SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat un zar foloseste /dice");
							Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
							Businesses[GetPlayerVirtualWorld(playerid)][Till]+=2;
							Dice[playerid] = 1;
							PlayerActionMessage(playerid,15.0,"a platit zarul dupa care a primit zarul de la vanzator");
							return 1;
		                }
		                else
		                {
		                    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
	                 	}
		            }
		            case 10:
		            {
		            	if(GetPlayerCash(playerid) >= 15)
		            	{
		            	    PlayerInfo[playerid][pParachute] = 1;
		            	    SafeGivePlayerWeapon(playerid,46,0);
		            	    GivePlayerCash(playerid,-15);
		            	    SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat o parasuta");
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=15;

		            	    PlayerActionMessage(playerid,15.0,"a platit parasuta dupa care a primit parasuta de la vanzator");
		            	    return 1;
		                }
		                else
		                {
		                    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
	                 	}
		            }
		            case 11:
		            {
		            	if(GetPlayerCash(playerid) >= 5)
		            	{
		            	    PlayerInfo[playerid][pCane] = 1;
		            	    SafeGivePlayerWeapon(playerid,15,1);
		            	    GivePlayerCash(playerid,-5);
		            	    SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat o carja.");
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=5;

		            	    PlayerActionMessage(playerid,15.0,"a platit carja dupa care a primit carja de la vanzator");
		            	    return 1;
		                }
		                else
		                {
		                    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
	                 	}
		            }
		            case 12:
		            {
		            	if(GetPlayerCash(playerid) >= 45)
		            	{
		            	    SafeGivePlayerWeapon(playerid,43,10);
		            	    GivePlayerCash(playerid,-45);
		            	    SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat o camera foto");
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=45;
		            	    PlayerInfo[playerid][pCamera] = 1;

		            	    PlayerActionMessage(playerid,15.0,"a platit camera foto dupa care a primit camera de la vanzator");
		            	    return 1;
		                }
		                else
		                {
		                    SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
	                 	}
		            }
					case 13:
		            {
						if(GetPlayerCash(playerid) >= 200)
						{
							if (PlayerInfo[playerid][pBoombox] > 0)
							{
								SendClientMessage(playerid, COLOR_GREY, "Ai deja un casetofon in mana");
								return 1;
							}
							GivePlayerCash(playerid,-200);
							SendClientMessage(playerid, COLOR_WHITE, "[Felicitari] Ai cumparat un casetofon");
							Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
							Businesses[GetPlayerVirtualWorld(playerid)][Till]+=200;
							PlayerInfo[playerid][pBoombox] = boombox;
							boombox++;
							if(IsValidPlayerObject(playerid, 5))
							{
								RemovePlayerAttachedObject(playerid, 5);
							}
							SetPlayerAttachedObject(playerid, 5, 2226, 5, 0.41,0.01,0.00,0.0,-94.0,11.0,1.00,1.00,1.00);
							PlayerActionMessage(playerid,15.0,"a platit casetofonul dupa care a primit casetofonul de la vanzator");
							BoomBox[PlayerInfo[playerid][pBoombox]][bObject] = 0;
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
					}
		        }
		   	}
		}
		return 1;
    }
	if(dialogid == 753)
    {
        if(response)
        {
            for(new i = 0; i < sizeof(Businesses); i++)
            {
		        switch(listitem)
		        {
		            case 0:
		            {
                    	ShowPlayerDialog(playerid, 754, DIALOG_STYLE_LIST, "House Collection", "Fridge(362$) \nCD Player(42$) \nSafety Stash(450$) \nCloset(135$) \nHouse Alarm(128$)", "Okay", "Cancel");
						return 1;
		            }
		            case 1:
		            {
                    	//ShowPlayerDialog(playerid, 755, DIALOG_STYLE_LIST, "Music Collection (CD)", "Johnnies CD(19$)", "Okay", "Cancel");
                    	SendClientMessage(playerid, COLOR_WHITE, "  Disabled for now.");
						return 1;
		            }
		            case 2:
		            {
                    	ShowPlayerDialog(playerid, 756, DIALOG_STYLE_LIST, "Car Collection", "Car Radio Phillips(38$)\nCar Radio Samsung(31$)\nRed Neon(150$)\nBlue Neon(150$)\nGreen Neon(150$)", "Okay", "Cancel");
						return 1;
		            }
		        }
		   	}
		}
		return 1;
    }
	if(dialogid == 100)
    {
        if(response)
        {
		    switch(listitem)
		    {
				case 0:
		        {
					CPlocation[playerid] = 1;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, 971.0174,-1365.7886,13.6284, 3.0);
					return 1;
		        }
		        case 1:
		        {
					CPlocation[playerid] = 2;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Building[0][EnterX],Building[0][EnterY],Building[0][EnterZ], 3.0);
					return 1;
		        }
		        case 2:
		        {
                    CPlocation[playerid] = 3;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Building[1][EnterX],Building[1][EnterY],Building[1][EnterZ], 3.0);
					return 1;
		        }
				case 3:
		        {
                    CPlocation[playerid] = 4;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Building[2][EnterX],Building[2][EnterY],Building[2][EnterZ], 3.0);
					return 1;
		        }
				case 4:
		        {
                    CPlocation[playerid] = 5;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Building[3][EnterX],Building[3][EnterY],Building[3][EnterZ], 3.0);
					return 1;
		        }
				case 5:
		        {
                    CPlocation[playerid] = 6;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Building[4][EnterX],Building[4][EnterY],Building[4][EnterZ], 3.0);
					return 1;
		        }
				case 6:
		        {
                    CPlocation[playerid] = 7;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Building[5][EnterX],Building[5][EnterY],Building[5][EnterZ], 3.0);
					return 1;
		        }
				case 7:
		        {
                    CPlocation[playerid] = 8;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Building[6][EnterX],Building[6][EnterY],Building[6][EnterZ], 3.0);
					return 1;
		        }
				case 8:
		        {
                    CPlocation[playerid] = 9;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Building[7][EnterX],Building[7][EnterY],Building[7][EnterZ], 3.0);
					return 1;
		        }
				case 9:
		        {
                    CPlocation[playerid] = 10;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, 1794.9323,-1713.9939,13.4904, 3.0); // lsas
					return 1;
		        }
				case 10:
		        {
                    CPlocation[playerid] = 11;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, -72.5889,-1130.9968,1.0781, 3.0); // trucker
					return 1;
		        }
				case 11:
		        {
                    CPlocation[playerid] = 12;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, 2102.4446,-1788.6082,13.5547, 3.0);
					return 1;
		        }
				case 12:
		        {
                    CPlocation[playerid] = 13;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, 2271.1638,-2352.5271,13.5469, 3.0);
					return 1;
		        }
				case 13:
		        {
                    CPlocation[playerid] = 14;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Businesses[5][EnterX],Businesses[5][EnterY],Businesses[5][EnterZ], 3.0);
					return 1;
		        }
				case 14:
		        {
                    CPlocation[playerid] = 15;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Businesses[14][EnterX],Businesses[14][EnterY],Businesses[14][EnterZ], 3.0);
					return 1;
		        }
				case 15:
		        {
                    CPlocation[playerid] = 16;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Businesses[10][EnterX],Businesses[10][EnterY],Businesses[10][EnterZ], 3.0);
					return 1;
		        }
				case 16:
		        {
                    CPlocation[playerid] = 17;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, 1219.3068,-1812.6967,16.5938, 3.0);
					return 1;
		        }
				case 17:
		        {
                    CPlocation[playerid] = 18;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Building[9][EnterX],Building[9][EnterY],Building[9][EnterZ], 3.0);
					return 1;
		        }
				case 18:
		        {
                    CPlocation[playerid] = 19;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, Businesses[8][EnterX],Businesses[8][EnterY],Businesses[8][EnterZ], 3.0);
					return 1;
		        }
				case 19:
		        {
                    CPlocation[playerid] = 20;
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid, 1667.9360,-1408.6416,13.5469, 3.0);
					return 1;
		        }
		   	}
		}
		return 1;
    }
	if(dialogid == 754)
    {
        if(response)
        {
            for(new i = 0; i < sizeof(Businesses); i++)
            {
		        switch(listitem)
		        {
		            case 0:
		            { // Fridge
						if(GetPlayerCash(playerid) >= 361)
						{
							new playername[MAX_PLAYER_NAME];
							GetPlayerName(playerid, playername, sizeof(playername));
							if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
							{
								GivePlayerCash(playerid,-362);
								Houses[PlayerInfo[playerid][pHouseKey]][hFridge] = 1;
								// CD Giving
								SendClientMessage(playerid, COLOR_WHITE, "  You bought a fridge for 362 bucks, its installed into your house.");
								// Biz
			            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
			            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=362;

								return 1;
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 1:
		            { // CD player
						if(GetPlayerCash(playerid) >= 41)
						{
							new playername[MAX_PLAYER_NAME];
							GetPlayerName(playerid, playername, sizeof(playername));
							if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
							{
								GivePlayerCash(playerid,-42);
								Houses[PlayerInfo[playerid][pHouseKey]][hRadio] = 1;
								// CD Giving
								SendClientMessage(playerid, COLOR_WHITE, "  You bought a radio for 42 bucks, its installed into your house.");
								// Biz
			            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
			            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=42;

								return 1;
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 2:
		            { // Safety Stash
  						if(GetPlayerCash(playerid) >= 449)
						{
							new playername[MAX_PLAYER_NAME];
							GetPlayerName(playerid, playername, sizeof(playername));
							if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
							{
								GivePlayerCash(playerid,-450);
								Houses[PlayerInfo[playerid][pHouseKey]][hBox] = 1;
								// CD Giving
								SendClientMessage(playerid, COLOR_WHITE, "  You bought a safety stash for 450 bucks, its installed into your house.");
								// Biz
			            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
			            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=450;

								return 1;
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 3:
		            { // Closet
  						if(GetPlayerCash(playerid) >= 134)
						{
							new playername[MAX_PLAYER_NAME];
							GetPlayerName(playerid, playername, sizeof(playername));
							if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
							{
								GivePlayerCash(playerid,-135);
								Houses[PlayerInfo[playerid][pHouseKey]][hCloset] = 1;
								// CD Giving
								SendClientMessage(playerid, COLOR_WHITE, "  You bought a closet for 135 bucks, its installed into your house.");
								// Biz
			            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
			            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=135;

								return 1;
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 4:
		            { // House Alarm
  						if(GetPlayerCash(playerid) >= 127)
						{
							new playername[MAX_PLAYER_NAME];
							GetPlayerName(playerid, playername, sizeof(playername));
							if(strcmp(playername, Houses[PlayerInfo[playerid][pHouseKey]][Owner], true) == 0)
							{
								GivePlayerCash(playerid,-128);
								Houses[PlayerInfo[playerid][pHouseKey]][hAlarm] = 1;
								// CD Giving
								SendClientMessage(playerid, COLOR_WHITE, "  You bought a house alarm for 128 bucks, its installed into your house.");
								// Biz
			            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
			            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=128;

								return 1;
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "You do not own a house");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		        }
		   	}
		}
		return 1;
    }
	if(dialogid == 756)
    {
        if(response)
        {
            for(new i = 0; i < sizeof(Businesses); i++)
            {
		        switch(listitem)
		        {
		            case 2:
		            {   // Red Neon(150$)
						if(GetPlayerCash(playerid) >= 149)
						{
						    if(PlayerInfo[playerid][pCarKey] == 0)
						    {
						        SendClientMessage(playerid, COLOR_GRAD2, "  You do not have a car spawned.");
						        return 1;
						    }
						    if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon] != 0)
						    {
						        SendClientMessage(playerid, COLOR_GRAD2, "  Your car already has neon installed.");
						        return 1;
						    }
							GivePlayerCash(playerid,-150);
							// Message
							SendClientMessage(playerid, COLOR_WHITE, "  You bought a Red Neon tube for your vehicle for 150 bucks.");
							SendClientMessage(playerid, COLOR_WHITE, "  DOES NOT SAVE AS ITS A TEST.");
							// Biz
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=150;
		            	    // Hand out the shit
							VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon] = CreateObject(18647,0,0,0,0,0,0,100.0);
							VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon2] = CreateObject(18647,0,0,0,0,0,0,100.0);
							AttachObjectToVehicle(VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon], PlayerInfo[playerid][pCarKey], -0.7, 0.0, -0.70, 0.0, 0.0, 0.0);
							AttachObjectToVehicle(VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon2], PlayerInfo[playerid][pCarKey], 0.7, 0.0, -0.70, 0.0, 0.0, 0.0);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 3:
		            {   // Blue Neon(150$)
						if(GetPlayerCash(playerid) >= 149)
						{
						    if(PlayerInfo[playerid][pCarKey] == 0)
						    {
						        SendClientMessage(playerid, COLOR_GRAD2, "  You do not have a car spawned.");
						        return 1;
						    }
						    if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon] != 0)
						    {
						        SendClientMessage(playerid, COLOR_GRAD2, "  Your car already has neon installed.");
						        return 1;
						    }
							GivePlayerCash(playerid,-150);
							// Message
							SendClientMessage(playerid, COLOR_WHITE, "  You bought a Blue Neon tube for your vehicle for 150 bucks.");
							SendClientMessage(playerid, COLOR_WHITE, "  DOES NOT SAVE AS ITS A TEST.");
							// Biz
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=150;
		            	    // Hand out the shit
							VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon] = 1;
							VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon] = CreateObject(18648,0,0,0,0,0,0,100.0);
							VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon2] = CreateObject(18648,0,0,0,0,0,0,100.0);
							AttachObjectToVehicle(VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon], PlayerInfo[playerid][pCarKey], -0.7, 0.0, -0.70, 0.0, 0.0, 0.0);
							AttachObjectToVehicle(VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon2], PlayerInfo[playerid][pCarKey], 0.7, 0.0, -0.70, 0.0, 0.0, 0.0);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		            case 4:
		            {   // Green Neon(150$)
						if(GetPlayerCash(playerid) >= 149)
						{
						    if(PlayerInfo[playerid][pCarKey] == 0)
						    {
						        SendClientMessage(playerid, COLOR_GRAD2, "  You do not have a car spawned.");
						        return 1;
						    }
						    if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon] != 0)
						    {
						        SendClientMessage(playerid, COLOR_GRAD2, "  Your car already has neon installed.");
						        return 1;
						    }
							GivePlayerCash(playerid,-150);
							// Message
							SendClientMessage(playerid, COLOR_WHITE, "  You bought a Green Neon tube for your vehicle for 150 bucks.");
							SendClientMessage(playerid, COLOR_WHITE, "  DOES NOT SAVE AS ITS A TEST.");
							// Biz
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
		            	    Businesses[GetPlayerVirtualWorld(playerid)][Till]+=150;
		            	    // Hand out the shit
							VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon] = 1;
							VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon] = CreateObject(18649,0,0,0,0,0,0,100.0);
							VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon2] = CreateObject(18649,0,0,0,0,0,0,100.0);
							AttachObjectToVehicle(VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon], PlayerInfo[playerid][pCarKey], -0.7, 0.0, -0.70, 0.0, 0.0, 0.0);
							AttachObjectToVehicle(VehicleInfo[PlayerInfo[playerid][pCarKey]][vNeon2], PlayerInfo[playerid][pCarKey], 0.7, 0.0, -0.70, 0.0, 0.0, 0.0);
							return 1;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani.");
							return 1;
						}
		            }
		        }
		   	}
		}
		return 1;
    }
    if(dialogid == 259)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    SetPlayerSkin(playerid, 267);
                }
                case 1:
                {
                    SetPlayerSkin(playerid, 281);
                }
                case 2:
                {
                    SetPlayerSkin(playerid, 280);
                }
                case 3:
                {
                    SetPlayerSkin(playerid, 266);
                }
                case 4:
                {
                    SetPlayerSkin(playerid, 265);
                }
                case 5:
                {
                    SetPlayerSkin(playerid, 284);
                }
                case 6:
                {
                    SetPlayerSkin(playerid, 306);
                }
                case 7:
                {
                    SendClientMessage(playerid, 0xFFFFFF, "You are now back to your civillian skin.");
                    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                    return 1;
                }
            }
        }
        return 1;
    }
   if(dialogid == 112)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    SafeGivePlayerWeapon(playerid, 3, 1);
                    ShowPlayerDialog(playerid, 112, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\n\nDa jos echipamentul", "Echipare", "Cancel");
                }
                case 1:
                {
                    SafeGivePlayerWeapon(playerid, 41, 1000);
                    ShowPlayerDialog(playerid, 112, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\n\nDa jos echipamentul", "Echipare", "Cancel");
                }
                case 2:
                {
                    SafeGivePlayerWeapon(playerid, 24, 100);
                    ShowPlayerDialog(playerid, 112, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\n\nDa jos echipamentul", "Echipare", "Cancel");
                }
                case 3:
                {
                    if(PlayerInfo[playerid][pRank]  > 17)
                    {
                        SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti autorizat.");
                        return 1;
                    }
                    SafeGivePlayerWeapon(playerid, 29, 150);
                    ShowPlayerDialog(playerid, 112, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\n\nDa jos echipamentul", "Echipare", "Cancel");
                }
                case 4:
                {
                    if(PlayerInfo[playerid][pRank]  > 17) { SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti autorizat."); return 1; }
                    {
                        SafeGivePlayerWeapon(playerid, 4, 1);
                        ShowPlayerDialog(playerid, 112, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\n\nDa jos echipamentul", "Echipare", "Cancel");
                    }
                }
                case 5:
                {
                    if(PlayerInfo[playerid][pRank]  > 17)
                    {
                        SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti autorizat.");
                        return 1;
                    }
                    SafeGivePlayerWeapon(playerid, 25, 50);
                    ShowPlayerDialog(playerid, 112, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\n\nDa jos echipamentul", "Echipare", "Cancel");
                }
                case 6:
                {
                    if(PlayerInfo[playerid][pRank]  > 17)
                    {
                        SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti autorizat.");
                        return 1;
                    }
                    SafeGivePlayerWeapon(playerid, 31, 150);
                    ShowPlayerDialog(playerid, 112, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\n\nDa jos echipamentul", "Echipare", "Cancel");
                }
                case 7:
                {
                    if(PlayerInfo[playerid][pRank]  > 17)
                    {
                        SendClientMessage(playerid, COLOR_LIGHTRED, "Nu esti autorizat.");
                        return 1;
                    }
                    SafeGivePlayerWeapon(playerid, 34, 30);
                    ShowPlayerDialog(playerid, 112, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\n\nDa jos echipamentul", "Echipare", "Cancel");
                }
                case 8:
                {
                    SetPlayerArmour(playerid, 100);
                    PlayerInfo[playerid][pArmour] = 100;
                    PlayerInfo[playerid][pGotArmour] = 1;
                    ShowPlayerDialog(playerid, 112, DIALOG_STYLE_LIST, "Echipare", "Baston\nSpray cu piper\nDesert Eagle\nMP5\nCutit\nShotgun\nM4A1\nSniper Rifle\nKevlar\n\nDa jos echipamentul", "Echipare", "Cancel");
                }
                case 9:
                {
                    SafeResetPlayerWeapons(playerid);
                    return 1;
                }
            }
        }
        return 1;
    }
    if(dialogid == 113)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    SafeGivePlayerWeapon(playerid, 42, 350); // Fire extinguisher
                    ShowPlayerDialog(playerid, 113, DIALOG_STYLE_LIST, "Equipment Locker", "Fire Extinguisher\nShovel", "Equip", "Cancel");
                }
                case 1:
                {
                    SafeGivePlayerWeapon(playerid, 6, 1); // Shovel
                    ShowPlayerDialog(playerid, 113, DIALOG_STYLE_LIST, "Equipment Locker", "Fire Extinguisher\nShovel", "Equip", "Cancel");
                }
            }
        }
        return 1;
    }
    if(dialogid == 117)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    SetPlayerArmour(playerid, 50);
                    ShowPlayerDialog(playerid, 117, DIALOG_STYLE_LIST, "Echipare", "Armura\nTomfa\nSpray cu piper\nColt-45\nDa jos echipamentul", "Echipare", "Cancel");
                    
                }
                case 1:
                {
                    SafeGivePlayerWeapon(playerid, 3, 1);
                    ShowPlayerDialog(playerid, 117, DIALOG_STYLE_LIST, "Echipare", "Armura\nTomfa\nSpray cu piper\nColt-45\nDa jos echipamentul", "Echipare", "Cancel");

                }
                case 2:
                {
                    SafeGivePlayerWeapon(playerid, 41, 500);
                    ShowPlayerDialog(playerid, 117, DIALOG_STYLE_LIST, "Echipare", "Armura\nTomfa\nSpray cu piper\nColt-45\nDa jos echipamentul", "Echipare", "Cancel");

                }
                case 3:
                {
                    SafeGivePlayerWeapon(playerid, 22, 50);
                    ShowPlayerDialog(playerid, 117, DIALOG_STYLE_LIST, "Echipare", "Armura\nTomfa\nSpray cu piper\nColt-45\nDa jos echipamentul", "Echipare", "Cancel");

                }
                case 4:
                {
                    SafeResetPlayerWeapons(playerid);
                    SetPlayerArmour(playerid, 0);
                    ShowPlayerDialog(playerid, 117, DIALOG_STYLE_LIST, "Echipare", "Armura\nTomfa\nSpray cu piper\nColt-45\nDa jos echipamentul", "Echipare", "Cancel");

                }
            }
        }
        return 1;
    }
    if(dialogid == 114)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    SafeGivePlayerWeapon(playerid, 23, 50); //SDPistol
                }
                case 1:
                {
                    SafeGivePlayerWeapon(playerid, 24, 50); // Deagle
                }
            }
        }
        return 1;
    }
    if(dialogid == 260)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    SetPlayerSkin(playerid, 283);
                }
                case 1:
                {
                    SetPlayerSkin(playerid, 282);
                }
                case 2:
                {
                    SetPlayerSkin(playerid, 288);
                }
                case 3:
                {
                    SetPlayerSkin(playerid, 287); // camo suit
                }
                case 4:
                {
                    SetPlayerSkin(playerid, 71);
                }
                case 5:
                {
                    SendClientMessage(playerid, COLOR_GRAD2, "  You are now back to your civillian skin.");
                    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                    return 1;
                }
            }
        }
        return 1;
    }
    if(dialogid == 262)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0:
                {
                    SetPlayerSkin(playerid, 274);
                }
                case 1:
                {
                    SetPlayerSkin(playerid, 70);
                }
                case 2:
                {
                    SetPlayerSkin(playerid, 275);
                }
                case 3:
                {
                    SetPlayerSkin(playerid, 276);
                }
                case 4:
                {
                    SetPlayerSkin(playerid, 278);
                }
                case 5:
                {
                    SetPlayerSkin(playerid, 279);
                }
                case 6:
                {
                    SetPlayerSkin(playerid, 277);
                }
                case 7:
                {
                    SetPlayerSkin(playerid, 308);
                }
                case 8:
                {
                    SendClientMessage(playerid, COLOR_GRAD2, "You are now back to your civillian skin.");
                    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                    return 1;
                }
            }
        }
        return 1;
    }
	if(dialogid == Vmod)
    {
        if(response)
        {
        	if(listitem == 0) //Repair Engine
            {
            	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000);
            	RepairVehicle(vehicleid);
            	GivePlayerCash(playerid,-150);
                return 1;
            }
            if(listitem == 1) // Wheels
            {
            	ShowPlayerDialog(playerid, Vmod3, DIALOG_STYLE_LIST, "Rims(35$)","Shadow\r\nMega\r\nRimshine\r\nWires\r\nClassic\r\nTwist\r\nCutter\r\nSwitch\r\nGrove\r\nImport\nDollar\r\nTrance\r\nAtomic\r\nAhab\r\nVirtual", "Buy", "Cancel");
         	}
            if(listitem == 2) // PaintJobs
            {
            	ShowPlayerDialog(playerid,  Vmod4, DIALOG_STYLE_LIST, "PaintJobs(25$)","PaintJob1\nPaintJob2\nPaintJob3", "Install", "Cancel");
            }
            if(listitem == 3) // Hydraulics
            {
            	ShowPlayerDialog(playerid,  Vmod6, DIALOG_STYLE_LIST, "Hydraulics(150$)","Hydraulics", "Upgrade", "Cancel");
            }
            if(listitem == 4) // Exotic Vehicle modding
            {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
        			ShowPlayerDialog(playerid,  Vmod8, DIALOG_STYLE_LIST, "Uranus Modifications","Alien Roof\nAlien Exhaust\nAlien Sideskirt\nAlien Spoiler\nAlien Front Bumper\nAlien Rear Bumper\nXflow Roof\nXflow Exhaust\nXflow Sideskirt\nXflow Spoiler\nXflow Front Bumper\nXflow Rear Bumper", "Upgrade", "Cancel");
				}
				else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					ShowPlayerDialog(playerid,  Vmod10, DIALOG_STYLE_LIST, "Jester Modifications","Alien Roof\nAlien Exhaust\nAlien Sideskirt\nAlien Spoiler\nAlien Front Bumper\nAlien Rear Bumper\nXflow Roof\nXflow Exhaust\nXflow Sideskirt\nXflow Spoiler\nXflow Front Bumper\nXflow Rear Bumper", "Upgrade", "Cancel");
				}
				else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					ShowPlayerDialog(playerid,  Vmod9, DIALOG_STYLE_LIST, "Sultan Modifications","Alien Roof\nAlien Exhaust\nAlien Sideskirt\nAlien Spoiler\nAlien Front Bumper\nAlien Rear Bumper\nXflow Roof\nXflow Exhaust\nXflow Sideskirt\nXflow Spoiler\nXflow Front Bumper\nXflow Rear Bumper", "Upgrade", "Cancel");
				}
				else if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					ShowPlayerDialog(playerid,  Vmod11, DIALOG_STYLE_LIST, "Elegy Modifications","Alien Roof\nAlien Exhaust\nAlien Sideskirt\nAlien Spoiler\nAlien Front Bumper\nAlien Rear Bumper\nXflow Roof\nXflow Exhaust\nXflow Sideskirt\nXflow Spoiler\nXflow Front Bumper\nXflow Rear Bumper", "Upgrade", "Cancel");
				}
            }
			if(listitem == 5)
			{
				ShowPlayerDialog(playerid,  500, DIALOG_STYLE_LIST, "Spoiler","Win\nFury\nAlpha\nPro\nRace\nDrag\n", "Instaleaza", "Refuza");
			}
			if(listitem == 6) //REMOVE TUNNING
			{
				ShowPlayerDialog(playerid,  Vmod2, DIALOG_STYLE_LIST, "Remove Tunning","Wheels\nHydraulics\nRoof\nExhaust\nSideskirt\nSpoiler\nFront Bumper\nRear Bumper\nRestu", "Upgrade", "Cancel");
			}
        }
        return 1;
    }
	if (dialogid == Vmod2)
	{
		if(response)
	    {
	        if(listitem == 0)
	        {
				RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent7]);
				VehicleInfo[vehicleid][vComponent7] = 0;
			}
			if(listitem == 1)
	        {
				RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent9]);
				VehicleInfo[vehicleid][vComponent9] = 0;
			}
			if (listitem == 2)
			{
				RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent2]);
				VehicleInfo[vehicleid][vComponent2] = 0;
			}
			if (listitem == 3)
			{
				RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent6]);
				VehicleInfo[vehicleid][vComponent6] = 0;
			}
			if (listitem == 4)
			{
				RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent3]);
				VehicleInfo[vehicleid][vComponent3] = 0;
			}
			if (listitem == 5)
			{
				RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent0]);
				VehicleInfo[vehicleid][vComponent0] = 0;
			}
			if (listitem == 6)
			{
				RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent10]);
				VehicleInfo[vehicleid][vComponent10] = 0;
			}
			if (listitem == 7)
			{
				RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent11]);
				VehicleInfo[vehicleid][vComponent11] = 0;
			}
			if (listitem == 8)
			{
				if(VehicleInfo[vehicleid][vComponent1] != 0)
				{
					RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent1]);
					VehicleInfo[vehicleid][vComponent1] = 0;
				}
				if(VehicleInfo[vehicleid][vComponent4] != 0)
				{
					RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent4]);
					VehicleInfo[vehicleid][vComponent4] = 0;
				}
				if(VehicleInfo[vehicleid][vComponent5] != 0)
				{
					RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent5]);
					VehicleInfo[vehicleid][vComponent5] = 0;
				}
				if(VehicleInfo[vehicleid][vComponent8] != 0)
				{
					RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent8]);
					VehicleInfo[vehicleid][vComponent8] = 0;
				}
				if(VehicleInfo[vehicleid][vComponent12] != 0)
				{
					RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent12]);
					VehicleInfo[vehicleid][vComponent12] = 0;
				}
				if(VehicleInfo[vehicleid][vComponent13] != 0)
				{
					RemoveVehicleComponent(vehicleid,VehicleInfo[vehicleid][vComponent13]);
					VehicleInfo[vehicleid][vComponent13] = 0;
				}
			}
		}
		return 1;
	}
	if(dialogid == 500)
	{
		if(response)
	    {
	        if (listitem == 0)
	        {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 401 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 518 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 527 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 415 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 546 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 603 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 426 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 436 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 405 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 477 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 580 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 550 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 549)
				{
					comp5 = 1001;
			        AddVehicleComponent(vehicleid, comp5);
					SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
				}
			}
			if (listitem == 1)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 518 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 415 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 546 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 517 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 603 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 405 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 477 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 580 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 550 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 549)
				{
					comp5 = 1023;
			        AddVehicleComponent(vehicleid, comp5);
					SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
				}
			}
			if (listitem == 2)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 518 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 415 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 401 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 517 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 426 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 436 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 477 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 547 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 550 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 549)
				{
					comp5 = 1003;
			        AddVehicleComponent(vehicleid, comp5);
					SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
				}
			}
			if (listitem == 3)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 589 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 492 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 547 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 405)
				{
					comp5 = 1000;
			        AddVehicleComponent(vehicleid, comp5);
					SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
				}
			}
			if (listitem == 4)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 527 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 542 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 405)
				{
					comp5 = 1014;
			        AddVehicleComponent(vehicleid, comp5);
					SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
				}
			}
			if (listitem == 5)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 546 ||
				GetVehicleModel(GetPlayerVehicleID(playerid)) == 517)
				{
					comp5 = 1002;
			        AddVehicleComponent(vehicleid, comp5);
					SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
				}
			}
		}
	}
    if(dialogid == Vmod3)
    {
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            comp = 1073;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
	        }
	        if(listitem == 1)
	        {
	            comp = 1074;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	        }
	        if(listitem == 2)
	        {
	            comp = 1075;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
	        }
	        if(listitem == 3)
	        {
	            comp = 1076;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
	        }
            if(listitem == 4)
            {
	            comp = 1077;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 5)
            {
	            comp = 1078;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 6)
            {
	            comp = 1079;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 7)
            {
	            comp = 1080;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 8)
            {
	            comp = 1081;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 9)
            {
	            comp = 1082;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 10)
            {
	            comp = 1083;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 11)
            {
	            comp = 1084;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 12)
            {
	            comp = 1085;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 13)
            {
	            comp = 1096;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 14)
            {
	            comp = 1097;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
            if(listitem == 15)
            {
	            comp = 1098;
	            AddVehicleComponent(vehicleid, comp);
	            SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
	            GivePlayerCash(playerid,-35);
            }
        }
        return 1;
    }
    if(dialogid == Vmod4)
    {
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ChangeVehiclePaintjob(vehicleid,1);
	            VehicleInfo[vehicleid][vPaintJob] = 1;
	            GivePlayerCash(playerid,-25);
	        }
	        else if(listitem == 1)
	        {
	            ChangeVehiclePaintjob(vehicleid,2);
	            VehicleInfo[vehicleid][vPaintJob] = 2;
	            GivePlayerCash(playerid,-25);
	        }
	        else if(listitem == 2)
	        {
	            ChangeVehiclePaintjob(vehicleid,3);
	            VehicleInfo[vehicleid][vPaintJob] = 3;
	            GivePlayerCash(playerid,-25);
	        }
	        else if(listitem == 3)
	        {
	            ChangeVehiclePaintjob(vehicleid,4);
	            VehicleInfo[vehicleid][vPaintJob] = 4;
	            GivePlayerCash(playerid,-25);
	        }
	 	}
	 	return 1;
	}
    if(dialogid == 998)
    {
	    if(response)
	    {
	        new
	        str[356],
	        str1[356],
	        str3[356],
	        str5[356],
	        liststring[1524];
	        if(listitem == 0) // Vehicles
	        {
	            format(str, sizeof str, "Available vehicles (name: model , price): \n \n [Landstalker: 400 , $10050] [Buffalo: 402 , $20000] [Sentinel: 405 , $10000] \n [Stretch: 409 , $50000] [Voodoo: 412 , $15000] [Cheetah: 415 , $60000] \n [Washington: 421 , $9000] [Bobcat: 422 , $7000] [Premier: 426 , $10000] \n");
	            format(str1, sizeof str1, " [Tahoma: 566 , $15000] [Admiral: 445 , $12000] [Phoenix: 603 , $13000] \n [Faggio: 462 , $7000] [Freeway: 463 , $15000] [Glendale: 466 , $6000] \n [Oceanic : 467 , $6000] [Blista Compact : 496 , $9000] [Comet : 480 , $40000] \n [Burrito : 482 , $9000] [Virgo : 491 , $8000] [Greenwood: 492 , $9000] \n [Elegant: 507 , $10000] [Feltzer: 533 , $15000] ");
	            format(str3, sizeof str3, " [Slamvan: 535 , $16000] \n [Hustler: 545 , $12000] [Tampa: 549 , $8000] [Jester: 559 , $30000] \n [Sultan: 560 , $50000] [Elegy: 562 , $40000] [Flash: 565 , $20000] \n [Savanna: 567 , $17000] [Broadway: 575 , $9000] [Huntley: 579 , $20000] \n [Stafford: 580 , $10000] [Club : 589 , $9000] [Alpha: 602 , $10000] \n");
	            format(str5, sizeof str5, " [Mesa: 500 , $9000] [Buccaneer: 518 , $8000] [Wayfarer: 586 , $12000]\n [Blade: 536 , $10000] [Yosemite: 554 , $10000] \n [Clover: 542 , $8000] [Walton: 478 , $6000] [Whoopee: 423 , $ 6000] \n [Rancher: 489 , $14000] [Emperor: 585 , $8000] [Remington: 534 , $15000] \n [Stallion: 439 , $12000]");
	            format(liststring, sizeof liststring, "%s%s%s%s", str, str1, str3, str5);
	            ShowPlayerDialog(playerid, 1514, DIALOG_STYLE_MSGBOX, "Commerce Dealership", liststring, "Continue", "Car Credit");
	        }
	        else if(listitem == 1) // Vehicles
	        {
	        	format(str, sizeof str, "Available vehicles (name: model , price): \n \n [Sabre: 475 , $14000] [Stratum: 561 , $15000] [Uranus: 558 , $20000] \n [Picador: 600 , $8000] [Cabbie: 438 , $9000] [Taxi: 420 , $ 10000] \n [Majestic: 517 , $9000] [Hermes: 474, $13000]  [Moonbeam: 418, $13000] \n [Esperanto: 419, $10000]");
	        	format(str1, sizeof str1, " [Merit: 551, $7000] [Vincent: 540, $7000] \n [Regina: 479, $8000] [Bus: 431, $15000]");
				format(str3, sizeof str3, " [Bravura: 401 , $8050] \n[Perenniel: 404 , $7000] [Manana: 410 , $8000]\n [Pony: 413 , $8000] [BFInjection: 424 , $40000] [HotKnife: 434 , $30000] \n [Previon: 436 , $8000] [Solair: 458 , $10000] [PCJ-600: 461 , $20000] \n [Sanchez: 468 , $15000] [ATV: 471 , $8000] [Zr-350: 477 , $30000] \n [Camper: 439 , $20000]");
				format(str5, sizeof str5, " [Boxville: 498 , $10000] [SuperGT: 506 , $45000] [Journey: 508 , $20000]\n [MTB: 510 , $1500] [Fortune: 526 , $9000] [Cadrona: 527 , $8000] \n [Williard: 529 , $7000] [Bullet: 541 , $60000] [Windsor: 555 , $10000] \n [Tornado: 576 , $10000] [Euros: 587 , $15000]");
	       	    format(liststring, sizeof liststring, "%s%s%s%s", str, str1, str3, str5);
	       	    ShowPlayerDialog(playerid, 1514, DIALOG_STYLE_MSGBOX, "Commerce Dealership", liststring, "Continue", "Car Credit");
	        }
	        else if(listitem == 2) // Boats
	        {
	        	format(str, sizeof str, "Available boats (name: model , price): \n \n [Dinghy: 473 , $10000] [Tropic: 454 , $40000] [Squallo: 446 , $60000]");
	       	    format(liststring, sizeof liststring, "%s", str);
	       	    ShowPlayerDialog(playerid, 1514, DIALOG_STYLE_MSGBOX, "Commerce DealerShip", liststring, "Continue", "Car Credit");
	        }
	        else if(listitem == 3) // Helicoptors
	        {
	        	format(str, sizeof str, "Available Helicopters (name: model , price): \n \n [Maverick: 487 , $60000] [Dodo: 593 , $15000] [Sparrow: 469 , $30000]");
	       	    format(liststring, sizeof liststring, "%s", str);
	       	    ShowPlayerDialog(playerid, 1514, DIALOG_STYLE_MSGBOX, "Commerce DealerShip", liststring, "Continue", "Car Credit");
	        }
	        else if(listitem == 4) // Job vehicles
	        {
	            if(PlayerInfo[playerid][pJob] == 9)
				{
		        	format(str, sizeof str, "Truck Driver Vehicles (name: model , price): \n \n [Linerunner: 403 , $15050] [Tanker: 514 , $10000]");
		       	    format(liststring, sizeof liststring, "%s", str);
		       	    ShowPlayerDialog(playerid, 1514, DIALOG_STYLE_MSGBOX, "Commerce Dealership", liststring, "Continue", "Car Credit");
				}
				else if(PlayerInfo[playerid][pJob] == 4)
				{
		        	format(str, sizeof str, "Job Vehicles (name: model , price): \n \n [Combine Harvester: 532 , $3150] [Sweeper: 574 , $8000]");
		       	    format(liststring, sizeof liststring, "%s", str);
		       	    ShowPlayerDialog(playerid, 1514, DIALOG_STYLE_MSGBOX, "Commerce Dealership", liststring, "Continue", "Car Credit");
				}
				else
				{
					ShowPlayerDialog(playerid, 998, DIALOG_STYLE_LIST, "Commerce Car Dealer", "Normal Vehicles\nNormal Vehicles2\nBoats\nHelicoptors\nJob Vehicles", "Select", "Cancel");
				}
	        }
	 	}
	 	return 1;
	}
    if(dialogid == 9)
    {
        if(!response)
		{
			if(PhoneOnline[playerid])
			{
		        ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau","Suna\nContacte\nAdauga Contact\nSterge contact\nStinge telefon,","Select","Cancel");
			} else {
			    ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau","Suna\nContacte\nAdauga Contact\nSterge contact\nAprinde telefonul","Select","Cancel");
			}
		}
		if(response)
		{
			if(!IsNumeric(inputtext))
			{
				ShowPlayerDialog(playerid,9,DIALOG_STYLE_INPUT,"Apelare","Scrie aici numarul care doresti sa il apelezi:","Suna","Renunta");
				return 1;
			}
			new phonenumb = strval(inputtext);
			if(PlayerInfo[playerid][pPhoneNumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Tu nu ai un telefon.");
				return 1;
			}
			if(PlayerInfo[playerid][pJailed] != 0)
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED,"Ti-a fost confiscat telefonul cand ai fost bagat la inchisoare.");
			    return 1;
			}
			if(Wounded[playerid] != 0)
			{
			}
			if(phonenumb == 911)
            {
                SendClientMessage(playerid, COLOR_ALLDEPT, "URGENTE: Buna ziua, cu ce va pot ajuta? (politie, paramedic, non-urgenta)");
                Mobile[playerid] = 911;
				if(!IsPlayerInAnyVehicle(playerid))
				{ SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE); }
				if(IsValidPlayerObject(playerid, 8))
				{
					RemovePlayerAttachedObject(playerid, 8);
				}
				SetPlayerAttachedObject(playerid, 8, 18874, 6,0.08,0.01,0.00,1336.0,351.0,175.0,1.00,1.00,1.00);
                return 1;
            }
			if(phonenumb == 411)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Operator: Buna ziua, cu ce va pot ajuta?");
				SendClientMessage(playerid, COLOR_WHITE, "Te rugam sa te exprimi intr-o singura propozitie");
				Mobile[playerid] = 411;
				if(!IsPlayerInAnyVehicle(playerid))
				{ SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE); }
				if(IsValidPlayerObject(playerid, 8))
				{
					RemovePlayerAttachedObject(playerid, 8);
				}
				SetPlayerAttachedObject(playerid, 8, 18874, 6,0.08,0.01,0.00,1336.0,351.0,175.0,1.00,1.00,1.00);
				return 1;
			}
			if(phonenumb == 522)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Operator: Buna ziua, cu ce va pot ajuta?");
				SendClientMessage(playerid, COLOR_WHITE, "Te rugam sa te exprimi intr-o singura propozitie");
				Mobile[playerid] = 522;
				if(!IsPlayerInAnyVehicle(playerid))
				{ SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE); }
				if(IsValidPlayerObject(playerid, 8))
				{
					RemovePlayerAttachedObject(playerid, 8);
				}
				SetPlayerAttachedObject(playerid, 8, 18874, 6,0.08,0.01,0.00,1336.0,351.0,175.0,1.00,1.00,1.00);
				return 1;
			}
			if(phonenumb == 688)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Operator: Buna ziua, Primaria Los Santos. Cu ce va putem ajuta?");
				SendClientMessage(playerid, COLOR_WHITE, "Va rugam sa va exprimati dorinta intr-o singura propozitie.");
				Mobile[playerid] = 688;
				if(!IsPlayerInAnyVehicle(playerid))
				{ SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE); }
				if(IsValidPlayerObject(playerid, 8))
				{
					RemovePlayerAttachedObject(playerid, 8);
				}
				SetPlayerAttachedObject(playerid, 8, 18874, 6,0.08,0.01,0.00,1336.0,351.0,175.0,1.00,1.00,1.00);
				return 1;
			}
			if(phonenumb == 211221)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Operator: Buna ziua, cu ce va pot ajuta?");
				SendClientMessage(playerid, COLOR_WHITE, "Te rugam sa te exprimi intr-o singura propozitie");
				Mobile[playerid] = 211221;
				if(!IsPlayerInAnyVehicle(playerid))
				{ SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE); }
				if(IsValidPlayerObject(playerid, 8))
				{
					RemovePlayerAttachedObject(playerid, 8);
				}
				SetPlayerAttachedObject(playerid, 8, 18874, 6,0.08,0.01,0.00,1336.0,351.0,175.0,1.00,1.00,1.00);
				return 1;
			}
			if(phonenumb == 555)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Operator: Buna ziua, cu ce va pot ajuta?");
				SendClientMessage(playerid, COLOR_WHITE, "Te rugam sa te exprimi intr-o singura propozitie");
				Mobile[playerid] = 555;
				if(!IsPlayerInAnyVehicle(playerid))
				{ SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE); }
				if(IsValidPlayerObject(playerid, 8))
				{
					RemovePlayerAttachedObject(playerid, 8);
				}
				SetPlayerAttachedObject(playerid, 8, 18874, 6,0.08,0.01,0.00,1336.0,351.0,175.0,1.00,1.00,1.00);
				return 1;
			}
			if(phonenumb == PlayerInfo[playerid][pPhoneNumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Nu te poti apela singur.");
				return 1;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPhoneNumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid;
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid])
						        {
						            SendClientMessage(playerid, COLOR_GRAD2, "   Nu exista conexiune ..");
						            return 1;
						        }
								if(phonenumb == PlayerInfo[playerid][pPhoneNumber])
								{
									SendClientMessage(playerid, COLOR_GRAD2, "   Acest numar este ocupat.");
									return 1;
								}
							    if(AdminDuty[giveplayerid] == 1)
							    {
                                    SendClientMessage(playerid, COLOR_GRAD2, "   Nu exista conexiune ..");
                                    return 1;
							    }
								if(Spectating[giveplayerid] == 1)
								{
                                    SendClientMessage(playerid, COLOR_GRAD2, "   Nu exista conexiune ..");
                                    return 1;
								}
								if(Mobile[giveplayerid] == 255)
								{
									if(PlayerInfo[playerid][pSex] == 1)
									{
										PlayerActionMessage(playerid,15.0,"tasteaza cateva cifre pe telefon, urmand sa apeleze un numar");
										SendClientMessage(playerid, COLOR_WHITE, "AJUTOR: Acum poti apasa pe T pentru a vorbi, sau daca vrei sa inchizi scrie /hangup.");
									}
									else
									{
										PlayerActionMessage(playerid,15.0,"tasteaza cateva cifre pe telefon, urmand sa apeleze un numar");
										SendClientMessage(playerid, COLOR_WHITE, "AJUTOR: Acum poti apasa pe T pentru a vorbi, sau daca vrei sa inchizi scrie /hangup.");
									}
									if(!IsPlayerInAnyVehicle(playerid))
									{ SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE); }
									if(IsValidPlayerObject(playerid, 8))
									{
										RemovePlayerAttachedObject(playerid, 8);
									}
									SetPlayerAttachedObject(playerid, 8, 18874, 6,0.08,0.01,0.00,1336.0,351.0,175.0,1.00,1.00,1.00);
									new Float:x,Float:y,Float:z;
									GetPlayerPos(giveplayerid,x,y,z);
									if (PlayerToPoint(35.0,i,x,y,z)) { Ring(i,x,y,z); }
									format(string, sizeof(string), "Telefonul tau suna (/pickup), Numar: %d",PlayerInfo[playerid][pPhoneNumber]);
									SendClientMessage(giveplayerid, COLOR_WHITE, string);
									PlayerActionMessage(giveplayerid,15.0," - telefonul vibreaza");
                                    StartedCall[playerid] = 1;
									Mobile[playerid] = giveplayerid;
									PlayerInfo[playerid][pInCall] = 0;
                                    StartedCall[giveplayerid] = 0;
                                    InfoBoxForPlayer(giveplayerid, "~b~[Mobil]~w~~n~~w~~n~~n~~w~Ai vorbit prima data la telefon!");
									return 1;
								}
								else
								{
									SendClientMessage(playerid, COLOR_GREY, " Linie ocupata.");
									return 1;
								}
							}
							else
							{
								SendClientMessage(playerid, COLOR_GREY, "  Fara conexiune.");
								return 1;
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "   Ai primit ton ocupat.");
							return 1;
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_LIGHTRED, "  Ai primit ton ocupat.");
		}
	}
    if(dialogid == 10)
    {
        if(!response)
		{

		}
    	if(response)
		{
			switch(listitem)
	    	{
	    		case 0:
	        	{
	        	    // Call
					if(PhoneOnline[playerid])
					{
					    ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau-","Suna\nContacte\nAdauga Contacte\nSterge Contact\nPorneste","Select","Cancel");
					    SendClientMessage(playerid, COLOR_GRAD2, "   Nu poti face asta cand telefonul tau este oprit.");
					}
					else
					{
			 	    	ShowPlayerDialog(playerid,9,DIALOG_STYLE_INPUT,"Apel","Scrie numarul la care vrei sa suni:","Suna","Intoarcete");
			 	    }
	        	}
	    		case 1:
	        	{
	        	    // Contacts
					if(PhoneOnline[playerid])
					{
					    ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau-","Suna\nContacte\nAdauga Contacte\nSterge Contact\nPorneste","Select","Cancel");
					    SendClientMessage(playerid, COLOR_GRAD2, "   Nu poti face asta cand telefonul tau este oprit.");
					}
					else
					{
					    printf("%s %d %s %d",PlayerInfo[playerid][pConName1],PlayerInfo[playerid][pConNum1],PlayerInfo[playerid][pConName2],PlayerInfo[playerid][pConNum2]);
					    if(PlayerInfo[playerid][pConNum1] != 0 && PlayerInfo[playerid][pConNum2] == 0)
					    {
					    	format(string, sizeof(string), "%s\t%d\nNiciunul", PlayerInfo[playerid][pConName1],PlayerInfo[playerid][pConNum1]);
			 	    		ShowPlayerDialog(playerid,17,DIALOG_STYLE_LIST,"Contacte -",string,"Select","Cancel");
						}
					    else if(PlayerInfo[playerid][pConNum1] == 0 && PlayerInfo[playerid][pConNum2] != 0)
					    {
					    	format(string, sizeof(string), "Niciunul\n%s\t%d", PlayerInfo[playerid][pConName2],PlayerInfo[playerid][pConNum2]);
			 	    		ShowPlayerDialog(playerid,17,DIALOG_STYLE_LIST,"Contacte -",string,"Select","Cancel");
						}
					    else if(PlayerInfo[playerid][pConNum1] != 0 && PlayerInfo[playerid][pConNum2] != 0)
					    {
					    	format(string, sizeof(string), "%s\t%d\n%s\t%d", PlayerInfo[playerid][pConName1],PlayerInfo[playerid][pConNum1],PlayerInfo[playerid][pConName2],PlayerInfo[playerid][pConNum2]);
			 	    		ShowPlayerDialog(playerid,17,DIALOG_STYLE_LIST,"Contacte -",string,"Select","Cancel");
						}
						else
						{
						    ShowPlayerDialog(playerid,13,DIALOG_STYLE_LIST,"Contacte -","None\t","Back","Back");
						}
			 	    }
	        	}
	    		case 2:
	        	{
	        	    // Add Contact
					if(PhoneOnline[playerid])
					{
						ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau","Suna\nContacte\nAdauga contacte\nSterge contact\nAprinde telefon","Select","Cancel");
						SendClientMessage(playerid, COLOR_GRAD2, "   You cannot do this since your phone is turned off.");
					}
					else
					{
			 	    	ShowPlayerDialog(playerid,11,DIALOG_STYLE_INPUT,"Adauga contact","Scrie aici numele contact-ului.","Next","Cancel");
			 	    }
	        	}
	    		case 3:
	        	{
	        	    // Delete Contact
					if(PhoneOnline[playerid])
					{
						ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau","Suna\nContacte\nAdauga contacte\nSterge contact\nAprinde telefon","Select","Cancel");
						SendClientMessage(playerid, COLOR_GRAD2, "   You cannot do this since your phone is turned off.");
					}
					else
					{
					    if(PlayerInfo[playerid][pConNum1] != 0 && PlayerInfo[playerid][pConNum2] == 0)
					    {
					    	format(string, sizeof(string), "%s\t%d\nNone", PlayerInfo[playerid][pConName1],PlayerInfo[playerid][pConNum1]);
			 	    		ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -",string,"Delete","Cancel");
						}
					    else if(PlayerInfo[playerid][pConNum1] == 0 && PlayerInfo[playerid][pConNum2] != 0)
					    {
					    	format(string, sizeof(string), "None\n%s\t%d", PlayerInfo[playerid][pConName2],PlayerInfo[playerid][pConNum2]);
			 	    		ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -",string,"Delete","Cancel");
						}
					    else if(PlayerInfo[playerid][pConNum1] != 0 && PlayerInfo[playerid][pConNum2] != 0)
					    {
					    	format(string, sizeof(string), "%s\t%d\n%s\t%d", PlayerInfo[playerid][pConName1],PlayerInfo[playerid][pConNum1],PlayerInfo[playerid][pConName2],PlayerInfo[playerid][pConNum2]);
			 	    		ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -",string,"Delete","Cancel");
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "[Mobile]  Nu ai nici-un contact.");
							if(PhoneOnline[playerid])
							{
								ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau","Suna\nContacte\nAdauga contacte\nSterge contact\nAprinde telefon","Select","Cancel");
							}
							else
							{
					 	    	ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Telefonul tau","Suna\nContacte\nAdauga contacte\nSterge contact\nStinge telefon","Select","Cancel");
					 	    }
						}
			 	    }
	        	}
	        	case 4:
	        	{
	        	    // Turn on/off
					if(PhoneOnline[playerid])
					{
					    SendClientMessage(playerid, COLOR_GRAD2, "   You have turned your phone on");
		                PhoneOnline[playerid] = 0;
		                ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn OFF","Select","Cancel");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   You have turned your phone off");
					    PhoneOnline[playerid] = 1;
					    ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn ON","Select","Cancel");
					}
	        	}
	    	}
		}
    }
    if(dialogid == 11)
    {
        if(!response)
		{

		}
    	if(response)
		{
            if( strlen( inputtext ) >= 24 )
			{
                ShowPlayerDialog(playerid,11,DIALOG_STYLE_INPUT,"Add Contact","Write the name of your contact.\nName is too long!","Next","Cancel");
            }
            else
			{
                if( strlen( inputtext ) >= 1 )
				{
				    if(PlayerInfo[playerid][pConNum1] == 0)
				    {
	                    strmid(PlayerInfo[playerid][pConName1], (inputtext), 0, strlen((inputtext)), 128);
	                    SendClientMessage(playerid, COLOR_WHITE, "[Mobile]  Contact name added, now type in the number of the contact.");
	                    ShowPlayerDialog(playerid,12,DIALOG_STYLE_INPUT,"Add Contact","Write the number of your contact.","Next","Cancel");
					}
					else if(PlayerInfo[playerid][pConNum2] == 0)
					{
	                    strmid(PlayerInfo[playerid][pConName2], (inputtext), 0, strlen((inputtext)), 128);
	                    SendClientMessage(playerid, COLOR_WHITE, "[Mobile]  Contact name added, now type in the number of the contact.");
	                    ShowPlayerDialog(playerid,12,DIALOG_STYLE_INPUT,"Add Contact","Write the number of your contact.","Next","Cancel");
					}
                }
                else
				{
                    ShowPlayerDialog(playerid,11,DIALOG_STYLE_INPUT,"Add Contact","Write the name of your contact.\nName is too short!","Next","Cancel");
                }
        	}
		}
    }
    if(dialogid == 12)
    {
        if(!response)
		{

		}
    	if(response)
		{
			new numb = strval(inputtext);
			if(!IsNumeric(inputtext))
			{
				ShowPlayerDialog(playerid,12,DIALOG_STYLE_INPUT,"Add Contact","Write the number of your contact.\nNumbers only!","Next","Cancel");
				return 1;
			}
            if( strlen( inputtext ) >= 12 )
			{
                ShowPlayerDialog(playerid,12,DIALOG_STYLE_INPUT,"Add Contact","Write the number of your contact.\nNumber is too long!","Next","Cancel");
            }
            else
			{
                if( strlen( inputtext ) >= 1 )
				{
				    if(PlayerInfo[playerid][pConNum1] == 0)
				    {
	                    PlayerInfo[playerid][pConNum1] = numb;
	                    SendClientMessage(playerid, COLOR_WHITE, "[Mobile]  Number added, contact succesfully added.");
					}
					else if(PlayerInfo[playerid][pConNum2] == 0)
					{
	                    PlayerInfo[playerid][pConNum2] = numb;
	                    SendClientMessage(playerid, COLOR_WHITE, "[Mobile]  Number added, contact succesfully added.");
					}
					if(PhoneOnline[playerid])
					{
						ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn ON","Select","Cancel");
					}
					else
					{
			 	    	ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn OFF","Select","Cancel");
			 	    }
                }
                else
				{
                    ShowPlayerDialog(playerid,12,DIALOG_STYLE_INPUT,"Add Contact","Write the number of your contact.\nNumber is too short!","Next","Cancel");
                }
        	}
		}
    }
    if(dialogid == 13)
    {
        if(!response)
		{
			if(PhoneOnline[playerid])
			{
				ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn OFF","Select","Cancel");
			}
			else
			{
				ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn ON","Select","Cancel");
			}
		}
    	if(response)
		{
			switch(listitem)
	    	{
	    		case 0:
	        	{
	        	    // Clicked a contact
					if(PhoneOnline[playerid])
					{
						ShowPlayerDialog(playerid,11,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn ON","Select","Cancel");
					}
					else
					{
			 	    	ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn OFF","Select","Cancel");
			 	    }
			 	    SendClientMessage(playerid, COLOR_GRAD2, "   Coming soon, you will be able to call and sms your contact from here.");
	        	}
	    	}
		}
    }
    if(dialogid == 14)
    {
        if(!response)
		{

		}
    	if(response)
		{
			switch(listitem)
	    	{
	    		case 0:
	        	{
					if(PhoneOnline[playerid])
					{
						ShowPlayerDialog(playerid,11,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn ON","Select","Cancel");
					}
					else
					{
			 	    	ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn OFF","Select","Cancel");
			 	    }
	        	}
	    	}
		}
    }
    if(dialogid == 23)
    {
        if(!response)
		{

		}
    	if(response)
		{
			switch(listitem)
	    	{
	    		case 0:
	        	{
	        	    // Deleted contact number 1
					if(PhoneOnline[playerid])
					{
					    ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn ON","Select","Cancel");
					    SendClientMessage(playerid, COLOR_GRAD2, "   You cannot do this since your phone is turned off.");
					}
					else
					{
						format(string, 128, "[Mobile]  Contact %s deleted.",PlayerInfo[playerid][pConName1]);
						SendClientMessage(playerid, COLOR_WHITE, string);

						strmid(PlayerInfo[playerid][pConName1], "None", 0, strlen("None"), 255);
						PlayerInfo[playerid][pConNum1] = 0;
					    if(PlayerInfo[playerid][pConNum1] != 0 && PlayerInfo[playerid][pConNum2] == 0)
					    {
					    	format(string, sizeof(string), "%s\t%d\nNone", PlayerInfo[playerid][pConName1],PlayerInfo[playerid][pConNum1]);
			 	    		ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -",string,"Delete","Cancel");
						}
					    else if(PlayerInfo[playerid][pConNum1] == 0 && PlayerInfo[playerid][pConNum2] != 0)
					    {
					    	format(string, sizeof(string), "None\n%s\t%d", PlayerInfo[playerid][pConName2],PlayerInfo[playerid][pConNum2]);
			 	    		ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -",string,"Delete","Cancel");
						}
					    else if(PlayerInfo[playerid][pConNum1] != 0 && PlayerInfo[playerid][pConNum2] != 0)
					    {
					    	format(string, sizeof(string), "%s\t%d\n%s\t%d", PlayerInfo[playerid][pConName1],PlayerInfo[playerid][pConNum1],PlayerInfo[playerid][pConName2],PlayerInfo[playerid][pConNum2]);
			 	    		ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -",string,"Delete","Cancel");
						}
						else
						{
						    ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -","You do not have any contacts\t","Back","Cancel");
						}
			 	    }
	        	}
	    		case 1:
	        	{
	        	    // Deleted contact number 2
					if(PhoneOnline[playerid])
					{
					    ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn ON","Select","Cancel");
					    SendClientMessage(playerid, COLOR_GRAD2, "   You cannot do this since your phone is turned off.");
					}
					else
					{
						format(string, 128, "[Mobile]  Contact %s deleted.",PlayerInfo[playerid][pConName2]);
						SendClientMessage(playerid, COLOR_WHITE, string);

						strmid(PlayerInfo[playerid][pConName2], "None", 0, strlen("None"), 255);
						PlayerInfo[playerid][pConNum2] = 0;
					    if(PlayerInfo[playerid][pConNum1] != 0 && PlayerInfo[playerid][pConNum2] == 0)
					    {
					    	format(string, sizeof(string), "%s\t%d\nNone", PlayerInfo[playerid][pConName1],PlayerInfo[playerid][pConNum1]);
			 	    		ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -",string,"Delete","Cancel");
						}
					    else if(PlayerInfo[playerid][pConNum1] == 0 && PlayerInfo[playerid][pConNum2] != 0)
					    {
					    	format(string, sizeof(string), "None\n%s\t%d", PlayerInfo[playerid][pConName2],PlayerInfo[playerid][pConNum2]);
			 	    		ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -",string,"Delete","Cancel");
						}
					    else if(PlayerInfo[playerid][pConNum1] != 0 && PlayerInfo[playerid][pConNum2] != 0)
					    {
					    	format(string, sizeof(string), "%s\t%d\n%s\t%d", PlayerInfo[playerid][pConName1],PlayerInfo[playerid][pConNum1],PlayerInfo[playerid][pConName2],PlayerInfo[playerid][pConNum2]);
			 	    		ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -",string,"Delete","Cancel");
						}
						else
						{
						    ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Delete Contact -","You do not have any contacts\t","Back","Cancel");
						}
			 	    }
				}
	    	}
		}
    }
    if(dialogid == 17)
    {
        if(!response)
		{

		}
    	if(response)
		{
			if(PhoneOnline[playerid])
			{
				ShowPlayerDialog(playerid,11,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn ON","Select","Cancel");
				SendClientMessage(playerid, COLOR_GRAD2, "   Not done yet.");
			}
			else
			{
				ShowPlayerDialog(playerid,10,DIALOG_STYLE_LIST,"Welcome to your Phone -","Call\nContacts\nAdd Contact\nDelete Contact\nTurn OFF","Select","Cancel");
				SendClientMessage(playerid, COLOR_GRAD2, "   Not done yet.");
			}
		}
    }
    if(dialogid == 27)
    {
        if(!response)
		{

		}
    	if(response)
		{
			switch(listitem)
	    	{
	    		case 1:
	        	{
                    ShowPlayerDialog(playerid,29,DIALOG_STYLE_LIST,"SS:RP Guide Book - Main Places","Pershing Square\nAll Saints Hospital\nBank\nDealership","Select","Cancel");
	        	}
	    	}
		}
    }
    if(dialogid == 29)
    {
        if(!response)
		{

		}
    	if(response)
		{
			switch(listitem)
	    	{
	    		case 0:
	        	{
	        	    // Pershing Square
			 	    SetPlayerCheckpoint(playerid,1535.9330,-1674.4368,13.3828,2.0);
		    		ActiveCP[playerid] = 1;
					SetTimerEx("ClearMechanicCheckpointsForPlay", 180000, false, "i", playerid);
					SendClientMessage(playerid, COLOR_GRAD2, "   The location for Pershing Square has been marked on your mini map.");
	        	}
	    		case 1:
	        	{
	        	    // All Saints General Hospital
			 	    SetPlayerCheckpoint(playerid,1178.8602,-1324.0388,14.1409,2.0);
		    		ActiveCP[playerid] = 1;
					SetTimerEx("ClearMechanicCheckpointsForPlay", 180000, false, "i", playerid);
					SendClientMessage(playerid, COLOR_GRAD2, "   The location for the All Saints General Hospital has been marked on your mini map.");
	        	}
	    		case 2:
	        	{
	        	    // Bank
			 	    SetPlayerCheckpoint(playerid,1735.1118,-1271.8594,13.5466,2.0);
		    		ActiveCP[playerid] = 1;
					SetTimerEx("ClearMechanicCheckpointsForPlay", 180000, false, "i", playerid);
					SendClientMessage(playerid, COLOR_GRAD2, "   The bank location has been marked on your mini map.");
				}
	    		case 3:
	        	{
	        	    // Dealer Ship
			 	    SetPlayerCheckpoint(playerid,Businesses[13][EnterX], Businesses[13][EnterY], Businesses[13][EnterZ],2.0);
		    		ActiveCP[playerid] = 1;
					SetTimerEx("ClearMechanicCheckpointsForPlay", 180000, false, "i", playerid);
					SendClientMessage(playerid, COLOR_GRAD2, "   The location for the local Dealer Ship has been marked on your mini map.");
				}
	    	}
		}
    }
    if(dialogid == Vmod6)
    {
	    if(response)
	    {
	        if(listitem == 0)
	        {
		        comp = 1087;
		        AddVehicleComponent(vehicleid, comp);
		        SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
		        GivePlayerCash(playerid,-150);
	        }
	        if(listitem == 1)
	        {
		        comp = 1087;
		        AddVehicleComponent(vehicleid, comp);
		        SaveComp(comp,GetVehicleComponentType(comp),VehicleInfo[vehicleid][vDescription],vehicleid);
		        GivePlayerCash(playerid,-150);
	        }
	 	}
	 	return 1;
	}
    if(dialogid == Vmod8)
    {
	    if(response)
	    {
	        if(listitem == 0)
	        {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
			            comp1 = 1088; // Alien roof
			            AddVehicleComponent(vehicleid, comp1);
			            SaveComp(comp1,GetVehicleComponentType(comp1),VehicleInfo[vehicleid][vDescription],vehicleid);
			            GivePlayerCash(playerid,-50);
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
	        }
			if (listitem == 1)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp2 = 1092; // Alien Exhaust
			            AddVehicleComponent(vehicleid, comp2);
						SaveComp(comp2,GetVehicleComponentType(comp2),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 2)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp3 = 1090; // Right Alien Sideskirt
			            AddVehicleComponent(vehicleid, comp3);
			            comp4 = 1094; // Left Alien Sideskirt
			            AddVehicleComponent(vehicleid, comp4);
						SaveComp(comp3,GetVehicleComponentType(comp3),VehicleInfo[vehicleid][vDescription],vehicleid);
			            SaveComp(comp4,GetVehicleComponentType(comp4),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 3)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp5 = 1164; // Alien Spoiler
			            AddVehicleComponent(vehicleid, comp5);
						SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 4)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp6 = 1166; // Alien Front Bumper
			            AddVehicleComponent(vehicleid, comp6);
						SaveComp(comp6,GetVehicleComponentType(comp6),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 5)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp7 = 1168; // Alien Rear Bumper
			            AddVehicleComponent(vehicleid, comp7);
						SaveComp(comp7,GetVehicleComponentType(comp7),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if(listitem == 6)
	        {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
			            comp1 = 1091; // Xflow roof
			            AddVehicleComponent(vehicleid, comp1);
			            SaveComp(comp1,GetVehicleComponentType(comp1),VehicleInfo[vehicleid][vDescription],vehicleid);
			            GivePlayerCash(playerid,-50);
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
	        }
			if (listitem == 7)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp2 = 1089; // Xflow Exhaust
			            AddVehicleComponent(vehicleid, comp2);
						SaveComp(comp2,GetVehicleComponentType(comp2),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 8)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp3 = 1095; // Right Xflow Sideskirt
			            AddVehicleComponent(vehicleid, comp3);
			            comp4 = 1093; // Left Xflow Sideskirt
			            AddVehicleComponent(vehicleid, comp4);
						SaveComp(comp3,GetVehicleComponentType(comp3),VehicleInfo[vehicleid][vDescription],vehicleid);
			            SaveComp(comp4,GetVehicleComponentType(comp4),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 9)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp5 = 1163; // Xflow Spoiler
			            AddVehicleComponent(vehicleid, comp5);
						SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 10)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp6 = 1165; // Xflow Front Bumper
			            AddVehicleComponent(vehicleid, comp6);
						SaveComp(comp6,GetVehicleComponentType(comp6),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 11)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp7 = 1167; // Xflow Rear Bumper
			            AddVehicleComponent(vehicleid, comp7);
						SaveComp(comp7,GetVehicleComponentType(comp7),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
	 	}
	 	return 1;
	}
    if(dialogid == Vmod9)
    {
	    if(response)
	    {
	        if(listitem == 0)
	        {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
			            comp1 = 1032; // Alien roof
			            AddVehicleComponent(vehicleid, comp1);
			            SaveComp(comp1,GetVehicleComponentType(comp1),VehicleInfo[vehicleid][vDescription],vehicleid);
			            GivePlayerCash(playerid,-50);
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
	        }
			if (listitem == 1)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp2 = 1028; // Alien Exhaust
			            AddVehicleComponent(vehicleid, comp2);
						SaveComp(comp2,GetVehicleComponentType(comp2),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 2)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp3 = 1026; // Right Alien Sideskirt
			            AddVehicleComponent(vehicleid, comp3);
			            comp4 = 1027; // Left Alien Sideskirt
			            AddVehicleComponent(vehicleid, comp4);
						SaveComp(comp3,GetVehicleComponentType(comp3),VehicleInfo[vehicleid][vDescription],vehicleid);
			            SaveComp(comp4,GetVehicleComponentType(comp4),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 3)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp5 = 1138; // Alien Spoiler
			            AddVehicleComponent(vehicleid, comp5);
						SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 4)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp6 = 1169; // Alien Front Bumper
			            AddVehicleComponent(vehicleid, comp6);
						SaveComp(comp6,GetVehicleComponentType(comp6),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 5)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp7 = 1141; // Alien Rear Bumper
			            AddVehicleComponent(vehicleid, comp7);
						SaveComp(comp7,GetVehicleComponentType(comp7),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if(listitem == 6)
	        {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
			            comp1 = 1033; // Xflow roof
			            AddVehicleComponent(vehicleid, comp1);
			            SaveComp(comp1,GetVehicleComponentType(comp1),VehicleInfo[vehicleid][vDescription],vehicleid);
			            GivePlayerCash(playerid,-50);
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
	        }
			if (listitem == 7)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp2 = 1029; // Xflow Exhaust
			            AddVehicleComponent(vehicleid, comp2);
						SaveComp(comp2,GetVehicleComponentType(comp2),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 8)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp3 = 1031; // Right Xflow Sideskirt
			            AddVehicleComponent(vehicleid, comp3);
			            comp4 = 1030; // Left Xflow Sideskirt
			            AddVehicleComponent(vehicleid, comp4);
						SaveComp(comp3,GetVehicleComponentType(comp3),VehicleInfo[vehicleid][vDescription],vehicleid);
			            SaveComp(comp4,GetVehicleComponentType(comp4),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 9)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp5 = 1139; // Xflow Spoiler
			            AddVehicleComponent(vehicleid, comp5);
						SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 10)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp6 = 1170; // Xflow Front Bumper
			            AddVehicleComponent(vehicleid, comp6);
						SaveComp(comp6,GetVehicleComponentType(comp6),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 11)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp7 = 1140; // Xflow Rear Bumper
			            AddVehicleComponent(vehicleid, comp7);
						SaveComp(comp7,GetVehicleComponentType(comp7),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
	 	}
	 	return 1;
	}
    if(dialogid == Vmod10)
    {
	    if(response)
	    {
	        if(listitem == 0)
	        {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
			            comp1 = 1067; // Alien roof
			            AddVehicleComponent(vehicleid, comp1);
			            SaveComp(comp1,GetVehicleComponentType(comp1),VehicleInfo[vehicleid][vDescription],vehicleid);
			            GivePlayerCash(playerid,-50);
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
	        }
			if (listitem == 1)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp2 = 1065; // Alien Exhaust
			            AddVehicleComponent(vehicleid, comp2);
						SaveComp(comp2,GetVehicleComponentType(comp2),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 2)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp3 = 1069; // Right Alien Sideskirt
			            AddVehicleComponent(vehicleid, comp3);
			            comp4 = 1071; // Left Alien Sideskirt
			            AddVehicleComponent(vehicleid, comp4);
						SaveComp(comp3,GetVehicleComponentType(comp3),VehicleInfo[vehicleid][vDescription],vehicleid);
			            SaveComp(comp4,GetVehicleComponentType(comp4),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 3)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp5 = 1162; // Alien Spoiler
			            AddVehicleComponent(vehicleid, comp5);
						SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 4)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp6 = 1160; // Alien Front Bumper
			            AddVehicleComponent(vehicleid, comp6);
						SaveComp(comp6,GetVehicleComponentType(comp6),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 5)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp7 = 1159; // Alien Rear Bumper
			            AddVehicleComponent(vehicleid, comp7);
						SaveComp(comp7,GetVehicleComponentType(comp7),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if(listitem == 6)
	        {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
			            comp1 = 1068; // Xflow roof
			            AddVehicleComponent(vehicleid, comp1);
			            SaveComp(comp1,GetVehicleComponentType(comp1),VehicleInfo[vehicleid][vDescription],vehicleid);
			            GivePlayerCash(playerid,-50);
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
	        }
			if (listitem == 7)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp2 = 1066; // Xflow Exhaust
			            AddVehicleComponent(vehicleid, comp2);
						SaveComp(comp2,GetVehicleComponentType(comp2),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 8)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp3 = 1070; // Right Xflow Sideskirt
			            AddVehicleComponent(vehicleid, comp3);
			            comp4 = 1072; // Left Xflow Sideskirt
			            AddVehicleComponent(vehicleid, comp4);
						SaveComp(comp3,GetVehicleComponentType(comp3),VehicleInfo[vehicleid][vDescription],vehicleid);
			            SaveComp(comp4,GetVehicleComponentType(comp4),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 9)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp5 = 1158; // Xflow Spoiler
			            AddVehicleComponent(vehicleid, comp5);
						SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 10)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp6 = 1173; // Xflow Front Bumper
			            AddVehicleComponent(vehicleid, comp6);
						SaveComp(comp6,GetVehicleComponentType(comp6),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 11)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp7 = 1161; // Xflow Rear Bumper
			            AddVehicleComponent(vehicleid, comp7);
						SaveComp(comp7,GetVehicleComponentType(comp7),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
	 	}
	 	return 1;
	}
    if(dialogid == Vmod11)
    {
	    if(response)
	    {
			if(listitem == 0)
	        {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
			            comp1 = 1038; // Alien roof
			            AddVehicleComponent(vehicleid, comp1);
			            SaveComp(comp1,GetVehicleComponentType(comp1),VehicleInfo[vehicleid][vDescription],vehicleid);
			            GivePlayerCash(playerid,-50);
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
	        }
			if (listitem == 1)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp2 = 1034; // Alien Exhaust
			            AddVehicleComponent(vehicleid, comp2);
						SaveComp(comp2,GetVehicleComponentType(comp2),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 2)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp3 = 1036; // Right Alien Sideskirt
			            AddVehicleComponent(vehicleid, comp3);
			            comp4 = 1040; // Left Alien Sideskirt
			            AddVehicleComponent(vehicleid, comp4);
						SaveComp(comp3,GetVehicleComponentType(comp3),VehicleInfo[vehicleid][vDescription],vehicleid);
			            SaveComp(comp4,GetVehicleComponentType(comp4),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 3)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp5 = 1147; // Alien Spoiler
			            AddVehicleComponent(vehicleid, comp5);
						SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 4)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp6 = 1171; // Alien Front Bumper
			            AddVehicleComponent(vehicleid, comp6);
						SaveComp(comp6,GetVehicleComponentType(comp6),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 5)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp7 = 1149; // Alien Rear Bumper
			            AddVehicleComponent(vehicleid, comp7);
						SaveComp(comp7,GetVehicleComponentType(comp7),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if(listitem == 6)
	        {
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
			            comp1 = 1035; // Xflow roof
			            AddVehicleComponent(vehicleid, comp1);
			            SaveComp(comp1,GetVehicleComponentType(comp1),VehicleInfo[vehicleid][vDescription],vehicleid);
			            GivePlayerCash(playerid,-50);
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
	        }
			if (listitem == 7)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp2 = 1037; // Xflow Exhaust
			            AddVehicleComponent(vehicleid, comp2);
						SaveComp(comp2,GetVehicleComponentType(comp2),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 8)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp3 = 1039; // Right Xflow Sideskirt
			            AddVehicleComponent(vehicleid, comp3);
			            comp4 = 1041; // Left Xflow Sideskirt
			            AddVehicleComponent(vehicleid, comp4);
						SaveComp(comp3,GetVehicleComponentType(comp3),VehicleInfo[vehicleid][vDescription],vehicleid);
			            SaveComp(comp4,GetVehicleComponentType(comp4),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 9)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp5 = 1146; // Xflow Spoiler
			            AddVehicleComponent(vehicleid, comp5);
						SaveComp(comp5,GetVehicleComponentType(comp5),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 10)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp6 = 1172; // Xflow Front Bumper
			            AddVehicleComponent(vehicleid, comp6);
						SaveComp(comp6,GetVehicleComponentType(comp6),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
			if (listitem == 11)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
				{
					if(GetPlayerCash(playerid) >= 50)
					{
						comp7 = 1148; // Xflow Rear Bumper
			            AddVehicleComponent(vehicleid, comp7);
						SaveComp(comp7,GetVehicleComponentType(comp7),VehicleInfo[vehicleid][vDescription],vehicleid);
						GivePlayerCash(playerid,-50);
					}
					else
			        {
			            SendClientMessage(playerid, COLOR_WHITE,"ERROR: You cannot afford this.");
			            return 1;
					}
				}
				else
		        {
		            SendClientMessage(playerid, COLOR_WHITE,"ERROR: This kind of vehicle cannot get this modification.");
		            return 1;
				}
			}
	 	}
	 	return 1;
	}
	if(dialogid == HouseWeed1) // Pot Safe Menu
    {
        if (response == 1) // Withdraw
        {
			format(dstring, sizeof(dstring), "How much would you like to withdraw from your safe?\n\nNote: You currently have %d grams of Marijuana inside your safetybox..",Houses[PlayerInfo[playerid][pHouseKey]][hWeed]);
			ShowPlayerDialog(playerid,HouseWeed2,DIALOG_STYLE_INPUT,"Safetybox - Marijuana Withdraw",dstring,"Withdraw","Back");
		}
		else // Deposit
		{
		    format(dstring, sizeof(dstring), "How much would you like to deposit in your safe?\n\nNote: You currently have %d grams of Marijuana inside your safetybox.",Houses[PlayerInfo[playerid][pHouseKey]][hWeed]);
			ShowPlayerDialog(playerid,HouseWeed3,DIALOG_STYLE_INPUT,"Safetybox - Marijuana Deposit",dstring,"Deposit","Back");
		}
	}
	if(dialogid == HouseWeed2) // House Pot Menu 2
    {
        if (response == 1) // Withdraw Input
        {
            if(IsNull(inputtext))
            {
                format(dstring, sizeof(dstring), "How much Pot would you like to withdraw from your safe?\n\nNote: You currently have %d grams of Marijuana inside your safetybox.",Houses[PlayerInfo[playerid][pHouseKey]][hWeed]);
				ShowPlayerDialog(playerid,HouseWeed2,DIALOG_STYLE_INPUT,"Safetybox - Marijuana Withdraw",dstring,"Withdraw","Back");
                return 1;
			}
            if (strval(inputtext) > Houses[PlayerInfo[playerid][pHouseKey]][hWeed] || strval(inputtext) < 1)
			{
			    format(dstring, sizeof(dstring), "How much would you like to withdraw from your safe?\n\nNote: You currently have %d grams of Marijuana inside your safetybox.",Houses[PlayerInfo[playerid][pHouseKey]][hWeed]);
				ShowPlayerDialog(playerid,HouseWeed2,DIALOG_STYLE_INPUT,"Safetybox - Marijuana Withdraw",dstring,"Withdraw","Back");
				return 1;
			}
			PlayerInfo[playerid][pWeed] += strval(inputtext);
			Houses[PlayerInfo[playerid][pHouseKey]][hWeed] -= strval(inputtext);

		}
	}
	if(dialogid == HouseWeed3) // House Pot Menu 3
    {
        if (response == 1) // Deposit Input
        {
            if(IsNull(inputtext))
            {
                format(dstring, sizeof(dstring), "How much would you like to deposit?\n\n You currently have %d grams of Marijuana inside your safetybox.", Houses[PlayerInfo[playerid][pHouseKey]][hWeed]);
				ShowPlayerDialog(playerid,HouseWeed3,DIALOG_STYLE_INPUT,"Safetybox - Marijuana Deposit",dstring,"Deposit","Back");
				return 1;
			}
			if (strval(inputtext) > PlayerInfo[playerid][pWeed] || strval(inputtext) < 1)
			{
			    format(dstring, sizeof(dstring), "How much would you like to deposit in your safe?\n\nNote: You currently have %d grams of Pot in your safe.",Houses[PlayerInfo[playerid][pHouseKey]][hWeed]);
				ShowPlayerDialog(playerid,HouseWeed3,DIALOG_STYLE_INPUT,"Safetybox - Marijuana Deposit",dstring,"Deposit","Back");
				return 1;
			}
			PlayerInfo[playerid][pWeed] -= strval(inputtext);
			Houses[PlayerInfo[playerid][pHouseKey]][hWeed] += strval(inputtext);

		}
	}
if (dialogid == 10000)
    {
        if (response)
        {
            if (listitem == 0)
            {
                ShowPlayerDialog(playerid, 10001, DIALOG_STYLE_LIST, "Care dintre urmatoarele /me-uri sunt bune?","/me are o sticla de apa in mana.\n/me Frank vino aici!\n/me se intinde spre cer, apuca avionul.", "Select", "Cancel");
                SetPlayerInterior(playerid,0);
                SetPlayerVirtualWorld(playerid,0);
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10001)
    {
        if (response)
        {
            if (listitem == 0)
            {
                ShowPlayerDialog(playerid, 10002, DIALOG_STYLE_LIST, "Ai voie sa ignori chat-ul OOC intr-o actiune roleplay?","Da, ai voie sa ignori chat-ul OOC intr-o actiune roleplay.\nNu.\nDa, dar daca ne cere un admin explicatii ii raspundem.", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10002)
    {
        if (response)
        {
            if (listitem == 2)
            {
                ShowPlayerDialog(playerid, 10003, DIALOG_STYLE_LIST, "Cum obtii asistenta unui admin?","/re cu problema.\nIl spamez pe pm.\nIi spun ca ma trimis un admin la el.", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10003)
    {
        if (response)
        {
            if (listitem == 0)
            {
                ShowPlayerDialog(playerid, 10004, DIALOG_STYLE_LIST, "Care dintre urmatoarele anunturi este corect?","/ad Veniti sa bem un suc.\n/ad Vand arme de calibru mare.\n/ad Vand Blista din anul 1995.", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10004)
    {
        if (response)
        {
            if (listitem == 2)
            {
                ShowPlayerDialog(playerid, 10005, DIALOG_STYLE_LIST, "Care este levelul pentru a putea jefui si pentru a fi jefuit?","10 si 10\n3 si 3\n7 si 7", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10005)
    {
        if (response)
        {
            if (listitem == 1)
            {
                ShowPlayerDialog(playerid, 10006, DIALOG_STYLE_LIST, "Care /do e corect?","/do Ce faci?\n/do Cum e vremea?\n/do Se poate observa un cadavru pe jos.", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10006)
    {
        if (response)
        {
            if (listitem == 2)
            {
                ShowPlayerDialog(playerid, 10007, DIALOG_STYLE_LIST, "Ce inseamna termenul PowerGaming","A realiza actiuni supra omenesti.\nA juca in stil power\nA sta pe margina", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10007)
    {
        if (response)
        {
            if (listitem == 0)
            {
                ShowPlayerDialog(playerid, 10008, DIALOG_STYLE_LIST, "Ce inseamna prescurtarea MG","MotorGaming.\nMetaGaming\nMegaGaming", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10008)
    {
        if (response)
        {
            if (listitem == 1)
            {
                ShowPlayerDialog(playerid, 10009, DIALOG_STYLE_LIST, "Ce inseamna prescurtarea PG","PowerGun.\nPowerGaming\nPlusGame", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10009)
    {
        if (response)
        {
            if (listitem == 1)
            {
                ShowPlayerDialog(playerid, 10010, DIALOG_STYLE_LIST, "Ce faci daca faci accident?","Sun la politie.\nFug\nFac roleplay ca nu am patit nimic", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10010)
    {
        if (response)
        {
            if (listitem == 0)
            {
                ShowPlayerDialog(playerid, 10011, DIALOG_STYLE_LIST, "Ai voie sa stresezi un admin pentru a primi o anumita functie?","Da.\nNu am voie sa fac asa ceva.\nDe ce nu?", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10011)
    {
        if (response)
        {
            if (listitem == 1)
            {
                ShowPlayerDialog(playerid, 10012, DIALOG_STYLE_LIST, "Cum este corect sa ajung mai repede dintr-un loc in celalalt ?","Inchiriez o masina sau chem un taxi.\nIncep sa zbor cu surfly.\nAstept sa ma duca un admin.", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10012)
    {
        if (response)
        {
            if (listitem == 0)
            {
                ShowPlayerDialog(playerid, 10013, DIALOG_STYLE_LIST, "Ai voie sa omori un player dupa ce il jefuiesti?","Nu, se considera rob and kill.\nAm voie.\nDoar in zonele nepopulate.", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10013)
    {
        if (response)
        {
            if (listitem == 0)
            {
                ShowPlayerDialog(playerid, 10014, DIALOG_STYLE_LIST, "Ai voie sa ai mai multe conturi?","Maxim doua conturi.\nDa, cate vreau, dar fara sa-mi transfer bunuri unul de pe celalalt.\nDoar unul.", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10014)
    {
        if (response)
        {
            if (listitem == 1)
            {
                ShowPlayerDialog(playerid, 10015, DIALOG_STYLE_LIST, "Ce este BH?","Banner Hop.\nBihor Hop.\nBunny Hop.", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10015)
    {
        if (response)
        {
            if (listitem == 2)
            {
                ShowPlayerDialog(playerid, 10016, DIALOG_STYLE_LIST, "Ce inseamna Ninja Jack ?","Atunci cand ii furi cuiva masina fortat, fara roleplay doar apasand pe F/Enter .\nAtunci cand faci precum un Ninja.\nAtunci cand ai skin de Ninja.", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
    if (dialogid == 10016)
    {
        if (response)
        {
            if (listitem == 0)
            {
                RegistrationStep[playerid] = 1;
                ShowPlayerDialog(playerid, SEXMENU, DIALOG_STYLE_LIST, "Care este sexul tau?","Masculin\nFeminin ", "Select", "Cancel");
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Ai raspuns gresit la o intrebare. Vei primii kick, apoi vei putea reincerca.");
                SetTimerEx("KickPublic", 50, false, "d", playerid);
            }
        }
        else
        {
            SetTimerEx("KickPublic", 50, false, "d", playerid);
        }
    }
	if(dialogid == SEXMENU)
	{
		if(response)
		{
			if(listitem == 0) // Male
			{
        	    if(RegistrationStep[playerid] == 1)
         	    {
					SetPlayerVirtualWorld(playerid, playerid+1);
                   	PlayerInfo[playerid][pSex] = 1;
			    	PlayerInfo[playerid][pSkin] = 299;
					SetPlayerSkin(playerid, 299);
		    		RegistrationStep[playerid] = 2;
	    			PlayerInfo[playerid][pTut] = 1;
		    		PlayerInfo[playerid][pWalk] = 1;
					ShowPlayerDialog(playerid, AGEMENU, DIALOG_STYLE_INPUT, "Cati ani vrei sa aiba caracterul tau?","Scrie varsta caracterului tau.","Enter","Enter");
 			        return 1;
 			    }
			}
			if(listitem == 1) // Female
			{
        	    if(RegistrationStep[playerid] == 1)
         	    {
					SetPlayerVirtualWorld(playerid, playerid+1);
                    PlayerInfo[playerid][pSex] = 0;
			    	PlayerInfo[playerid][pSkin] = 216;
					SetPlayerSkin(playerid, 216);
		    		RegistrationStep[playerid] = 2;
	    			PlayerInfo[playerid][pTut] = 1;
		    		PlayerInfo[playerid][pWalk] = 2;
   		    	    ShowPlayerDialog(playerid, AGEMENU, DIALOG_STYLE_INPUT, "Cati ani vrei sa aiba caracterul tau?","Scrie varsta caracterului tau.","Enter","Enter");
 			        return 1;
 			    }
			}
		}
		else
		{
			SetTimerEx("KickPublic", 50, false, "d", playerid);
		}
		return 1;
	}
	if(dialogid == AGEMENU)
	{
		if(RegistrationStep[playerid] == 2)
	    {
			new age = strval(inputtext);
	    	if (age >= 10 && age <= 100)
	 		{
	    		PlayerInfo[playerid][pAge] = age;
	    		RegistrationStep[playerid] = 2;
	    		PlayerInfo[playerid][pTut] = 1;
	    		ShowPlayerDialog(playerid, RACEMENU, DIALOG_STYLE_LIST, "Care este rasa ta?","Neagra\nAsiatica\nCaucasiana\nLatina ", "Select", "Cancel");
	 		}
	 		else
	 		{
	 		   	ShowPlayerDialog(playerid, AGEMENU, DIALOG_STYLE_INPUT, "Cati ani vrei sa aiba caracterul tau?","Scrie varsta caracterului tau.","Enter","Enter");
	 		}
	 	}
	}
	if(dialogid == 571)
	{
		if(response)
		{
			strmid(PlayerInfo[playerid][pForumName], inputtext, 0, strlen(inputtext), 999);
		}
	}
	if(dialogid == 572)
	{
		if(response)
		{
			new plname[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plname, sizeof(plname));
			new vehi = GetPlayerVehicleID(playerid);
			new Float:x,Float:y,Float:z,Float:ang;
			new TextPlate[128];
			new str[128];
			format(TextPlate, sizeof(TextPlate), "{000000}%s",inputtext);
			format(str,sizeof(str),"Masina a fost inregistrata in baza de date. Noul numar de imatriculare: %s.",inputtext);
			SendClientMessage(playerid,COLOR_WHITE,str);
			SetVehicleNumberPlate(vehi, TextPlate);
			GetVehiclePos(vehi,x,y,z);
			GetVehicleZAngle(vehi,ang);
			SetVehicleToRespawn(vehi);
			SetVehiclePos(vehi,x,y,z);
			SetVehicleZAngle(vehi,ang);
			PutPlayerInVehicle(playerid,vehi,0);
			strmid(VehicleInfo[vehi][vPlate], inputtext, 0, strlen(inputtext), 999);
			GivePlayerCash(playerid, -100);
		}
    }
	if(dialogid == 573)
	{
		if(response)
		{
			new Float:xPlate,Float:yPlate,Float:zPlate;
			new numartxt[128];
			GetVehiclePos(vehicleid, xPlate,yPlate,zPlate);
			format(numartxt, 35, "%s",inputtext);
			Numar[vehicleid] = Create3DTextLabel(numartxt, 0xFFFFFFFF, xPlate,yPlate,zPlate, 10.0, -1, 0);
			Attach3DTextLabelToVehicle(Numar[vehicleid], vehicleid, 0.0, 0.0, 0.0);
			ValidNumar[vehicleid] = 1;
		}
    }
	if(dialogid == 574)
	{
		if(response)
		{
			new stringapb[128];
			if (apbstatus1 == 0)
			{
				strmid(APB1, inputtext, 0, strlen(inputtext), 999);
				apbstatus1 = 1;
				format(stringapb, sizeof(stringapb), "APB 1 a fost creat de catre %s", GetPlayerNameEx(playerid));
				SendFactionMessage(3,COLOR_RED,stringapb);
				return 1;
			}
			if (apbstatus2 == 0)
			{
				strmid(APB2, inputtext, 0, strlen(inputtext), 999);
				apbstatus2 = 1;
				format(stringapb, sizeof(stringapb), "APB 2 a fost creat de catre %s", GetPlayerNameEx(playerid));
				SendFactionMessage(3,COLOR_RED,stringapb);
				return 1;
			}
			if (apbstatus3 == 0)
			{
				strmid(APB3, inputtext, 0, strlen(inputtext), 999);
				apbstatus3 = 1;
				format(stringapb, sizeof(stringapb), "APB 3 a fost creat de catre %s", GetPlayerNameEx(playerid));
				SendFactionMessage(3,COLOR_RED,stringapb);
				return 1;
			}
			if (apbstatus4 == 0)
			{
				strmid(APB4, inputtext, 0, strlen(inputtext), 999);
				apbstatus4 = 1;
				format(stringapb, sizeof(stringapb), "APB 4 a fost creat de catre %s", GetPlayerNameEx(playerid));
				SendFactionMessage(3,COLOR_RED,stringapb);
				return 1;
			}
			if (apbstatus5 == 0)
			{
				strmid(APB5, inputtext, 0, strlen(inputtext), 999);
				apbstatus5 = 1;
				format(stringapb, sizeof(stringapb), "APB 5 a fost creat de catre %s", GetPlayerNameEx(playerid));
				SendFactionMessage(3,COLOR_RED,stringapb);
				return 1;
			}
		}
    }
    if(dialogid == 575)
 	{
  	if(response)
  	{
      new str[128];
   format(str,sizeof(str),"HQ: %s %s este disponibil acuma sub unitatea : %s.",GetRankName(playerid), GetPlayerLastName(playerid), inputtext);
   SendFactionMessage(3, COLOR_LSPDNEW, str);
  }
    }
	if(dialogid == RACEMENU)
	{
		if(response)
	  	{
	  	    new rand = random(2);
			if(listitem == 0) // African-American
   			{
				PlayerInfo[playerid][pRace] = 0;
			    rand = random(2);
 				if(rand == 1) // Black Skin ID 25
				{
				    if(PlayerInfo[playerid][pSex] == 1)
				    {
					    SetPlayerSkin(playerid,25);
						PlayerInfo[playerid][pSkin] = 25;
					}
					else // Girl skin
					{
					    SetPlayerSkin(playerid,195);
						PlayerInfo[playerid][pSkin] = 195;
					}
				}
				else // Black skin ID 21
				{
				    if(PlayerInfo[playerid][pSex] == 1)
				    {
					    SetPlayerSkin(playerid,21);
						PlayerInfo[playerid][pSkin] = 21;
					}
					else // Girl skin
					{
					    SetPlayerSkin(playerid,190);
						PlayerInfo[playerid][pSkin] = 190;
					}
				}
				RegistrationStep[playerid] = 3;
		 		ShowPlayerDialog(playerid, LOCATIONMENU, DIALOG_STYLE_LIST, "De unde vrei sa provina caracterul tau?","America\nAfrica\nAsia\nMexico\nGermany\nEngland", "Select", "Cancel");
		   		return 1;
			}
			if(listitem == 1) // Asian
		   	{
				PlayerInfo[playerid][pRace] = 1;
				RegistrationStep[playerid] = 3;
				ShowPlayerDialog(playerid, LOCATIONMENU, DIALOG_STYLE_LIST, "De unde vrei sa provina caracterul tau?","America\nAfrica\nAsia\nMexico\nGermany\nEngland", "Select", "Cancel");
		        return 1;
			}
			if(listitem == 2) // Caucasian
			{
				PlayerInfo[playerid][pRace] = 2;
				RegistrationStep[playerid] = 3;
				ShowPlayerDialog(playerid, LOCATIONMENU, DIALOG_STYLE_LIST, "De unde vrei sa provina caracterul tau?","America\nAfrica\nAsia\nMexico\nGermany\nEngland", "Select", "Cancel");
		        return 1;
			}
			if(listitem == 3) // Latino
			{
				PlayerInfo[playerid][pRace] = 3;
				RegistrationStep[playerid] = 3;
				ShowPlayerDialog(playerid, LOCATIONMENU, DIALOG_STYLE_LIST, "De unde vrei sa provina caracterul tau?","America\nAfrica\nAsia\nMexico\nGermany\nEngland", "Select", "Cancel");
		        return 1;
			}
		}
		else
		{
			SetTimerEx("KickPublic", 50, false, "d", playerid);
		}
	}
	if(dialogid == LOCATIONMENU)
	{
		if(response)
		{
			if(listitem == 0) // America
			{
				PlayerInfo[playerid][pLocation] = 0;
				RegistrationStep[playerid] = 0;
				PlayerInfo[playerid][pTut] = 1;
				SetPlayerVirtualWorld(playerid, 0);
				ShowModelSelectionMenu(playerid, skinlist, "Skin");
				GivePlayerCash(playerid, 100);
				return 1;
			}
            if(listitem == 1) // Africa
			{
				PlayerInfo[playerid][pLocation] = 1;
				RegistrationStep[playerid] = 0;
				PlayerInfo[playerid][pTut] = 1;
				SetPlayerVirtualWorld(playerid, 0);
				ShowModelSelectionMenu(playerid, skinlist, "Skin");
				GivePlayerCash(playerid, 100);
				return 1;
			}
			if(listitem == 2) // Asia
			{
				PlayerInfo[playerid][pLocation] = 2;
				RegistrationStep[playerid] = 0;
				PlayerInfo[playerid][pTut] = 1;
				SetPlayerVirtualWorld(playerid, 0);
				ShowModelSelectionMenu(playerid, skinlist, "Skin");
				GivePlayerCash(playerid, 100);
				return 1;
			}
			if(listitem == 3) // Mexico
			{
				PlayerInfo[playerid][pLocation] = 3;
				RegistrationStep[playerid] = 0;
				PlayerInfo[playerid][pTut] = 1;
				SetPlayerVirtualWorld(playerid, 0);
				ShowModelSelectionMenu(playerid, skinlist, "Skin");
				GivePlayerCash(playerid, 100);
				return 1;
			}
			if(listitem == 4) // Germany
			{
				PlayerInfo[playerid][pLocation] = 4;
				RegistrationStep[playerid] = 0;
				PlayerInfo[playerid][pTut] = 1;
				SetPlayerVirtualWorld(playerid, 0);
				ShowModelSelectionMenu(playerid, skinlist, "Skin");
				GivePlayerCash(playerid, 100);
				return 1;
			}
			if(listitem == 5) // England
			{
				PlayerInfo[playerid][pLocation] = 5;
				RegistrationStep[playerid] = 0;
				PlayerInfo[playerid][pTut] = 1;
				SetPlayerVirtualWorld(playerid, 0);
				ShowModelSelectionMenu(playerid, skinlist, "Skin");
				GivePlayerCash(playerid, 100);
				return 1;
			}
		}
		else
		{
			SetTimerEx("KickPublic", 50, false, "d", playerid);
		}
	}
    return 0;
}


public OnPlayerExitVehicle(playerid, vehicleid)
{


	if(PlayerInfo[playerid][pRadioHandle] != -1)
	{
		Audio_Stop(playerid, PlayerInfo[playerid][pRadioHandle]);
		PlayerInfo[playerid][pRadioHandle] = -1;
	}

    PlayerInfo[playerid][Gear] = 0;
	if(PlayerInfo[playerid][pJacking] >= 0)
	{ PlayerInfo[playerid][pJacking] = 0; }
	if(PlayerInfo[playerid][pJacking] != 0)
	{ PlayerInfo[playerid][pJacking] = 0; }
	TogglePlayerControllable(playerid, 1);
    if(Seatbelt[playerid] == 1)
    {
		Seatbelt[playerid] = 0;
		PlayerActionMessage(playerid,15.0,"isi da jos centura de siguranta");
	}
	return 1;
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
 	new Float:HP;
    if(!IsPlayerConnected(playerid)) return 0;
    if(!IsPlayerConnected(issuerid)) return 0;
    if(issuerid != INVALID_PLAYER_ID && BeanBag[playerid] == 0)
    {
        GetPlayerHealth(playerid,HP);
    	SetPlayerHealth(playerid, HP-10);
    }
	Damage[playerid][weaponid][Damages][bodypart] += 1;
    return 1;
}









//===============================FREEZEPLAYER======================//
forward Unfreeze(playerid);
public Unfreeze(playerid)
{

	TogglePlayerControllable(playerid, 1);
	RepCar[playerid] = 0;
    return 1;
}
stock FreezePlayer(playerid, time)
{
    SetTimerEx("Unfreeze", time*1000, false, "u", playerid);
    TogglePlayerControllable(playerid, 0);
    return 1;
}
//===================================GATES SERVICE REPAIR===================//
public servicepeconordclose()
{
    MoveObject(servicepeconord, 1017.5701, -922.0805, 42.5139, 1.0,0.0000, 0.0000, -82.6800);
}
public servicepecosudclose()
{
    MoveObject(servicepecosud, 1912.0736, -1771.8940, 13.7736, 1.0,0.0000, 0.0000, 90);
}
public servicefortcarsonclose()
{
    MoveObject(servicefortcarson, -112.06892, 1125.32605, 19.73144, 1.0,0.0000, 0.0000, 90);
}
//=========================================================================//

public OnVehicleMod(playerid,vehicleid,componentid)
{
     switch(componentid)
        {
            case 1008..1010: if(IsPlayerInInvalidNosVehicle(playerid)) RemoveVehicleComponent(vehicleid, componentid);
        }
        if(!IsComponentidCompatible(GetVehicleModel(vehicleid), componentid)) RemoveVehicleComponent(vehicleid, componentid);
    GivePlayerCash(playerid,-10);
    return 1;
}

public OnVehiclePaintjob(playerid,vehicleid,paintjobid)
{
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    return 1;
}

forward MotorRoto(playerid, vehicleid);
public MotorRoto(playerid, vehicleid)
{
    if(IsPlayerConnected(playerid) && IsPlayerInVehicle(playerid, vehicleid))
    {
        GetVehicleHealth(vehicleid, VidaMotor[vehicleid]); 
        if(VidaMotor[vehicleid] <= VALUE_MOTOR)
        { 
            SetVehicleHealth(vehicleid, VidaMotor[vehicleid]=VALUE_MOTOR);
            GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
            SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
            EngineStatus[vehicleid] = 0;
        }
    }
    return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid,10,2181.4631,-2318.6343,13.3188) && ScrapCP[playerid] == 1)
    {
        ScrapCP[playerid] = 0;
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Businesses[7][EnterX],Businesses[7][EnterY],Businesses[7][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Building[0][EnterX],Building[0][EnterY],Building[0][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Building[1][EnterX],Building[1][EnterY],Building[1][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Building[2][EnterX],Building[2][EnterY],Building[2][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Building[3][EnterX],Building[3][EnterY],Building[3][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Building[4][EnterX],Building[4][EnterY],Building[4][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Building[5][EnterX],Building[5][EnterY],Building[5][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Building[6][EnterX],Building[6][EnterY],Building[6][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Building[7][EnterX],Building[7][EnterY],Building[7][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Building[8][EnterX],Building[8][EnterY],Building[8][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,-68.8293,-1131.0443,1.0781))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,2102.4446,-1788.6082,13.5547))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,2271.1638,-2352.5271,13.5469))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Businesses[5][EnterX],Businesses[5][EnterY],Businesses[5][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Businesses[14][EnterX],Businesses[14][EnterY],Businesses[14][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Building[9][EnterX],Building[9][EnterY],Building[9][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,1219.2322,-1813.4165,16.5938))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,Businesses[12][EnterX],Businesses[12][EnterY],Businesses[12][EnterZ]))
    {
        DisablePlayerCheckpoint(playerid);
    }
    if (CPlocation[playerid] != 0)
    {
        if(IsPlayerInRangeOfPoint(playerid,10,Businesses[7][EnterX],Businesses[7][EnterY],Businesses[7][EnterZ])&&CPlocation[playerid] == 1)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Building[0][EnterX],Building[0][EnterY],Building[0][EnterZ])&&CPlocation[playerid] == 2)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Building[1][EnterX],Building[1][EnterY],Building[1][EnterZ])&&CPlocation[playerid] == 3)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Building[2][EnterX],Building[2][EnterY],Building[2][EnterZ])&&CPlocation[playerid] == 4)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Building[3][EnterX],Building[3][EnterY],Building[3][EnterZ])&&CPlocation[playerid] == 5)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Building[4][EnterX],Building[4][EnterY],Building[4][EnterZ])&&CPlocation[playerid] == 6)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Building[5][EnterX],Building[5][EnterY],Building[5][EnterZ])&&CPlocation[playerid] == 7)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Building[6][EnterX],Building[6][EnterY],Building[6][EnterZ])&&CPlocation[playerid] == 8)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Building[7][EnterX],Building[7][EnterY],Building[7][EnterZ])&&CPlocation[playerid] == 9)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Building[8][EnterX],Building[8][EnterY],Building[8][EnterZ])&&CPlocation[playerid] == 10)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,-68.8293,-1131.0443,1.0781)&&CPlocation[playerid] == 11)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,2102.4446,-1788.6082,13.5547)&&CPlocation[playerid] == 12)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,2271.1638,-2352.5271,13.5469)&&CPlocation[playerid] == 13)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Businesses[5][EnterX],Businesses[5][EnterY],Businesses[5][EnterZ])&&CPlocation[playerid] == 14)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Businesses[14][EnterX],Businesses[14][EnterY],Businesses[14][EnterZ])&&CPlocation[playerid] == 15)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Businesses[10][EnterX],Businesses[10][EnterY],Businesses[10][EnterZ])&&CPlocation[playerid] == 16)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,-21.8299,35.5994,3.1172)&&CPlocation[playerid] == 17)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Building[9][EnterX],Building[9][EnterY],Building[9][EnterZ])&&CPlocation[playerid] == 18)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Businesses[8][EnterX],Businesses[8][EnterY],Businesses[8][EnterZ])&&CPlocation[playerid] == 19)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
        else if(IsPlayerInRangeOfPoint(playerid,10,Businesses[12][EnterX],Businesses[12][EnterY],Businesses[12][EnterZ])&&CPlocation[playerid] == 20)
        {
            CPlocation[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
        }
    }
    new string[128];
    if(VCP[playerid] == 1)
    {
        new Float:x, Float:y, Float:z;
        GetVehiclePos(PlayerInfo[playerid][pCarKey], x, y, z);
        if(PlayerToPoint(6.5,playerid,x,y,z))
        {
            GameTextForPlayer(playerid, "~p~Tocmai ai gasit locul", 2000, 4);
            VCP[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            ActiveCP[playerid] = 0;
        }
        else if(PlayerInfo[playerid][pGarageKey] != 0 && PlayerToPoint(6.5,playerid,Garages[PlayerInfo[playerid][pGarageKey]][EnterX],Garages[PlayerInfo[playerid][pGarageKey]][EnterY],Garages[PlayerInfo[playerid][pGarageKey]][EnterZ]))
        {
            GameTextForPlayer(playerid, "~p~Tocmai ai gasit locul", 2000, 4);
            VCP[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            ActiveCP[playerid] = 0;
        }
    }
    if(VCP[playerid] == 2)
    {
        new Float:x, Float:y, Float:z;
        GetVehiclePos(PlayerInfo[playerid][pCarKey2], x, y, z);
        if(PlayerToPoint(6.5,playerid,x,y,z))
        {
            GameTextForPlayer(playerid, "~p~Tocmai ai gasit locul", 2000, 4);
            VCP[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            ActiveCP[playerid] = 0;
        }
        else if(PlayerInfo[playerid][pGarageKey] != 0 && PlayerToPoint(6.5,playerid,Garages[PlayerInfo[playerid][pGarageKey]][EnterX],Garages[PlayerInfo[playerid][pGarageKey]][EnterY],Garages[PlayerInfo[playerid][pGarageKey]][EnterZ]))
        {
            GameTextForPlayer(playerid, "~p~Tocmai ai gasit locul", 2000, 4);
            VCP[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            ActiveCP[playerid] = 0;
        }
    }
    new veh = GetPlayerVehicleID(playerid);
    new modelcar = GetVehicleModel(veh);
    
//==================================================================SWEEP======================================//
    if (Sweep[playerid] == 1)
    {
        if(IsPlayerInRangeOfPoint(playerid,10,2300.6365,-2355.5398,13.1155)&&CPSweep[playerid] == 1)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 2;
                SetPlayerCheckpoint(playerid, 2222.3440,-2456.0334,13.1056, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2222.3440,-2456.0334,13.1056)&&CPSweep[playerid] == 2)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 3;
                SetPlayerCheckpoint(playerid, 2244.9373,-2665.9922,13.1564, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2244.9373,-2665.9922,13.1564)&&CPSweep[playerid] == 3)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 4;
                SetPlayerCheckpoint(playerid, 2487.3616,-2645.7935,13.2172, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2487.3616,-2645.7935,13.2172)&&CPSweep[playerid] == 4)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 5;
                SetPlayerCheckpoint(playerid, 2506.9612,-2506.5154,13.2570, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2506.9612,-2506.5154,13.2570)&&CPSweep[playerid] == 5)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 6;
                SetPlayerCheckpoint(playerid, 2686.5381,-2493.0784,13.2370, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2686.5381,-2493.0784,13.2370)&&CPSweep[playerid] == 6)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 7;
                SetPlayerCheckpoint(playerid, 2673.8613,-2402.2520,13.1829, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2673.8613,-2402.2520,13.1829)&&CPSweep[playerid] == 7)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 8;
                SetPlayerCheckpoint(playerid, 2570.8350,-2363.8801,14.6013, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2570.8350,-2363.8801,14.6013)&&CPSweep[playerid] == 8)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 9;
                SetPlayerCheckpoint(playerid, 2290.3286,-2084.4341,13.1062, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2290.3286,-2084.4341,13.1062)&&CPSweep[playerid] == 9)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 10;
                SetPlayerCheckpoint(playerid, 2197.0203,-2162.7961,13.1157, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2197.0203,-2162.7961,13.1157)&&CPSweep[playerid] == 10)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 11;
                SetPlayerCheckpoint(playerid, 2285.2185,-2265.6035,13.1002, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2285.2185,-2265.6035,13.1002)&&CPSweep[playerid] == 11)
        {
            if (modelcar == 574)
            {
                DisablePlayerCheckpoint(playerid);
                CPSweep[playerid] = 12;
                SetPlayerCheckpoint(playerid, 2314.1226,-2343.0032,13.1022, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2314.1226,-2343.0032,13.1022)&&CPSweep[playerid] == 12)
        {
            if (modelcar == 574)
            {
                if (SweepTura[playerid] == 1)
                {
                    DisablePlayerCheckpoint(playerid);
                    RemovePlayerFromVehicle(veh);
                    SetVehicleToRespawn(veh);
                    Sweep[playerid] = 0;
                    PlayerInfo[playerid][pCanJob] = 10;
                    GivePlayerCash(playerid, 850);
                    SweepTura[playerid] = 0;
                    SendClientMessage(playerid,COLOR_GREY,"Ai terminat cursa! Banii incasati : 850");
                    SendClientMessage(playerid,COLOR_GREY,"Revino mai tarziu daca vrei!");
                }
                else
                {
                    DisablePlayerCheckpoint(playerid);
                    CPSweep[playerid] = 1;
                    SetPlayerCheckpoint(playerid, 2300.6365,-2355.5398,13.1155, 3.0);
                    SweepTura[playerid] = 1;
                }
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , sweeper.");
        }
    }
//========================================FURNITURE JOB=======================================================//
	if (Mobilier[playerid] == 1)
    {
        if(IsPlayerInRangeOfPoint(playerid,10,1848.0990,-2057.6438,13.5535)&&CPMobilier[playerid] == 1)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                CPMobilier[playerid] = 2;
                SetPlayerCheckpoint(playerid, 2270.4192,-1889.9290,13.5153, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2270.4192,-1889.9290,13.5153)&&CPMobilier[playerid] == 2)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                CPMobilier[playerid] = 3;
                SetPlayerCheckpoint(playerid, 2064.0859,-1694.6124,13.6408, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2064.0859,-1694.6124,13.6408)&&CPMobilier[playerid] == 3)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                CPMobilier[playerid] = 4;
                SetPlayerCheckpoint(playerid, 1981.1014,-1674.8033,16.0623, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,1981.1014,-1674.8033,16.0623)&&CPMobilier[playerid] == 4)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                CPMobilier[playerid] = 5;
                SetPlayerCheckpoint(playerid, 2305.6597,-1664.3901,14.5914, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2305.6597,-1664.3901,14.5914)&&CPMobilier[playerid] == 5)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                CPMobilier[playerid] = 6;
                SetPlayerCheckpoint(playerid, 2347.1787,-1485.1014,24.0016, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2347.1787,-1485.1014,24.0016)&&CPMobilier[playerid] == 6)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                CPMobilier[playerid] = 7;
                SetPlayerCheckpoint(playerid, 2207.8049,-1465.7960,23.9868, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2207.8049,-1465.7960,23.9868)&&CPMobilier[playerid] == 7)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                CPMobilier[playerid] = 8;
                SetPlayerCheckpoint(playerid, 2129.3284,-1379.2795,23.9909, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2129.3284,-1379.2795,23.9909)&&CPMobilier[playerid] == 8)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                CPMobilier[playerid] = 9;
                SetPlayerCheckpoint(playerid, 2101.5615,-1286.5732,24.6455, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2101.5615,-1286.5732,24.6455)&&CPMobilier[playerid] == 9)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                CPMobilier[playerid] = 10;
                SetPlayerCheckpoint(playerid, 1929.3511,-1128.9762,25.3098, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,1929.3511,-1128.9762,25.3098)&&CPMobilier[playerid] == 10)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                CPMobilier[playerid] = 11;
                SetPlayerCheckpoint(playerid, 2123.1689,-2140.6990,13.6829, 3.0);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2123.1689,-2140.6990,13.6829)&&CPMobilier[playerid] == 11)
        {
            if (modelcar == 414)
            {
                DisablePlayerCheckpoint(playerid);
                RemovePlayerFromVehicle(veh);
                SetVehicleToRespawn(veh);
                Mobilier[playerid] = 0;
                PlayerInfo[playerid][pCanJob] = 14;
                GivePlayerCash(playerid, 790);
                SendClientMessage(playerid,COLOR_GREY,"Ai terminat tura de livrator de mobilier , revino la urmatorul salariu");
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , Mule.");
        }
    }
//=============================================================CUTTER================================================//
    if (Cutter[playerid] == 1)
    {
        if(IsPlayerInRangeOfPoint(playerid,10,-529.2377,-193.5804,78.4063)&&CPCutter[playerid] == 1)
        {
        	DisablePlayerCheckpoint(playerid);
        	CPCutter[playerid] = 2;
        	SetPlayerCheckpoint(playerid, -502.4213,-181.0240,77.2538, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-502.4213,-181.0240,77.2538)&&CPCutter[playerid] == 2)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPCutter[playerid] = 3;
	        SetPlayerCheckpoint(playerid, -472.8804,-197.7659,78.1470, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-472.8804,-197.7659,78.1470)&&CPCutter[playerid] == 3)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPCutter[playerid] = 4;
	        SetPlayerCheckpoint(playerid, -453.6389,-192.6362,76.9136, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-453.6389,-192.6362,76.9136)&&CPCutter[playerid] == 4)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPCutter[playerid] = 5;
	        SetPlayerCheckpoint(playerid, -494.3088,-164.8999,78.3322, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-494.3088,-164.8999,78.3322)&&CPCutter[playerid] == 5)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPCutter[playerid] = 6;
	        SetPlayerCheckpoint(playerid, -570.1193,-197.8683,78.7853, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-570.1193,-197.8683,78.7853)&&CPCutter[playerid] == 6)
        {
	        DisablePlayerCheckpoint(playerid);
         	Cutter[playerid] = 0;
          	PlayerInfo[playerid][pCanJob] = 15;
          	GivePlayerCash(playerid, 550);
	        SendClientMessage(playerid,COLOR_GREY,"Ai terminat tura de taietor de lemne , revino la urmatorul salariu");
	        RemovePlayerAttachedObject(playerid, 2);
	        RemovePlayerAttachedObject(playerid, 3);
	        RemovePlayerAttachedObject(playerid, 4);
        }
    }
//===========================================JOB==================================================================//
    if (Boy[playerid] == 1)
    {
        if(IsPlayerInRangeOfPoint(playerid,10,2014.8727,-1732.5842,14.2344)&&CPBoy[playerid] == 1)
        {
        	DisablePlayerCheckpoint(playerid);
        	CPBoy[playerid] = 2;
        	SetPlayerCheckpoint(playerid, 2014.9480,-1716.9828,13.5547, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2014.9480,-1716.9828,13.5547)&&CPBoy[playerid] == 2)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 3;
	        SetPlayerCheckpoint(playerid, 2017.9567,-1703.3567,14.2344, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2017.9567,-1703.3567,14.2344)&&CPBoy[playerid] == 3)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 4;
	        SetPlayerCheckpoint(playerid, 2012.6705,-1656.3405,13.5547, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2012.6705,-1656.3405,13.5547)&&CPBoy[playerid] == 4)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 5;
	        SetPlayerCheckpoint(playerid, 2015.9265,-1641.6484,13.7824, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2015.9265,-1641.6484,13.7824)&&CPBoy[playerid] == 5)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 6;
	        SetPlayerCheckpoint(playerid, 2017.0391,-1629.8121,13.5469, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2017.0391,-1629.8121,13.5469)&&CPBoy[playerid] == 6)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 7;
	        SetPlayerCheckpoint(playerid, 2068.3279,-1628.7582,13.8762, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2068.3279,-1628.7582,13.8762)&&CPBoy[playerid] == 7)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 8;
	        SetPlayerCheckpoint(playerid, 2068.2761,-1643.7202,13.5469, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2068.2761,-1643.7202,13.5469)&&CPBoy[playerid] == 8)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 9;
	        SetPlayerCheckpoint(playerid, 2067.6582,-1656.4498,13.5469, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2067.6582,-1656.4498,13.5469)&&CPBoy[playerid] == 9)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 10;
	        SetPlayerCheckpoint(playerid, 2065.5032,-1703.4248,14.1484, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2065.5032,-1703.4248,14.1484)&&CPBoy[playerid] == 10)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 11;
	        SetPlayerCheckpoint(playerid, 2067.1782,-1717.0092,13.5547, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2067.1782,-1717.0092,13.5547)&&CPBoy[playerid] == 11)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 12;
	        SetPlayerCheckpoint(playerid, 2067.4031,-1731.5758,13.8762, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,2067.4031,-1731.5758,13.8762)&&CPBoy[playerid] == 12)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 13;
	        SetPlayerCheckpoint(playerid, 1980.6490,-1718.9578,17.0303, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,1980.6490,-1718.9578,17.0303)&&CPBoy[playerid] == 13)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 14;
	        SetPlayerCheckpoint(playerid, 1973.3674,-1705.9011,15.9688, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,1973.3674,-1705.9011,15.9688)&&CPBoy[playerid] == 14)
        {
	        DisablePlayerCheckpoint(playerid);
	        CPBoy[playerid] = 15;
	        SetPlayerCheckpoint(playerid, 1969.2460,-1705.9509,15.9688, 3.0);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,1969.2460,-1705.9509,15.9688)&&CPBoy[playerid] == 15)
        {
        	DisablePlayerCheckpoint(playerid);
         	Cutter[playerid] = 0;
          	PlayerInfo[playerid][pCanJob] = 16;
          	GivePlayerCash(playerid, 750);
	        SendClientMessage(playerid,COLOR_GREY,"Ai terminat tura de impartit ziare , revino la urmatorul salariu");
		}
	}
//===========================================PIZZA=============================================================//
    if (Pizza[playerid] == 1)
    {
        if (CPPizza[playerid] == 69 && IsPlayerInRangeOfPoint(playerid,10,2111.6931,-1780.7189,13.3891))
        {
            DisablePlayerCheckpoint(playerid);
            RemovePlayerFromVehicle(veh);
            SetVehicleToRespawn(veh);
            Pizza[playerid] = 0;
            PlayerInfo[playerid][pCanJob] = 10;
            GivePlayerCash(playerid, 1000);
        }
        if(IsPlayerInRangeOfPoint(playerid,10,Houses[randpizza[playerid]][EnterX],Houses[randpizza[playerid]][EnterY],Houses[randpizza[playerid]][EnterZ]))
        {
            if (modelcar == 448)
            {
                if (CPPizza[playerid] == 10)
                {
                    DisablePlayerCheckpoint(playerid);
                    CPPizza[playerid]=69;
                    SetPlayerCheckpoint(playerid, 2111.6931,-1780.7189,13.3891, 3.0);
                }
                else
                {
                    DisablePlayerCheckpoint(playerid);
                    CPPizza[playerid]++;
                    randpizza[playerid] = random(143);
                    if (randpizza[playerid] == 0)
                    {
                        randpizza[playerid] = random(143);
                    }
                    SetPlayerCheckpoint(playerid, Houses[randpizza[playerid]][EnterX],Houses[randpizza[playerid]][EnterY],Houses[randpizza[playerid]][EnterZ], 3.0);
                }
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , pizza.");
        }
    }
//==============================================HAY JOB========================================================//
    if (Hay[playerid] == 1)
    {
        if(IsPlayerInRangeOfPoint(playerid,10,-71.7345,21.5383,3.7406)&&CPHay[playerid] == 1)
        {
            if (modelcar == 578)
            {
                DisablePlayerCheckpoint(playerid);
                CPHay[playerid] = 2;
                SetPlayerCheckpoint(playerid, -1055.9701,-1195.0232,129.7424, 3.0);
                SendClientMessage(playerid,COLOR_WHITE,"Ai incarcat balotii acum poti incepe sa ii livrezi, urmeaza CP-urile.");
                if (VehicleInfo[veh][vBalot1] != 0)
                {
                    DestroyObject(VehicleInfo[veh][vBalot1]);
                }
                if (VehicleInfo[veh][vBalot2] != 0)
                {
                    DestroyObject(VehicleInfo[veh][vBalot2]);
                }
                VehicleInfo[veh][vBalot1] = CreateObject(3374, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AttachObjectToVehicle(VehicleInfo[veh][vBalot1], veh, -0.019999, 0.329999, 1.159999, 0.000000, 0.000000, 0.000000);
                VehicleInfo[veh][vBalot2] = CreateObject(3374, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AttachObjectToVehicle(VehicleInfo[veh][vBalot2], veh, -0.029999, -3.740038, 1.139999, 0.000000, 0.000000, 0.000000);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , hayer.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-1055.9701,-1195.0232,129.7424)&&CPHay[playerid] == 2)
        {
            if (modelcar == 578)
            {
                DisablePlayerCheckpoint(playerid);
                CPHay[playerid] = 3;
                SetPlayerCheckpoint(playerid, -378.3883,-1429.6282,26.3502, 3.0);
                DestroyObject(VehicleInfo[veh][vBalot2]);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , hayer.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-378.3883,-1429.6282,26.3502)&&CPHay[playerid] == 3)
        {
            if (modelcar == 578)
            {
                DisablePlayerCheckpoint(playerid);
                CPHay[playerid] = 4;
                SetPlayerCheckpoint(playerid, -71.7345,21.5383,3.7406, 3.0);
                SendClientMessage(playerid,COLOR_WHITE,"Dute si incarca balotul in masina.");
                DestroyObject(VehicleInfo[veh][vBalot1]);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , hayer.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-71.7345,21.5383,3.7406)&&CPHay[playerid] == 4)
        {
            if (modelcar == 578)
            {
                DisablePlayerCheckpoint(playerid);
                CPHay[playerid] = 5;
                SetPlayerCheckpoint(playerid, 1545.5828,16.7487,23.8429, 3.0);
                SendClientMessage(playerid,COLOR_WHITE,"Ai incarcat balotul acum livreaza-l.");
                if (VehicleInfo[veh][vBalot1] != 0)
                {
                    DestroyObject(VehicleInfo[veh][vBalot1]);
                }
                VehicleInfo[veh][vBalot1] = CreateObject(3374, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AttachObjectToVehicle(VehicleInfo[veh][vBalot1], veh, -0.019999, 0.329999, 1.159999, 0.000000, 0.000000, 0.000000);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , hayer.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,1545.5828,16.7487,23.8429)&&CPHay[playerid] == 5)
        {
            if (modelcar == 578)
            {
                DisablePlayerCheckpoint(playerid);
                CPHay[playerid] = 6;
                SendClientMessage(playerid,COLOR_WHITE,"Du masina inapoi.");
                SetPlayerCheckpoint(playerid, -71.7345,21.5383,3.7406, 3.0);
                DestroyObject(VehicleInfo[veh][vBalot1]);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , hayer.");
        }
        if(IsPlayerInRangeOfPoint(playerid,10,-71.7345,21.5383,3.7406)&&CPHay[playerid] == 6)
        {
            if (modelcar == 578)
            {
                CPHay[playerid] = 0;
                DisablePlayerCheckpoint(playerid);
                RemovePlayerFromVehicle(veh);
                SetVehicleToRespawn(veh);
                Hay[playerid] = 0;
                PlayerInfo[playerid][pCanJob] = 10;
                GivePlayerCash(playerid, 550);
            }
            else SendClientMessage(playerid, COLOR_WHITE, "Nu esti intr-o masina de job , hayer.");
        }
 }
//=============================================================================================================//

    if(TruckDelivering[playerid] == 2)
    {
        {
            if(PlayerInfo[playerid][pCanJob] <= 10)
            {
                    if(PlayerInfo[playerid][pJob] == 9)
                    {
                        switch(TruckerPickup[playerid][0])
                        {
                            case 0: // This is the first place, factory at flint.
                            {
                                if(IsTrailerAttachedToVehicle(veh))
                                {
                                    TruckerPickup[playerid][0]++;
                                    PlayerInfo[playerid][TruckDelivX] = -15.2205;
                                    PlayerInfo[playerid][TruckDelivY] = -273.2395;
                                    PlayerInfo[playerid][TruckDelivZ] = 5.4297;
                                    SetPlayerCheckpoint(playerid,PlayerInfo[playerid][TruckDelivX],PlayerInfo[playerid][TruckDelivY],PlayerInfo[playerid][TruckDelivZ],3.0);
                                }
                                else
                                {
                                    SendClientMessage(playerid, COLOR_GRAD2, "Nu ai o remorca , gaseste-o si incepe munca");
                                }
                            }
                            case 1: // This is the first place, blueberry factory.
                            {
                                if(PlayerToPoint(6.5,playerid,PlayerInfo[playerid][TruckDelivX],PlayerInfo[playerid][TruckDelivY],PlayerInfo[playerid][TruckDelivZ]))
                                {
                                    if(IsTrailerAttachedToVehicle(veh))
                                    {
                                        TruckerPickup[playerid][0]++;
                                        PlayerInfo[playerid][TruckDelivX] = 6.7159;
                                        PlayerInfo[playerid][TruckDelivY] = 1175.9274;
                                        PlayerInfo[playerid][TruckDelivZ] = 19.4657;
                                        SetPlayerCheckpoint(playerid,PlayerInfo[playerid][TruckDelivX],PlayerInfo[playerid][TruckDelivY],PlayerInfo[playerid][TruckDelivZ],3.0);
                                        SendClientMessage(playerid,COLOR_WHITE,"Condu cu grija!Daca la destinatie masina va fi avariata , iti vor fi retrasi 100$ din suma incasata la paycheck");
                                    }
                                    else
                                    {
                                        SendClientMessage(playerid, COLOR_GRAD2, "Nu ai o remorca , gaseste-o si incepe munca");
                                    }
                                }
                            }
                            case 2: // The motel in fort carson
                            {
                                if(PlayerToPoint(6.5,playerid,PlayerInfo[playerid][TruckDelivX],PlayerInfo[playerid][TruckDelivY],PlayerInfo[playerid][TruckDelivZ]))
                                {
                                    if(IsTrailerAttachedToVehicle(veh))
                                    {
                                        TruckerPickup[playerid][0]++;
                                        PlayerInfo[playerid][TruckDelivX] = 623.2676;
                                        PlayerInfo[playerid][TruckDelivY] = 1702.9431;
                                        PlayerInfo[playerid][TruckDelivZ] = 7.5872;
                                        SetPlayerCheckpoint(playerid,PlayerInfo[playerid][TruckDelivX],PlayerInfo[playerid][TruckDelivY],PlayerInfo[playerid][TruckDelivZ],3.0);
                                    }
                                    else
                                    {
                                        SendClientMessage(playerid, COLOR_GRAD2, "Nu ai o remorca , gaseste-o si incepe munca");
                                    }
                                }
                            }
                            case 3: // Oil factory - Green palms
                            {
                                if(PlayerToPoint(6.5,playerid,PlayerInfo[playerid][TruckDelivX],PlayerInfo[playerid][TruckDelivY],PlayerInfo[playerid][TruckDelivZ]))
                                {
                                    if(IsTrailerAttachedToVehicle(veh))
                                    {
                                        TruckerPickup[playerid][0]++;
                                        PlayerInfo[playerid][TruckDelivX] = 227.6680;
                                        PlayerInfo[playerid][TruckDelivY] = 22.4004;
                                        PlayerInfo[playerid][TruckDelivZ] = 2.3823;
                                        SetPlayerCheckpoint(playerid,PlayerInfo[playerid][TruckDelivX],PlayerInfo[playerid][TruckDelivY],PlayerInfo[playerid][TruckDelivZ],3.0);
                                    }
                                    else
                                    {
                                        SendClientMessage(playerid, COLOR_GRAD2, "Nu ai o remorca , gaseste-o si incepe munca");
                                    }
                                }
                            }
                            case 4: // Oil factory - Green palms
                            {
                                if(PlayerToPoint(6.5,playerid,PlayerInfo[playerid][TruckDelivX],PlayerInfo[playerid][TruckDelivY],PlayerInfo[playerid][TruckDelivZ]))
                                {
                                    if(IsTrailerAttachedToVehicle(veh))
                                    {
                                        TruckerPickup[playerid][0]++;
                                        PlayerInfo[playerid][TruckDelivX] = -65.6532;
                                        PlayerInfo[playerid][TruckDelivY] = -1130.0083;
                                        PlayerInfo[playerid][TruckDelivZ] = 1.0781;
                                        SetPlayerCheckpoint(playerid,PlayerInfo[playerid][TruckDelivX],PlayerInfo[playerid][TruckDelivY],PlayerInfo[playerid][TruckDelivZ],3.0);
                                        SendClientMessage(playerid, COLOR_WHITE, "Intoarce-te in Los Santos");
                                    }
                                    else
                                    {
                                        SendClientMessage(playerid, COLOR_GRAD2, "Nu ai o remorca , gaseste-o si incepe munca");
                                    }
                                }
                            }
                            case 5: // Back in LS
                            {
                                if(PlayerToPoint(6.5,playerid,PlayerInfo[playerid][TruckDelivX],PlayerInfo[playerid][TruckDelivY],PlayerInfo[playerid][TruckDelivZ]))
                                {
                                    new gTrailer = GetVehicleTrailer(GetPlayerVehicleID(playerid));
                                    RemovePlayerFromVehicle(playerid);
                                    SetVehicleToRespawn(gTrailer);
                                    SetVehicleToRespawn(veh);
                                    TruckerPickup[playerid][0]++;
                                    PlayerInfo[playerid][TruckDelivX] = 0;
                                    PlayerInfo[playerid][TruckDelivY] = 0;
                                    PlayerInfo[playerid][TruckDelivZ] = 0;
                                    SendClientMessage(playerid, COLOR_WHITE, "Ai terminat cursa cu succes! Total incasat: 970.Banii iti vor fi inmanati la salariu");
                                    SendClientMessage(playerid, COLOR_WHITE, "Poti reveni mai tarziu, daca doresti!");
                                    DisablePlayerCheckpoint(playerid);
                                    PlayerInfo[playerid][pCanJob] = 10;
                                    TruckDelivering[playerid] = 0;
                                    GivePlayerCash(playerid, 970);
                                }
                            }
                        }
                    }
            }
        }
    }
    if(FarmerVar[playerid] == 1)
    {
        if (IsPlayerInAnyVehicle(playerid))
        {
            new carid = GetPlayerVehicleID(playerid);
            new cash=(random(5)+5);
            if(IsAHarvest(carid))
            {
                switch(FarmerPickup[playerid][0])
                {
                    case 0:
                    {
                        SetPlayerCheckpoint(playerid, -310.9348,-1527.6194,11.9171, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 1:
                    {
                        SetPlayerCheckpoint(playerid, -356.4102,-1279.9491,27.2145, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 2:
                    {
                        if(JustStarted[playerid] != 1)
                        {
                            PlayerInfo[playerid][pPayCheck] += cash * 5;
                            format(string, sizeof(string), "~w~Buna treaba!~n~~g~$%d au fost adaugati la paycheck-ul tau.",cash);
                            GameTextForPlayer(playerid, string, 5000, 1);
                        }
                        else
                        {
                            JustStarted[playerid] = 0;
                        }
                        SetPlayerCheckpoint(playerid, -451.8795,-1366.8473,27.8536, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                    }
                    case 3:
                    {
                        SetPlayerCheckpoint(playerid, -374.5721,-1427.4125,25.7266, 5.0); // Drop crops
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 4:
                    {
                        if(JustStarted[playerid] != 1)
                        {
                            PlayerInfo[playerid][pPayCheck] += cash * 5;
                            format(string, sizeof(string), "~w~Buna treaba!~n~~g~$%d au fost adaugati la paycheck-ul tau.",cash);
                            GameTextForPlayer(playerid, string, 5000, 1);
                        }
                        else
                        {
                            JustStarted[playerid] = 0;
                        }
                        SetPlayerCheckpoint(playerid, -412.9661,-1343.8303,25.2515, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                    }
                    case 5:
                    {
                        SetPlayerCheckpoint(playerid, -374.5721,-1427.4125,25.7266, 5.0); // Drop Crops
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 6:
                    {
                        if(JustStarted[playerid] != 1)
                        {
                            PlayerInfo[playerid][pPayCheck] += cash * 5;
                            format(string, sizeof(string), "~w~Buna treaba!~n~~g~$%d au fost adaugati la paycheck-ul tau.",cash);
                            GameTextForPlayer(playerid, string, 5000, 1);
                        }
                        else
                        {
                            JustStarted[playerid] = 0;
                        }
                        SetPlayerCheckpoint(playerid, -222.0330,-1326.2947,11.3960, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                    }
                    case 7:
                    {
                        SetPlayerCheckpoint(playerid, -374.5721,-1427.4125,25.7266, 5.0); // Drop crops
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 8:
                    {
                        if(JustStarted[playerid] != 1)
                        {
                            PlayerInfo[playerid][pPayCheck] += cash * 5;
                            format(string, sizeof(string), "~w~Buna treaba!~n~~g~$%d au fost adaugati la paycheck-ul tau.",cash);
                            GameTextForPlayer(playerid, string, 5000, 1);
                        }
                        else
                        {
                            JustStarted[playerid] = 0;
                        }
                        SetPlayerCheckpoint(playerid, -213.9147,-1412.1311,5.3441, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                    }
                    case 9:
                    {
                        SetPlayerCheckpoint(playerid, -374.5721,-1427.4125,25.7266, 5.0); // Drop crops
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 10:
                    {
                        if(JustStarted[playerid] != 1)
                        {
                            PlayerInfo[playerid][pPayCheck] += cash * 5;
                            format(string, sizeof(string), "~w~Buna treaba!~n~~g~$%d au fost adaugati la paycheck-ul tau.",cash);
                            GameTextForPlayer(playerid, string, 5000, 1);
                        }
                        else
                        {
                            JustStarted[playerid] = 0;
                        }
                        SetPlayerCheckpoint(playerid, -571.5322,-1314.6523,22.1043, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                    }
                    case 11:
                    {
                        SetPlayerCheckpoint(playerid, -374.5721,-1427.4125,25.7266, 5.0); // Drop corps
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 12:
                    {
                        if(JustStarted[playerid] != 1)
                        {
                            PlayerInfo[playerid][pPayCheck] += cash * 5;
                            format(string, sizeof(string), "~w~Buna treaba!~n~~g~$%d au fost adaugati la paycheck-ul tau.",cash);
                            GameTextForPlayer(playerid, string, 5000, 1);
                        }
                        else
                        {
                            JustStarted[playerid] = 0;
                        }
                        SetPlayerCheckpoint(playerid, -315.1721,-1539.1395,12.6444, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                    }
                    case 13:
                    {
                        SetPlayerCheckpoint(playerid, -374.5721,-1427.4125,25.7266, 5.0); // Drop crops
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 14:
                    {
                        if(JustStarted[playerid] != 1)
                        {
                            PlayerInfo[playerid][pPayCheck] += cash * 5;
                            format(string, sizeof(string), "~w~Buna treaba!~n~~g~$%d au fost adaugati la paycheck-ul tau.",cash);
                            GameTextForPlayer(playerid, string, 5000, 1);
                        }
                        else
                        {
                            JustStarted[playerid] = 0;
                        }
                        SetPlayerCheckpoint(playerid, -237.7299,-1496.0952,7.4135, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                    }
                    case 15:
                    {
                        SetPlayerCheckpoint(playerid, -374.5721,-1427.4125,25.7266, 5.0);// Drop crops
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }// Her
                    case 16:
                    {
                        if(JustStarted[playerid] != 1)
                        {
                            PlayerInfo[playerid][pPayCheck] += cash * 5;
                            format(string, sizeof(string), "~w~Buna treaba!~n~~g~$%d au fost adaugati la paycheck-ul tau.",cash);
                            GameTextForPlayer(playerid, string, 5000, 1);
                        }
                        else
                        {
                            JustStarted[playerid] = 0;
                        }
                        SetPlayerCheckpoint(playerid, -222.0330,-1326.2947,11.3960, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                    }
                    case 17:
                    {
                        SetPlayerCheckpoint(playerid, -376.7750,-1437.6874,25.7266, 5.0); // Drop crops
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 18:
                    {
                        if(JustStarted[playerid] != 1)
                        {
                            PlayerInfo[playerid][pPayCheck] += cash * 5;
                            format(string, sizeof(string), "~w~Buna treaba!~n~~g~$%d au fost adaugati la paycheck-ul tau.",cash);
                            GameTextForPlayer(playerid, string, 5000, 1);
                        }
                        else
                        {
                            JustStarted[playerid] = 0;
                        }
                        SetPlayerCheckpoint(playerid, -451.8795,-1366.8473,27.8536, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                    }
                    case 19:
                    {
                        SetPlayerCheckpoint(playerid, -374.5721,-1427.4125,25.7266, 5.0); // Drop crops
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 20:
                    {
                        if(JustStarted[playerid] != 1)
                        {
                            PlayerInfo[playerid][pPayCheck] += cash * 5;
                            format(string, sizeof(string), "~w~Buna treaba!~n~~g~$%d au fost adaugati la paycheck-ul tau.",cash);
                            GameTextForPlayer(playerid, string, 5000, 1);
                        }
                        else
                        {
                            JustStarted[playerid] = 0;
                        }
                        SetPlayerCheckpoint(playerid, -213.9147,-1412.1311,5.3441, 5.0); // Farm
                        PlayerInfo[playerid][pCanJob] += 1;
                    }
                    case 21:
                    {
                        SetPlayerCheckpoint(playerid, -374.5721,-1427.4125,25.7266, 5.0); // Drop crops
                        PlayerInfo[playerid][pCanJob] += 1;
                        if(JustStarted[playerid] != 0)
                        {
                            JustStarted[playerid] = 0;
                        }
                    }
                    case 22:
                    {
                        DisablePlayerCheckpoint(playerid);
                        GameTextForPlayer(playerid, "~r~Buna treaba! Aici ai ~g~10 dolari, ~r~pentru munca depusa.", 5000, 1);
                        GivePlayerCash(playerid, 500);
                        PlayerInfo[playerid][pCanJob] += 1;
                        FlintFarm[Ammount]  += 97;
                        FarmerVar[playerid] = 0;
                        SaveFarmSystem();
                    }
                }
                FarmerPickup[playerid][0]++;
                PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
            }
        }
        return 1;
    }
    if(DrugRunning[playerid] == 1)
    {
        if(PlayerToPoint(5.0,playerid,719.5071,-444.9160,16.3359) && DrugStep[playerid] == 1) // Pay&Spray Dillimore
        {
            SendClientMessage(playerid, COLOR_WHITE, "Good job, now head to the next spot.");
            DrugStep[playerid] = 2;
            SetPlayerCheckpoint(playerid, 2795.8030,-1619.2686,10.9219, 5.0);
        }
        if(PlayerToPoint(5.0,playerid,2795.8030,-1619.2686,10.9219) && DrugStep[playerid] == 2) // The fake licenses place on LS:RP lol
        {
            SendClientMessage(playerid, COLOR_WHITE, "Going good, now head back to the farm.");
            DrugStep[playerid] = 3;
            SetPlayerCheckpoint(playerid, -1425.6927,-1528.2820,101.9709, 5.0);
        }
        if(PlayerToPoint(5.0,playerid,-1425.6927,-1528.2820,101.9709) && DrugStep[playerid] == 3) // Back to the farm
        {
            DrugStep[playerid] = 0;
            DrugRunning[playerid] = 0;
            DisablePlayerCheckpoint(playerid);
            ActiveCP[playerid] = 0;
            Businesses[14][Till] -= 450;
            PlayerInfo[playerid][pPayCheck] += 450;
            DrugFarm[Ammount] += 7;
            SaveDrugSystem();
            SendClientMessage(playerid, COLOR_WHITE, "Thanks, here is a payment for your job 450$ added to your paycheck.");
            DrugTimer[playerid] = 1;
            SetTimerEx("DrugDeliveryReset", 240000, false, "i", playerid);
        }
        return 1;
    }
    for(new h = 0; h < sizeof(DynamicCars); h++)
    {
        if(DynamicCars[veh][CarType] == 69)
        {
            if(TakingDrivingTest[playerid] == 1)
            {
                if(PlayerToPoint(5.0,playerid,1210.4828,-1841.8555,13.3828) && DrivingTestStep[playerid] == 1)
                {
                    DrivingTestStep[playerid] = 2;
                    SetPlayerCheckpoint(playerid, 1179.7932,-1718.5259,13.5700, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,1179.7932,-1718.5259,13.5700) && DrivingTestStep[playerid] == 2)
                {
                    DrivingTestStep[playerid] = 3;
                    SetPlayerCheckpoint(playerid, 1048.8259,-1709.8258,13.3828, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,1048.8259,-1709.8258,13.3828) && DrivingTestStep[playerid] == 3)
                {
                    DrivingTestStep[playerid] = 4;
                    SetPlayerCheckpoint(playerid, 1030.9001,-1791.4723,13.7039, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,1030.9001,-1791.4723,13.7039) && DrivingTestStep[playerid] == 4)
                {
                    DrivingTestStep[playerid] = 5;
                    SetPlayerCheckpoint(playerid, 876.9290,-1768.1295,13.3828, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,876.9290,-1768.1295,13.3828) && DrivingTestStep[playerid] == 5)
                {
                    DrivingTestStep[playerid] = 6;
                    SetPlayerCheckpoint(playerid, 636.0714,-1725.2800,13.9202, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,636.0714,-1725.2800,13.9202) && DrivingTestStep[playerid] == 6)
                {
                    DrivingTestStep[playerid] = 7;
                    SetPlayerCheckpoint(playerid, 640.0871,-1528.6864,15.0002, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,640.0871,-1528.6864,15.0002) && DrivingTestStep[playerid] == 7)
                {
                    DrivingTestStep[playerid] = 8;
                    SetPlayerCheckpoint(playerid, 639.6245,-1413.1931,13.4582, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,639.6245,-1413.1931,13.4582) && DrivingTestStep[playerid] == 8)
                {
                    DrivingTestStep[playerid] = 9;
                    SetPlayerCheckpoint(playerid, 792.8707,-1411.4475,13.3976, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,792.8707,-1411.4475,13.3976) && DrivingTestStep[playerid] == 9)
                {
                    DrivingTestStep[playerid] = 10;
                    SetPlayerCheckpoint(playerid, 769.1151,-1576.3108,13.3867, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,769.1151,-1576.3108,13.3867) && DrivingTestStep[playerid] == 10)
                {
                    DrivingTestStep[playerid] = 11;
                    SetPlayerCheckpoint(playerid, 825.0438,-1605.5065,13.3828, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,825.0438,-1605.5065,13.3828) && DrivingTestStep[playerid] == 11)
                {
                    DrivingTestStep[playerid] = 12;
                    SetPlayerCheckpoint(playerid, 858.5005,-1596.6033,13.3906, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,858.5005,-1596.6033,13.3906) && DrivingTestStep[playerid] == 12)
                {
                    DrivingTestStep[playerid] = 13;
                    SetPlayerCheckpoint(playerid, 948.2869,-1574.6379,13.3828, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,948.2869,-1574.6379,13.3828) && DrivingTestStep[playerid] == 13)
                {
                    DrivingTestStep[playerid] = 14;
                    SetPlayerCheckpoint(playerid, 1033.9424,-1702.3530,13.3906, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,1033.9424,-1702.3530,13.3906) && DrivingTestStep[playerid] == 14)
                {
                    DrivingTestStep[playerid] = 15;
                    SetPlayerCheckpoint(playerid, 1070.5059,-1714.9296,13.3828, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,1070.5059,-1714.9296,13.3828) && DrivingTestStep[playerid] == 15)
                {
                    DrivingTestStep[playerid] = 16;
                    SetPlayerCheckpoint(playerid, 1171.3979,-1718.9802,13.6808, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,1171.3979,-1718.9802,13.6808) && DrivingTestStep[playerid] == 16)
                {
                    DrivingTestStep[playerid] = 17;
                    SetPlayerCheckpoint(playerid, 1173.2983,-1841.9572,13.4079, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,1173.2983,-1841.9572,13.4079) && DrivingTestStep[playerid] == 17)
                {
                    DrivingTestStep[playerid] = 18;
                    SetPlayerCheckpoint(playerid, 1264.3164,-1852.0735,13.3828, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,1264.3164,-1852.0735,13.3828) && DrivingTestStep[playerid] == 18)
                {
                    DrivingTestStep[playerid] = 19;
                    SetPlayerCheckpoint(playerid, 1223.6658,-1826.8866,13.4099, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,1223.6658,-1826.8866,13.4099) && DrivingTestStep[playerid] == 19)
                {
                    DrivingTestStep[playerid] = 20;
                    SetPlayerCheckpoint(playerid, 1223.6658,-1826.8866,13.4099, 5.0);
                }
                else if(PlayerToPoint(5.0,playerid,1223.6658,-1826.8866,13.4099) && DrivingTestStep[playerid] == 20)
                {
                    new Float:health;
                    veh = GetPlayerVehicleID(playerid);
                    GetVehicleHealth(veh, health);

                    if(health >= 950.0)
                    {
                        GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
                        if(engine == VEHICLE_PARAMS_ON) { SetVehicleParamsEx(veh,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective); }
                        SendClientMessage(playerid, COLOR_GREY, "[POLITIST] Felicitari! Ai trecut testul. Acum ai o licenta valida pentru condus. Ai fost taxat cu 250$.");
                        GameTextForPlayer(playerid, "~g~Ai trecut testul de conducere", 3000, 1);
                        PlayerInfo[playerid][pCarLic] = 1;
                        EngineStatus[veh] = 0;
                        SetVehicleToRespawn(veh);
                        EngineStatus[veh] = 0;
                        TakingDrivingTest[playerid] = 0;
                        DisablePlayerCheckpoint(playerid);
                        ActiveCP[playerid] = 0;
                        GivePlayerCash(playerid,-250);
                        Businesses[12][Till] += Businesses[12][EntranceCost];
                    }
                    else
                    {
                        GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
                        if(engine == VEHICLE_PARAMS_ON) { SetVehicleParamsEx(veh,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective); }
                        SendClientMessage(playerid, COLOR_LIGHTRED, "Ne pare rau dar nu ati trecut testul. Incercati data viitoare");
                        SendClientMessage(playerid, COLOR_LIGHTRED, "Ai fost taxat cu 150$ pentru examen si reparatiile masinii.");
                        GameTextForPlayer(playerid, "~r~Esuare", 3000, 1);
                        EngineStatus[veh] = 0;
                        SetVehicleToRespawn(veh);
                        EngineStatus[veh] = 0;
                        TakingDrivingTest[playerid] = 0;
                        DisablePlayerCheckpoint(playerid);
                        ActiveCP[playerid] = 0;
                        GivePlayerCash(playerid,-150);
                        Businesses[12][Till] += 50;
                    }
                    DrivingTestStep[playerid] = 0;
                    ActiveCP[playerid] = 0;
                    DMVTest[playerid] = 0;
                }
                return 1;
            }
        }
    }
    return 1;
}


//==============================================================================

public OnPlayerEnterRaceCheckpoint(playerid)
{
    return 1;
}

stock SlowenVehicle(vid,Float:dalmuo)
{
    new Float:T[3];
    GetVehicleVelocity(vid, T[0], T[1], T[2]);
    return SetVehicleVelocity(vid,T[0] / dalmuo , T[1] / dalmuo , T[2]);
}
//==================================KICK PUBLIC=================================
forward KickPublic(playerid);
public KickPublic(playerid)
{
    Kick(playerid);
}
//==================================USI PRISON==================================
forward PrisonDoor1Close(playerid);
public PrisonDoor1Close(playerid)
{
      MoveObject(prisondoor1, 1215.22217, -1310.73035, 795.78650, 1.0);
      return 1;
}
forward PrisonDoor2Close(playerid);
public PrisonDoor2Close(playerid)
{
      MoveObject(prisondoor2, 1226.76501, -1345.71997, 795.73999, 1.0);
      return 1;
}
forward PrisonDoor3Close(playerid);
public PrisonDoor3Close(playerid)
{
      MoveObject(prisondoor3, 1226.66211, -1326.52930, 795.75000, 1.0);
      return 1;
}
forward LsvrDoorClose(playerid);
public LsvrDoorClose(playerid)
{
	MoveObject(lsvrdoor, 2361.03564, -1365.57971, 22.99370, 1.0);
	return 1;
}
forward LsvrGarageClose(playerid);
public LsvrGarageClose(playerid)
{
	MoveObject(lsvrgarage, 2361.05859, -1355.34595, 180.00000, 1.0);
	return 1;
}

//==================================MUTE========================================
forward MutePublic(playerid);
public MutePublic(playerid)
{
    Muted[playerid] = 0;
    SendClientMessage(playerid, COLOR_LIGHTRED, "Nu mai ai mute, acum poti vorbi.");
}
//===============================BAN PUBLIC=====================================
forward BanPublic(playerid);
public BanPublic(playerid)
{
    Kick(playerid);
}
//==============================================================================
public OnPlayerExitedMenu(playerid)
{
    TogglePlayerControllable(playerid, 1);
    new Menu:Current = GetPlayerMenu(playerid);
    if(!IsValidMenu(Current)) return 1;
    ShowMenuForPlayer(Current, playerid);
    TogglePlayerControllable(playerid,1);
    PlayerMenu[playerid] = -1;
    if(!IsValidMenu(GetPlayerMenu(playerid))) return 1;
    ShowMenuForPlayer(GetPlayerMenu(playerid), playerid);
    
    	TogglePlayerControllable(playerid, 1); // CCTV
        PlayerMenu[playerid] = -1; // CCTV
    return 1;
}

forward GetPlayerDistanceToPlayer(playerid,targetid);
public GetPlayerDistanceToPlayer(playerid,targetid)
{
    new Float:x1,Float:y1,Float:z1;
    new Float:x2,Float:y2,Float:z2;
    new Float:tmpdis;
    GetPlayerPos(playerid,x1,y1,z1);
    GetPlayerPos(targetid,x2,y2,z2);
    tmpdis = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
    return floatround(tmpdis);
}

public OnPlayerSelectedMenuRow(playerid, row)
{
        new Menu:Current = GetPlayerMenu(playerid);
        for(new menu; menu<TotalMenus; menu++)
        {

                if(Current == CCTVMenu[menu])
                {
                    if(MenuType[PlayerMenu[playerid]] == 1)
                    {
                        if(row == 11)
                        {
                            ShowMenuForPlayer(CCTVMenu[menu+1], playerid);
                            TogglePlayerControllable(playerid, 0);
                            PlayerMenu[playerid] = (menu+1);
                                }
                                else
                                {
                                    if(PlayerMenu[playerid] == 0)
                                    {
                                        SetPlayerToCCTVCamera(playerid, row);
                                        PlayerMenu[playerid] = -1;
                                        }
                                        else
                                        {
                                            SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
                                            PlayerMenu[playerid] = -1;
                                        }
                                }
                        }
                        else
                        {
                            if(PlayerMenu[playerid] == 0)
                            {
                                SetPlayerToCCTVCamera(playerid, row);
                                PlayerMenu[playerid] = -1;
                                }
                                else
                                {
                                    SetPlayerToCCTVCamera(playerid, ((PlayerMenu[playerid]*11)+row));
                                    PlayerMenu[playerid] = -1;
                                }
                        }
                }
        }

        return 1;
}
//==============================================================================
public OnGameModeExit()
	
	mysql_close(g_handle)
{
// ============= POZE ROLEPLAY =========
	    TextDrawHideForAll(ssroleplay);
	    TextDrawDestroy(ssroleplay);
/*// ================ speedometer =============
		TextDrawHideForAll(bg);
	    TextDrawHideForAll(barsus);
	    TextDrawHideForAll(vitezakm);
	    TextDrawDestroy(bg);
		TextDrawDestroy(barsus);
		TextDrawDestroy(vitezakm);
	    TextDrawHideForAll(viteza);
	    TextDrawDestroy(viteza);
		TextDrawDestroy(tipmasina);
		TextDrawHideForAll(tipmasina);
*/
    TextDrawHideForAll(TD);
    TextDrawDestroy(TD);
    for(new tempgate=0; tempgate<GateNum; tempgate++)
    { DestroyObject(GateObject[tempgate]); }
    for(new tempgate=0; tempgate<MiscObjNum; tempgate++)
    { DestroyObject(MiscObject[tempgate]); }
    KillTimer(Timer);

    // ------------- CCTV ----
    	TextDrawHideForAll(TD);
        TextDrawDestroy(TD);
        for(new i; i<TotalMenus; i++)
        {
                DestroyMenu(CCTVMenu[i]);
        }
	// -------------------------------------
        
    return 1;
}


public GateClose(playerid)
{
      MoveObject(gate, 1544.745605, -1630.961792, 13.177118,0.8, 0.0000, 269.7592, 270.0000);
      return 1;
}
public GateClose1(playerid)
{
      MoveObject(gate1, 1591.846802, -1638.013550, 13.491905, 0.8);
      return 1;
}


public LocoteClose(playerid)
{
      MoveObject(locote, 1790.2360839844, -2126.1752929688, 12.69578742981, 0.8);
      return 1;
}


public PayparkClose(playerid)
{
      //MoveObject(Paypark, 1534.37109375, -1451.4975585938, 15.161123275757, 0.8);
      MoveObject(Paypark, 1533.27109375, -1451.4975585938, 15.161123275757, 0.8);
      return 1;
}
public PdClose(playerid)
{
      MoveObject(pdmain, 239.619140625, 118.5859375, 1003.8226318359, 280.2392578125);
      return 1;
}
public GateClose2(playerid)
{
      MoveObject(gate2, 1563.736816, -1617.390381, 12.382813, 0.8);
      return 1;
}
public MainGateClose(gateid)
{
        MoveObject( EntranceGate[1], 3072.402588, -1965.360107, 11.784605, 2);
        MoveObject( EntranceGate[2], 3278.235596, -1959.720581, 11.702776, 2);
        MoveObject( EntranceGate[3], 3278.365479, -1967.658569, 11.702776, 2);
        return 1;
}
//==============================================================================
/*
public OnPlayerLeaveCheckpoint(playerid)
{
    return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    return 1;
}
*/
public OnRconLoginAttempt(ip[], password[], success)
{
    if (!success)
    {
        new pip[16];
        for(new i=0; i<MAX_PLAYERS; i++) 
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true)) 
            {
                if (rconbad[i] == 4)
                {
                    Ban(i);
                    PlayerInfo[i][pAdministrator] = 0;
                    PlayerInfo[i][pBan] = 1;
                    rconbad[i] = 0;
                }
                else
                {
                    rconbad[i]++;
                }
            }
        }
    }
    return 1;
}

public OnRconCommand(cmd[])
{
    printf(cmd);
    return 1;
}
/*
public OnObjectMoved(objectid)
{
    return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
    return 1;
}*/

public OnPlayerPickUpPickup(playerid, pickupid)
{
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if(PlayerInfo[playerid][pMaskuse] == 1)
    {
        ShowPlayerNameTagForPlayer(forplayerid, playerid, false);
    }
    return 1;
}


public OnPlayerStreamOut(playerid, forplayerid)
{
    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pMaskuse] == 1)
    {
        ShowPlayerNameTagForPlayer(playerid, playerid, false);
    }
    return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
    if(VehicleInfo[vehicleid][vLock] > 0)
    {
        LockCar(vehicleid);
        return 1;
    }
    return 1;
}

/*public OnVehicleStreamOut(vehicleid, forplayerid)
{
    return 1;
}*/
//==============================================================================
public UpdateScore()
{
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            SetPlayerScore(i, PlayerInfo[i][pLevel]);
        }
    }
    return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
    new Float:oldX, Float:oldY, Float:oldZ, Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
	if(GetPVarInt(playerid, "EditRB") == 1)
	{
	    if(response == EDIT_RESPONSE_FINAL)
		{
		    SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			DeletePVar(playerid, "EditRB");
		}
	    if(response == EDIT_RESPONSE_CANCEL)
		{
			DestroyDynamicObject(PlayerInfo[playerid][pRoadblock]);
			PlayerInfo[playerid][pRoadblock] = 0;
	    	RoadBlock1[playerid] -= 1;
			SendClientMessage(playerid, COLOR_LSPD, "Roadblock #1 removed");
		}
	}
}

forward EditRB(playerid);
public EditRB(playerid)
{
	EditDynamicObject(playerid, PlayerInfo[playerid][pRoadblock]);
	return 1;
}

forward SyncTime();
public SyncTime()
{
    new tmphour;
    new tmpminute;
    new tmpsecond;
    gettime(tmphour, tmpminute, tmpsecond);
    FixHour(tmphour);
    tmphour = shifthour;
    if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
    {
        ghour = tmphour;
        if(IsVehicleOccupied(68) == 0)
        {
            SetVehicleToRespawn(68);
        }
        if(IsVehicleOccupied(67) == 0)
        {
            SetVehicleToRespawn(67);
        }
        if (realtime)
        {
            SetWorldTime(tmphour);
        }
    }
}

public FixHour(hour)
{
    hour = timeshift+hour;
    if (hour < 0)
    {
        hour = hour+24;
    }
    else if (hour > 23)
    {
        hour = hour-24;
    }
    shifthour = hour;
    return 1;
}
//==============================================================================
public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
    {
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        tempposx = (oldposx -x);
        tempposy = (oldposy -y);
        tempposz = (oldposz -z);
        if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
        {
            return 1;
        }
    }
    return 0;
}

public GetClosestPlayer(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

public Float:GetDistanceBetweenPlayers(p1,p2)
{
    new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
    if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
    {
        return -1.00;
    }
    GetPlayerPos(p1,x1,y1,z1);
    GetPlayerPos(p2,x2,y2,z2);
    return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
    if(IsPlayerConnected(playerid))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;

        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        //radi = 2.0; //Trigger Radius
        for(new i = 0; i < MAX_PLAYERS; i++)
        {
            if(IsPlayerConnected(i))
            {
                if(!BigEar[i])
                {
                    GetPlayerPos(i, posx, posy, posz);
                    tempposx = (oldposx -posx);
                    tempposy = (oldposy -posy);
                    tempposz = (oldposz -posz);
                    if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
                    {
                        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
                        {
                            SendClientMessage(i, col1, string);
                        }
                    }
                    else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
                    {
                        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
                        {
                            SendClientMessage(i, col2, string);
                        }
                    }
                    else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
                    {
                        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
                        {
                            SendClientMessage(i, col3, string);
                        }
                    }
                    else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
                    {
                        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
                        {
                            SendClientMessage(i, col4, string);
                        }
                    }
                    else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
                    {
                        if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid))
                        {
                            SendClientMessage(i, col5, string);
                        }
                    }
                }
                else
                {
                    SendClientMessage(i, col1, string);
                }
            }
        }
    }//not connected
    return 1;
}

public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        //radi = 2.0; //Trigger Radius
        GetPlayerPos(targetid, posx, posy, posz);
        tempposx = (oldposx -posx);
        tempposy = (oldposy -posy);
        tempposz = (oldposz -posz);
        if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
        {
            if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
            { return 1; }
        }
    }
    return 0;
}
//==============================================================================
public ResetPlayerWantedLevelEx(playerid)
{
    SetPlayerWantedLevel(playerid, 0);
    WantedLevel[playerid] = 0;
    return 1;
}

public SetPlayerWantedLevelEx(playerid,level)
{
    SetPlayerWantedLevel(playerid, level);
    WantedLevel[playerid] = level;
    return 1;
}

public GetPlayerWantedLevelEx(playerid)
{
    return WantedLevel[playerid];
}

forward SafeRemovePlayerWeapon(playerid,weapon);
public SafeRemovePlayerWeapon(playerid, weapon)
{
    RemovePlayerWeapon(playerid, weapon);
    switch(weapon)
    {
        case 0: PlayerInfo[playerid][pStick] = 0;
        case 4: PlayerInfo[playerid][pKnife] = 0;
        case 5: PlayerInfo[playerid][pBaseball] = 0;
        case 6: PlayerInfo[playerid][pShovel] = 0;
        case 15: PlayerInfo[playerid][pCane] = 0;
        case 16: PlayerInfo[playerid][pGrenade] = 0;
        case 18: PlayerInfo[playerid][pMolotov] = 0;
        case 22: PlayerInfo[playerid][p9mm] = 0;
        case 23: PlayerInfo[playerid][pSilenced] = 0;
        case 24: PlayerInfo[playerid][pEagle] = 0;
        case 25: PlayerInfo[playerid][pShotgun] = 0;
        case 26: PlayerInfo[playerid][pSawn] = 0;
        case 27: PlayerInfo[playerid][pSpas12] = 0;
        case 28: PlayerInfo[playerid][pUzi] = 0;
        case 29: PlayerInfo[playerid][pMP5] = 0;
        case 30: PlayerInfo[playerid][pAK] = 0;
        case 31: PlayerInfo[playerid][pM4] = 0;
        case 32: PlayerInfo[playerid][pTec9] = 0;
        case 33: PlayerInfo[playerid][pCountryRifle] = 0;
        case 34: PlayerInfo[playerid][pSniper] = 0;
        case 35: PlayerInfo[playerid][pRPG] = 0;
        case 36: PlayerInfo[playerid][pHRPG] = 0;
        case 37: PlayerInfo[playerid][pFlame] = 0;
        case 38: PlayerInfo[playerid][pMinigun] = 0;
        case 41: PlayerInfo[playerid][pSpray] = 0;
    }
    
    for(new slot = 0; slot != 12; slot++)
    {
        new wep, ammo;
        GetPlayerWeaponData(playerid, slot, wep, ammo);
        if(wep != 0 && ammo != 0)
        { GetPlayerWeaponData(playerid, slot,PlayerInfo[playerid][pWeapons][slot],PlayerInfo[playerid][pAmmo][slot]); }
    }
    return 1;
}

public SafeGivePlayerWeapon(playerid, weaponid, ammo)
{
    SafeWeapon[playerid] = 1;
    switch(weaponid)
    {
        case 0: PlayerInfo[playerid][pStick] = 1;
        case 4: PlayerInfo[playerid][pKnife] = 1;
        case 5: PlayerInfo[playerid][pBaseball] = 1;
        case 6: PlayerInfo[playerid][pShovel] = 1;
        case 15: PlayerInfo[playerid][pCane] = 1;
        case 16: PlayerInfo[playerid][pGrenade] = 1;
        case 18: PlayerInfo[playerid][pMolotov] = 1;
        case 22: PlayerInfo[playerid][p9mm] = 1;
        case 23: PlayerInfo[playerid][pSilenced] = 1;
        case 24: PlayerInfo[playerid][pEagle] = 1;
        case 25: PlayerInfo[playerid][pShotgun] = 1;
        case 26: PlayerInfo[playerid][pSawn] = 1;
        case 27: PlayerInfo[playerid][pSpas12] = 1;
        case 28: PlayerInfo[playerid][pUzi] = 1;
        case 29: PlayerInfo[playerid][pMP5] = 1;
        case 30: PlayerInfo[playerid][pAK] = 1;
        case 31: PlayerInfo[playerid][pM4] = 1;
        case 32: PlayerInfo[playerid][pTec9] = 1;
        case 33: PlayerInfo[playerid][pCountryRifle] = 1;
        case 34: PlayerInfo[playerid][pSniper] = 1;
        case 35: PlayerInfo[playerid][pRPG] = 1;
        case 36: PlayerInfo[playerid][pHRPG] = 1;
        case 37: PlayerInfo[playerid][pFlame] = 1;
        case 38: PlayerInfo[playerid][pMinigun] = 1;
        case 41: PlayerInfo[playerid][pSpray] = 1;
    }
    if(ammo == -1 || ammo < 1)
    {
        GivePlayerWeapon(playerid, weaponid, 50);
    } else {
        GivePlayerWeapon(playerid, weaponid, ammo);
    }
    return 1;
}


public SafeResetPlayerWeapons(playerid)
{
    ResetPlayerWeapons(playerid);
    PlayerInfo[playerid][pWeapons][0] = 0;
    PlayerInfo[playerid][pWeapons][1] = 0;
    PlayerInfo[playerid][pWeapons][2] = 0;
    PlayerInfo[playerid][pWeapons][3] = 0;
    PlayerInfo[playerid][pWeapons][4] = 0;
    PlayerInfo[playerid][pWeapons][5] = 0;
    PlayerInfo[playerid][pWeapons][6] = 0;
    PlayerInfo[playerid][pWeapons][7] = 0;
    PlayerInfo[playerid][pWeapons][8] = 0;
    PlayerInfo[playerid][pWeapons][9] = 0;
    PlayerInfo[playerid][pWeapons][10] = 0;
    PlayerInfo[playerid][pWeapons][11] = 0;
    PlayerInfo[playerid][pWeapons][12] = 0;
    PlayerInfo[playerid][pAmmo][0] = 0;
    PlayerInfo[playerid][pAmmo][1] = 0;
    PlayerInfo[playerid][pAmmo][2] = 0;
    PlayerInfo[playerid][pAmmo][3] = 0;
    PlayerInfo[playerid][pAmmo][4] = 0;
    PlayerInfo[playerid][pAmmo][5] = 0;
    PlayerInfo[playerid][pAmmo][6] = 0;
    PlayerInfo[playerid][pAmmo][7] = 0;
    PlayerInfo[playerid][pAmmo][8] = 0;
    PlayerInfo[playerid][pAmmo][9] = 0;
    PlayerInfo[playerid][pAmmo][10] = 0;
    PlayerInfo[playerid][pAmmo][11] = 0;
    PlayerInfo[playerid][pAmmo][12] = 0;
    PlayerInfo[playerid][pCountryRifle] = 0;
    PlayerInfo[playerid][p9mm] = 0;
    PlayerInfo[playerid][pEagle] = 0;
    PlayerInfo[playerid][pStick] = 0;
    PlayerInfo[playerid][pSilenced] = 0;
    PlayerInfo[playerid][pShotgun] = 0;
    PlayerInfo[playerid][pAK] = 0;
    PlayerInfo[playerid][pRPG] = 0;
    PlayerInfo[playerid][pHRPG] = 0;
    PlayerInfo[playerid][pMinigun] = 0;
    PlayerInfo[playerid][pRifle] = 0;
    PlayerInfo[playerid][pBaseball] = 0;
    PlayerInfo[playerid][pShovel] = 0;
    PlayerInfo[playerid][pKnife] = 0;
    PlayerInfo[playerid][pM4] = 0;
    PlayerInfo[playerid][pUzi] = 0;
    PlayerInfo[playerid][pSniper] = 0;
    PlayerInfo[playerid][pSawn] = 0;
    PlayerInfo[playerid][pFlame] = 0;
    PlayerInfo[playerid][pSpray] = 0;
    PlayerInfo[playerid][pCamera] = 0;
    PlayerInfo[playerid][pMP5] = 0;
    PlayerInfo[playerid][pParachute] = 0;
    return 1;
}
//==============================================================================

public SendRadioMessage(playerid, freq, color, string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerInfo[i][pRfreq] == freq)
            {
                if(RadioStatus[i] == 1)
                {
                    SendClientMessage(i, color, string);
                }
            }
        }
    }
}

forward SendAirMessage(playerid, color, string[]);
public SendAirMessage(playerid, color, string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
		  new vehicleida = GetPlayerVehicleID(playerid);
		  new vehicleid = GetVehicleModel(vehicleida);
    	  if(vehicleid == 577)
          {
             SendClientMessage(i, color, string);
          }
        }
      }
	}

public SendProxRadioMessage(playerid, string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(i != playerid)
            {
                if(GetDistanceBetweenPlayers(playerid,i) < 8)
                { SendClientMessage(i, COLOR_FADE1, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 8)
                { SendClientMessage(i, COLOR_FADE2, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 12)
                { SendClientMessage(i, COLOR_FADE3, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 16)
                { SendClientMessage(i, COLOR_FADE4, string); }
                else if(GetDistanceBetweenPlayers(playerid,i) < 20)
                { SendClientMessage(i, COLOR_FADE5, string); }
            }
        }
    }
}

public SendTaxiMessage( color, string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(TransportDuty[i] != 0)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
}

public SendJobMessage(job, color, string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerInfo[i][pJob] == job)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
}

public ClearKnock(playerid)
{
    TogglePlayerControllable(playerid, 1);
    ClearAnimations(playerid);
    KnockedDown[playerid] = 0;
}

public FishReset(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(JustFished[playerid] == 1)
        {
            JustFished[playerid] = 0;
        }
    }
}

public TazeReset(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(JustTazed[playerid] == 1)
        {
            JustTazed[playerid] = 0;
        }
    }
}
forward DrugDeliveryReset(playerid);
public DrugDeliveryReset(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(DrugTimer[playerid] == 1)
        {
            DrugTimer[playerid] = 0;
        }
    }
}

public CasinoReset(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(JustCasinoed[playerid] == 1)
        {
            Jackpot[playerid] = 0;
            JustCasinoed[playerid] = 0;
        }
    }
}

public FairMoneyReset(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pFairMoney] == 1)
        {
            PlayerInfo[playerid][pFairMoney] = 0;
        }
    }
}

public PleaseDontDetectMe(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(ImAabusingNoob[playerid] == 1)
        {
            if(!IsPlayerInAnyVehicle(playerid))
            {
                ImAabusingNoob[playerid] = 0;
                ClearAnimations(playerid);
                TogglePlayerControllable(playerid, 1);
            }
        }
    }
}

public KnockReset(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(JustKnocked[playerid] == 1)
        {
            JustKnocked[playerid] = 0;
        }
    }
}

public Animusereset(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(IsUsingAnim[playerid] == 1)
        {
            IsUsingAnim[playerid] = 0;
        }
    }
}

public AfterSpray1(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            ChangeVehicleColor(tmpcar, VehColor1[playerid], VehColor2[playerid]);
            VehColor1[playerid] = 0;
            VehColor2[playerid] = 0;
            TogglePlayerControllable(playerid, 1);
            SetVehiclePos(tmpcar, 2076.5461,-1832.5647,13.5545);
            RepairVehicle(tmpcar);
        }
    }
    return 1;
}

public AfterSpray2(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            ChangeVehicleColor(tmpcar, VehColor1[playerid], VehColor2[playerid]);
            VehColor1[playerid] = 0;
            VehColor2[playerid] = 0;
            TogglePlayerControllable(playerid, 1);
            SetVehiclePos(tmpcar, 1025.4225,-1033.1587,31.8380);
            RepairVehicle(tmpcar);
        }
    }
    return 1;
}

public AfterSpray3(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            ChangeVehicleColor(tmpcar, VehColor1[playerid], VehColor2[playerid]);
            VehColor1[playerid] = 0;
            VehColor2[playerid] = 0;
            TogglePlayerControllable(playerid, 1);
            SetVehiclePos(tmpcar, 488.3767,-1731.1235,11.2469);
            RepairVehicle(tmpcar);
        }
    }
    return 1;
}

public AfterSpray4(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(GetPlayerState(playerid) == 2)
        {
            new tmpcar = GetPlayerVehicleID(playerid);
            ChangeVehicleColor(tmpcar, VehColor1[playerid], VehColor2[playerid]);
            VehColor1[playerid] = 0;
            VehColor2[playerid] = 0;
            TogglePlayerControllable(playerid, 1);
            SetVehiclePos(tmpcar, 720.2908,-467.6113,16.3437);
            RepairVehicle(tmpcar);
        }
    }
    return 1;
}

public UnsetCrash(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if (PlayerInfo[playerid][pHair] != 0)
        {
            if(IsValidPlayerObject(playerid, 3))
            {
                RemovePlayerAttachedObject(playerid, 3);
            }
            SetPlayerAttachedObject(playerid, 3, PlayerInfo[playerid][pHair],2,0.20,0.01,0.01,528.0,5.0,12.0,1.00,1.00,1.00);
            EditAttachedObject(playerid, 3);
        }
        PlayerInfo[playerid][pCrashed] = 0;
        new String[128];
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Crashed` = '%d' WHERE `UserID` = '%d'",PlayerInfo[playerid][pCrashed], PlayerInfo[playerid][pDatabaseID] );
        mysql_query(String);
    }
    return 1;
}

public StopAnim(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid, 1);
        ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
    }
    return 1;
}

public StopTalking(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if( !IsPlayerInAnyVehicle( playerid ) )
        {
            if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_ENTER_VEHICLE && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_EXIT_VEHICLE)
            {
                ClearAnimations(playerid);
                ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
            }
        }
    }
    return 1;
}


public AdministratorMessage(color,const string[],level)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if (PlayerInfo[i][pAdministrator] >= level)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
    return 1;
}

public TesterMessage(color,const string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if (PlayerInfo[i][pTester] == 1 || PlayerInfo[i][pDeveloper] == 1)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
    return 1;
}

public TesterMessager(color,const string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(TesterActivated[i] == 0)
            {
                if (PlayerInfo[i][pTester])
                {
                    SendClientMessage(i, color, string);
                } else if(PlayerInfo[i][pAdministrator] >= 1) {
                    SendClientMessage(i, color, string);
                } else if(PlayerInfo[i][pDeveloper] == 1) {
                    SendClientMessage(i, color, string);
                }
            }
        }
    }
    return 1;
}

public OOCNews(color,const string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(NewsActivated[i] == 0)
        {
            if(IsPlayerConnected(i))
            {
                SendClientMessage(i, color, string);
            }
        }
    }
}

public OOCOff(color,const string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(gOoc[i] == 1)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
}



public SendFactionMessage(faction, color, string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerInfo[i][pFaction] != 0)
            {
                if(PlayerInfo[i][pFaction] == faction && fChat[i] == 1)
                {
                    SendClientMessage(i, color, string);
                }
            }
        }
    }
}

forward PlayerBubbleMessage(playerid,message[]);
public PlayerBubbleMessage(playerid,message[])
{
    new string[128];
    if(PlayerInfo[playerid][pMaskuse] == 1)
    {
        format(string, sizeof(string), "[Mask_%d] %s", PlayerInfo[playerid][pMaskID], message);
        SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
    } else {
        format(string, sizeof(string), "%s %s", GetPlayerNameEx(playerid), message);
        SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 8000);
    }
    format(string, sizeof(string), "> %s %s", GetPlayerNameEx(playerid), message);
    SendClientMessage(playerid, COLOR_PURPLE, string);
}


public PlayerActionMessage(playerid,Float:radius,message[])
{
    new maskid = PlayerInfo[playerid][pMaskID];
    new str[128];
    if(strlen(message) > MAXLEN)
    {
        new pos = MAXLEN;
        //while(result[--pos] < ' ') {}
        if(pos < MAXLEN-1) pos = MAXLEN;
        if(PlayerInfo[playerid][pMaskuse] == 1)
        {
            format(str, sizeof(str), "* [Mask_%d] %.*s ...", maskid, pos, message);
            ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            format(str, sizeof(str), "* ... %s (([Mask_%d]))", message[pos], maskid);
            ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else
        {
            format(str, sizeof(str), "* %s %.*s ...", GetPlayerNameEx(playerid), pos, message);
            ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            format(str, sizeof(str), "* ... %s ((%s))", message[pos], GetPlayerNameEx(playerid));
            ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        printf("%s",str);
    }
    else
    {
        if(PlayerInfo[playerid][pMaskuse] == 1)
        {
            format(str, sizeof(str), "* [Mask_%d] %s", maskid, message);
            ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else
        {
            format(str, sizeof(str), "* %s %s", GetPlayerNameEx(playerid), message);
            ProxDetector(20.0, playerid, str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        printf("%s",str);
    }
    return 1;
}

public PlayerActionnMessage(playerid,Float:radius,message[])
{
    new maskid = PlayerInfo[playerid][pMaskID];
    new str[128];
    if(strlen(message) > MAXLEN)
    {
        new pos = MAXLEN;
        //while(result[--pos] < ' ') {}
        if(pos < MAXLEN-1) pos = MAXLEN;
        if(PlayerInfo[playerid][pMaskuse] == 1)
        {
            format(str, sizeof(str), "* [Mask_%d] %.*s ...", maskid, pos, message);
            ProxDetector(20.0, playerid, str, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
            format(str, sizeof(str), "* ... %s (([Mask_%d]))", message[pos], maskid);
            ProxDetector(20.0, playerid, str, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
        }
        else
        {
            format(str, sizeof(str), "* %s %.*s ...", GetPlayerNameEx(playerid), pos, message);
            ProxDetector(20.0, playerid, str, COLOR_WHITE,COLOR_WHITE,COLOR_PURPLE,COLOR_WHITE,COLOR_WHITE);
            format(str, sizeof(str), "* ... %s ((%s))", message[pos], GetPlayerNameEx(playerid));
            ProxDetector(20.0, playerid, str, COLOR_WHITE,COLOR_WHITE,COLOR_PURPLE,COLOR_WHITE,COLOR_WHITE);
        }
        printf("%s",str);
    }
    else
    {
        if(PlayerInfo[playerid][pMaskuse] == 1)
        {
            format(str, sizeof(str), "* [Mask_%d] %s", maskid, message);
            ProxDetector(20.0, playerid, str, COLOR_WHITE,COLOR_WHITE,COLOR_PURPLE,COLOR_WHITE,COLOR_WHITE);
        }
        else
        {
            format(str, sizeof(str), "* %s %s", GetPlayerNameEx(playerid), message);
            ProxDetector(20.0, playerid, str, COLOR_WHITE,COLOR_WHITE,COLOR_PURPLE,COLOR_WHITE,COLOR_WHITE);
        }
        printf("%s",str);
    }
    return 1;
}

public PlayerPlayerActionMessage(playerid,targetid,Float:radius,message[])
{
    new maskid = PlayerInfo[playerid][pMaskID];
    new maskid2 = PlayerInfo[targetid][pMaskID];
    new string[128];
    if(PlayerInfo[playerid][pMaskuse] == 1 && PlayerInfo[targetid][pMaskuse] == 1)
    {
        format(string, sizeof(string), "* [Mask_%d] %s [Mask_%d]", maskid, message,maskid2);
        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        return 1;
    }
    else if(PlayerInfo[targetid][pMaskuse] == 1)
    {
        format(string, sizeof(string), "* %s %s [Mask_%d]", GetPlayerNameEx(playerid), message,maskid2);
        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        return 1;
    }
    else if(PlayerInfo[playerid][pMaskuse] == 1)
    {
        format(string, sizeof(string), "* [Mask_%d] %s %s", maskid, message,GetPlayerNameEx(targetid));
        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        return 1;
    }
    else
    {
        format(string, sizeof(string), "* %s %s %s", GetPlayerNameEx(playerid), message,GetPlayerNameEx(targetid));
        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        return 1;
    }
}
//==============================================================================
public ShowAStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
    {
        if(gPlayerLogged[targetid])
        {
            new wstring[128];
            new interior = GetPlayerInterior(targetid);
            new world = GetPlayerVirtualWorld(targetid);
            new cash = GetPlayerMoney(targetid);
            new scash = PlayerInfo[targetid][pCash];
            new vid = GetPlayerVehicleID(targetid);
            new jailtime = PlayerInfo[targetid][pJailTime];
            new key = PlayerInfo[targetid][pCarKey];
            new housekey = PlayerInfo[targetid][pHouseKey];
            new phonenumber = PlayerInfo[targetid][pPhoneNumber];
            new bizkey = PlayerInfo[targetid][pBizKey];
            new maskid = PlayerInfo[targetid][pMaskID];
            new bank = PlayerInfo[targetid][pBank];

            new bmxtext[64];
            switch(PlayerInfo[targetid][pBMX])
            {
                case 0: bmxtext = "Nu";
                case 1: bmxtext = "Da";
            }

            new jobtext[128];
            switch(PlayerInfo[targetid][pJob])
            {
                case 0: jobtext = "Fara";
                case 1: jobtext = "Materials Deliver";
                case 2: jobtext = "Drug Dealer";
                case 3: jobtext = "Detective";
                case 4: jobtext = "Farmer";
                case 5: jobtext = "Taxi Driver";
                case 6: jobtext = "Mechanic";
                case 7: jobtext = "Prison Guard";
                case 8: jobtext = "Arms Dealer";
                case 9: jobtext = "Truck Driver";
                case 10: jobtext = "Car Jacker";
            }
            new Float:armour;
            GetPlayerArmour(targetid,armour);
            new Float:hp;
            GetPlayerHealth(targetid,hp);
            new jailtype[128];
            switch(PlayerInfo[targetid][pJailed])
            {
                case 0: jailtype = "Fara";
                case 1: jailtype = "SASD Jail";
                case 2: jailtype = "Prison";
                case 3: jailtype = "LSPD Jail";
                case 4: jailtype = "Admin Jail";
            }
            new donatortext[128];
            switch(PlayerInfo[targetid][pDonator])
            {
                case 0: donatortext = "Fara";
                case 1: donatortext = "Bronze User";
                case 2: donatortext = "Silver User";
                case 3: donatortext = "Gold User";
            }
            new ip[64];
            GetPlayerIp(targetid,ip,sizeof(ip));
            format(wstring, sizeof(wstring), "Players name: %s - IP:%s", GetPlayerNameEx(targetid),ip);
            SendClientMessage(playerid,COLOR_ORANGE, wstring);
            format(wstring, sizeof(wstring), "Interior[%d], Car ID[%d], State[%d], Health[%.1f], Armour[%.1f], World[%d]", interior, vid, GetPlayerState(targetid), hp, armour, world);
            SendClientMessage(playerid,COLOR_WHITE, wstring);
            format(wstring, sizeof(wstring), "Money Out[$%d] - Should have(userfile)[$%d], Bank[%d], Donator[%s] BMX[%s]", cash, scash, bank, donatortext, bmxtext);
            SendClientMessage(playerid,COLOR_WHITE, wstring);
            format(wstring, sizeof(wstring), "Jail[%s], Jail Time[%d] | House[%d] Biz[%d] Mask[%d] Job[%s] Numar de telefn[%d]", jailtype, jailtime, housekey, bizkey, maskid, jobtext,phonenumber);
            SendClientMessage(playerid,COLOR_WHITE, wstring);
            new string[128];
            if(PlayerInfo[targetid][pCarKey] != 0)
            {
                format(string, sizeof(string), "Masina spawnata: %s[%d]",VehicleNames[GetVehicleModel(key)-400],key);
                SendClientMessage(playerid,COLOR_WHITE, string);
            }
        }
    }
}

public ShowStats (playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
    {
        if(gPlayerLogged[targetid])
        {
            new wstring[128];
            new level = PlayerInfo[targetid][pLevel];
            new exp = PlayerInfo[targetid][pExp];
            new nxtlevel = PlayerInfo[targetid][pLevel]+1;
            new expamount = nxtlevel*3;
            new smokes = PlayerInfo[targetid][pCigarettes];
            new social = PlayerInfo[targetid][pSocial];
            new deaths = PlayerInfo[targetid][pDeaths];
            new arrests = PlayerInfo[targetid][pArrested];
            new maskid = PlayerInfo[targetid][pMaskID];
            new housekey = PlayerInfo[targetid][pHouseKey];
            new bizkey = PlayerInfo[targetid][pBizKey];
            new playinghours = PlayerInfo[targetid][pPlayingHours];
            new bank = PlayerInfo[targetid][pBank];
            new savings = PlayerInfo[targetid][pSavings];
            new freq = PlayerInfo[targetid][pRfreq];
            new key = PlayerInfo[targetid][pCarKey];
            new dupe = PlayerInfo[targetid][pDupeKey];
            new age = PlayerInfo[targetid][pAge];
            new products = PlayerInfo[targetid][pProducts];
            new phonenumber = PlayerInfo[targetid][pPhoneNumber];
            new donatortext[128];
            new jobtext[128];
            new timppayday =60 - PlayerInfo[targetid][pPaydayTime];
            new sextext[128];
            new racetext[128];
            new taraprovenientatext[128];
            new year, month,day;
            getdate(year, month, day);
            new Hour, Minute, Second;
            gettime(Hour, Minute, Second);

            switch(PlayerInfo[targetid][pRace])
            {
                case 0: racetext = "Negru";
                case 1: racetext = "Asiatica";
                case 2: racetext = "Caucaziana";
                case 3: racetext = "Latina";
            }
            switch(PlayerInfo[targetid][pLocation])
            {
                case 0: taraprovenientatext = "America";
                case 1: taraprovenientatext = "Africa";
                case 2: taraprovenientatext = "Asia";
                case 3: taraprovenientatext = "Mexico";
                case 4: taraprovenientatext = "Germania";
                case 5: taraprovenientatext = "Anglia";
            }
            switch(PlayerInfo[targetid][pSex])
            {
                case 0: sextext = "Feminin";
                case 1: sextext = "Masculin";
            }
            switch(PlayerInfo[targetid][pJob])
            {
                case 0: jobtext = "Fara";
                case 1: jobtext = "Livrator de materiale";
                case 2: jobtext = "Dealer de droguri";
                case 3: jobtext = "Detectiv";
                case 4: jobtext = "Fermier";
                case 5: jobtext = "Sofer de taxi";
                case 7: jobtext = "Gardian la inchisoare";
                case 8: jobtext = "Dealer de arme";
                case 9: jobtext = "Tirist";
                case 10: jobtext = "Maturator Strazi";
                case 11: jobtext = "Livrator de Pizza";
                case 12: jobtext = "Transportator de baloti";
                case 13: jobtext = "Hot de masini";
            }

            switch(PlayerInfo[targetid][pDonator])
            {
                case 0: donatortext = "Fara";
                case 1: donatortext = "Bronze User";
                case 2: donatortext = "Silver User";
                case 3: donatortext = "Gold User";
            }

            format(wstring, sizeof(wstring), "| ___________________________ %s[%d/%d/%d - %d:%d:%d]  ___________________________ |",GetPlayerNameEx(targetid), day, month, year, Hour, Minute, Second);
            SendClientMessage(playerid,COLOR_GREEN, wstring);
            format(wstring, sizeof(wstring), "{37A6F0}| Out of Character |{FFFFFF} Varsta caracter: [%d] Nivel: [%d] Experienta: [%d/%d] Ore jucate: [%d] Donator: [%s] |",age,level,exp,expamount,playinghours,donatortext);
            SendClientMessage(playerid,COLOR_WHITE, wstring);
            format(wstring, sizeof(wstring), "{37A6F0}| Out of Character |{FFFFFF} Timp pana la payday: [%d] |",timppayday);
            SendClientMessage(playerid,COLOR_WHITE, wstring);
            format(wstring, sizeof(wstring), "{37A6F0}| Character |{FFFFFF} CNP: [%d] ID Masca: [%d] Pierderi de constiinta: [%d] |",social,maskid,deaths);
            SendClientMessage(playerid,COLOR_WHITE, wstring);
            format(wstring, sizeof(wstring), "{37A6F0}| Character |{FFFFFF} Provenienta: [%s] Rasa: [%s]  Sex: [%s]|",taraprovenientatext,racetext,sextext);
            SendClientMessage(playerid,COLOR_WHITE, wstring);
			format(wstring, sizeof(wstring), "{37A6F0}| Character |{FFFFFF} Bani: [$%d] Tigari: [%d] Frecventa: [%d] |",GetPlayerCash(targetid),smokes,freq);
            SendClientMessage(playerid,COLOR_WHITE, wstring);
			if(BancaInfo[playerid][bCard] == 0 && BancaInfo[playerid][bAccount] != 0)
			{
			   format(wstring, sizeof(wstring), "{37A6F0}| Bank |{FFFFFF} Bani in banca:[$%d] Economii: [$%d] Card: [Nu]|",bank,savings);
               SendClientMessage(playerid,COLOR_WHITE, wstring);
            }
			if(BancaInfo[playerid][bCard] == 1)
			{
			   format(wstring, sizeof(wstring), "{37A6F0}| Bank |{FFFFFF} Bani in banca:[$%d] Economii: [$%d] Card: [Da] PIN: [%d]|",bank,savings, BancaInfo[playerid][bPin]);
               SendClientMessage(playerid,COLOR_WHITE, wstring);
            }
            if(BancaInfo[playerid][bAccount] == 0)
            {
			   format(wstring, sizeof(wstring), "{37A6F0}| Bank |{FFFFFF} Nu ai un cont bancar! |");
               SendClientMessage(playerid,COLOR_WHITE, wstring);
			}
            if(PlayerInfo[targetid][pFaction] != 0)
            {
            format(wstring, sizeof(wstring), "{37A6F0}| Job & Faction |{FFFFFF} Factiune: [%s] Rang: [%s] Job: [%s] |",DynamicFactions[PlayerInfo[targetid][pFaction]][fName],GetRankName(targetid), jobtext);
            SendClientMessage(playerid,COLOR_WHITE, wstring);
            }
            else
            {
                SendClientMessage(playerid,COLOR_WHITE, "{37A6F0}| Character |{FFFFFF} Factiune:[N/A] Rang:[N/A] |");
            }
            if(PlayerInfo[targetid][pPhoneNumber] != 0)
            {
                new string[128];
                format(string, sizeof(string), "{37A6F0}| Others |{FFFFFF} Casa: [%d] Afacere: [%d] Numar de telefon: [%d] Arestari: [%d] |",housekey,bizkey,phonenumber,arrests);
                SendClientMessage(playerid,COLOR_WHITE, string);
            }
            else
            {
                new string[128];
                format(string, sizeof(string), "{37A6F0}| Other |{FFFFFF} Casa: [%d] Afacere: [%d] Numar de telefon: [Fara telefon] Arestari: [%d] |",housekey,bizkey,arrests);
                SendClientMessage(playerid,COLOR_WHITE, string);
            }

            format(wstring, sizeof(wstring), "{37A6F0}| Others |{FFFFFF} Masina spawnata: %s [%d] Masina de imprumut: [%d] Produse: [%d] Materiale: [%d] |",VehicleNames[GetVehicleModel(key)-400],key,dupe,products,PlayerInfo[targetid][pMaterials]);
            SendClientMessage(playerid,COLOR_WHITE, wstring);
            format(wstring, sizeof(wstring), "| ___________________________ %s[%d/%d/%d - %d:%d:%d]  ___________________________ |",GetPlayerNameEx(targetid), day, month, year, Hour, Minute, Second);
            SendClientMessage(playerid,COLOR_GREEN, wstring);
        }
    }
}
//==============================================================================
public IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerToPoint(9.0,playerid,Businesses[20][EnterX],Businesses[20][EnterY],Businesses[20][EnterZ]))
        {
            return 1;
        }
        else if(PlayerToPoint(9.0,playerid,Businesses[8][EnterX],Businesses[8][EnterY],Businesses[8][EnterZ]))
        {
            return 1;
        }
        else if(PlayerToPoint(9.0,playerid,Businesses[10][EnterX],Businesses[10][EnterY],Businesses[10][EnterZ]))
        {
            return 1;
        }
    }
    return 0;
}

public isatphone(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerToPoint(8.0,playerid,2069.6924,-1767.0510,13.5622) || PlayerToPoint(8.0,playerid,1722.1730,-1721.8524,13.5508))
        {
            return 1;
        }
        else if(PlayerToPoint(8.0,playerid,1808.8110,-1598.3621,13.5469) || PlayerToPoint(8.0,playerid,1806.2120,-1600.2471,13.5469))
        {
            return 1;
        }
        else if(PlayerToPoint(8.0,playerid,638.6981,-1228.4048,18.1640)  || PlayerToPoint(8.0,playerid,1765.3843,-1551.6145,9.9201))
        {
            return 1;
        }
        else if(PlayerToPoint(8.0,playerid,1768.1794,-1549.4114,9.9174)  || PlayerToPoint(8.0,playerid,1766.7662,-1550.4242,9.9184))
        {
            return 1;
        }
    }
    return 0;
}

public IsAtFishPlace(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerToPoint(8.0,playerid,403.3906,-2088.5784,7.8359) || PlayerToPoint(8.0,playerid,397.6418,-2088.6904,7.8359))
        {
            return 1;
        }
        else if(PlayerToPoint(8.0,playerid,1980.9971,-1217.4119,19.0598) || PlayerToPoint(8.0,playerid,1956.1672,-1217.1664,19.2042))
        {
            return 1;
        }
        else if(PlayerToPoint(8.0,playerid,387.9508,-2088.7061,7.8359) || PlayerToPoint(8.0,playerid,374.6349,-2088.6694,7.8359))
        {
            return 1;
        }
        else if(PlayerToPoint(8.0,playerid,365.3380,-2087.2971,7.8359) || PlayerToPoint(8.0,playerid,355.0916,-2088.5210,7.8359))
        {
            return 1;
        }
        else if(PlayerToPoint(8.0,playerid,2109.0376,-101.3848,1.8777) || PlayerToPoint(8.0,playerid,2102.6492,-103.7316,2.3041))
        {
            return 1;
        }
    }
    return 0;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{

    if(extraid == 1699)
    {
        if(response)
        {
            new str[256];
            new string[256];
            if (modelid == vehlist[playerid][0])
            {
                if (vehlist[playerid][0] < 400 || vehlist[playerid][0] > 611)
                {
                    return 1;
                }
                if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey]))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai deja o masina spawnata!");
                    return 1;
                }
                if (SpawnedCar[playerid][0] == 1 || SpawnedCar[playerid][1] == 1)
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai mai spawnat odata aceasta masina");
                    return 1;
                }
                format(str, sizeof(str), "IBP/Vehicles/%s.cfg",PlayerVehicle[playerid][pVeh1]);
                if(dini_Exists(str))
                {
                    LoadVehicles(playerid, PlayerVehicle[playerid][pVeh1]);
                    SendClientMessage(playerid, COLOR_GREEN, "Masina este la locul de parcare:");
                    format(string, sizeof(string), "%s, Alarma[%d], Incuietoare[%d], Imobilizator[%d], GPS[%d], Asigurari[%d], Distrugeri[%d], Pret asigurare[%d]", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400],
                    VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm], VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed], VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob], VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS], VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances], VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys], InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] == 481) { EngineStatus[PlayerInfo[playerid][pCarKey]] = 1; } else { EngineStatus[PlayerInfo[playerid][pCarKey]] = 0; }
                    if(GetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey]) != 0 && PlayerInfo[playerid][pGarageKey] != 0) { SetPlayerCheckpoint(playerid,Garages[PlayerInfo[playerid][pGarageKey]][EnterX], Garages[PlayerInfo[playerid][pGarageKey]][EnterY], Garages[PlayerInfo[playerid][pGarageKey]][EnterZ], 5.0); } else { SetPlayerCheckpoint(playerid, VehicleInfo[PlayerInfo[playerid][pCarKey]][vX], VehicleInfo[PlayerInfo[playerid][pCarKey]][vY], VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ], 5.0); }
                    VCP[playerid] = 1;
                    ActiveCP[playerid] = 1;
                    if (VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth] < 350)
                    {
                        SetVehicleHealth(PlayerInfo[playerid][pCarKey],1000);
                    }
                    else
                    {
                        SetVehicleHealth(PlayerInfo[playerid][pCarKey], VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth]);
                    }
                    SpawnedCar[playerid][0] = 1;
                    UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarKey],VehicleInfo[PlayerInfo[playerid][pCarKey]][vPanels],VehicleInfo[PlayerInfo[playerid][pCarKey]][vDoors],VehicleInfo[PlayerInfo[playerid][pCarKey]][vLights],VehicleInfo[PlayerInfo[playerid][pCarKey]][vTires]);
                }
                else SendClientMessage(playerid,COLOR_LIGHTRED, "[#1]Masina ta este buguita.Contacteaza un scripter pentru a rezolva problema.");
            }
            if (modelid == vehlist[playerid][1])
            {
                if (vehlist[playerid][1] < 400 || vehlist[playerid][1] > 611)
                {
                    return 1;
                }
                if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey]))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai deja o masina spawnata!");
                    return 1;
                }
                if (SpawnedCar[playerid][0] == 2 || SpawnedCar[playerid][1] == 2)
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai mai spawnat odata aceasta masina");
                    return 1;
                }
                format(str, sizeof(str), "IBP/Vehicles/%s.cfg",PlayerVehicle[playerid][pVeh2]);
                if(dini_Exists(str))
                {
                    LoadVehicles(playerid, PlayerVehicle[playerid][pVeh2]);
                    SendClientMessage(playerid, COLOR_GREEN, "Masina este la locul de parcare:");
                    format(string, sizeof(string), "%s, Alarma[%d], Incuietoare[%d], Imobilizator[%d], GPS[%d], Asigurari[%d], Distrugeri[%d], Pret asigurare[%d]", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400],
                    VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm], VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed], VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob], VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS], VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances], VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys], InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] == 481) { EngineStatus[PlayerInfo[playerid][pCarKey]] = 1; } else { EngineStatus[PlayerInfo[playerid][pCarKey]] = 0; }
                    if(GetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey]) != 0 && PlayerInfo[playerid][pGarageKey] != 0) { SetPlayerCheckpoint(playerid,Garages[PlayerInfo[playerid][pGarageKey]][EnterX], Garages[PlayerInfo[playerid][pGarageKey]][EnterY], Garages[PlayerInfo[playerid][pGarageKey]][EnterZ], 5.0); } else { SetPlayerCheckpoint(playerid, VehicleInfo[PlayerInfo[playerid][pCarKey]][vX], VehicleInfo[PlayerInfo[playerid][pCarKey]][vY], VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ], 5.0); }
                    VCP[playerid] = 1;
                    ActiveCP[playerid] = 1;
                    if (VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth] < 350)
                    {
                        SetVehicleHealth(PlayerInfo[playerid][pCarKey],1000);
                    }
                    else
                    {
                        SetVehicleHealth(PlayerInfo[playerid][pCarKey], VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth]);
                    }
                    SpawnedCar[playerid][0] = 2;
                    UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarKey],VehicleInfo[PlayerInfo[playerid][pCarKey]][vPanels],VehicleInfo[PlayerInfo[playerid][pCarKey]][vDoors],VehicleInfo[PlayerInfo[playerid][pCarKey]][vLights],VehicleInfo[PlayerInfo[playerid][pCarKey]][vTires]);
                }
                else SendClientMessage(playerid,COLOR_LIGHTRED, "[#2]Masina ta este buguita.Contacteaza un scripter pentru a rezolva problema.");
            }
            if (modelid == vehlist[playerid][2])
            {
                if (vehlist[playerid][2] < 400 || vehlist[playerid][2] > 611)
                {
                    return 1;
                }
                if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey]))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai deja o masina spawnata!");
                    return 1;
                }
                if (SpawnedCar[playerid][0] == 3 || SpawnedCar[playerid][1] == 3)
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai mai spawnat odata aceasta masina");
                    return 1;
                }
                format(str, sizeof(str), "IBP/Vehicles/%s.cfg",PlayerVehicle[playerid][pVeh3]);
                if(dini_Exists(str))
                {
                    LoadVehicles(playerid, PlayerVehicle[playerid][pVeh3]);
                    SendClientMessage(playerid, COLOR_GREEN, "Masina este la locul de parcare:");
                    format(string, sizeof(string), "%s, Alarma[%d], Incuietoare[%d], Imobilizator[%d], GPS[%d], Asigurari[%d], Distrugeri[%d], Pret asigurare[%d]", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400],
                    VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm], VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed], VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob], VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS], VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances], VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys], InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] == 481) { EngineStatus[PlayerInfo[playerid][pCarKey]] = 1; } else { EngineStatus[PlayerInfo[playerid][pCarKey]] = 0; }
                    if(GetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey]) != 0 && PlayerInfo[playerid][pGarageKey] != 0) { SetPlayerCheckpoint(playerid,Garages[PlayerInfo[playerid][pGarageKey]][EnterX], Garages[PlayerInfo[playerid][pGarageKey]][EnterY], Garages[PlayerInfo[playerid][pGarageKey]][EnterZ], 5.0); } else { SetPlayerCheckpoint(playerid, VehicleInfo[PlayerInfo[playerid][pCarKey]][vX], VehicleInfo[PlayerInfo[playerid][pCarKey]][vY], VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ], 5.0); }
                    VCP[playerid] = 1;
                    ActiveCP[playerid] = 1;
                    if (VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth] < 350)
                    {
                        SetVehicleHealth(PlayerInfo[playerid][pCarKey],1000);
                    }
                    else
                    {
                        SetVehicleHealth(PlayerInfo[playerid][pCarKey], VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth]);
                    }
                    SpawnedCar[playerid][0] = 3;
                    UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarKey],VehicleInfo[PlayerInfo[playerid][pCarKey]][vPanels],VehicleInfo[PlayerInfo[playerid][pCarKey]][vDoors],VehicleInfo[PlayerInfo[playerid][pCarKey]][vLights],VehicleInfo[PlayerInfo[playerid][pCarKey]][vTires]);
                }
                else SendClientMessage(playerid,COLOR_LIGHTRED, "[#3]Masina ta este buguita.Contacteaza un scripter pentru a rezolva problema.");
            }
            if (modelid == vehlist[playerid][3])
            {
                if (vehlist[playerid][3] < 400 || vehlist[playerid][3] > 611)
                {
                    return 1;
                }
                if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey]))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai deja o masina spawnata!");
                    return 1;
                }
                if (SpawnedCar[playerid][0] == 4 || SpawnedCar[playerid][1] == 4)
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai mai spawnat odata aceasta masina");
                    return 1;
                }
                format(str, sizeof(str), "IBP/Vehicles/%s.cfg",PlayerVehicle[playerid][pVeh4]);
                if(dini_Exists(str))
                {
                    LoadVehicles(playerid, PlayerVehicle[playerid][pVeh4]);
                    SendClientMessage(playerid, COLOR_GREEN, "Masina este la locul de parcare:");
                    format(string, sizeof(string), "%s, Alarma[%d], Incuietoare[%d], Imobilizator[%d], GPS[%d], Asigurari[%d], Distrugeri[%d], Pret asigurare[%d]", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400],
                    VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm], VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed], VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob], VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS], VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances], VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys], InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] == 481) { EngineStatus[PlayerInfo[playerid][pCarKey]] = 1; } else { EngineStatus[PlayerInfo[playerid][pCarKey]] = 0; }
                    if(GetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey]) != 0 && PlayerInfo[playerid][pGarageKey] != 0) { SetPlayerCheckpoint(playerid,Garages[PlayerInfo[playerid][pGarageKey]][EnterX], Garages[PlayerInfo[playerid][pGarageKey]][EnterY], Garages[PlayerInfo[playerid][pGarageKey]][EnterZ], 5.0); } else { SetPlayerCheckpoint(playerid, VehicleInfo[PlayerInfo[playerid][pCarKey]][vX], VehicleInfo[PlayerInfo[playerid][pCarKey]][vY], VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ], 5.0); }
                    VCP[playerid] = 1;
                    ActiveCP[playerid] = 1;
                    if (VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth] < 350)
                    {
                        SetVehicleHealth(PlayerInfo[playerid][pCarKey],1000);
                    }
                    else
                    {
                        SetVehicleHealth(PlayerInfo[playerid][pCarKey], VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth]);
                    }
                    SpawnedCar[playerid][0] = 4;
                    UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarKey],VehicleInfo[PlayerInfo[playerid][pCarKey]][vPanels],VehicleInfo[PlayerInfo[playerid][pCarKey]][vDoors],VehicleInfo[PlayerInfo[playerid][pCarKey]][vLights],VehicleInfo[PlayerInfo[playerid][pCarKey]][vTires]);
                }
                else SendClientMessage(playerid,COLOR_LIGHTRED, "[#4]Masina ta este buguita.Contacteaza un scripter pentru a rezolva problema.");
            }
            if (modelid == vehlist[playerid][4])
            {
                if (vehlist[playerid][4] < 400 || vehlist[playerid][4] > 611)
                {
                    return 1;
                }
                if(IsVehicleSpawned(PlayerInfo[playerid][pCarKey]))
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai deja o masina spawnata!");
                    return 1;
                }
                if (SpawnedCar[playerid][0] == 5 || SpawnedCar[playerid][1] == 5)
                {
                    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai mai spawnat odata aceasta masina");
                    return 1;
                }
                format(str, sizeof(str), "IBP/Vehicles/%s.cfg",PlayerVehicle[playerid][pVeh5]);
                if(dini_Exists(str))
                {
                    LoadVehicles(playerid, PlayerVehicle[playerid][pVeh5]);
                    SendClientMessage(playerid, COLOR_GREEN, "Masina este la locul de parcare:");
                    format(string, sizeof(string), "%s, Alarma[%d], Incuietoare[%d], Imobilizator[%d], GPS[%d], Asigurari[%d], Distrugeri[%d], Pret asigurare[%d]", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400],
                    VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm], VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed], VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob], VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS], VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances], VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys], InsurancePrices[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400] * VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]);
                    SendClientMessage(playerid, COLOR_WHITE, string);
                    if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] == 481) { EngineStatus[PlayerInfo[playerid][pCarKey]] = 1; } else { EngineStatus[PlayerInfo[playerid][pCarKey]] = 0; }
                    if(GetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey]) != 0 && PlayerInfo[playerid][pGarageKey] != 0) { SetPlayerCheckpoint(playerid,Garages[PlayerInfo[playerid][pGarageKey]][EnterX], Garages[PlayerInfo[playerid][pGarageKey]][EnterY], Garages[PlayerInfo[playerid][pGarageKey]][EnterZ], 5.0); } else { SetPlayerCheckpoint(playerid, VehicleInfo[PlayerInfo[playerid][pCarKey]][vX], VehicleInfo[PlayerInfo[playerid][pCarKey]][vY], VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ], 5.0); }
                    VCP[playerid] = 1;
                    ActiveCP[playerid] = 1;
                    if (VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth] < 350)
                    {
                        SetVehicleHealth(PlayerInfo[playerid][pCarKey],1000);
                    }
                    else
                    {
                        SetVehicleHealth(PlayerInfo[playerid][pCarKey], VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth]);
                    }
                    SpawnedCar[playerid][0] = 5;
                    UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarKey],VehicleInfo[PlayerInfo[playerid][pCarKey]][vPanels],VehicleInfo[PlayerInfo[playerid][pCarKey]][vDoors],VehicleInfo[PlayerInfo[playerid][pCarKey]][vLights],VehicleInfo[PlayerInfo[playerid][pCarKey]][vTires]);
                }
                else SendClientMessage(playerid,COLOR_LIGHTRED, "[#5]Masina ta este buguita.Contacteaza un scripter pentru a rezolva problema.");
            }
        }
    }
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{

    if(listid == carslist || listid == bikelist || listid == bicicletelist || listid == helilist || listid == planelist || listid == boatlist)
    {
        if(response)
        {
            if (Stocuri[modelid] == 0)
            {
                SendClientMessage(playerid, COLOR_GREY, "Ne pare rau dar aceasta masina nu mai este in stoc.");
                return 1;
            }
            new string[128];
            carsds[playerid] = modelid;
            format(string, sizeof(string), "Denumire: %s\nPret: %d$\nModel: %d\nKilometri Parcursi: 0\nCuloare: Alb\nStocuri: %d\n\n Doriti sa o cumparati?", VehicleNames[carsds[playerid]-400], CarsPrices[modelid-400],modelid,Stocuri[modelid]);
            ShowPlayerDialog(playerid, 9832, DIALOG_STYLE_MSGBOX,"Dealership", string, "Da", "Nu");
        }
    }
    if (listid == masklist)
    {
        if (response)
        {
            if (GetPlayerCash(playerid) < 30)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani, pretul este de 30$");
                return 1;
            }
            GivePlayerCash(playerid, -30);
            if(IsValidPlayerObject(playerid, 2))
            {
                RemovePlayerAttachedObject(playerid, 2);
            }
            SetPlayerAttachedObject(playerid, 2, modelid,2,0.04,0.02,0.00,273.0,4.0,-93.0,1.00,1.00,1.00);
            EditAttachedObject(playerid, 2);
            SendClientMessage(playerid,COLOR_GREY, "Foloseste /myclothes pentru a putea edita,sterge sau readauga obiectele.");
            PlayerInfo[playerid][pMaskobject] = modelid;
        }
    }
    if (listid == hatlist)
    {
        if (response)
        {
            if (GetPlayerCash(playerid) < 20)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani, pretul este de 20$");
                return 1;
            }
            GivePlayerCash(playerid, -20);
            if(IsValidPlayerObject(playerid, 3))
            {
                RemovePlayerAttachedObject(playerid, 3);
            }
            SetPlayerAttachedObject(playerid, 3, modelid,2,0.20,0.01,0.01,528.0,5.0,12.0,1.00,1.00,1.00);
            EditAttachedObject(playerid, 3);
            SendClientMessage(playerid,COLOR_GREY, "Foloseste /myclothes pentru a putea edita,sterge sau readauga obiectele.");
            PlayerInfo[playerid][pHat] = modelid;
        }
    }
    if (listid == glasseslist)
    {
        if (response)
        {
            if (GetPlayerCash(playerid) < 40)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani, pretul este de 40$");
                return 1;
            }
            GivePlayerCash(playerid, -40);
            if(IsValidPlayerObject(playerid, 4))
            {
                RemovePlayerAttachedObject(playerid, 4);
            }
            SetPlayerAttachedObject(playerid, 4, modelid,2,0.10,0.06,0.00,570.0,93.0,-123.0,1.00,1.00,1.00);
            EditAttachedObject(playerid, 4);
            SendClientMessage(playerid,COLOR_GREY, "Foloseste /myclothes pentru a putea edita,sterge sau readauga obiectele.");
            PlayerInfo[playerid][pGlasses] = modelid;
        }
    }
    if (listid == helmetlist)
    {
        if (response)
        {
            if (GetPlayerCash(playerid) < 150)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani, pretul este de 150$");
                return 1;
            }
            GivePlayerCash(playerid, -150);
            if(IsValidPlayerObject(playerid, 9))
            {
                RemovePlayerAttachedObject(playerid, 9);
            }
            SetPlayerAttachedObject(playerid, 9, modelid,2,0.10,0.06,0.00,570.0,93.0,-123.0,1.00,1.00,1.00);
            EditAttachedObject(playerid, 9);
            PlayerInfo[playerid][pHelmet] = modelid;
            SendClientMessage(playerid,COLOR_GREY, "Foloseste /myclothes pentru a putea edita,sterge sau readauga obiectele.");
            helmet[playerid] = 1;
        }
    }
    if (listid == guitarlist)
    {
        if (response)
        {
            if (GetPlayerCash(playerid) < 200)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani, pretul este de 200$");
                return 1;
            }
            GivePlayerCash(playerid, -200);
            if(IsValidPlayerObject(playerid, 1))
            {
                RemovePlayerAttachedObject(playerid, 1);
            }
            SetPlayerAttachedObject(playerid, 1, modelid,1,0.22,-0.10,0.02,359.0,73.0,-4.0,1.00,1.00,1.00);
            EditAttachedObject(playerid, 1);
            PlayerInfo[playerid][pGuitar] = modelid;
            SendClientMessage(playerid,COLOR_GREY, "Foloseste /myclothes pentru a putea edita,sterge sau readauga obiectele.");
        }
    }
    if (listid == headphonelist)
    {
        if (response)
        {
            if (GetPlayerCash(playerid) < 50)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani, pretul este de 50$");
                return 1;
            }
            GivePlayerCash(playerid, -50);
            if(IsValidPlayerObject(playerid, 6))
            {
                RemovePlayerAttachedObject(playerid, 6);
            }
            SetPlayerAttachedObject(playerid, 6, modelid,2,0.04,-0.00,0.00,1538.0,2.0,-93.0,1.00,1.00,1.00);
            EditAttachedObject(playerid, 6);
            SendClientMessage(playerid,COLOR_GREY, "Foloseste /myclothes pentru a putea edita,sterge sau readauga obiectele.");
            PlayerInfo[playerid][pHeadphone] = modelid;
        }
    }
    if (listid == watchlist)
    {
        if (response)
        {
            if (GetPlayerCash(playerid) < 100)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani, pretul este de 100$");
                return 1;
            }
            GivePlayerCash(playerid, -100);
            if(IsValidPlayerObject(playerid, 7))
            {
                RemovePlayerAttachedObject(playerid, 7);
            }
            SetPlayerAttachedObject(playerid, 7, modelid,5,0.00,-0.01,-0.03,351.0,117.0,-91.0,1.00,1.00,1.00);
            EditAttachedObject(playerid, 7);
            PlayerInfo[playerid][pWatch] = modelid;
            SendClientMessage(playerid,COLOR_GREY, "Foloseste /myclothes pentru a putea edita,sterge sau readauga obiectele.");
            watch[playerid] = 1;
        }
    }
    if (listid == skinlist)
    {
        if (response)
        {
            if (GetPlayerMoney(playerid) < 100)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu ai 100$ pentru ati schimba hainele.");
                return 1;
            }
            GivePlayerCash(playerid, -100);
            SetPlayerSkin(playerid, modelid);
            PlayerInfo[playerid][pSkin] = modelid;
            Businesses[14][Till]+=100;
        }
    }
    if (listid == hairlist)
    {
        if (response)
        {
            if (GetPlayerCash(playerid) < 50)
            {
                SendClientMessage(playerid, COLOR_GREY, "Nu ai destui bani, pretul este de 50$");
                return 1;
            }
            GivePlayerCash(playerid, -50);
            if(IsValidPlayerObject(playerid, 3))
            {
                RemovePlayerAttachedObject(playerid, 3);
            }
            SetPlayerAttachedObject(playerid, 3, modelid,2,0.20,0.01,0.01,528.0,5.0,12.0,1.00,1.00,1.00);
            EditAttachedObject(playerid, 3);
            SendClientMessage(playerid,COLOR_GREY, "Foloseste /myhair pentru a putea modifica sau sterge parul tau.");
            PlayerInfo[playerid][pHair] = modelid;
        }
    }
    return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
        RemovePlayerAttachedObject(playerid, index);
        SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
    }
    else
    {
        RemovePlayerAttachedObject(playerid, index);
    }
    return 1;
}

public IsAtATM(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerToPoint(2, playerid,1929.2637,-1785.9915,13.5469) ||
        PlayerToPoint(2, playerid,1730.1351,-1865.5477,13.5725) ||
        PlayerToPoint(2, playerid,285.0941,2483.0134,-48.1907) ||
        PlayerToPoint(2, playerid,285.0540,2502.7688,-48.1907) ||
        PlayerToPoint(2, playerid,1421.2610,-981.7916,1639.7843) ||
        PlayerToPoint(2, playerid,1224.933471,-1811.678588,16.163740)||
        PlayerToPoint(2, playerid,1470.9443, -1781.8828, 13.1411) ||
        PlayerToPoint(2, playerid,1549.6564, -1679.4850, 13.1550)||
        PlayerToPoint(2, playerid,1172.606811, -1318.875976, 15.027392)||
        PlayerToPoint(2, playerid,995.558105, -1294.101440, 13.278493)||
        PlayerToPoint(2, playerid,1668.770019, -1405.488403, 13.146865)||
        PlayerToPoint(2, playerid,1103.0648,-1429.4647,15.7969)||
        PlayerToPoint(2, playerid,660.7032,-576.4857,16.3359)||
        PlayerToPoint(2, playerid,1593.8708,-1272.4719,17.4571)||
        PlayerToPoint(2, playerid,1781.9608, -1771.4186, 13.3695))
        {
            return 1;
        }
    }
    return 0;
}


public IsAtImpound(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerToPoint(50.0,playerid,2466.4556, -2097.7041, 12.5173))
        {
            return 1;
        }
    }
    return 0;
}

public IsAtPaintShop(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerToPoint(10.0,playerid,1702.4109,-1470.2181,13.5469))
        {
            return 1;
         }
    }
    return 0;
}

public IsAtBar(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerToPoint(4.0,playerid,495.7801,-76.0305,998.7578) || PlayerToPoint(4.0,playerid,499.9654,-20.2515,1000.6797))
        {//Ten Green Bottles, Havanna
            return 1;
        }
        else if(PlayerToPoint(4.0,playerid,1215.9480,-13.3519,1000.9219) || PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734))
        {//Pig Pen
            return 1;
        }
    }
    return 0;
}
//==============================================================================
public IsVehicleOccupied(vehicleid)
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerInVehicle(i,vehicleid)) return 1;
    }
    return 0;
}

public LockCar(carid)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            VehicleInfo[carid][vLock] = 1;
            SetVehicleParamsForPlayer(carid,i,0,1);
        }
    }
}

public UnlockVehicle(vehicleid)
{
    for(new i = 0; i <MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            VehicleInfo[vehicleid][vLock] = 0;
            SetVehicleParamsForPlayer(vehicleid,i, 0, 0);
        }
    }
}

stock GetOwnedVehicleID(playerid)
{
    for(new v = 1; v < MAX_VEHICLES; v++)
    {
        if (IsVehicleSpawned(v))
        {
            if (!strcmp(VehicleInfo[v][vOwner], GetName(playerid))) return v;
        }
    }
    return INVALID_VEHICLE_ID;
}

forward SaveVehiclesViaDesc(str[],car);
public SaveVehiclesViaDesc(str[],car)
{
    new Float:vehicleHealth;
    GetVehicleHealth(car, vehicleHealth);
    VehicleInfo[car][vHealth] = floatround(vehicleHealth);
    GetVehicleDamageStatus(car,VehicleInfo[car][vPanels],VehicleInfo[car][vDoors],VehicleInfo[car][vLights],VehicleInfo[car][vTires]);
    new file[256];
    format(file, sizeof(file), "IBP/Vehicles/%s.cfg", str);
    if(dini_Exists(file))
    {
        dini_IntSet(file, "Model", VehicleInfo[car][vModel]);
        dini_FloatSet(file, "ParkX", VehicleInfo[car][vX]);
        dini_FloatSet(file, "ParkY", VehicleInfo[car][vY]);
        dini_FloatSet(file, "ParkZ", VehicleInfo[car][vZ]);
        dini_FloatSet(file, "ParkAngle", VehicleInfo[car][vAngle]);
        dini_IntSet(file, "Color1", VehicleInfo[car][vColorOne]);
        dini_IntSet(file, "Color2", VehicleInfo[car][vColorTwo]);
        dini_Set(file, "Owner", VehicleInfo[car][vOwner]);
        dini_Set(file, "Description", VehicleInfo[car][vDescription]);
        dini_IntSet(file, "Owned", VehicleInfo[car][vOwned]);
        dini_IntSet(file, "Lock", VehicleInfo[car][vLock]);
        dini_IntSet(file, "LockBuyed", VehicleInfo[car][vLockBuyed]);
        dini_IntSet(file, "Alarm", VehicleInfo[car][vAlarm]);
        dini_IntSet(file, "Immobaliser", VehicleInfo[car][vImmob]);
        dini_IntSet(file, "GPS", VehicleInfo[car][vGPS]);
        dini_IntSet(file, "Key", VehicleInfo[car][vKey]);
        dini_IntSet(file, "Component0", VehicleInfo[car][vComponent0]);
        dini_IntSet(file, "Component1", VehicleInfo[car][vComponent1]);
        dini_IntSet(file, "Component2", VehicleInfo[car][vComponent2]);
        dini_IntSet(file, "Component3", VehicleInfo[car][vComponent3]);
        dini_IntSet(file, "Component4", VehicleInfo[car][vComponent4]);
        dini_IntSet(file, "Component5", VehicleInfo[car][vComponent5]);
        dini_IntSet(file, "Component6", VehicleInfo[car][vComponent6]);
        dini_IntSet(file, "Component7", VehicleInfo[car][vComponent7]);
        dini_IntSet(file, "Component8", VehicleInfo[car][vComponent8]);
        dini_IntSet(file, "Component9", VehicleInfo[car][vComponent9]);
        dini_IntSet(file, "Component10", VehicleInfo[car][vComponent10]);
        dini_IntSet(file, "Component11", VehicleInfo[car][vComponent11]);
        dini_IntSet(file, "Component12", VehicleInfo[car][vComponent12]);
        dini_IntSet(file, "Component13", VehicleInfo[car][vComponent13]);
        dini_IntSet(file, "PaintJob", VehicleInfo[car][vPaintJob]);
        dini_IntSet(file, "Insurances", VehicleInfo[car][vInsurances]);
        dini_IntSet(file, "Destroys", VehicleInfo[car][vDestroys]);
        dini_Set(file, "Plate", VehicleInfo[car][vPlate]);
        dini_IntSet(file, "Ticket", VehicleInfo[car][vTicket]);
        // TRUUUUUUNK :D
        dini_IntSet(file, "Trunkslot1", VehicleInfo[car][vTrunk1]);
        dini_IntSet(file, "Trunkammo1", VehicleInfo[car][vTrunka1]);
        dini_IntSet(file, "Trunkslot2", VehicleInfo[car][vTrunk2]);
        dini_IntSet(file, "Trunkammo2", VehicleInfo[car][vTrunka2]);
        dini_IntSet(file, "Trunkslot3", VehicleInfo[car][vTrunk3]);
        dini_IntSet(file, "Trunkammo3", VehicleInfo[car][vTrunka3]);
        dini_IntSet(file, "Trunkslot4", VehicleInfo[car][vTrunk4]);
        dini_IntSet(file, "Trunkammo4", VehicleInfo[car][vTrunka4]);
        // Packageee
        dini_IntSet(file, "Package1", VehicleInfo[car][vPackage1]);
        dini_IntSet(file, "Package1a", VehicleInfo[car][vPackage1a]);
        dini_IntSet(file, "Package2", VehicleInfo[car][vPackage2]);
        dini_IntSet(file, "Package2a", VehicleInfo[car][vPackage2a]);
        dini_IntSet(file, "Package3", VehicleInfo[car][vPackage3]);
        dini_IntSet(file, "Package3a", VehicleInfo[car][vPackage3a]);
        dini_IntSet(file, "Package4", VehicleInfo[car][vPackage4]);
        dini_IntSet(file, "Package4a", VehicleInfo[car][vPackage4a]);
        dini_IntSet(file, "Package5", VehicleInfo[car][vPackage5]);
        dini_IntSet(file, "Package5a", VehicleInfo[car][vPackage5a]);
        dini_IntSet(file, "Package6", VehicleInfo[car][vPackage6]);
        dini_IntSet(file, "Package6a", VehicleInfo[car][vPackage6a]);
        dini_IntSet(file, "Package7", VehicleInfo[car][vPackage7]);
        dini_IntSet(file, "Package7a", VehicleInfo[car][vPackage7a]);
        dini_IntSet(file, "Package8", VehicleInfo[car][vPackage8]);
        dini_IntSet(file, "Package8a", VehicleInfo[car][vPackage8a]);
        dini_IntSet(file, "Package9", VehicleInfo[car][vPackage9]);
        dini_IntSet(file, "Package9a", VehicleInfo[car][vPackage9a]);
        dini_IntSet(file, "Package10", VehicleInfo[car][vPackage10]);
        dini_IntSet(file, "Package10a", VehicleInfo[car][vPackage10a]);
        // Fuel
        dini_IntSet(file, "Credit", VehicleInfo[car][vCredit]);
        dini_IntSet(file, "MaxInsurances", VehicleInfo[car][vMaxInsurances]);
        dini_FloatSet(file, "Fuel", Fuel[car]);
        // Health
        dini_IntSet(file, "Health", VehicleInfo[car][vHealth]);
        // World
        dini_IntSet(file, "World", GetVehicleVirtualWorld(car));
        dini_IntSet(file, "Panels", VehicleInfo[car][vPanels]);
        dini_IntSet(file, "Doors", VehicleInfo[car][vDoors]);
        dini_IntSet(file, "Lights", VehicleInfo[car][vLights]);
        dini_IntSet(file, "Tires", VehicleInfo[car][vTires]);
        dini_IntSet(file, "Impound", VehicleInfo[car][vImpound]);
        dini_IntSet(file, "Kilometri", VehicleInfo[car][vKilometri]);
    }
    else
    {
        dini_Create(file);
        dini_IntSet(file, "Model", VehicleInfo[car][vModel]);
        dini_FloatSet(file, "ParkX", VehicleInfo[car][vX]);
        dini_FloatSet(file, "ParkY", VehicleInfo[car][vY]);
        dini_FloatSet(file, "ParkZ", VehicleInfo[car][vZ]);
        dini_FloatSet(file, "ParkAngle", VehicleInfo[car][vAngle]);
        dini_IntSet(file, "Color1", VehicleInfo[car][vColorOne]);
        dini_IntSet(file, "Color2", VehicleInfo[car][vColorTwo]);
        dini_Set(file, "Owner", VehicleInfo[car][vOwner]);
        dini_Set(file, "Description", VehicleInfo[car][vDescription]);
        dini_IntSet(file, "Owned", VehicleInfo[car][vOwned]);
        dini_IntSet(file, "Lock", VehicleInfo[car][vLock]);
        dini_IntSet(file, "LockBuyed", VehicleInfo[car][vLockBuyed]);
        dini_IntSet(file, "Alarm", VehicleInfo[car][vAlarm]);
        dini_IntSet(file, "Immobaliser", VehicleInfo[car][vImmob]);
        dini_IntSet(file, "GPS", VehicleInfo[car][vGPS]);
        dini_IntSet(file, "Key", VehicleInfo[car][vKey]);
        dini_IntSet(file, "Component0", VehicleInfo[car][vComponent0]);
        dini_IntSet(file, "Component1", VehicleInfo[car][vComponent1]);
        dini_IntSet(file, "Component2", VehicleInfo[car][vComponent2]);
        dini_IntSet(file, "Component3", VehicleInfo[car][vComponent3]);
        dini_IntSet(file, "Component4", VehicleInfo[car][vComponent4]);
        dini_IntSet(file, "Component5", VehicleInfo[car][vComponent5]);
        dini_IntSet(file, "Component6", VehicleInfo[car][vComponent6]);
        dini_IntSet(file, "Component7", VehicleInfo[car][vComponent7]);
        dini_IntSet(file, "Component8", VehicleInfo[car][vComponent8]);
        dini_IntSet(file, "Component9", VehicleInfo[car][vComponent9]);
        dini_IntSet(file, "Component10", VehicleInfo[car][vComponent10]);
        dini_IntSet(file, "Component11", VehicleInfo[car][vComponent11]);
        dini_IntSet(file, "Component12", VehicleInfo[car][vComponent12]);
        dini_IntSet(file, "Component13", VehicleInfo[car][vComponent13]);
        dini_IntSet(file, "PaintJob", VehicleInfo[car][vPaintJob]);
        dini_IntSet(file, "Insurances", VehicleInfo[car][vInsurances]);
        dini_IntSet(file, "Destroys", VehicleInfo[car][vDestroys]);
        dini_Set(file, "Plate", VehicleInfo[car][vPlate]);
        dini_IntSet(file, "Ticket", VehicleInfo[car][vTicket]);
        // TRUUUUNK :D
        dini_IntSet(file, "Trunkslot1", VehicleInfo[car][vTrunk1]);
        dini_IntSet(file, "Trunkammo1", VehicleInfo[car][vTrunka1]);
        dini_IntSet(file, "Trunkslot2", VehicleInfo[car][vTrunk2]);
        dini_IntSet(file, "Trunkammo2", VehicleInfo[car][vTrunka2]);
        dini_IntSet(file, "Trunkslot3", VehicleInfo[car][vTrunk3]);
        dini_IntSet(file, "Trunkammo3", VehicleInfo[car][vTrunka3]);
        dini_IntSet(file, "Trunkslot4", VehicleInfo[car][vTrunk4]);
        dini_IntSet(file, "Trunkammo4", VehicleInfo[car][vTrunka4]);
        // Packageee
        dini_IntSet(file, "Package1", VehicleInfo[car][vPackage1]);
        dini_IntSet(file, "Package1a", VehicleInfo[car][vPackage1a]);
        dini_IntSet(file, "Package2", VehicleInfo[car][vPackage2]);
        dini_IntSet(file, "Package2a", VehicleInfo[car][vPackage2a]);
        dini_IntSet(file, "Package3", VehicleInfo[car][vPackage3]);
        dini_IntSet(file, "Package3a", VehicleInfo[car][vPackage3a]);
        dini_IntSet(file, "Package4", VehicleInfo[car][vPackage4]);
        dini_IntSet(file, "Package4a", VehicleInfo[car][vPackage4a]);
        dini_IntSet(file, "Package5", VehicleInfo[car][vPackage5]);
        dini_IntSet(file, "Package5a", VehicleInfo[car][vPackage5a]);
        dini_IntSet(file, "Package6", VehicleInfo[car][vPackage6]);
        dini_IntSet(file, "Package6a", VehicleInfo[car][vPackage6a]);
        dini_IntSet(file, "Package7", VehicleInfo[car][vPackage7]);
        dini_IntSet(file, "Package7a", VehicleInfo[car][vPackage7a]);
        dini_IntSet(file, "Package8", VehicleInfo[car][vPackage8]);
        dini_IntSet(file, "Package8a", VehicleInfo[car][vPackage8a]);
        dini_IntSet(file, "Package9", VehicleInfo[car][vPackage9]);
        dini_IntSet(file, "Package9a", VehicleInfo[car][vPackage9a]);
        dini_IntSet(file, "Package10", VehicleInfo[car][vPackage10]);
        dini_IntSet(file, "Package10a", VehicleInfo[car][vPackage10a]);
        // Fuel
        dini_IntSet(file, "Credit", VehicleInfo[car][vCredit]);
        dini_IntSet(file, "MaxInsurances", VehicleInfo[car][vMaxInsurances]);
        dini_FloatSet(file, "Fuel", Fuel[car]);
        dini_IntSet(file, "Health", VehicleInfo[car][vHealth]);
        // World
        dini_IntSet(file, "World", GetVehicleVirtualWorld(car));
        dini_IntSet(file, "Panels", VehicleInfo[car][vPanels]);
        dini_IntSet(file, "Doors", VehicleInfo[car][vDoors]);
        dini_IntSet(file, "Lights", VehicleInfo[car][vLights]);
        dini_IntSet(file, "Tires", VehicleInfo[car][vTires]);
        dini_IntSet(file, "Impound", VehicleInfo[car][vImpound]);
        dini_IntSet(file, "Kilometri", VehicleInfo[car][vKilometri]);
        //ByValentin.
        dini_IntSet(file, "Sasiu", VehicleInfo[car][vSasiu]);
        dini_Set(file, "Sasiu2", VehicleInfo[car][vSasiu2]);
        dini_IntSet(file, "Verify", VehicleInfo[car][vVerify]);
        dini_IntSet(file, "Ver1", VehicleInfo[car][vVer1]);
        dini_IntSet(file, "Ver2", VehicleInfo[car][vVer2]);
        dini_IntSet(file, "Ver3", VehicleInfo[car][vVer3]);
        dini_IntSet(file, "Radiom", VehicleInfo[car][vRadiom]);
        dini_IntSet(file, "EngineLife", VehicleInfo[car][vEngineLife]);
        dini_IntSet(file, "VerifyBy", VehicleInfo[car][vVerifyBy]);
    }
    return 1;
}

public SaveVehicles(playerid, car)
{
    new Float:vehicleHealth;
    GetVehicleHealth(car, vehicleHealth);
    VehicleInfo[car][vHealth] = floatround(vehicleHealth);
    GetVehicleDamageStatus(car,VehicleInfo[car][vPanels],VehicleInfo[car][vDoors],VehicleInfo[car][vLights],VehicleInfo[car][vTires]);
    new file[256];
    new plname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, plname, sizeof(plname));
    format(file, sizeof(file), "IBP/Vehicles/%s.%s.cfg", plname, VehicleNames[GetVehicleModel(car)-400]);
    if(dini_Exists(file))
    {
        dini_IntSet(file, "Model", VehicleInfo[car][vModel]);
        dini_FloatSet(file, "ParkX", VehicleInfo[car][vX]);
        dini_FloatSet(file, "ParkY", VehicleInfo[car][vY]);
        dini_FloatSet(file, "ParkZ", VehicleInfo[car][vZ]);
        dini_FloatSet(file, "ParkAngle", VehicleInfo[car][vAngle]);
        dini_IntSet(file, "Color1", VehicleInfo[car][vColorOne]);
        dini_IntSet(file, "Color2", VehicleInfo[car][vColorTwo]);
        dini_Set(file, "Owner", VehicleInfo[car][vOwner]);
        dini_Set(file, "Description", VehicleInfo[car][vDescription]);
        dini_IntSet(file, "Owned", VehicleInfo[car][vOwned]);
        dini_IntSet(file, "Lock", VehicleInfo[car][vLock]);
        dini_IntSet(file, "LockBuyed", VehicleInfo[car][vLockBuyed]);
        dini_IntSet(file, "Alarm", VehicleInfo[car][vAlarm]);
        dini_IntSet(file, "Immobaliser", VehicleInfo[car][vImmob]);
        dini_IntSet(file, "GPS", VehicleInfo[car][vGPS]);
        dini_IntSet(file, "Key", VehicleInfo[car][vKey]);
        dini_IntSet(file, "Component0", VehicleInfo[car][vComponent0]);
        dini_IntSet(file, "Component1", VehicleInfo[car][vComponent1]);
        dini_IntSet(file, "Component2", VehicleInfo[car][vComponent2]);
        dini_IntSet(file, "Component3", VehicleInfo[car][vComponent3]);
        dini_IntSet(file, "Component4", VehicleInfo[car][vComponent4]);
        dini_IntSet(file, "Component5", VehicleInfo[car][vComponent5]);
        dini_IntSet(file, "Component6", VehicleInfo[car][vComponent6]);
        dini_IntSet(file, "Component7", VehicleInfo[car][vComponent7]);
        dini_IntSet(file, "Component8", VehicleInfo[car][vComponent8]);
        dini_IntSet(file, "Component9", VehicleInfo[car][vComponent9]);
        dini_IntSet(file, "Component10", VehicleInfo[car][vComponent10]);
        dini_IntSet(file, "Component11", VehicleInfo[car][vComponent11]);
        dini_IntSet(file, "Component12", VehicleInfo[car][vComponent12]);
        dini_IntSet(file, "Component13", VehicleInfo[car][vComponent13]);
        dini_IntSet(file, "PaintJob", VehicleInfo[car][vPaintJob]);
        dini_IntSet(file, "Insurances", VehicleInfo[car][vInsurances]);
        dini_IntSet(file, "Destroys", VehicleInfo[car][vDestroys]);
        dini_IntSet(file, "Plate", VehicleInfo[car][vPlate]);
        dini_IntSet(file, "Ticket", VehicleInfo[car][vTicket]);
        // TRUUUUUUNK :D
        dini_IntSet(file, "Trunkslot1", VehicleInfo[car][vTrunk1]);
        dini_IntSet(file, "Trunkammo1", VehicleInfo[car][vTrunka1]);
        dini_IntSet(file, "Trunkslot2", VehicleInfo[car][vTrunk2]);
        dini_IntSet(file, "Trunkammo2", VehicleInfo[car][vTrunka2]);
        dini_IntSet(file, "Trunkslot3", VehicleInfo[car][vTrunk3]);
        dini_IntSet(file, "Trunkammo3", VehicleInfo[car][vTrunka3]);
        dini_IntSet(file, "Trunkslot4", VehicleInfo[car][vTrunk4]);
        dini_IntSet(file, "Trunkammo4", VehicleInfo[car][vTrunka4]);
        // Packageee
        dini_IntSet(file, "Package1", VehicleInfo[car][vPackage1]);
        dini_IntSet(file, "Package1a", VehicleInfo[car][vPackage1a]);
        dini_IntSet(file, "Package2", VehicleInfo[car][vPackage2]);
        dini_IntSet(file, "Package2a", VehicleInfo[car][vPackage2a]);
        dini_IntSet(file, "Package3", VehicleInfo[car][vPackage3]);
        dini_IntSet(file, "Package3a", VehicleInfo[car][vPackage3a]);
        dini_IntSet(file, "Package4", VehicleInfo[car][vPackage4]);
        dini_IntSet(file, "Package4a", VehicleInfo[car][vPackage4a]);
        dini_IntSet(file, "Package5", VehicleInfo[car][vPackage5]);
        dini_IntSet(file, "Package5a", VehicleInfo[car][vPackage5a]);
        dini_IntSet(file, "Package6", VehicleInfo[car][vPackage6]);
        dini_IntSet(file, "Package6a", VehicleInfo[car][vPackage6a]);
        dini_IntSet(file, "Package7", VehicleInfo[car][vPackage7]);
        dini_IntSet(file, "Package7a", VehicleInfo[car][vPackage7a]);
        dini_IntSet(file, "Package8", VehicleInfo[car][vPackage8]);
        dini_IntSet(file, "Package8a", VehicleInfo[car][vPackage8a]);
        dini_IntSet(file, "Package9", VehicleInfo[car][vPackage9]);
        dini_IntSet(file, "Package9a", VehicleInfo[car][vPackage9a]);
        dini_IntSet(file, "Package10", VehicleInfo[car][vPackage10]);
        dini_IntSet(file, "Package10a", VehicleInfo[car][vPackage10a]);
        // Fuel
        dini_IntSet(file, "Credit", VehicleInfo[car][vCredit]);
        dini_IntSet(file, "MaxInsurances", VehicleInfo[car][vMaxInsurances]);
        dini_FloatSet(file, "Fuel", Fuel[car]);
        dini_IntSet(file, "Health", VehicleInfo[car][vHealth]);
        // World
        dini_IntSet(file, "World", GetVehicleVirtualWorld(car));
        dini_IntSet(file, "Panels", VehicleInfo[car][vPanels]);
        dini_IntSet(file, "Doors", VehicleInfo[car][vDoors]);
        dini_IntSet(file, "Lights", VehicleInfo[car][vLights]);
        dini_IntSet(file, "Tires", VehicleInfo[car][vTires]);
        dini_IntSet(file, "Impound", VehicleInfo[car][vImpound]);
        dini_IntSet(file, "Kilometri", VehicleInfo[car][vKilometri]);
        //ByValentin.
        dini_IntSet(file, "Sasiu", VehicleInfo[car][vSasiu]);
        dini_Set(file, "Sasiu2", VehicleInfo[car][vSasiu2]);
        dini_IntSet(file, "Verify", VehicleInfo[car][vVerify]);
        dini_IntSet(file, "Ver1", VehicleInfo[car][vVer1]);
        dini_IntSet(file, "Ver2", VehicleInfo[car][vVer2]);
        dini_IntSet(file, "Ver3", VehicleInfo[car][vVer3]);
    }
    else
    {
        dini_Create(file);
        dini_IntSet(file, "Model", VehicleInfo[car][vModel]);
        dini_FloatSet(file, "ParkX", VehicleInfo[car][vX]);
        dini_FloatSet(file, "ParkY", VehicleInfo[car][vY]);
        dini_FloatSet(file, "ParkZ", VehicleInfo[car][vZ]);
        dini_FloatSet(file, "ParkAngle", VehicleInfo[car][vAngle]);
        dini_IntSet(file, "Color1", VehicleInfo[car][vColorOne]);
        dini_IntSet(file, "Color2", VehicleInfo[car][vColorTwo]);
        dini_Set(file, "Owner", VehicleInfo[car][vOwner]);
        dini_Set(file, "Description", VehicleInfo[car][vDescription]);
        dini_IntSet(file, "Owned", VehicleInfo[car][vOwned]);
        dini_IntSet(file, "Lock", VehicleInfo[car][vLock]);
        dini_IntSet(file, "LockBuyed", VehicleInfo[car][vLockBuyed]);
        dini_IntSet(file, "Alarm", VehicleInfo[car][vAlarm]);
        dini_IntSet(file, "Immobaliser", VehicleInfo[car][vImmob]);
        dini_IntSet(file, "GPS", VehicleInfo[car][vGPS]);
        dini_IntSet(file, "Key", VehicleInfo[car][vKey]);
        dini_IntSet(file, "Component0", VehicleInfo[car][vComponent0]);
        dini_IntSet(file, "Component1", VehicleInfo[car][vComponent1]);
        dini_IntSet(file, "Component2", VehicleInfo[car][vComponent2]);
        dini_IntSet(file, "Component3", VehicleInfo[car][vComponent3]);
        dini_IntSet(file, "Component4", VehicleInfo[car][vComponent4]);
        dini_IntSet(file, "Component5", VehicleInfo[car][vComponent5]);
        dini_IntSet(file, "Component6", VehicleInfo[car][vComponent6]);
        dini_IntSet(file, "Component7", VehicleInfo[car][vComponent7]);
        dini_IntSet(file, "Component8", VehicleInfo[car][vComponent8]);
        dini_IntSet(file, "Component9", VehicleInfo[car][vComponent9]);
        dini_IntSet(file, "Component10", VehicleInfo[car][vComponent10]);
        dini_IntSet(file, "Component11", VehicleInfo[car][vComponent11]);
        dini_IntSet(file, "Component12", VehicleInfo[car][vComponent12]);
        dini_IntSet(file, "Component13", VehicleInfo[car][vComponent13]);
        dini_IntSet(file, "PaintJob", VehicleInfo[car][vPaintJob]);
        dini_IntSet(file, "Insurances", VehicleInfo[car][vInsurances]);
        dini_IntSet(file, "Destroys", VehicleInfo[car][vDestroys]);
        dini_IntSet(file, "Plate", VehicleInfo[car][vPlate]);
        dini_IntSet(file, "Ticket", VehicleInfo[car][vTicket]);
        // TRUUUUNK :D
        dini_IntSet(file, "Trunkslot1", VehicleInfo[car][vTrunk1]);
        dini_IntSet(file, "Trunkammo1", VehicleInfo[car][vTrunka1]);
        dini_IntSet(file, "Trunkslot2", VehicleInfo[car][vTrunk2]);
        dini_IntSet(file, "Trunkammo2", VehicleInfo[car][vTrunka2]);
        dini_IntSet(file, "Trunkslot3", VehicleInfo[car][vTrunk3]);
        dini_IntSet(file, "Trunkammo3", VehicleInfo[car][vTrunka3]);
        dini_IntSet(file, "Trunkslot4", VehicleInfo[car][vTrunk4]);
        dini_IntSet(file, "Trunkammo4", VehicleInfo[car][vTrunka4]);
        // Packageee
        dini_IntSet(file, "Package1", VehicleInfo[car][vPackage1]);
        dini_IntSet(file, "Package1a", VehicleInfo[car][vPackage1a]);
        dini_IntSet(file, "Package2", VehicleInfo[car][vPackage2]);
        dini_IntSet(file, "Package2a", VehicleInfo[car][vPackage2a]);
        dini_IntSet(file, "Package3", VehicleInfo[car][vPackage3]);
        dini_IntSet(file, "Package3a", VehicleInfo[car][vPackage3a]);
        dini_IntSet(file, "Package4", VehicleInfo[car][vPackage4]);
        dini_IntSet(file, "Package4a", VehicleInfo[car][vPackage4a]);
        dini_IntSet(file, "Package5", VehicleInfo[car][vPackage5]);
        dini_IntSet(file, "Package5a", VehicleInfo[car][vPackage5a]);
        dini_IntSet(file, "Package6", VehicleInfo[car][vPackage6]);
        dini_IntSet(file, "Package6a", VehicleInfo[car][vPackage6a]);
        dini_IntSet(file, "Package7", VehicleInfo[car][vPackage7]);
        dini_IntSet(file, "Package7a", VehicleInfo[car][vPackage7a]);
        dini_IntSet(file, "Package8", VehicleInfo[car][vPackage8]);
        dini_IntSet(file, "Package8a", VehicleInfo[car][vPackage8a]);
        dini_IntSet(file, "Package9", VehicleInfo[car][vPackage9]);
        dini_IntSet(file, "Package9a", VehicleInfo[car][vPackage9a]);
        dini_IntSet(file, "Package10", VehicleInfo[car][vPackage10]);
        dini_IntSet(file, "Package10a", VehicleInfo[car][vPackage10a]);
        // Fuel
        dini_IntSet(file, "Credit", VehicleInfo[car][vCredit]);
        dini_IntSet(file, "MaxInsurances", VehicleInfo[car][vMaxInsurances]);
        dini_FloatSet(file, "Fuel", Fuel[car]);
        dini_IntSet(file, "Health", VehicleInfo[car][vHealth]);
        // World
        dini_IntSet(file, "World", GetVehicleVirtualWorld(car));
        dini_IntSet(file, "Panels", VehicleInfo[car][vPanels]);
        dini_IntSet(file, "Doors", VehicleInfo[car][vDoors]);
        dini_IntSet(file, "Lights", VehicleInfo[car][vLights]);
        dini_IntSet(file, "Tires", VehicleInfo[car][vTires]);
        dini_IntSet(file, "Impound", VehicleInfo[car][vImpound]);
        dini_IntSet(file, "Kilometri", VehicleInfo[car][vKilometri]);
        //ByValentin.
        dini_IntSet(file, "Sasiu", VehicleInfo[car][vSasiu]);
        dini_Set(file, "Sasiu2", VehicleInfo[car][vSasiu2]);
        dini_IntSet(file, "Verify", VehicleInfo[car][vVerify]);
        dini_IntSet(file, "Ver1", VehicleInfo[car][vVer1]);
        dini_IntSet(file, "Ver2", VehicleInfo[car][vVer2]);
        dini_IntSet(file, "Ver3", VehicleInfo[car][vVer3]);
        dini_IntSet(file, "Radiom", VehicleInfo[car][vRadiom]);
        dini_IntSet(file, "EngineLife", VehicleInfo[car][vEngineLife]);
        dini_IntSet(file, "VerifyBy", VehicleInfo[car][vVerifyBy]);
    }
    return 1;
}

public LoadVehicles(playerid, string[])
{
    new file[256];
    new str2[256];
    new plname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, plname, sizeof(plname));
    format(file, sizeof(file), "IBP/Vehicles/%s.cfg", string);
    if(strcmp(string, PlayerVehicle[playerid][pVeh1], true) == 0)
    {
        PlayerInfo[playerid][pCarKey] = CreateVehicle(dini_Int(file, "Model"), dini_Float(file, "ParkX"), dini_Float(file, "ParkY"), dini_Float(file, "ParkZ"), dini_Float(file, "ParkAngle"), dini_Int(file, "Color1"), dini_Int(file, "Color2"), 60000);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], dini_Get(file, "Owner"), 0, strlen(dini_Get(file, "Owner")), 255);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], dini_Get(file, "Description"), 0, strlen(dini_Get(file, "Description")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] = dini_Int(file, "Model");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = dini_Float(file, "ParkX");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = dini_Float(file, "ParkY");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = dini_Float(file, "ParkZ");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = dini_Float(file, "ParkAngle");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorOne] = dini_Int(file, "color1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorTwo] = dini_Int(file, "color2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwned] = dini_Int(file, "Owned");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] = dini_Int(file, "Lock");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed] = dini_Int(file, "LockBuyed");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm] = dini_Int(file, "Alarm");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob] = dini_Int(file, "Immobaliser");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] = dini_Int(file, "GPS");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vKey] = dini_Int(file, "Key");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent0]=dini_Int(file, "Component0");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent1]=dini_Int(file, "Component1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent2]=dini_Int(file, "Component2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent3]=dini_Int(file, "Component3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent4]=dini_Int(file, "Component4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent5]=dini_Int(file, "Component5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent6]=dini_Int(file, "Component6");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent7]=dini_Int(file, "Component7");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent8]=dini_Int(file, "Component8");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent9]=dini_Int(file, "Component9");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent10]=dini_Int(file, "Component10");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent11]=dini_Int(file, "Component11");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent12]=dini_Int(file, "Component12");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent13]=dini_Int(file, "Component13");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPaintJob]=dini_Int(file, "PaintJob");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances]=dini_Int(file, "Insurances");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys]=dini_Int(file, "Destroys");
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vPlate], dini_Get(file, "Plate"), 0, strlen(dini_Get(file, "Plate")), 255);
        // trukn loading
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk1]=dini_Int(file, "Trunkslot1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka1]=dini_Int(file, "Trunkammo1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk2]=dini_Int(file, "Trunkslot2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka2]=dini_Int(file, "Trunkammo2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk3]=dini_Int(file, "Trunkslot3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka3]=dini_Int(file, "Trunkammo3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk4]=dini_Int(file, "Trunkslot4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka4]=dini_Int(file, "Trunkammo4");
        //Package system
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage1]=dini_Int(file, "Package1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage1a]=dini_Int(file, "Package1a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage2]=dini_Int(file, "Package2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage2a]=dini_Int(file, "Package2a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage3]=dini_Int(file, "Package3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage3a]=dini_Int(file, "Package3a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage4]=dini_Int(file, "Package4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage4a]=dini_Int(file, "Package4a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage5]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage5a]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage6]=dini_Int(file, "Package6");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage6a]=dini_Int(file, "Package6a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage7]=dini_Int(file, "Package7");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage7a]=dini_Int(file, "Package7a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage8]=dini_Int(file, "Package8");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage8a]=dini_Int(file, "Package8a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage9]=dini_Int(file, "Package9");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage9a]=dini_Int(file, "Package9a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage10]=dini_Int(file, "Package10");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage10a]=dini_Int(file, "Package10a");
        // Credit
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vCredit]=dini_Int(file, "Credit");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTicket]=dini_Int(file, "Ticket");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]=dini_Int(file, "MaxInsurances");
        // Stop loading trunk dude
        Fuel[PlayerInfo[playerid][pCarKey]]=dini_Float(file, "Fuel");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth]=dini_Int(file, "Health");
        // World
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vWorld]=dini_Int(file, "World");
        SetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey], VehicleInfo[PlayerInfo[playerid][pCarKey]][vWorld]);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPanels]=dini_Int(file, "Panels");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vDoors]=dini_Int(file, "Doors");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLights]=dini_Int(file, "Lights");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTires]=dini_Int(file, "Tires");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vImpound]=dini_Int(file, "Impound");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vKilometri] = dini_Int(file, "Kilometri");
        //ByValentin.
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2], dini_Get(file, "Sasiu2"), 0, strlen(dini_Get(file, "Sasiu2")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = dini_Int(file, "Sasiu2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = dini_Int(file, "Verify");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = dini_Int(file, "Ver1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = dini_Int(file, "Ver2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = dini_Int(file, "Ver3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = dini_Int(file, "Radiom");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = dini_Int(file, "EngineLife");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = dini_Int(file, "VerifyBy");
        
        LoadComp(PlayerInfo[playerid][pCarKey]);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunkLock] = 1;
        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] == 481)
        {
            EngineStatus[PlayerInfo[playerid][pCarKey]] = 1;
        }
        else
        {
            EngineStatus[PlayerInfo[playerid][pCarKey]] = 0;
        }
        if (!IsABike(PlayerInfo[playerid][pCarKey]))
        {
            if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] > 0)
            {
                LockCar(PlayerInfo[playerid][pCarKey]);
            }
            else UnLockCar(PlayerInfo[playerid][pCarKey]);
        }
        else UnLockCar(PlayerInfo[playerid][pCarKey]);
        
        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] == 0) { VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] = 1; }
        // Auto owner and auto desc
        format(str2, sizeof(str2), "%s.%s", plname, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
        if(strcmp(plname, VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], true) == 0)
        {
            // Good car
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], plname, 0, strlen(plname), 255);
        }
        if(strcmp(str2, VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], true) == 0)
        {
            // Good car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], str2, 0, strlen(str2), 255);
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], str2, 0, strlen(str2), 255);
        }
        if(PlayerInfo[playerid][pCarKey] >= IBPCARS)
        {
            if(IsAPlane(PlayerInfo[playerid][pCarKey]) || IsAdonatebike(PlayerInfo[playerid][pCarKey]) || IsABoat(PlayerInfo[playerid][pCarKey])) { return 1; }
            new Text[32];
            format(Text, sizeof(Text), "{000000}%s",VehicleInfo[PlayerInfo[playerid][pCarKey]][vPlate]);
            SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey], Text);
            SetVehicleToRespawn(PlayerInfo[playerid][pCarKey]);
        }
        return 1;
    }
    else if(strcmp(string, PlayerVehicle[playerid][pVeh2], true) == 0)
    {
        PlayerInfo[playerid][pCarKey] = CreateVehicle(dini_Int(file, "Model"), dini_Float(file, "ParkX"), dini_Float(file, "ParkY"), dini_Float(file, "ParkZ"), dini_Float(file, "ParkAngle"), dini_Int(file, "Color1"), dini_Int(file, "Color2"), 60000);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], dini_Get(file, "Owner"), 0, strlen(dini_Get(file, "Owner")), 255);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], dini_Get(file, "Description"), 0, strlen(dini_Get(file, "Description")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] = dini_Int(file, "Model");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = dini_Float(file, "ParkX");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = dini_Float(file, "ParkY");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = dini_Float(file, "ParkZ");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = dini_Float(file, "ParkAngle");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorOne] = dini_Int(file, "color1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorTwo] = dini_Int(file, "color2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwned] = dini_Int(file, "Owned");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] = dini_Int(file, "Lock");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed] = dini_Int(file, "LockBuyed");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm] = dini_Int(file, "Alarm");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob] = dini_Int(file, "Immobaliser");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] = dini_Int(file, "GPS");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vKey] = dini_Int(file, "Key");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent0]=dini_Int(file, "Component0");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent1]=dini_Int(file, "Component1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent2]=dini_Int(file, "Component2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent3]=dini_Int(file, "Component3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent4]=dini_Int(file, "Component4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent5]=dini_Int(file, "Component5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent6]=dini_Int(file, "Component6");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent7]=dini_Int(file, "Component7");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent8]=dini_Int(file, "Component8");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent9]=dini_Int(file, "Component9");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent10]=dini_Int(file, "Component10");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent11]=dini_Int(file, "Component11");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent12]=dini_Int(file, "Component12");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent13]=dini_Int(file, "Component13");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPaintJob]=dini_Int(file, "PaintJob");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances]=dini_Int(file, "Insurances");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys]=dini_Int(file, "Destroys");
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vPlate], dini_Get(file, "Plate"), 0, strlen(dini_Get(file, "Plate")), 255);
        // trukn loading
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk1]=dini_Int(file, "Trunkslot1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka1]=dini_Int(file, "Trunkammo1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk2]=dini_Int(file, "Trunkslot2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka2]=dini_Int(file, "Trunkammo2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk3]=dini_Int(file, "Trunkslot3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka3]=dini_Int(file, "Trunkammo3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk4]=dini_Int(file, "Trunkslot4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka4]=dini_Int(file, "Trunkammo4");
        //Package system
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage1]=dini_Int(file, "Package1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage1a]=dini_Int(file, "Package1a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage2]=dini_Int(file, "Package2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage2a]=dini_Int(file, "Package2a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage3]=dini_Int(file, "Package3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage3a]=dini_Int(file, "Package3a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage4]=dini_Int(file, "Package4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage4a]=dini_Int(file, "Package4a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage5]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage5a]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage6]=dini_Int(file, "Package6");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage6a]=dini_Int(file, "Package6a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage7]=dini_Int(file, "Package7");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage7a]=dini_Int(file, "Package7a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage8]=dini_Int(file, "Package8");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage8a]=dini_Int(file, "Package8a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage9]=dini_Int(file, "Package9");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage9a]=dini_Int(file, "Package9a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage10]=dini_Int(file, "Package10");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage10a]=dini_Int(file, "Package10a");
        // Credit
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vCredit]=dini_Int(file, "Credit");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTicket]=dini_Int(file, "Ticket");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]=dini_Int(file, "MaxInsurances");
        // Stop loading trunk dude
        Fuel[PlayerInfo[playerid][pCarKey]]=dini_Float(file, "Fuel");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth]=dini_Int(file, "Health");
        // World
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vWorld]=dini_Int(file, "World");
        SetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey], VehicleInfo[PlayerInfo[playerid][pCarKey]][vWorld]);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPanels]=dini_Int(file, "Panels");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vDoors]=dini_Int(file, "Doors");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLights]=dini_Int(file, "Lights");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTires]=dini_Int(file, "Tires");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vImpound]=dini_Int(file, "Impound");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vKilometri] = dini_Int(file, "Kilometri");
        //ByValentin.
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2], dini_Get(file, "Sasiu2"), 0, strlen(dini_Get(file, "Sasiu2")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = dini_Int(file, "Sasiu2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = dini_Int(file, "Verify");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = dini_Int(file, "Ver1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = dini_Int(file, "Ver2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = dini_Int(file, "Ver3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = dini_Int(file, "Radiom");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = dini_Int(file, "EngineLife");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = dini_Int(file, "VerifyBy");
        
        LoadComp(PlayerInfo[playerid][pCarKey]);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunkLock] = 1;
        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] == 481)
        {
            EngineStatus[PlayerInfo[playerid][pCarKey]] = 1;
        }
        else
        {
            EngineStatus[PlayerInfo[playerid][pCarKey]] = 0;
        }
        if (!IsABike(PlayerInfo[playerid][pCarKey]))
        {
            if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] > 0)
            {
                LockCar(PlayerInfo[playerid][pCarKey]);
            }
            else UnLockCar(PlayerInfo[playerid][pCarKey]);
        }
        else UnLockCar(PlayerInfo[playerid][pCarKey]);

        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] == 0)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] = 1;
        }
        // Auto owner and auto desc
        format(str2, sizeof(str2), "%s.%s", plname, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
        if(strcmp(plname, VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], true) == 0)
        {
            // Good car
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], plname, 0, strlen(plname), 255);
        }
        if(strcmp(str2, VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], true) == 0)
        {
            // Good car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], str2, 0, strlen(str2), 255);
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], str2, 0, strlen(str2), 255);
        }
        if(PlayerInfo[playerid][pCarKey] >= IBPCARS)
        {
            if(IsAPlane(PlayerInfo[playerid][pCarKey]) || IsAdonatebike(PlayerInfo[playerid][pCarKey]) || IsABoat(PlayerInfo[playerid][pCarKey]))
            {
                return 1;
            }
            new Text[32];
            format(Text, sizeof(Text), "{000000}%s",VehicleInfo[PlayerInfo[playerid][pCarKey]][vPlate]);
            SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey], Text);
            SetVehicleToRespawn(PlayerInfo[playerid][pCarKey]);
        }
        return 1;
    }
    else if(strcmp(string, PlayerVehicle[playerid][pVeh3], true) == 0)
    {
        PlayerInfo[playerid][pCarKey] = CreateVehicle(dini_Int(file, "Model"), dini_Float(file, "ParkX"), dini_Float(file, "ParkY"), dini_Float(file, "ParkZ"), dini_Float(file, "ParkAngle"), dini_Int(file, "Color1"), dini_Int(file, "Color2"), 60000);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], dini_Get(file, "Owner"), 0, strlen(dini_Get(file, "Owner")), 255);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], dini_Get(file, "Description"), 0, strlen(dini_Get(file, "Description")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] = dini_Int(file, "Model");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = dini_Float(file, "ParkX");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = dini_Float(file, "ParkY");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = dini_Float(file, "ParkZ");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = dini_Float(file, "ParkAngle");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorOne] = dini_Int(file, "color1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorTwo] = dini_Int(file, "color2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwned] = dini_Int(file, "Owned");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] = dini_Int(file, "Lock");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed] = dini_Int(file, "LockBuyed");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm] = dini_Int(file, "Alarm");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob] = dini_Int(file, "Immobaliser");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] = dini_Int(file, "GPS");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vKey] = dini_Int(file, "Key");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent0]=dini_Int(file, "Component0");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent1]=dini_Int(file, "Component1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent2]=dini_Int(file, "Component2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent3]=dini_Int(file, "Component3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent4]=dini_Int(file, "Component4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent5]=dini_Int(file, "Component5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent6]=dini_Int(file, "Component6");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent7]=dini_Int(file, "Component7");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent8]=dini_Int(file, "Component8");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent9]=dini_Int(file, "Component9");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent10]=dini_Int(file, "Component10");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent11]=dini_Int(file, "Component11");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent12]=dini_Int(file, "Component12");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent13]=dini_Int(file, "Component13");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPaintJob]=dini_Int(file, "PaintJob");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances]=dini_Int(file, "Insurances");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys]=dini_Int(file, "Destroys");
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vPlate], dini_Get(file, "Plate"), 0, strlen(dini_Get(file, "Plate")), 255);
        // trukn loading
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk1]=dini_Int(file, "Trunkslot1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka1]=dini_Int(file, "Trunkammo1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk2]=dini_Int(file, "Trunkslot2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka2]=dini_Int(file, "Trunkammo2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk3]=dini_Int(file, "Trunkslot3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka3]=dini_Int(file, "Trunkammo3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk4]=dini_Int(file, "Trunkslot4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka4]=dini_Int(file, "Trunkammo4");
        //Package system
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage1]=dini_Int(file, "Package1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage1a]=dini_Int(file, "Package1a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage2]=dini_Int(file, "Package2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage2a]=dini_Int(file, "Package2a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage3]=dini_Int(file, "Package3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage3a]=dini_Int(file, "Package3a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage4]=dini_Int(file, "Package4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage4a]=dini_Int(file, "Package4a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage5]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage5a]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage6]=dini_Int(file, "Package6");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage6a]=dini_Int(file, "Package6a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage7]=dini_Int(file, "Package7");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage7a]=dini_Int(file, "Package7a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage8]=dini_Int(file, "Package8");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage8a]=dini_Int(file, "Package8a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage9]=dini_Int(file, "Package9");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage9a]=dini_Int(file, "Package9a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage10]=dini_Int(file, "Package10");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage10a]=dini_Int(file, "Package10a");
        // Credit
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vCredit]=dini_Int(file, "Credit");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTicket]=dini_Int(file, "Ticket");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]=dini_Int(file, "MaxInsurances");
        // Stop loading trunk dude
        Fuel[PlayerInfo[playerid][pCarKey]]=dini_Float(file, "Fuel");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth]=dini_Int(file, "Health");
        // World
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vWorld]=dini_Int(file, "World");
        SetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey], VehicleInfo[PlayerInfo[playerid][pCarKey]][vWorld]);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPanels]=dini_Int(file, "Panels");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vDoors]=dini_Int(file, "Doors");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLights]=dini_Int(file, "Lights");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTires]=dini_Int(file, "Tires");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vImpound]=dini_Int(file, "Impound");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vKilometri] = dini_Int(file, "Kilometri");
        //ByValentin.
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2], dini_Get(file, "Sasiu2"), 0, strlen(dini_Get(file, "Sasiu2")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = dini_Int(file, "Sasiu2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = dini_Int(file, "Verify");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = dini_Int(file, "Ver1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = dini_Int(file, "Ver2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = dini_Int(file, "Ver3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = dini_Int(file, "Radiom");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = dini_Int(file, "EngineLife");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = dini_Int(file, "VerifyBy");
        
        LoadComp(PlayerInfo[playerid][pCarKey]);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunkLock] = 1;
        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] == 481)
        {
            EngineStatus[PlayerInfo[playerid][pCarKey]] = 1;
        }
        else
        {
            EngineStatus[PlayerInfo[playerid][pCarKey]] = 0;
        }
        if (!IsABike(PlayerInfo[playerid][pCarKey]))
        {
            if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] > 0)
            {
                LockCar(PlayerInfo[playerid][pCarKey]);
            }
            else UnLockCar(PlayerInfo[playerid][pCarKey]);
        }
        else UnLockCar(PlayerInfo[playerid][pCarKey]);

        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] == 0)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] = 1;
        }
        // Auto owner and auto desc
        format(str2, sizeof(str2), "%s.%s", plname, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
        if(strcmp(plname, VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], true) == 0)
        {
            // Good car
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], plname, 0, strlen(plname), 255);
        }
        if(strcmp(str2, VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], true) == 0)
        {
            // Good car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], str2, 0, strlen(str2), 255);
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], str2, 0, strlen(str2), 255);
        }
        if(PlayerInfo[playerid][pCarKey] >= IBPCARS)
        {
            if(IsAPlane(PlayerInfo[playerid][pCarKey]) || IsAdonatebike(PlayerInfo[playerid][pCarKey]) || IsABoat(PlayerInfo[playerid][pCarKey]))
            {
                return 1;
            }
            new Text[32];
            format(Text, sizeof(Text), "{000000}%s",VehicleInfo[PlayerInfo[playerid][pCarKey]][vPlate]);
            SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey], Text);
            SetVehicleToRespawn(PlayerInfo[playerid][pCarKey]);
        }
        return 1;
    }
    else if(strcmp(string, PlayerVehicle[playerid][pVeh4], true) == 0)
    {
        PlayerInfo[playerid][pCarKey] = CreateVehicle(dini_Int(file, "Model"), dini_Float(file, "ParkX"), dini_Float(file, "ParkY"), dini_Float(file, "ParkZ"), dini_Float(file, "ParkAngle"), dini_Int(file, "Color1"), dini_Int(file, "Color2"), 60000);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], dini_Get(file, "Owner"), 0, strlen(dini_Get(file, "Owner")), 255);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], dini_Get(file, "Description"), 0, strlen(dini_Get(file, "Description")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] = dini_Int(file, "Model");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = dini_Float(file, "ParkX");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = dini_Float(file, "ParkY");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = dini_Float(file, "ParkZ");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = dini_Float(file, "ParkAngle");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorOne] = dini_Int(file, "color1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorTwo] = dini_Int(file, "color2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwned] = dini_Int(file, "Owned");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] = dini_Int(file, "Lock");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed] = dini_Int(file, "LockBuyed");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm] = dini_Int(file, "Alarm");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob] = dini_Int(file, "Immobaliser");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] = dini_Int(file, "GPS");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vKey] = dini_Int(file, "Key");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent0]=dini_Int(file, "Component0");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent1]=dini_Int(file, "Component1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent2]=dini_Int(file, "Component2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent3]=dini_Int(file, "Component3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent4]=dini_Int(file, "Component4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent5]=dini_Int(file, "Component5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent6]=dini_Int(file, "Component6");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent7]=dini_Int(file, "Component7");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent8]=dini_Int(file, "Component8");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent9]=dini_Int(file, "Component9");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent10]=dini_Int(file, "Component10");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent11]=dini_Int(file, "Component11");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent12]=dini_Int(file, "Component12");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent13]=dini_Int(file, "Component13");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPaintJob]=dini_Int(file, "PaintJob");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances]=dini_Int(file, "Insurances");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys]=dini_Int(file, "Destroys");
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vPlate], dini_Get(file, "Plate"), 0, strlen(dini_Get(file, "Plate")), 255);
        // trukn loading
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk1]=dini_Int(file, "Trunkslot1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka1]=dini_Int(file, "Trunkammo1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk2]=dini_Int(file, "Trunkslot2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka2]=dini_Int(file, "Trunkammo2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk3]=dini_Int(file, "Trunkslot3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka3]=dini_Int(file, "Trunkammo3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk4]=dini_Int(file, "Trunkslot4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka4]=dini_Int(file, "Trunkammo4");
        //Package system
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage1]=dini_Int(file, "Package1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage1a]=dini_Int(file, "Package1a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage2]=dini_Int(file, "Package2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage2a]=dini_Int(file, "Package2a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage3]=dini_Int(file, "Package3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage3a]=dini_Int(file, "Package3a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage4]=dini_Int(file, "Package4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage4a]=dini_Int(file, "Package4a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage5]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage5a]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage6]=dini_Int(file, "Package6");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage6a]=dini_Int(file, "Package6a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage7]=dini_Int(file, "Package7");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage7a]=dini_Int(file, "Package7a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage8]=dini_Int(file, "Package8");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage8a]=dini_Int(file, "Package8a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage9]=dini_Int(file, "Package9");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage9a]=dini_Int(file, "Package9a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage10]=dini_Int(file, "Package10");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage10a]=dini_Int(file, "Package10a");
        // Credit
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vCredit]=dini_Int(file, "Credit");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTicket]=dini_Int(file, "Ticket");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]=dini_Int(file, "MaxInsurances");
        // Stop loading trunk dude
        Fuel[PlayerInfo[playerid][pCarKey]]=dini_Float(file, "Fuel");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth]=dini_Int(file, "Health");
        // World
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vWorld]=dini_Int(file, "World");
        SetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey], VehicleInfo[PlayerInfo[playerid][pCarKey]][vWorld]);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPanels]=dini_Int(file, "Panels");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vDoors]=dini_Int(file, "Doors");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLights]=dini_Int(file, "Lights");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTires]=dini_Int(file, "Tires");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vImpound]=dini_Int(file, "Impound");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vKilometri] = dini_Int(file, "Kilometri");
        //ByValentin.
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2], dini_Get(file, "Sasiu2"), 0, strlen(dini_Get(file, "Sasiu2")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = dini_Int(file, "Sasiu2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = dini_Int(file, "Verify");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = dini_Int(file, "Ver1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = dini_Int(file, "Ver2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = dini_Int(file, "Ver3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = dini_Int(file, "Radiom");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = dini_Int(file, "EngineLife");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = dini_Int(file, "VerifyBy");
        
        LoadComp(PlayerInfo[playerid][pCarKey]);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunkLock] = 1;
        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] == 481)
        {
            EngineStatus[PlayerInfo[playerid][pCarKey]] = 1;
        }
        else
        {
            EngineStatus[PlayerInfo[playerid][pCarKey]] = 0;
        }
        if (!IsABike(PlayerInfo[playerid][pCarKey]))
        {
            if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] > 0)
            {
                LockCar(PlayerInfo[playerid][pCarKey]);
            }
            else UnLockCar(PlayerInfo[playerid][pCarKey]);
        }
        else UnLockCar(PlayerInfo[playerid][pCarKey]);

        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] == 0)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] = 1;
        }
        // Auto owner and auto desc
        format(str2, sizeof(str2), "%s.%s", plname, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
        if(strcmp(plname, VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], true) == 0)
        {
            // Good car
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], plname, 0, strlen(plname), 255);
        }
        if(strcmp(str2, VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], true) == 0)
        {
            // Good car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], str2, 0, strlen(str2), 255);
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], str2, 0, strlen(str2), 255);
        }
        if(PlayerInfo[playerid][pCarKey] >= IBPCARS)
        {
            if(IsAPlane(PlayerInfo[playerid][pCarKey]) || IsAdonatebike(PlayerInfo[playerid][pCarKey]) || IsABoat(PlayerInfo[playerid][pCarKey]))
            {
                return 1;
            }
            new Text[32];
            format(Text, sizeof(Text), "{000000}%s",VehicleInfo[PlayerInfo[playerid][pCarKey]][vPlate]);
            SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey], Text);
            SetVehicleToRespawn(PlayerInfo[playerid][pCarKey]);
        }
        return 1;
    }
    else if(strcmp(string, PlayerVehicle[playerid][pVeh5], true) == 0)
    {
        PlayerInfo[playerid][pCarKey] = CreateVehicle(dini_Int(file, "Model"), dini_Float(file, "ParkX"), dini_Float(file, "ParkY"), dini_Float(file, "ParkZ"), dini_Float(file, "ParkAngle"), dini_Int(file, "Color1"), dini_Int(file, "Color2"), 60000);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], dini_Get(file, "Owner"), 0, strlen(dini_Get(file, "Owner")), 255);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], dini_Get(file, "Description"), 0, strlen(dini_Get(file, "Description")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] = dini_Int(file, "Model");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = dini_Float(file, "ParkX");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = dini_Float(file, "ParkY");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = dini_Float(file, "ParkZ");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = dini_Float(file, "ParkAngle");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorOne] = dini_Int(file, "color1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorTwo] = dini_Int(file, "color2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwned] = dini_Int(file, "Owned");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] = dini_Int(file, "Lock");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed] = dini_Int(file, "LockBuyed");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm] = dini_Int(file, "Alarm");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob] = dini_Int(file, "Immobaliser");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] = dini_Int(file, "GPS");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vKey] = dini_Int(file, "Key");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent0]=dini_Int(file, "Component0");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent1]=dini_Int(file, "Component1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent2]=dini_Int(file, "Component2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent3]=dini_Int(file, "Component3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent4]=dini_Int(file, "Component4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent5]=dini_Int(file, "Component5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent6]=dini_Int(file, "Component6");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent7]=dini_Int(file, "Component7");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent8]=dini_Int(file, "Component8");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent9]=dini_Int(file, "Component9");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent10]=dini_Int(file, "Component10");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent11]=dini_Int(file, "Component11");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent12]=dini_Int(file, "Component12");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent13]=dini_Int(file, "Component13");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPaintJob]=dini_Int(file, "PaintJob");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances]=dini_Int(file, "Insurances");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys]=dini_Int(file, "Destroys");
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vPlate], dini_Get(file, "Plate"), 0, strlen(dini_Get(file, "Plate")), 255);
        // trukn loading
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk1]=dini_Int(file, "Trunkslot1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka1]=dini_Int(file, "Trunkammo1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk2]=dini_Int(file, "Trunkslot2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka2]=dini_Int(file, "Trunkammo2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk3]=dini_Int(file, "Trunkslot3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka3]=dini_Int(file, "Trunkammo3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk4]=dini_Int(file, "Trunkslot4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka4]=dini_Int(file, "Trunkammo4");
        //Package system
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage1]=dini_Int(file, "Package1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage1a]=dini_Int(file, "Package1a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage2]=dini_Int(file, "Package2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage2a]=dini_Int(file, "Package2a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage3]=dini_Int(file, "Package3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage3a]=dini_Int(file, "Package3a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage4]=dini_Int(file, "Package4");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage4a]=dini_Int(file, "Package4a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage5]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage5a]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage6]=dini_Int(file, "Package6");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage6a]=dini_Int(file, "Package6a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage7]=dini_Int(file, "Package7");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage7a]=dini_Int(file, "Package7a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage8]=dini_Int(file, "Package8");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage8a]=dini_Int(file, "Package8a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage9]=dini_Int(file, "Package9");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage9a]=dini_Int(file, "Package9a");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage10]=dini_Int(file, "Package10");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPackage10a]=dini_Int(file, "Package10a");
        // Credit
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vCredit]=dini_Int(file, "Credit");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTicket]=dini_Int(file, "Ticket");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances]=dini_Int(file, "MaxInsurances");
        // Stop loading trunk dude
        Fuel[PlayerInfo[playerid][pCarKey]]=dini_Float(file, "Fuel");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vHealth]=dini_Int(file, "Health");
        // World
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vWorld]=dini_Int(file, "World");
        SetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey], VehicleInfo[PlayerInfo[playerid][pCarKey]][vWorld]);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vPanels]=dini_Int(file, "Panels");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vDoors]=dini_Int(file, "Doors");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vLights]=dini_Int(file, "Lights");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTires]=dini_Int(file, "Tires");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vImpound]=dini_Int(file, "Impound");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vKilometri] = dini_Int(file, "Kilometri");
        //ByValentin.
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2], dini_Get(file, "Sasiu2"), 0, strlen(dini_Get(file, "Sasiu2")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = dini_Int(file, "Sasiu2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = dini_Int(file, "Verify");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = dini_Int(file, "Ver1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = dini_Int(file, "Ver2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = dini_Int(file, "Ver3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = dini_Int(file, "Radiom");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = dini_Int(file, "EngineLife");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = dini_Int(file, "VerifyBy");
        
        LoadComp(PlayerInfo[playerid][pCarKey]);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunkLock] = 1;
        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] == 481)
        {
            EngineStatus[PlayerInfo[playerid][pCarKey]] = 1;
        }
        else
        {
            EngineStatus[PlayerInfo[playerid][pCarKey]] = 0;
        }
        if (!IsABike(PlayerInfo[playerid][pCarKey]))
        {
            if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] > 0)
            {
                LockCar(PlayerInfo[playerid][pCarKey]);
            }
            else UnLockCar(PlayerInfo[playerid][pCarKey]);
        }
        else UnLockCar(PlayerInfo[playerid][pCarKey]);

        if(VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] == 0)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] = 1;
        }
        // Auto owner and auto desc
        format(str2, sizeof(str2), "%s.%s", plname, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
        if(strcmp(plname, VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], true) == 0)
        {
            // Good car
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], plname, 0, strlen(plname), 255);
        }
        if(strcmp(str2, VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], true) == 0)
        {
            // Good car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], str2, 0, strlen(str2), 255);
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], str2, 0, strlen(str2), 255);
        }
        if(PlayerInfo[playerid][pCarKey] >= IBPCARS)
        {
            if(IsAPlane(PlayerInfo[playerid][pCarKey]) || IsAdonatebike(PlayerInfo[playerid][pCarKey]) || IsABoat(PlayerInfo[playerid][pCarKey]))
            {
                return 1;
            }
            new Text[32];
            format(Text, sizeof(Text), "{000000}%s",VehicleInfo[PlayerInfo[playerid][pCarKey]][vPlate]);
            SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey], Text);
            SetVehicleToRespawn(PlayerInfo[playerid][pCarKey]);
        }
        return 1;
    }
    return 1;
}

public LoadVehicles2(playerid, string[])
{
    new file[256];
    new str2[256];
    new plname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, plname, sizeof(plname));
    format(file, sizeof(file), "IBP/Vehicles/%s.cfg", string);
    if(strcmp(string, PlayerVehicle[playerid][pVeh1], true) == 0)
    {
        PlayerInfo[playerid][pCarKey2] = CreateVehicle(dini_Int(file, "Model"), dini_Float(file, "ParkX"), dini_Float(file, "ParkY"), dini_Float(file, "ParkZ"), dini_Float(file, "ParkAngle"), dini_Int(file, "Color1"), dini_Int(file, "Color2"), 60000);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], dini_Get(file, "Owner"), 0, strlen(dini_Get(file, "Owner")), 255);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], dini_Get(file, "Description"), 0, strlen(dini_Get(file, "Description")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vModel] = dini_Int(file, "Model");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vX] = dini_Float(file, "ParkX");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vY] = dini_Float(file, "ParkY");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vZ] = dini_Float(file, "ParkZ");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vAngle] = dini_Float(file, "ParkAngle");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vColorOne] = dini_Int(file, "color1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vColorTwo] = dini_Int(file, "color2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwned] = dini_Int(file, "Owned");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] = dini_Int(file, "Lock");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLockBuyed] = dini_Int(file, "LockBuyed");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vAlarm] = dini_Int(file, "Alarm");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vImmob] = dini_Int(file, "Immobaliser");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] = dini_Int(file, "GPS");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vKey] = dini_Int(file, "Key");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent0]=dini_Int(file, "Component0");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent1]=dini_Int(file, "Component1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent2]=dini_Int(file, "Component2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent3]=dini_Int(file, "Component3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent4]=dini_Int(file, "Component4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent5]=dini_Int(file, "Component5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent6]=dini_Int(file, "Component6");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent7]=dini_Int(file, "Component7");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent8]=dini_Int(file, "Component8");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent9]=dini_Int(file, "Component9");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent10]=dini_Int(file, "Component10");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent11]=dini_Int(file, "Component11");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent12]=dini_Int(file, "Component12");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent13]=dini_Int(file, "Component13");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPaintJob]=dini_Int(file, "PaintJob");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vInsurances]=dini_Int(file, "Insurances");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDestroys]=dini_Int(file, "Destroys");
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPlate], dini_Get(file, "Plate"), 0, strlen(dini_Get(file, "Plate")), 255);
        // trukn loading
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk1]=dini_Int(file, "Trunkslot1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka1]=dini_Int(file, "Trunkammo1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk2]=dini_Int(file, "Trunkslot2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka2]=dini_Int(file, "Trunkammo2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk3]=dini_Int(file, "Trunkslot3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka3]=dini_Int(file, "Trunkammo3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk4]=dini_Int(file, "Trunkslot4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka4]=dini_Int(file, "Trunkammo4");
        //Package system
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage1]=dini_Int(file, "Package1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage1a]=dini_Int(file, "Package1a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage2]=dini_Int(file, "Package2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage2a]=dini_Int(file, "Package2a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage3]=dini_Int(file, "Package3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage3a]=dini_Int(file, "Package3a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage4]=dini_Int(file, "Package4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage4a]=dini_Int(file, "Package4a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage5]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage5a]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage6]=dini_Int(file, "Package6");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage6a]=dini_Int(file, "Package6a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage7]=dini_Int(file, "Package7");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage7a]=dini_Int(file, "Package7a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage8]=dini_Int(file, "Package8");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage8a]=dini_Int(file, "Package8a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage9]=dini_Int(file, "Package9");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage9a]=dini_Int(file, "Package9a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage10]=dini_Int(file, "Package10");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage10a]=dini_Int(file, "Package10a");
        // Credit
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vCredit]=dini_Int(file, "Credit");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTicket]=dini_Int(file, "Ticket");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances]=dini_Int(file, "MaxInsurances");
        // Stop loading trunk dude
        Fuel[PlayerInfo[playerid][pCarKey2]]=dini_Float(file, "Fuel");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vHealth]=dini_Int(file, "Health");
        // World
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vWorld]=dini_Int(file, "World");
        SetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey2], VehicleInfo[PlayerInfo[playerid][pCarKey2]][vWorld]);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPanels]=dini_Int(file, "Panels");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDoors]=dini_Int(file, "Doors");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLights]=dini_Int(file, "Lights");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTires]=dini_Int(file, "Tires");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vImpound]=dini_Int(file, "Impound");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vKilometri] = dini_Int(file, "Kilometri");
        //ByValentin.
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2], dini_Get(file, "Sasiu2"), 0, strlen(dini_Get(file, "Sasiu2")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = dini_Int(file, "Sasiu2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = dini_Int(file, "Verify");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = dini_Int(file, "Ver1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = dini_Int(file, "Ver2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = dini_Int(file, "Ver3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = dini_Int(file, "Radiom");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = dini_Int(file, "EngineLife");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = dini_Int(file, "VerifyBy");

        LoadComp(PlayerInfo[playerid][pCarKey2]);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunkLock] = 1;
        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vModel] == 481)
        {
            EngineStatus[PlayerInfo[playerid][pCarKey2]] = 1;
        }
        else
        {
            EngineStatus[PlayerInfo[playerid][pCarKey2]] = 0;
        }
        if (!IsABike(PlayerInfo[playerid][pCarKey2]))
        {
            if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] > 0)
            {
                LockCar(PlayerInfo[playerid][pCarKey2]);
            }
            else UnLockCar(PlayerInfo[playerid][pCarKey2]);
        }
        else UnLockCar(PlayerInfo[playerid][pCarKey2]);

        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] == 0) { VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] = 1; }
        // Auto owner and auto desc
        format(str2, sizeof(str2), "%s.%s", plname, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400]);
        if(strcmp(plname, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], true) == 0)
        {
            // Good car
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], plname, 0, strlen(plname), 255);
        }
        if(strcmp(str2, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], true) == 0)
        {
            // Good car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], str2, 0, strlen(str2), 255);
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], str2, 0, strlen(str2), 255);
        }
        if(PlayerInfo[playerid][pCarKey2] >= IBPCARS)
        {
            if(IsAPlane(PlayerInfo[playerid][pCarKey2]) || IsAdonatebike(PlayerInfo[playerid][pCarKey2]) || IsABoat(PlayerInfo[playerid][pCarKey2])) { return 1; }
            new Text[32];
            format(Text, sizeof(Text), "{000000}%s",VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPlate]);
            SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey2], Text);
            SetVehicleToRespawn(PlayerInfo[playerid][pCarKey2]);
        }
        return 1;
    }
    else if(strcmp(string, PlayerVehicle[playerid][pVeh2], true) == 0)
    {
        PlayerInfo[playerid][pCarKey2] = CreateVehicle(dini_Int(file, "Model"), dini_Float(file, "ParkX"), dini_Float(file, "ParkY"), dini_Float(file, "ParkZ"), dini_Float(file, "ParkAngle"), dini_Int(file, "Color1"), dini_Int(file, "Color2"), 60000);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], dini_Get(file, "Owner"), 0, strlen(dini_Get(file, "Owner")), 255);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], dini_Get(file, "Description"), 0, strlen(dini_Get(file, "Description")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vModel] = dini_Int(file, "Model");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vX] = dini_Float(file, "ParkX");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vY] = dini_Float(file, "ParkY");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vZ] = dini_Float(file, "ParkZ");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vAngle] = dini_Float(file, "ParkAngle");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vColorOne] = dini_Int(file, "color1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vColorTwo] = dini_Int(file, "color2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwned] = dini_Int(file, "Owned");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] = dini_Int(file, "Lock");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLockBuyed] = dini_Int(file, "LockBuyed");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vAlarm] = dini_Int(file, "Alarm");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vImmob] = dini_Int(file, "Immobaliser");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] = dini_Int(file, "GPS");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vKey] = dini_Int(file, "Key");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent0]=dini_Int(file, "Component0");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent1]=dini_Int(file, "Component1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent2]=dini_Int(file, "Component2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent3]=dini_Int(file, "Component3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent4]=dini_Int(file, "Component4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent5]=dini_Int(file, "Component5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent6]=dini_Int(file, "Component6");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent7]=dini_Int(file, "Component7");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent8]=dini_Int(file, "Component8");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent9]=dini_Int(file, "Component9");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent10]=dini_Int(file, "Component10");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent11]=dini_Int(file, "Component11");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent12]=dini_Int(file, "Component12");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent13]=dini_Int(file, "Component13");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPaintJob]=dini_Int(file, "PaintJob");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vInsurances]=dini_Int(file, "Insurances");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDestroys]=dini_Int(file, "Destroys");
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPlate], dini_Get(file, "Plate"), 0, strlen(dini_Get(file, "Plate")), 255);
        // trukn loading
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk1]=dini_Int(file, "Trunkslot1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka1]=dini_Int(file, "Trunkammo1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk2]=dini_Int(file, "Trunkslot2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka2]=dini_Int(file, "Trunkammo2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk3]=dini_Int(file, "Trunkslot3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka3]=dini_Int(file, "Trunkammo3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk4]=dini_Int(file, "Trunkslot4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka4]=dini_Int(file, "Trunkammo4");
        //Package system
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage1]=dini_Int(file, "Package1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage1a]=dini_Int(file, "Package1a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage2]=dini_Int(file, "Package2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage2a]=dini_Int(file, "Package2a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage3]=dini_Int(file, "Package3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage3a]=dini_Int(file, "Package3a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage4]=dini_Int(file, "Package4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage4a]=dini_Int(file, "Package4a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage5]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage5a]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage6]=dini_Int(file, "Package6");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage6a]=dini_Int(file, "Package6a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage7]=dini_Int(file, "Package7");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage7a]=dini_Int(file, "Package7a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage8]=dini_Int(file, "Package8");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage8a]=dini_Int(file, "Package8a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage9]=dini_Int(file, "Package9");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage9a]=dini_Int(file, "Package9a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage10]=dini_Int(file, "Package10");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage10a]=dini_Int(file, "Package10a");
        // Credit
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vCredit]=dini_Int(file, "Credit");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTicket]=dini_Int(file, "Ticket");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances]=dini_Int(file, "MaxInsurances");
        // Stop loading trunk dude
        Fuel[PlayerInfo[playerid][pCarKey2]]=dini_Float(file, "Fuel");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vHealth]=dini_Int(file, "Health");
        // World
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vWorld]=dini_Int(file, "World");
        SetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey2], VehicleInfo[PlayerInfo[playerid][pCarKey2]][vWorld]);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPanels]=dini_Int(file, "Panels");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDoors]=dini_Int(file, "Doors");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLights]=dini_Int(file, "Lights");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTires]=dini_Int(file, "Tires");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vImpound]=dini_Int(file, "Impound");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vKilometri] = dini_Int(file, "Kilometri");
        //ByValentin.
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2], dini_Get(file, "Sasiu2"), 0, strlen(dini_Get(file, "Sasiu2")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = dini_Int(file, "Sasiu2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = dini_Int(file, "Verify");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = dini_Int(file, "Ver1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = dini_Int(file, "Ver2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = dini_Int(file, "Ver3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = dini_Int(file, "Radiom");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = dini_Int(file, "EngineLife");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = dini_Int(file, "VerifyBy");

        LoadComp(PlayerInfo[playerid][pCarKey2]);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunkLock] = 1;
        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vModel] == 481)
        {
            EngineStatus[PlayerInfo[playerid][pCarKey2]] = 1;
        }
        else
        {
            EngineStatus[PlayerInfo[playerid][pCarKey2]] = 0;
        }
        if (!IsABike(PlayerInfo[playerid][pCarKey2]))
        {
            if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] > 0)
            {
                LockCar(PlayerInfo[playerid][pCarKey2]);
            }
            else UnLockCar(PlayerInfo[playerid][pCarKey2]);
        }
        else UnLockCar(PlayerInfo[playerid][pCarKey2]);

        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] == 0)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] = 1;
        }
        // Auto owner and auto desc
        format(str2, sizeof(str2), "%s.%s", plname, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400]);
        if(strcmp(plname, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], true) == 0)
        {
            // Good car
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], plname, 0, strlen(plname), 255);
        }
        if(strcmp(str2, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], true) == 0)
        {
            // Good car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], str2, 0, strlen(str2), 255);
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], str2, 0, strlen(str2), 255);
        }
        if(PlayerInfo[playerid][pCarKey2] >= IBPCARS)
        {
            if(IsAPlane(PlayerInfo[playerid][pCarKey2]) || IsAdonatebike(PlayerInfo[playerid][pCarKey2]) || IsABoat(PlayerInfo[playerid][pCarKey2]))
            {
                return 1;
            }
            new Text[32];
            format(Text, sizeof(Text), "{000000}%s",VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPlate]);
            SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey2], Text);
            SetVehicleToRespawn(PlayerInfo[playerid][pCarKey2]);
        }
        return 1;
    }
    else if(strcmp(string, PlayerVehicle[playerid][pVeh3], true) == 0)
    {
        PlayerInfo[playerid][pCarKey2] = CreateVehicle(dini_Int(file, "Model"), dini_Float(file, "ParkX"), dini_Float(file, "ParkY"), dini_Float(file, "ParkZ"), dini_Float(file, "ParkAngle"), dini_Int(file, "Color1"), dini_Int(file, "Color2"), 60000);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], dini_Get(file, "Owner"), 0, strlen(dini_Get(file, "Owner")), 255);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], dini_Get(file, "Description"), 0, strlen(dini_Get(file, "Description")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vModel] = dini_Int(file, "Model");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vX] = dini_Float(file, "ParkX");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vY] = dini_Float(file, "ParkY");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vZ] = dini_Float(file, "ParkZ");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vAngle] = dini_Float(file, "ParkAngle");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vColorOne] = dini_Int(file, "color1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vColorTwo] = dini_Int(file, "color2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwned] = dini_Int(file, "Owned");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] = dini_Int(file, "Lock");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLockBuyed] = dini_Int(file, "LockBuyed");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vAlarm] = dini_Int(file, "Alarm");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vImmob] = dini_Int(file, "Immobaliser");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] = dini_Int(file, "GPS");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vKey] = dini_Int(file, "Key");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent0]=dini_Int(file, "Component0");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent1]=dini_Int(file, "Component1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent2]=dini_Int(file, "Component2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent3]=dini_Int(file, "Component3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent4]=dini_Int(file, "Component4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent5]=dini_Int(file, "Component5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent6]=dini_Int(file, "Component6");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent7]=dini_Int(file, "Component7");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent8]=dini_Int(file, "Component8");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent9]=dini_Int(file, "Component9");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent10]=dini_Int(file, "Component10");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent11]=dini_Int(file, "Component11");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent12]=dini_Int(file, "Component12");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent13]=dini_Int(file, "Component13");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPaintJob]=dini_Int(file, "PaintJob");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vInsurances]=dini_Int(file, "Insurances");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDestroys]=dini_Int(file, "Destroys");
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPlate], dini_Get(file, "Plate"), 0, strlen(dini_Get(file, "Plate")), 255);
        // trukn loading
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk1]=dini_Int(file, "Trunkslot1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka1]=dini_Int(file, "Trunkammo1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk2]=dini_Int(file, "Trunkslot2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka2]=dini_Int(file, "Trunkammo2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk3]=dini_Int(file, "Trunkslot3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka3]=dini_Int(file, "Trunkammo3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk4]=dini_Int(file, "Trunkslot4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka4]=dini_Int(file, "Trunkammo4");
        //Package system
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage1]=dini_Int(file, "Package1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage1a]=dini_Int(file, "Package1a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage2]=dini_Int(file, "Package2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage2a]=dini_Int(file, "Package2a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage3]=dini_Int(file, "Package3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage3a]=dini_Int(file, "Package3a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage4]=dini_Int(file, "Package4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage4a]=dini_Int(file, "Package4a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage5]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage5a]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage6]=dini_Int(file, "Package6");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage6a]=dini_Int(file, "Package6a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage7]=dini_Int(file, "Package7");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage7a]=dini_Int(file, "Package7a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage8]=dini_Int(file, "Package8");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage8a]=dini_Int(file, "Package8a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage9]=dini_Int(file, "Package9");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage9a]=dini_Int(file, "Package9a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage10]=dini_Int(file, "Package10");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage10a]=dini_Int(file, "Package10a");
        // Credit
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vCredit]=dini_Int(file, "Credit");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTicket]=dini_Int(file, "Ticket");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances]=dini_Int(file, "MaxInsurances");
        // Stop loading trunk dude
        Fuel[PlayerInfo[playerid][pCarKey2]]=dini_Float(file, "Fuel");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vHealth]=dini_Int(file, "Health");
        // World
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vWorld]=dini_Int(file, "World");
        SetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey2], VehicleInfo[PlayerInfo[playerid][pCarKey2]][vWorld]);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPanels]=dini_Int(file, "Panels");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDoors]=dini_Int(file, "Doors");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLights]=dini_Int(file, "Lights");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTires]=dini_Int(file, "Tires");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vImpound]=dini_Int(file, "Impound");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vKilometri] = dini_Int(file, "Kilometri");
        //ByValentin.
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2], dini_Get(file, "Sasiu2"), 0, strlen(dini_Get(file, "Sasiu2")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = dini_Int(file, "Sasiu2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = dini_Int(file, "Verify");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = dini_Int(file, "Ver1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = dini_Int(file, "Ver2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = dini_Int(file, "Ver3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = dini_Int(file, "Radiom");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = dini_Int(file, "EngineLife");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = dini_Int(file, "VerifyBy");

        LoadComp(PlayerInfo[playerid][pCarKey2]);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunkLock] = 1;
        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vModel] == 481)
        {
            EngineStatus[PlayerInfo[playerid][pCarKey2]] = 1;
        }
        else
        {
            EngineStatus[PlayerInfo[playerid][pCarKey2]] = 0;
        }
        if (!IsABike(PlayerInfo[playerid][pCarKey2]))
        {
            if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] > 0)
            {
                LockCar(PlayerInfo[playerid][pCarKey2]);
            }
            else UnLockCar(PlayerInfo[playerid][pCarKey2]);
        }
        else UnLockCar(PlayerInfo[playerid][pCarKey2]);

        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] == 0)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] = 1;
        }
        // Auto owner and auto desc
        format(str2, sizeof(str2), "%s.%s", plname, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400]);
        if(strcmp(plname, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], true) == 0)
        {
            // Good car
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], plname, 0, strlen(plname), 255);
        }
        if(strcmp(str2, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], true) == 0)
        {
            // Good car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], str2, 0, strlen(str2), 255);
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], str2, 0, strlen(str2), 255);
        }
        if(PlayerInfo[playerid][pCarKey2] >= IBPCARS)
        {
            if(IsAPlane(PlayerInfo[playerid][pCarKey2]) || IsAdonatebike(PlayerInfo[playerid][pCarKey2]) || IsABoat(PlayerInfo[playerid][pCarKey2]))
            {
                return 1;
            }
            new Text[32];
            format(Text, sizeof(Text), "{000000}%s",VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPlate]);
            SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey2], Text);
            SetVehicleToRespawn(PlayerInfo[playerid][pCarKey2]);
        }
        return 1;
    }
    else if(strcmp(string, PlayerVehicle[playerid][pVeh4], true) == 0)
    {
        PlayerInfo[playerid][pCarKey2] = CreateVehicle(dini_Int(file, "Model"), dini_Float(file, "ParkX"), dini_Float(file, "ParkY"), dini_Float(file, "ParkZ"), dini_Float(file, "ParkAngle"), dini_Int(file, "Color1"), dini_Int(file, "Color2"), 60000);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], dini_Get(file, "Owner"), 0, strlen(dini_Get(file, "Owner")), 255);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], dini_Get(file, "Description"), 0, strlen(dini_Get(file, "Description")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vModel] = dini_Int(file, "Model");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vX] = dini_Float(file, "ParkX");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vY] = dini_Float(file, "ParkY");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vZ] = dini_Float(file, "ParkZ");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vAngle] = dini_Float(file, "ParkAngle");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vColorOne] = dini_Int(file, "color1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vColorTwo] = dini_Int(file, "color2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwned] = dini_Int(file, "Owned");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] = dini_Int(file, "Lock");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLockBuyed] = dini_Int(file, "LockBuyed");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vAlarm] = dini_Int(file, "Alarm");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vImmob] = dini_Int(file, "Immobaliser");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] = dini_Int(file, "GPS");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vKey] = dini_Int(file, "Key");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent0]=dini_Int(file, "Component0");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent1]=dini_Int(file, "Component1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent2]=dini_Int(file, "Component2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent3]=dini_Int(file, "Component3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent4]=dini_Int(file, "Component4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent5]=dini_Int(file, "Component5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent6]=dini_Int(file, "Component6");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent7]=dini_Int(file, "Component7");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent8]=dini_Int(file, "Component8");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent9]=dini_Int(file, "Component9");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent10]=dini_Int(file, "Component10");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent11]=dini_Int(file, "Component11");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent12]=dini_Int(file, "Component12");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent13]=dini_Int(file, "Component13");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPaintJob]=dini_Int(file, "PaintJob");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vInsurances]=dini_Int(file, "Insurances");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDestroys]=dini_Int(file, "Destroys");
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPlate], dini_Get(file, "Plate"), 0, strlen(dini_Get(file, "Plate")), 255);
        // trukn loading
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk1]=dini_Int(file, "Trunkslot1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka1]=dini_Int(file, "Trunkammo1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk2]=dini_Int(file, "Trunkslot2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka2]=dini_Int(file, "Trunkammo2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk3]=dini_Int(file, "Trunkslot3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka3]=dini_Int(file, "Trunkammo3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk4]=dini_Int(file, "Trunkslot4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka4]=dini_Int(file, "Trunkammo4");
        //Package system
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage1]=dini_Int(file, "Package1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage1a]=dini_Int(file, "Package1a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage2]=dini_Int(file, "Package2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage2a]=dini_Int(file, "Package2a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage3]=dini_Int(file, "Package3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage3a]=dini_Int(file, "Package3a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage4]=dini_Int(file, "Package4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage4a]=dini_Int(file, "Package4a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage5]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage5a]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage6]=dini_Int(file, "Package6");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage6a]=dini_Int(file, "Package6a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage7]=dini_Int(file, "Package7");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage7a]=dini_Int(file, "Package7a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage8]=dini_Int(file, "Package8");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage8a]=dini_Int(file, "Package8a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage9]=dini_Int(file, "Package9");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage9a]=dini_Int(file, "Package9a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage10]=dini_Int(file, "Package10");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage10a]=dini_Int(file, "Package10a");
        // Credit
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vCredit]=dini_Int(file, "Credit");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTicket]=dini_Int(file, "Ticket");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances]=dini_Int(file, "MaxInsurances");
        // Stop loading trunk dude
        Fuel[PlayerInfo[playerid][pCarKey2]]=dini_Float(file, "Fuel");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vHealth]=dini_Int(file, "Health");
        // World
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vWorld]=dini_Int(file, "World");
        SetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey2], VehicleInfo[PlayerInfo[playerid][pCarKey2]][vWorld]);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPanels]=dini_Int(file, "Panels");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDoors]=dini_Int(file, "Doors");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLights]=dini_Int(file, "Lights");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTires]=dini_Int(file, "Tires");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vImpound]=dini_Int(file, "Impound");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vKilometri] = dini_Int(file, "Kilometri");
        //ByValentin.
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2], dini_Get(file, "Sasiu2"), 0, strlen(dini_Get(file, "Sasiu2")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = dini_Int(file, "Sasiu2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = dini_Int(file, "Verify");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = dini_Int(file, "Ver1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = dini_Int(file, "Ver2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = dini_Int(file, "Ver3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = dini_Int(file, "Radiom");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = dini_Int(file, "EngineLife");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = dini_Int(file, "VerifyBy");

        LoadComp(PlayerInfo[playerid][pCarKey2]);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunkLock] = 1;
        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vModel] == 481)
        {
            EngineStatus[PlayerInfo[playerid][pCarKey2]] = 1;
        }
        else
        {
            EngineStatus[PlayerInfo[playerid][pCarKey2]] = 0;
        }
        if (!IsABike(PlayerInfo[playerid][pCarKey2]))
        {
            if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] > 0)
            {
                LockCar(PlayerInfo[playerid][pCarKey2]);
            }
            else UnLockCar(PlayerInfo[playerid][pCarKey2]);
        }
        else UnLockCar(PlayerInfo[playerid][pCarKey2]);

        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] == 0)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] = 1;
        }
        // Auto owner and auto desc
        format(str2, sizeof(str2), "%s.%s", plname, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400]);
        if(strcmp(plname, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], true) == 0)
        {
            // Good car
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], plname, 0, strlen(plname), 255);
        }
        if(strcmp(str2, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], true) == 0)
        {
            // Good car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], str2, 0, strlen(str2), 255);
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], str2, 0, strlen(str2), 255);
        }
        if(PlayerInfo[playerid][pCarKey2] >= IBPCARS)
        {
            if(IsAPlane(PlayerInfo[playerid][pCarKey2]) || IsAdonatebike(PlayerInfo[playerid][pCarKey2]) || IsABoat(PlayerInfo[playerid][pCarKey2]))
            {
                return 1;
            }
            new Text[32];
            format(Text, sizeof(Text), "{000000}%s",VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPlate]);
            SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey2], Text);
            SetVehicleToRespawn(PlayerInfo[playerid][pCarKey2]);
        }
        return 1;
    }
    else if(strcmp(string, PlayerVehicle[playerid][pVeh5], true) == 0)
    {
        PlayerInfo[playerid][pCarKey2] = CreateVehicle(dini_Int(file, "Model"), dini_Float(file, "ParkX"), dini_Float(file, "ParkY"), dini_Float(file, "ParkZ"), dini_Float(file, "ParkAngle"), dini_Int(file, "Color1"), dini_Int(file, "Color2"), 60000);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], dini_Get(file, "Owner"), 0, strlen(dini_Get(file, "Owner")), 255);
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], dini_Get(file, "Description"), 0, strlen(dini_Get(file, "Description")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vModel] = dini_Int(file, "Model");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vX] = dini_Float(file, "ParkX");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vY] = dini_Float(file, "ParkY");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vZ] = dini_Float(file, "ParkZ");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vAngle] = dini_Float(file, "ParkAngle");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vColorOne] = dini_Int(file, "color1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vColorTwo] = dini_Int(file, "color2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwned] = dini_Int(file, "Owned");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] = dini_Int(file, "Lock");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLockBuyed] = dini_Int(file, "LockBuyed");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vAlarm] = dini_Int(file, "Alarm");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vImmob] = dini_Int(file, "Immobaliser");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vGPS] = dini_Int(file, "GPS");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vKey] = dini_Int(file, "Key");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent0]=dini_Int(file, "Component0");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent1]=dini_Int(file, "Component1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent2]=dini_Int(file, "Component2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent3]=dini_Int(file, "Component3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent4]=dini_Int(file, "Component4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent5]=dini_Int(file, "Component5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent6]=dini_Int(file, "Component6");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent7]=dini_Int(file, "Component7");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent8]=dini_Int(file, "Component8");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent9]=dini_Int(file, "Component9");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent10]=dini_Int(file, "Component10");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent11]=dini_Int(file, "Component11");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent12]=dini_Int(file, "Component12");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vComponent13]=dini_Int(file, "Component13");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPaintJob]=dini_Int(file, "PaintJob");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vInsurances]=dini_Int(file, "Insurances");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDestroys]=dini_Int(file, "Destroys");
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPlate], dini_Get(file, "Plate"), 0, strlen(dini_Get(file, "Plate")), 255);
        // trukn loading
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk1]=dini_Int(file, "Trunkslot1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka1]=dini_Int(file, "Trunkammo1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk2]=dini_Int(file, "Trunkslot2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka2]=dini_Int(file, "Trunkammo2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk3]=dini_Int(file, "Trunkslot3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka3]=dini_Int(file, "Trunkammo3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunk4]=dini_Int(file, "Trunkslot4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunka4]=dini_Int(file, "Trunkammo4");
        //Package system
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage1]=dini_Int(file, "Package1");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage1a]=dini_Int(file, "Package1a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage2]=dini_Int(file, "Package2");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage2a]=dini_Int(file, "Package2a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage3]=dini_Int(file, "Package3");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage3a]=dini_Int(file, "Package3a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage4]=dini_Int(file, "Package4");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage4a]=dini_Int(file, "Package4a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage5]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage5a]=dini_Int(file, "Package5");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage6]=dini_Int(file, "Package6");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage6a]=dini_Int(file, "Package6a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage7]=dini_Int(file, "Package7");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage7a]=dini_Int(file, "Package7a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage8]=dini_Int(file, "Package8");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage8a]=dini_Int(file, "Package8a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage9]=dini_Int(file, "Package9");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage9a]=dini_Int(file, "Package9a");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage10]=dini_Int(file, "Package10");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPackage10a]=dini_Int(file, "Package10a");
        // Credit
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vCredit]=dini_Int(file, "Credit");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTicket]=dini_Int(file, "Ticket");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances]=dini_Int(file, "MaxInsurances");
        // Stop loading trunk dude
        Fuel[PlayerInfo[playerid][pCarKey2]]=dini_Float(file, "Fuel");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vHealth]=dini_Int(file, "Health");
        // World
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vWorld]=dini_Int(file, "World");
        SetVehicleVirtualWorld(PlayerInfo[playerid][pCarKey2], VehicleInfo[PlayerInfo[playerid][pCarKey2]][vWorld]);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPanels]=dini_Int(file, "Panels");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDoors]=dini_Int(file, "Doors");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLights]=dini_Int(file, "Lights");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTires]=dini_Int(file, "Tires");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vImpound]=dini_Int(file, "Impound");
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vKilometri] = dini_Int(file, "Kilometri");
        //ByValentin.
        strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2], dini_Get(file, "Sasiu2"), 0, strlen(dini_Get(file, "Sasiu2")), 255);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = dini_Int(file, "Sasiu2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = dini_Int(file, "Verify");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = dini_Int(file, "Ver1");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = dini_Int(file, "Ver2");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = dini_Int(file, "Ver3");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = dini_Int(file, "Radiom");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = dini_Int(file, "EngineLife");
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = dini_Int(file, "VerifyBy");

        LoadComp(PlayerInfo[playerid][pCarKey2]);
        VehicleInfo[PlayerInfo[playerid][pCarKey2]][vTrunkLock] = 1;
        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vModel] == 481)
        {
            EngineStatus[PlayerInfo[playerid][pCarKey2]] = 1;
        }
        else
        {
            EngineStatus[PlayerInfo[playerid][pCarKey2]] = 0;
        }
        if (!IsABike(PlayerInfo[playerid][pCarKey2]))
        {
            if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vLock] > 0)
            {
                LockCar(PlayerInfo[playerid][pCarKey2]);
            }
            else UnLockCar(PlayerInfo[playerid][pCarKey2]);
        }
        else UnLockCar(PlayerInfo[playerid][pCarKey2]);

        if(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] == 0)
        {
            VehicleInfo[PlayerInfo[playerid][pCarKey2]][vMaxInsurances] = 1;
        }
        // Auto owner and auto desc
        format(str2, sizeof(str2), "%s.%s", plname, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey2])-400]);
        if(strcmp(plname, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], true) == 0)
        {
            // Good car
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vOwner], plname, 0, strlen(plname), 255);
        }
        if(strcmp(str2, VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], true) == 0)
        {
            // Good car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], str2, 0, strlen(str2), 255);
        }
        else
        {
            // Bad car
            strmid(VehicleInfo[PlayerInfo[playerid][pCarKey2]][vDescription], str2, 0, strlen(str2), 255);
        }
        if(PlayerInfo[playerid][pCarKey2] >= IBPCARS)
        {
            if(IsAPlane(PlayerInfo[playerid][pCarKey2]) || IsAdonatebike(PlayerInfo[playerid][pCarKey2]) || IsABoat(PlayerInfo[playerid][pCarKey2]))
            {
                return 1;
            }
            new Text[32];
            format(Text, sizeof(Text), "{000000}%s",VehicleInfo[PlayerInfo[playerid][pCarKey2]][vPlate]);
            SetVehicleNumberPlate(PlayerInfo[playerid][pCarKey2], Text);
            SetVehicleToRespawn(PlayerInfo[playerid][pCarKey2]);
        }
        return 1;
    }
    return 1;
}

public UnLockCar(carid)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(!IsAPlane(carid))
            {
                VehicleInfo[carid][vLock] = 0;
                SetVehicleParamsForPlayer(carid,i,0,0);
            }
        }
    }
}

public BuyingVeh(playerid)
{
    if(PlayerBadges[playerid][FirstCar] == 0)
    {
        PlayerBadges[playerid][FirstCar] = 1;
        InfoForPlayer(playerid, "~b~[][ACHIEVEMENT]~w~ Ai dobandit un achiev. - ~b~Masina noua!");
        SaveBadges(playerid);
    }
    new playername[MAX_PLAYER_NAME];
    new string[256];
    GetPlayerName(playerid, playername, sizeof(playername));
    format(string, sizeof(string), "%s.%s", playername, VehicleNames[pCar[playerid]-400]);
    if(!strcmp(PlayerVehicle[playerid][pVeh1], "None", true))
    {
        strmid(PlayerVehicle[playerid][pVeh1], string, 0, strlen(string), 255);
    }
    else if(!strcmp(PlayerVehicle[playerid][pVeh2], "None", true))
    {
        strmid(PlayerVehicle[playerid][pVeh2], string, 0, strlen(string), 255);
    }
    else if(!strcmp(PlayerVehicle[playerid][pVeh3], "None", true))
    {
        strmid(PlayerVehicle[playerid][pVeh3], string, 0, strlen(string), 255);
    }
    else if(!strcmp(PlayerVehicle[playerid][pVeh4], "None", true))
    {
        strmid(PlayerVehicle[playerid][pVeh4], string, 0, strlen(string), 255);
    }
    else if(!strcmp(PlayerVehicle[playerid][pVeh5], "None", true))
    {
        strmid(PlayerVehicle[playerid][pVeh5], string, 0, strlen(string), 255);
    }
    else
    {
        SendClientMessage(playerid, COLOR_GREY, "Ai deja 5 masini");
        GivePlayerCash(playerid, CarsPrices[carsds[playerid]-400]);
    }
    if(IsAPlane2(pCar[playerid]))
    {
        PlayerInfo[playerid][pCarKey] = CreateVehicle(pCar[playerid], 1889.8885,-2620.0969,13.3287,0, 1, 1, 60000);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = 1889.8885;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = -2620.0969;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = 13.3287;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = 0;
    }
    else if(IsAHelicopter2(pCar[playerid]))
    {
        PlayerInfo[playerid][pCarKey] = CreateVehicle(pCar[playerid], 2111.4150,-2435.8933,13.3286,180, 1, 1, 60000);
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = 2111.4150;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = -2435.8933;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = 13.3286;
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = 180;
    }
    else
    {
        new CardealRand = random(4);
        if(CardealRand == 0)
        {
            PlayerInfo[playerid][pCarKey] = CreateVehicle(pCar[playerid], 1015.6307,-1352.2527,13.2715,87.7200,-1,-1,100);
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = 1015.630;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = -1352.2527;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = 13.2715;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = 90;
        }
        if(CardealRand == 1)
        {
            PlayerInfo[playerid][pCarKey] = CreateVehicle(pCar[playerid], 1015.6307,-1352.2527,13.2715,87.7200,-1,-1,100);
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = 1015.630;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = -1352.2527;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = 13.2715;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = 90;
        }
        if(CardealRand == 2)
        {
            PlayerInfo[playerid][pCarKey] = CreateVehicle(pCar[playerid], 1015.6307,-1352.2527,13.2715,87.7200,-1,-1,100);
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = 1015.630;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = -1352.2527;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = 13.2715;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = 90;
        }
        if(CardealRand == 3)
        {
            PlayerInfo[playerid][pCarKey] = CreateVehicle(pCar[playerid], 1015.6307,-1352.2527,13.2715,87.7200,-1,-1,100);
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vX] = 1015.630;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vY] = -1352.2527;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vZ] = 13.2715;
            VehicleInfo[PlayerInfo[playerid][pCarKey]][vAngle] = 90;
        }
    }
    new rando = 800000000000 + random(899999999999-800000000000);
	strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vDescription], string, 0, strlen(string), 255);
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwned] = 1;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vModel] = pCar[playerid];
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorOne] = pColorS[playerid];
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vColorTwo] = pColor2S[playerid];
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent0]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent1]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent2]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent3]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent4]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent5]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent6]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent7]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent8]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent9]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent10]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent11]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent12]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vComponent13]=0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vPaintJob]= 3;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vLock] = 1;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vLockBuyed] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vInsurances] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vDestroys] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vImmob] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vAlarm] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vGPS] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vTicket] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vMaxInsurances] = 1;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk1] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka1] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk2] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka2] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk3] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka3] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunk4] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunka4] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vTrunkLock] = 1;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu] = rando;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vSasiu2] = getRandomLetter();
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerify] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer1] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer2] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vVer3] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vRadiom] = 0;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vEngineLife] = 100;
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vVerifyBy] = 0;
    strmid(VehicleInfo[PlayerInfo[playerid][pCarKey]][vOwner], playername, 0, strlen(playername), 255);
    if(PlayerInfo[playerid][pCarCredit] != 0)
    {
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vCredit] = 1;
    }
    else
    {
        VehicleInfo[PlayerInfo[playerid][pCarKey]][vCredit] = 0;
    }
    Fuel[PlayerInfo[playerid][pCarKey]] = GasMax;
    new randkey = 10000 + random(89999);
    VehicleInfo[PlayerInfo[playerid][pCarKey]][vKey] = randkey;
    SaveVehicles(playerid, PlayerInfo[playerid][pCarKey]);
    format(string, sizeof(string), "%s a cumparat un %s.", playername, VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400]);
    printf(string);
    format(string, sizeof(string), "%s cumparat pentru suma de $%d. Foloseste /(v)ehicle get pentru a iti vedea masinile.", VehicleNames[GetVehicleModel(PlayerInfo[playerid][pCarKey])-400], CarsPrices[pCar[playerid]-400]);
    SendClientMessage(playerid, COLOR_INFO, string);
    format(string, sizeof(string), "Nu uita! Masina ta nu este asigurata, asa ca v-a trebui sa mergi sa ii faci o asigurare!");
    SendClientMessage(playerid, COLOR_INFO, string);
    DestroyVehicle(PlayerInfo[playerid][pCarKey]);
    PlayerInfo[playerid][pCarKey] = 0;
    pCar[playerid] = 0;
    return 1;
}

forward LoadComp(veh);
public LoadComp(veh)
{
    if(VehicleInfo[veh][vPaintJob] != 3)
    {
        ChangeVehiclePaintjob(veh,VehicleInfo[veh][vPaintJob]);
    }
    if(VehicleInfo[veh][vComponent0] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent0]);
    }
    if(VehicleInfo[veh][vComponent1] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent1]);
    }
    if(VehicleInfo[veh][vComponent2] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent2]);
    }
    if(VehicleInfo[veh][vComponent3] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent3]);
    }
    if(VehicleInfo[veh][vComponent4] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent4]);
    }
    if(VehicleInfo[veh][vComponent5] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent5]);
    }
    if(VehicleInfo[veh][vComponent6] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent6]);
    }
    if(VehicleInfo[veh][vComponent7] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent7]);
    }
    if(VehicleInfo[veh][vComponent8] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent8]);
    }
    if(VehicleInfo[veh][vComponent9] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent9]);
    }
    if(VehicleInfo[veh][vComponent10] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent10]);
    }
    if(VehicleInfo[veh][vComponent11] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent11]);
    }
    if(VehicleInfo[veh][vComponent12] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent12]);
    }
    if(VehicleInfo[veh][vComponent13] != 0)
    {
        AddVehicleComponent(veh,VehicleInfo[veh][vComponent13]);
    }
    return 1;
}

forward SaveComp(comp,slot,str[],veh);
public SaveComp(comp,slot,str[],veh)
{
    new file[256];
    format(file, sizeof(file), "IBP/Vehicles/%s.cfg", str);
    if(dini_Exists(file))
    {
        if(slot == 0)
        {
            dini_IntSet(file, "Component0", comp);
            VehicleInfo[veh][vComponent0] = comp;
            return 1;
        }
        else if(slot == 1)
        {
            dini_IntSet(file, "Component1", comp);
            VehicleInfo[veh][vComponent1] = comp;
            return 1;
        }
        else if(slot == 2)
        {
            dini_IntSet(file, "Component2", comp);
            VehicleInfo[veh][vComponent2] = comp;
            return 1;
        }
        else if(slot == 3)
        {
            dini_IntSet(file, "Component3", comp);
            VehicleInfo[veh][vComponent3] = comp;
            return 1;
        }
        else if(slot == 4)
        {
            dini_IntSet(file, "Component4", comp);
            VehicleInfo[veh][vComponent4] = comp;
            return 1;
        }
        else if(slot == 5)
        {
            dini_IntSet(file, "Component5", comp);
            VehicleInfo[veh][vComponent5] = comp;
            return 1;
        }
        else if(slot == 6)
        {
            dini_IntSet(file, "Component6", comp);
            VehicleInfo[veh][vComponent6] = comp;
            return 1;
        }
        else if(slot == 7)
        {
            dini_IntSet(file, "Component7", comp);
            VehicleInfo[veh][vComponent7] = comp;
            return 1;
        }
        else if(slot == 8)
        {
            dini_IntSet(file, "Component8", comp);
            VehicleInfo[veh][vComponent8] = comp;
            return 1;
        }
        else if(slot == 9)
        {
            dini_IntSet(file, "Component9", comp);
            VehicleInfo[veh][vComponent9] = comp;
            return 1;
        }
        else if(slot == 10)
        {
            dini_IntSet(file, "Component10", comp);
            VehicleInfo[veh][vComponent10] = comp;
            return 1;
        }
        else if(slot == 11)
        {
            dini_IntSet(file, "Component11", comp);
            VehicleInfo[veh][vComponent11] = comp;
            return 1;
        }
        else if(slot == 12)
        {
            dini_IntSet(file, "Component12", comp);
            VehicleInfo[veh][vComponent12] = comp;
            return 1;
        }
        else if(slot == 13)
        {
            dini_IntSet(file, "Component13", comp);
            VehicleInfo[veh][vComponent13] = comp;
            return 1;
        }
    }
    return 1;
}

forward CheckCarF(playerid,carid);
public CheckCarF(playerid,carid)
{
    new pname[MAX_PLAYER_NAME],str[256];
    GetPlayerName(playerid, pname, sizeof(pname));
    format(str, sizeof(str), "IBP/Vehicles/%s.%s.cfg",pname,VehicleNames[carid-400]);
    if(dini_Exists(str))
        return 1;
    return 0;
}

public IsAPlane(carid)
{
    new model = GetVehicleModel(carid);
    if(model == 592 || model == 577 || model == 511 || model == 512 || model == 593 || model == 520 || model == 553 ||
       model == 476 || model == 519 || model == 460 || model == 513 || model == 548 || model == 417 || model == 487 ||
       model == 488 || model == 497 || model == 563 || model == 447 || model == 469 )
    {
        return 1;
    }
    return 0;
}

public IsAHelicopter(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 548 || model == 425 || model == 417 || model == 487 || model == 488 || model == 497 || model == 563 || model == 447 || model == 469)
    {
        return 1;
    }
    return 0;
}

forward IsAPlane2(vehicleid);
public IsAPlane2(vehicleid)
{
   if(vehicleid == 592||
   vehicleid == 577 ||
   vehicleid == 511 ||
   vehicleid == 512 ||
   vehicleid == 593 ||
   vehicleid == 520 ||
   vehicleid == 553 ||
   vehicleid == 476 ||
   vehicleid == 519 ||
   vehicleid == 460 ||
   vehicleid == 513)
   {
     return 1;
   }
   return 0;
}

forward IsAHelicopter2(vehicleid);
public IsAHelicopter2(vehicleid)
{
   if(vehicleid == 417||
   vehicleid == 425 ||
   vehicleid == 447 ||
   vehicleid == 469 ||
   vehicleid == 487 ||
   vehicleid == 488 ||
   vehicleid == 497 ||
   vehicleid == 548 ||
   vehicleid == 563)
   {
    return 1;
   }
   return 0;
}

public IsATowTruck(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 525)
    {
        return 1;
    }
    return 0;
}
forward IsAHarvest(vehicleid);
public IsAHarvest(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 532)
    {
        return 1;
    }
    return 0;
}

public IsASavanna(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 567 || model == 536 || model == 534 || model == 412 || model == 566)
    {
        return 1;
    }
    return 0;
}

public IsASultan(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 560)
    {
        return 1;
    }
    return 0;
}

public IsALawEnforcementVehicle(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 596 || model == 599 || model == 597 || model == 598 || model == 427 || model == 490 || model == 528 || model == 470 || model == 601 || model == 548 || model == 425 || model == 497 || model == 523)
    {
        return 1;
    }
    return 0;
}

public barieraLSclose()
{
    MoveObject(barieraLS, 57.6492, -1535.4741, 5.1398,1.0,0.0000, 90.0000, -98.2800);
}

public barieraLSclose2()
{
    MoveObject(barieraLS2,63.4019, -1522.2883, 5.1398,1.0,0.0000, -90.0000, 90.0000);
}

public barieraLVclose()
{
    MoveObject(barieraLV, 1789.43347, 647.66431, 18.65376,1.0, 0.00000, -90.00000, -11.88001);
}

public barieraLVclose2()
{
    MoveObject(barieraLV2,1764.49365, 653.49512, 18.65380,1.0, 0.00000, 90.00000, -11.88001);
}

public barieraSFclose()
{
    MoveObject(barieraSF, -1664.53113, 563.42999, 38.44354,1.0, 0.00000, -90.00000, 135.96001);
}

public barieraSFclose2()
{
    MoveObject(barieraSF2,-1648.99268, 547.42462, 38.44350,1.0, 0.00000, 90.00000, 135.96001);
}

public barieraSFclose3()
{
    MoveObject(barieraSF3,  -2689.76294, 1274.25537, 55.60280, 1.0, 0.00000, 90.00000, 0.00000);
}

public barieraSFclose4()
{
    MoveObject(barieraSF4, -2691.18042, 1274.25537, 55.60283, 1.0,0.00000, -90.00000, 0.00000);
}

public barieraSFclose5()
{
    MoveObject(barieraSF5,-2671.58496, 1274.25537, 55.60283, 1.0,0.00000, 90.00000, 0.00000);
}

public barieraSFclose6()
{
    MoveObject(barieraSF6,-2673.17847, 1274.25537, 55.60283, 1.0,0.00000, -90.00000, 0.00000);
}

public IsABike(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 522 || model == 462 || model == 521 || model == 461 || model == 463 || model == 581 || model == 448 || model == 586 || model == 523 || model == 468 || model == 471)
    {
        return 1;
    }
    return 0;
}

forward IsABiker(vehicleid);
public IsABiker(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 522 || model == 521 || model == 461 || model == 463 || model == 581 || model == 448 || model == 586 || model == 523 || model == 468 || model == 471)
    {
        return 1;
    }
    return 0;
}

public IsABoat(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 472 || model == 473 || model == 493 || model == 595 || model == 484 || model == 430 || model == 453 || model == 452 || model == 446 || model == 454)
    {
        return 1;
    }
    return 0;
}

public IsATaxi(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 420 || model == 431 || model == 438 || model == 437)
    {
        return 1;
    }
    return 0;
}

public IsAdonatebike(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 481  || model == 509 || model == 510)
    {
        return 1;
    }
    return 0;
}

public Unfreezeren(playerid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        TogglePlayerControllable(playerid,1);
        return 1;
    }
    return 0;
}

public RemoveDriverFromVehicle(playerid)
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        RemovePlayerFromVehicle(playerid);
        TogglePlayerControllable(playerid,1);
        SetTimerEx("Unfreezeren", 2500, false, "i", playerid);
        return 1;
    }
    return 0;
}
//==============================================================================

public ReduceTimer(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(ReduceTime[playerid] == 1)
        {
            ReduceTime[playerid] = 0;
        }
    }
}

public BackupClear(playerid, calledbytimer)
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerInfo[playerid][pFaction] != 0 && DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 1)
        {
            if (PlayerInfo[playerid][pRequestingBackup] == 1)
            {
                for(new i = 0; i < MAX_PLAYERS; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(PlayerInfo[i][pFaction] == 3 || PlayerInfo[i][pFaction] == 1)
                        {
                            DisablePlayerCheckpoint(i);
                            ActiveCP[i] = 0;
                        }
                    }
                }
                if (calledbytimer != 1)
                {
                    SendClientMessage(playerid, COLOR_WHITE, "Your backup request has been cleared");
                } else {
                    SendClientMessage(playerid, COLOR_WHITE, "Your backup request has been cleared automatically");
                }
                PlayerInfo[playerid][pRequestingBackup] = 0;
            }
            else
            {
                if (calledbytimer != 1)
                {
                    SendClientMessage(playerid, COLOR_GREY, "You do not have an active backup request");
                }
            }
        }
        else
        {
            if (calledbytimer != 1)
            {
                SendClientMessage(playerid, COLOR_GREY, "Factiune invalida");
            }
        }
    }
    return 1;
}

public RemoveRoadblock(playerid)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(PlayerInfo[playerid][pFaction] != 0 && DynamicFactions[PlayerInfo[playerid][pFaction]][fType] == 1)
            {
                DisablePlayerCheckpoint(i);
                ActiveCP[i] = 0;
            }
        }
    }
    DestroyObject(PlayerInfo[playerid][pRoadblock]);
    DestroyObject(PlayerInfo[playerid][pRoadblock2]);
    DestroyObject(PlayerInfo[playerid][pRoadblock3]);
    DestroyObject(PlayerInfo[playerid][pRoadblock4]);
    DestroyObject(PlayerInfo[playerid][pRoadblock5]);
    DestroyObject(PlayerInfo[playerid][pRoadblock6]);
    DestroyObject(PlayerInfo[playerid][pRoadblock7]);
    DestroyObject(PlayerInfo[playerid][pRoadblock8]);
    PlayerInfo[playerid][pRoadblock] = 0;
    PlayerInfo[playerid][pRoadblock2] = 0;
    PlayerInfo[playerid][pRoadblock3] = 0;
    PlayerInfo[playerid][pRoadblock4] = 0;
    PlayerInfo[playerid][pRoadblock5] = 0;
    PlayerInfo[playerid][pRoadblock6] = 0;
    PlayerInfo[playerid][pRoadblock7] = 0;
    PlayerInfo[playerid][pRoadblock8] = 0;
    return 1;
}

// Anti speed anti cheat anti afk


public IdleKick()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            GetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1], PlayerPos[i][2]);
            if(PlayerPos[i][0] == PlayerPos[i][3] && PlayerPos[i][1] == PlayerPos[i][4] && PlayerPos[i][2] == PlayerPos[i][5])
            {
                if(gPlayerLogged[i] == 1 && PlayerInfo[i][pAdministrator] < 3)
                {
                    TogglePlayerControllable(i, 0);
                    SendClientMessage(i, COLOR_LIGHTRED, "SvrCmd: You have been kicked by the SERVER, Reason: AFK");
                    Kick(i);
                }
            }
            PlayerPos[i][3] = PlayerPos[i][0];
            PlayerPos[i][4] = PlayerPos[i][1];
            PlayerPos[i][5] = PlayerPos[i][2];
        }
    }
}

public BlindfoldTimer(playerid)
{
    SendClientMessage(playerid, COLOR_WHITE, "The blindfold over your eyes slowly slips off");
    return SetCameraBehindPlayer(playerid);
}

public LogTimer(playerid)
{
    if(gPlayerLogged[playerid] != 1)
    {
        ShowPlayerDialog(playerid,-1,0,"","","","");
        Kick(playerid);
    }
    return 1;
}

public ReleaseFromHospital(playerid)
{
    if(PlayerInfo[playerid][pLifeLic] == 0)
    {
        GivePlayerCash(playerid, -150);
        SendClientMessage(playerid, COLOR_WHITE, "Ai fost eliberat din All Saints General Hospital");
        SendClientMessage(playerid, COLOR_LIGHTRED, "DOC: Your medical insurance did not cover the bill, you were charged $50.");
        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
        TogglePlayerControllable(playerid, 1);
        SetCameraBehindPlayer(playerid);
        SetPlayerHealth(playerid, 70);
        PlayerInfo[playerid][pHospital] = 0;
        Wounded[playerid] = 0;
        SetPlayerPos(playerid, 1177.4866,-1323.9749,14.0731);
        SetPlayerFacingAngle(playerid, 270.0);
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
        SafeResetPlayerWeapons(playerid);
        gPlayerUsingLoopingAnim[playerid] = 0;
    }
    if(PlayerInfo[playerid][pLifeLic] == 1)
    {
        GivePlayerCash(playerid, -10);
        SendClientMessage(playerid, COLOR_LIGHTRED, "DOC: Your medical insurance covered some of the bill, you were charged $10.");
        SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
        TogglePlayerControllable(playerid, 1);
        SetCameraBehindPlayer(playerid);
        SetPlayerHealth(playerid, 70);
        PlayerInfo[playerid][pHospital] = 0;
        SetPlayerPos(playerid, 1177.4866,-1323.9749,14.0731);
        SetPlayerFacingAngle(playerid, 270.0);
        SetPlayerInterior(playerid,0);
        SetPlayerVirtualWorld(playerid,0);
        SafeResetPlayerWeapons(playerid);
        Wounded[playerid] = 0;
    }
    if(PlayerInfo[playerid][pJailed] > 0)
    {
        if(PlayerInfo[playerid][pJailed] == 1)
        {
            SetPlayerVirtualWorld(playerid,2);
            SetPlayerInterior(playerid,6);
            SetPlayerPos(playerid,264.5743,77.5118,1001.0391);
            SendClientMessage(playerid, COLOR_WHITE, "You have not finished your jail time");
            SafeResetPlayerWeapons(playerid);
            return 1;
        }
        if(PlayerInfo[playerid][pJailed] == 2)
        {
            SetPlayerVirtualWorld(playerid,0);
            SetPlayerInterior(playerid,0);
            SetPlayerPos(playerid,3312.4163,-1935.4459,10.9682);
            SendClientMessage(playerid, COLOR_WHITE, "You have not finished your prison time");
            SafeResetPlayerWeapons(playerid);
            return 1;
        }
    }
    return 1;
}

public DoHospital(playerid)
{
    SetPlayerVirtualWorld(playerid,1);
    PlayerInfo[playerid][pDeaths]++;
    if(PlayerBadges[playerid][DieOneTime] == 0) { PlayerBadges[playerid][DieOneTime] = 1; InfoForPlayer(playerid, "~b~[][Achievement]~w~ Achievement earned - ~b~I've died once!"); SaveBadges(playerid); }
    if(PlayerBadges[playerid][DieTwentyTimes] == 0 && PlayerInfo[playerid][pDeaths] > 19) { PlayerBadges[playerid][DieTwentyTimes] = 1; InfoForPlayer(playerid, "~b~[][Achievement]~w~ Achievement earned - ~b~I do not fear death"); SaveBadges(playerid); }
    SetPlayerCameraPos(playerid, -833.5241,-1358.8575,86.9054);
    SetPlayerCameraLookAt(playerid, -830.8118,-1360.3612,87.0289);
    SetPlayerPos(playerid, 1177.4866,-1323.9749,14.0731);
    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~w~You are recovering from your ~r~wounds~w~...", 16000, 3);
    TogglePlayerControllable(playerid, 0);
    Wounded[playerid] = 0;
    SetTimerEx("ReleaseFromHospital", 15000, 0, "d", playerid);
    SetPlayerInterior(playerid,0);
    SafeResetPlayerWeapons(playerid);
    Delete3DTextLabel(DamageShot[playerid]);
    return 1;
}

public DoDeath2(playerid)
{
    SendClientMessage(playerid, COLOR_LIGHTRED, "Ai fost ranit grav, poti astepta ajutor sau sa accepti moartea prin comanda(/acceptdeath)");
    Wounded[playerid] = 1;
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
    PlayerInfo[playerid][pDeath] = 250;
    SafeResetPlayerWeapons(playerid);

	new stringdamage[128];
	new stringdamage2[256];
	format(stringdamage, sizeof(stringdamage), "(( Acest jucator a fost ranit - /damages %d pentru mai multe informatii))", playerid);
    strcat(stringdamage, stringdamage2);

    DamageShot[playerid] = Create3DTextLabel(stringdamage, 0xFF8080FF, 30.0, 40.0, 0.0, 20.0, 0, 0);
    Attach3DTextLabelToPlayer(DamageShot[playerid], playerid, 0.0, 0.0, 0.0);
	return 1;
}

public DoDeath(playerid)
{
    SetPlayerPos(playerid, DeathDest[playerid][0],DeathDest[playerid][1],DeathDest[playerid][2]);
    SetPlayerVirtualWorld(playerid,DeathWorld[playerid]);
    SetPlayerInterior(playerid,DeathInterior[playerid]);
    SetPlayerHealth(playerid, 100);
    TogglePlayerControllable(playerid, 0);
    SetTimerEx("DoDeath2", 1000, 0, "d", playerid);
    return 1;
}

public ClearMechanicCheckpointsForPlay(playerid)
{
    DisablePlayerCheckpoint(playerid);
    ActiveCP[playerid] = 0;
    return 1;
}

public SetPlayerCriminal(playerid,declare,reason[])
{
    if(IsPlayerConnected(playerid))
    {
        PlayerInfo[playerid][pCrimes] += 1;
        new points = WantedPoints[playerid];
        new turned[MAX_PLAYER_NAME];
        new turner[MAX_PLAYER_NAME];
        new turnmes[128];
        strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
        GetPlayerName(playerid, turned, sizeof(turned));
        if (declare == 255)
        {
            format(turner, sizeof(turner), "Unknown");
            strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
        }
        else
        {
            if(IsPlayerConnected(declare))
            {
                GetPlayerName(declare, turner, sizeof(turner));
                strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
                strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
                strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
            }
        }
        format(turnmes, sizeof(turnmes), "WARNING: %s, the cops are after you for %s, Reporter: %s",GetPlayerNameEx(playerid),reason,GetPlayerNameEx(declare));
        SendClientMessage(playerid, COLOR_LIGHTRED, turnmes);
        if(points > 0)
        {
            new yesno;
            if(points == 3) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; yesno = 1; } }
            else if(points >= 4 && points <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2;  yesno = 1; } }
            else if(points >= 6 && points <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; yesno = 1; } }
            else if(points >= 8 && points <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; yesno = 1; } }
            else if(points >= 10 && points <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; yesno = 1; } }
            else if(points >= 12 && points <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; yesno = 1; } }
            else if(points >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; yesno = 1; } }
            if(WantedLevel[playerid] >= 1) { }
            if(yesno)
            {
                for(new i = 0; i < MAX_PLAYERS; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(PlayerInfo[i][pFaction] == 3 || PlayerInfo[i][pFaction] == 1)
                        {
                            format(crimestore, sizeof(turnmes), "HQ: All units APB: Reporter: %s, Crime: %s, Suspect: %s",turner, reason, turned);
                            SendClientMessage(i, COLOR_LSPDNEW, crimestore);
                        }
                    }
                }
            }
        }
    }//not connected
}

public SetPlayerCriminalEx(playerid,declare,reason[])
{
    if(IsPlayerConnected(playerid))
    {
        PlayerInfo[playerid][pCrimes] += 1;
        new points = WantedPoints[playerid];
        new turned[MAX_PLAYER_NAME];
        new turner[MAX_PLAYER_NAME];
        new turnmes[128];
        strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
        GetPlayerName(playerid, turned, sizeof(turned));
        if (declare == 255)
        {
            format(turner, sizeof(turner), "Unknown");
            strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
        } else {
            if(IsPlayerConnected(declare))
            {
                GetPlayerName(declare, turner, sizeof(turner));
                strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
                strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
                strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
            }
        }
        format(turnmes, sizeof(turnmes), "WARNING: %s, the cops are after you for %s, Reporter: %s", GetPlayerNameEx(playerid), reason,GetPlayerNameEx(declare));
        SendClientMessage(playerid, COLOR_LIGHTRED, turnmes);
        //format(turnmes, sizeof(turnmes), "",reason,turner);
        //SendClientMessage(playerid, COLOR_DARKRED, turnmes);
        if(points > 0)
        {
            new yesno;
            if(points == 3) { if(WantedLevel[playerid] != 1) { WantedLevel[playerid] = 1; yesno = 1; } }
            else if(points >= 4 && points <= 5) { if(WantedLevel[playerid] != 2) { WantedLevel[playerid] = 2; yesno = 1; } }
            else if(points >= 6 && points <= 7) { if(WantedLevel[playerid] != 3) { WantedLevel[playerid] = 3; yesno = 1; } }
            else if(points >= 8 && points <= 9) { if(WantedLevel[playerid] != 4) { WantedLevel[playerid] = 4; yesno = 1; } }
            else if(points >= 10 && points <= 11) { if(WantedLevel[playerid] != 5) { WantedLevel[playerid] = 5; yesno = 1; } }
            else if(points >= 12 && points <= 13) { if(WantedLevel[playerid] != 6) { WantedLevel[playerid] = 6; yesno = 1; } }
            else if(points >= 14) { if(WantedLevel[playerid] != 10) { WantedLevel[playerid] = 10; yesno = 1; } }
            if(WantedLevel[playerid] >= 1) { }
            if(yesno)
            {
                for(new i = 0; i < MAX_PLAYERS; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(PlayerInfo[i][pFaction] == 3 || PlayerInfo[i][pFaction] == 1)
                        {
                            format(crimestore, sizeof(turnmes), "** HQ: All units APB: Reporter: %s **",turner);
                            SendClientMessage(i, COLOR_LSPDNEW, crimestore);
                            format(crimestore, sizeof(turnmes), "** HQ: Crime: %s, Suspect: %s **",reason,turned);
                            SendClientMessage(i, COLOR_LSPDNEW, crimestore);
                        }
                    }
                }
            }
        }
    }//not connected
}

/*
forward CheckAirBreak();
public CheckAirBreak()
{
    new username[MAX_PLAYERS];
    foreach(Player, i)
    {
        if (IsPlayerConnected(i))
        {
            GetPlayerName(i,username,sizeof(username));
            new string2[128];
            new Float:oldX[MAX_PLAYERS],Float:oldY[MAX_PLAYERS],Float:oldZ[MAX_PLAYERS];
            oldX[i] = PosX[i];
            oldY[i] = PosY[i];
            oldZ[i] = PosZ[i];
            GetPlayerPos(i,PosX[i],PosY[i],PosZ[i]);
            new Float:distanta[MAX_PLAYERS];
            distanta[i] = GetDistanceBetweenPoints(oldX[i],oldY[i],oldZ[i],PosX[i],PosY[i],PosZ[i]);
            if((distanta[i] > 65.0) && (gPlayerLogged[i] != 0) && (FakeHack[i] != 1))
            {
                FakeHack[i] = 1;
                format(string2,sizeof(string2),"[AdmWarning] %s [%d] posibil S0B, distanta: %f",username,i,distanta[i]);
                AdministratorMessage(COLOR_LIGHTRED,string2, 1);
            }
        }
    }
}*/

public ClearCrime(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        new string[MAX_PLAYER_NAME];
        format(string, sizeof(string), "********");
        strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
        strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
        strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
        strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
    }
    return 1;
}


public DrugEffect(playerid)
{
    GameTextForPlayer(playerid,"~w~You Are ~g~Guffed",3500,1);
    ApplyAnimation(playerid,"RAPPING","Laugh_01",4.1,1,1,1,1,1);
    SetTimerEx("UndrugEffect", 30000, false, "i", playerid);
    return 1;
}

public UndrugEffect(playerid)
{
    ClearAnimations(playerid);
    DrugsIntake[playerid] = 0;
    return 1;
}

public Float:Distance(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
    new Float:temp=floatsqroot((x1-x2) * (x1-x2) + (y1-y2) * (y1-y2) + (z1-z2) * (z1-z2));
    if(temp < 0) temp=temp*(-1);
    return temp;
}

//==============================================================================
RemovePlayerWeapon(playerid, weaponid)
{
    RemovePlayerWeaponEx(playerid, weaponid);
}

public PlayerPlayMusic(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        SetTimer("StopMusic", 5000, 0);
        PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
    }
}

public StopMusic()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
        }
    }
}

public Explode(playerid)
{
    new Float:bx[MAX_PLAYERS], Float:by[MAX_PLAYERS], Float:bz[MAX_PLAYERS];
    GetObjectPos(C4[playerid], bx[playerid], by[playerid], bz[playerid]);
    DestroyObject(C4[playerid]);
    CreateExplosion(bx[playerid], by[playerid], bz[playerid], 6, ExplosionRadius);
    CreateExplosion(bx[playerid], by[playerid], bz[playerid], 6, ExplosionRadius);
    SendClientMessage(playerid, COLOR_WHITE, "Bomb detonated");
    Bomb[playerid] = 0;
    Planted[playerid] = 0;
    RemovePlayerWeapon(playerid, 40);
    return 1;
}

public UpdateMeter(playerid)
{
    new Float:bx[MAX_PLAYERS], Float:by[MAX_PLAYERS], Float:bz[MAX_PLAYERS];

    GetObjectPos(C4[playerid], bx[playerid], by[playerid], bz[playerid]);
    if(PlayerToPoint(10, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(20, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], " i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(30, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "  i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(40, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "   i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(50, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "    i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(60, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "     i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(70, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "      i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(80, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "       i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(90, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "        i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(100, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "         i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(110, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "          i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(120, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "           i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(130, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "            i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(140, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "             i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(150, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "              i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(160, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "               i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(170, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(180, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                 i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(190, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                  i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(200, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                   i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(210, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                    i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(220, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                     i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(230, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                      i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(240, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                       i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(250, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                        i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(260, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                         i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(270, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                          i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(280, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                           i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(290, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                            i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(300, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                             i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(310, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                              i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(320, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                               i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(330, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                                i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(340, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                                 i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(350, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                                  i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else if(PlayerToPoint(360, playerid, bx[playerid], by[playerid], bz[playerid])){ TextDrawSetString(Meter1[playerid], "                                   i"); TextDrawSetString(Meter3[playerid], "      Range");}
    else
    {
        TextDrawSetString(Meter3[playerid], "~R~Out Of Range");
        TextDrawSetString(Meter1[playerid], "~R~                                    i");
    }
    return 1;
}

//==============================================================================
stock SendLocalChat(playerid,color,msg[],Float:radius)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    for(new ply;ply<MAX_PLAYERS;ply++)
    {
        if(IsPlayerInRangeOfPoint(ply,radius,x,y,z))SendClientMessage(ply,color,msg);
    }
    return 1;
}

stock SendLocalRadio(playerid,color,msg[],Float:radius)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    for(new ply;ply<MAX_PLAYERS;ply++)
    {
        if(IsPlayerInRangeOfPoint(ply,radius,x,y,z))SendClientMessage(ply,color,msg);
    }
    return 1;
}

stock CreateStrip(Float:x,Float:y,Float:z,Float:angle)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
    {
        if(SpikeInfo[i][sCreated] == 0)
        {
            SpikeInfo[i][sCreated]=1;
            SpikeInfo[i][sX]=x;
            SpikeInfo[i][sY]=y;
            SpikeInfo[i][sZ]=z-0.7;
            SpikeInfo[i][sObject] = CreateDynamicObject(2899,x, y, z-0.9,0, 0,angle-90);
            return 1;
        }
    }
    return 0;
}

stock DeleteAllStrip()
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
    {
        if(SpikeInfo[i][sCreated] == 1)
        {
            SpikeInfo[i][sCreated]=0;
            SpikeInfo[i][sX]=0.0;
            SpikeInfo[i][sY]=0.0;
            SpikeInfo[i][sZ]=0.0;
            DestroyDynamicObject(SpikeInfo[i][sObject]);
        }
    }
    return 0;
}

stock DeleteClosestStrip(playerid)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 4.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
        {
            if(SpikeInfo[i][sCreated] == 1)
            {
                SpikeInfo[i][sCreated]=0;
                SpikeInfo[i][sX]=0.0;
                SpikeInfo[i][sY]=0.0;
                SpikeInfo[i][sZ]=0.0;
                DestroyDynamicObject(SpikeInfo[i][sObject]);
                return 1;
            }
        }
    }
    return 0;
}

encode_tires(tires1, tires2, tires3, tires4)
{
    return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);
}

stock GetName(playerid)
{
    new pnstr[20];
    GetPlayerName(playerid, pnstr, 20);
    return pnstr;
}

stock get_available_objects()
{
    new objects = 0;
    for (new i = 1; i <= MAX_OBJECTS; i++)
    {
        if (IsValidObject(i)) objects ++;
    }
    return MAX_OBJECTS-objects;
}

public ExplodeShamal(vehicleid)
{
    KillTimer(sExplode[vehicleid]);
    if (tCount[vehicleid])
    {
        CreateExplosion(ShamalPos[vehicleid][0], ShamalPos[vehicleid][1], ShamalPos[vehicleid][2], 2, 15.0);
        sExplode[vehicleid] = SetTimerEx("ExplodeShamal", random(1300) + 100, 0, "d", vehicleid);
    }
}
//==============================================================================
public CreateStreamPickup(model,type,Float:x,Float:y,Float:z,range)
{
    new FoundID = 0;
    new ID;

    for ( new i = 0; FoundID <= 0 ; i++)
    {
        if( Pickup[i][pickupCreated] == 0 )
        {
            if( FoundID == 0 )
            {
               ID = i;
               FoundID = 1;
            }
        }
        if( i > MAX_S_PICKUPS )
        {
            FoundID = 2;
        }
    }
    if( FoundID == 2 )
    {
        print("Pickup limit reached. Pickup not created");
        return -1;
    }
    Pickup[ID][pickupCreated] = 1;
    Pickup[ID][pickupVisible] = 0;
    Pickup[ID][pickupModel] = model;
    Pickup[ID][pickupType] = type;
    Pickup[ID][pickupX] = x;
    Pickup[ID][pickupY] = y;
    Pickup[ID][pickupZ] = z;
    Pickup[ID][pickupRange] = range;
    return ID;

}

public DestroyStreamPickup(ID)
{
    if(Pickup[ID][pickupCreated])
    {
        DestroyPickup(Pickup[ID][pickupID]);
        Pickup[ID][pickupCreated] = 0;
        return 1;
    }
    return 0;
}

public CountStreamPickups()
{
    new count = 0;
    for(new i = 0; i < MAX_S_PICKUPS; i++)
    {
        if(Pickup[i][pickupCreated] == 1)
        {
            count++;
        }
    }
    return count;
}

public DrugsEffect(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        SetPlayerWeather(playerid, 2);
        new tmphour;
        new tmpminute;
        new tmpsecond;
        gettime(tmphour, tmpminute, tmpsecond);
        FixHour(tmphour);
        tmphour = shifthour;
        SetPlayerTime(playerid, tmphour, 00);
        SetCameraBehindPlayer(playerid);
        PlayerSmoking[playerid] = 0;
        SetPlayerDrunkLevel(playerid, 0);
    }
    return 0;
}

public MoveStreamPickup(ID,Float:x,Float:y,Float:z)
{
    if(Pickup[ID][pickupCreated])
    {
        DestroyPickup(Pickup[ID][pickupID]);
        Pickup[ID][pickupVisible] = 0;
        Pickup[ID][pickupX] = x;
        Pickup[ID][pickupY] = y;
        Pickup[ID][pickupZ] = z;
        return 1;
    }
    return 0;
}

public ChangeStreamPickupModel(ID,newmodel)
{
    if(Pickup[ID][pickupCreated])
    {
        DestroyPickup(Pickup[ID][pickupID]);
        Pickup[ID][pickupVisible] = 0;
        Pickup[ID][pickupModel] = newmodel;
        return 1;
    }
    return 0;
}

public Pickup_AnyPlayerToPoint(Float:radi, Float:x, Float:y, Float:z)
{
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            new Float:oldposx, Float:oldposy, Float:oldposz;
            new Float:tempposx, Float:tempposy, Float:tempposz;
            GetPlayerPos(i, oldposx, oldposy, oldposz);
            tempposx = (oldposx -x);
            tempposy = (oldposy -y);
            tempposz = (oldposz -z);
            if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
            {
                return 1;
            }
        }
    }
    return 0;
}

forward DrugsEffectEnds(playerid);
public DrugsEffectEnds(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        SetPlayerWeather(playerid, 2);
        new tmphour;
        new tmpminute;
        new tmpsecond;
        gettime(tmphour, tmpminute, tmpsecond);
        FixHour(tmphour);
        tmphour = shifthour;
        SetPlayerTime(playerid, tmphour, 00);
        SetCameraBehindPlayer(playerid);
        PlayerSmoking[playerid] = 0;
        SetPlayerDrunkLevel(playerid, 0);
    }
    return 0;
}


public ChangeStreamPickupType(ID,newtype)
{
    if(Pickup[ID][pickupCreated])
    {
        DestroyPickup(Pickup[ID][pickupID]);
        Pickup[ID][pickupVisible] = 0;
        Pickup[ID][pickupType] = newtype;
        return 1;
    }
    return 0;
}

public AddsOn()
{
    adds=1;
    return 1;
}

strtok(string[],&idx,seperator = ' ')
{
    new ret[128], i = 0, len = strlen(string);
    while(string[idx] == seperator && idx < len) idx++;
    while(string[idx] != seperator && idx < len)
    {
        ret[i] = string[idx];
        i++;
        idx++;
    }
    while(string[idx] == seperator && idx < len) idx++;
    return ret;
}

forward MakeHigh(playerid);
public MakeHigh(playerid)
{
    SetPlayerDrunkLevel (playerid, 1000);
    SetPlayerWeather(playerid, -66);
    TogglePlayerControllable(playerid, 1);
    SetTimerEx("MakeHigh2", 10000, 0, "d", playerid);
    return 1;
}

forward MakeHigh2(playerid);
public MakeHigh2(playerid)
{
    new rand = random(2);
    if(rand == 1)
    {
        SetPlayerDrunkLevel (playerid, 5000);
        SetPlayerWeather(playerid, 39);
    } else {
        SetPlayerDrunkLevel (playerid, 3400);
        SetPlayerWeather(playerid, -68);
    }
    SetTimerEx("MakeHigh3",  60000, 0, "d", playerid);
    return 1;
}

forward MakeHigh3(playerid);
public MakeHigh3(playerid)
{
    new rand = random(2);
    if(rand == 1)
    {
        SetPlayerDrunkLevel (playerid, 10000);
        SetPlayerWeather(playerid, 500);
    } else {
        SetPlayerDrunkLevel (playerid, 10000);
        SetPlayerWeather(playerid, -610);
    }
    SetTimerEx("MakeHigh4", 60000, 0, "d", playerid);
    return 1;
}

forward MakeHigh4(playerid);
public MakeHigh4(playerid)
{
    SetPlayerDrunkLevel (playerid, 50000);
    SetPlayerWeather(playerid, 39);
    SetTimerEx("MakeHigh5", 60000, 0, "d", playerid);
    return 1;
}

forward MakeHigh5(playerid);
public MakeHigh5(playerid)
{
    SetPlayerDrunkLevel (playerid, 50000);
    SetPlayerWeather(playerid, 0);
    ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);
    return 1;
}

forward IsValidName(playerid);
public IsValidName(playerid)
{
    if (IsPlayerConnected(playerid))
    {
        new player[24];
        GetPlayerName(playerid,player,24);
        for(new n = 0; n < strlen(player); n++)
        {
            if (player[n] == '_') return 1;
            if (player[n] == ']' || player[n] == '[') return 0;
        }
    }
    return 0;
}

public splitter(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc)){
        if(strsrc[i]==delimiter || i==strlen(strsrc)){
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}

stock right(source[], len)
{
    new retval[255], srclen;
    srclen = strlen(source);
    strmid(retval, source, srclen - len, srclen, 255);
    return retval;
}

stock IsVehicleValid(id)
{
    new type=GetVehicleModel(id);
    new blocked[]={ 548, 425, 417, 487, 488, 497, 563, 447, 469, 520 };
    for(new i;i<sizeof(blocked);i++)
    {
        if(type == blocked[i])
        {
            return 0;
        }
    }
    return 1;
}
//==============================================================================
adminspec_strtok(const string[], &index)
{
    new length = strlen(string);
    while ((index < length) && (string[index] <= ' '))
    {
        index++;
    }

    new offset = index;
    new result[20];
    while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
    {
        result[index - offset] = string[index];
        index++;
    }
    result[index - offset] = EOS;
    return result;
}

stock HexToInt(string[])
{
  if (string[0]==0) return 0;
  new i;
  new cur=1;
  new res=0;
  for (i=strlen(string);i>0;i--) {
    if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
    cur=cur*16;
  }
  return res;
}

stock ini_GetKey( line[] )
{
    new keyRes[256];
    keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
    new valRes[256];
    valRes[0]=0;
    if ( strfind( line , "=" , true ) == -1 ) return valRes;
    strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
    return valRes;
}

stock PlayerName(playerid)
{
  new name[255];
  GetPlayerName(playerid, name, 255);
  return name;
}

stock GetVehicleCount()
{
    new count;
    for(new v = 1; v < MAX_VEHICLES; v++)
    {
        if (IsVehicleSpawned(v)) count++;
    }
    return count;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
    if(IsPlayerConnected(playerid))
    {
        new Float:PX,Float:PY,Float:PZ,Float:CX,Float:CY,Float:CZ;
        GetPlayerPos(playerid,PX,PY,PZ);
        GetVehiclePos(vehicleid, CX,CY,CZ);
        new Float:CDistance = (CX-PX)*(CX-PX)+(CY-PY)*(CY-PY)+(CZ-PZ)*(CZ-PZ);
        if(CDistance <= radi*radi)
        {
            return 1;
        }
    }
    return 0;
}

RPName(name[],ret_first[],ret_last[])
{
    new len = strlen(name),
        point = -1,
        bool:done = false;
    for(new i = 0; i < len; i++)
    {
        if(name[i] == '_')
        {
            if(point != -1) return 0;
            else {
                if(i == 0) return 0;
                point = i + 1;
            }
        } else if(point == -1) ret_first[i] = name[i];
        else {
            ret_last[i - point] = name[i];
            done = true;
        }
    }
    if(!done) return 0;
    return 1;
}

stock GetPlayerNameEx(playerid)
{
    new string[24];
    GetPlayerName(playerid,string,24);
    new str[24];
    strmid(str,string,0,strlen(string),24);
    for(new i = 0; i < MAX_PLAYER_NAME; i++)
    {
        if (str[i] == '_') str[i] = ' ';
    }
    return str;
}

stock GetObjectCount()
{
    new count;
    for(new o; o < MAX_OBJECTS; o++)
    {
        if (IsValidObject(o)) count++;
    }
    return count;
}

ReturnUser(text[], playerid = INVALID_PLAYER_ID)
{
    new pos = 0;
    while (text[pos] < 0x21)
    {
        if (text[pos] == 0) return INVALID_PLAYER_ID;
        pos++;
    }
    new userid = INVALID_PLAYER_ID;
    if (IsNumeric(text[pos]))
    {
        userid = strval(text[pos]);
        if (userid >=0 && userid < MAX_PLAYERS)
        {
            if(!IsPlayerConnected(userid))
            {
                userid = INVALID_PLAYER_ID;
            }
            else
            {
                return userid;
            }
        }
    }
    new len = strlen(text[pos]);
    new count = 0;
    new name[MAX_PLAYER_NAME];
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i))
        {
            GetPlayerName(i, name, sizeof (name));
            if (strcmp(name, text[pos], true, len) == 0)
            {
                if (len == strlen(name))
                {
                    return i;
                }
                else
                {
                    count++;
                    userid = i;
                }
            }
        }
    }
    if (count != 1)
    {
        if (playerid != INVALID_PLAYER_ID)
        {
            if (count)
            {
                SendClientMessage(playerid, COLOR_GREY, "Multiple players found, please narrow search");
            }
            else
            {
                SendClientMessage(playerid, COLOR_LIGHTRED, "Playerid is not an active playerid");
            }
        }
        userid = INVALID_PLAYER_ID;
    }
    return userid;
}

IsNumeric(const string[])
{
    for (new i = 0, j = strlen(string); i < j; i++)
    {
        if (string[i] > '9' || string[i] < '0') return 0;
    }
    return 1;
}
//==============================================================================
stock GivePlayerCash(playerid, money)
{
    PlayerInfo[playerid][pCash] += money;
    ResetMoneyBar(playerid);
    UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);
    return PlayerInfo[playerid][pCash];
}

stock GivePlayerCoins(playerid, coins)
{
    PlayerInfo[playerid][pCoins] += coins;
    ResetMoneyBar(playerid);
    UpdateMoneyBar(playerid,PlayerInfo[playerid][pCoins]);
    return PlayerInfo[playerid][pCoins];
}

stock SetPlayerCash(playerid, money)
{
    PlayerInfo[playerid][pCash] = money;
    ResetMoneyBar(playerid);
    UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);
    return PlayerInfo[playerid][pCash];
}

stock ResetPlayerCash(playerid)
{
    PlayerInfo[playerid][pCash] = 0;
    ResetMoneyBar(playerid);
    UpdateMoneyBar(playerid,PlayerInfo[playerid][pCash]);
    return PlayerInfo[playerid][pCash];
}

stock GetPlayerCash(playerid)
{
    return PlayerInfo[playerid][pCash];
}
//==============================================================================
stock frename(oldname[],newname[])
{
    if(!fexist(oldname)) return false;
    new string[255], File:old, File:neww;
    old = fopen(oldname, io_read);
    neww = fopen(newname, io_write);
    while(fread(old, string)){
    StripNewLine(string);
    format(string,sizeof(string),"%s\r\n",string);
    fwrite(neww, string);
    }
    fclose(old);
    fclose(neww);
    fremove(oldname);
    return true;
}

public StripNewLine(string[])
{
  new len = strlen(string);
  if (string[0]==0) return ;
  if ((string[len - 1] == '\n') || (string[len - 1] == '\r'))
    {
      string[len - 1] = 0;
      if (string[0]==0) return ;
      if ((string[len - 2] == '\n') || (string[len - 2] == '\r')) string[len - 2] = 0;
    }
}

forward IsADrugHarvest(vehicleid);

public IsADrugHarvest(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 532)
    {
        return 1;
    }
    return 0;
}

forward DonatorVehicles(vehicleid);

public DonatorVehicles(vehicleid)
{   new model = GetVehicleModel(vehicleid);
    if(model == 541 || model == 521 || model == 468) { return 1; }
    return 0;
}

forward fcreate(filename[]);
public fcreate(filename[])
{
    if (fexist(filename)){return false;}
    new File:fhandle = fopen(filename,io_write);
    fclose(fhandle);
    return true;
}

forward DragUpdate(playerid, targetid);
public DragUpdate(playerid, targetid)
{
	if (PlayerInfo[targetid][pDragged] && PlayerInfo[targetid][pDraggedBy] == playerid)
	{
	    new Float:fAngle;
		//----------------------------------------------------------------------
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, fAngle);
    	//----------------------------------------------------------------------
		x -= 3.0 * floatsin(-fAngle, degrees);
		y -= 3.0 * floatcos(-fAngle, degrees);
        //----------------------------------------------------------------------
		SetPlayerPos(targetid, x, y, z);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}


forward ProxDetectorV(Float:radi, playerid, vehicleid);
public ProxDetectorV(Float:radi, playerid, vehicleid)
{
    if(IsPlayerConnected(playerid))
    {
        new Float:posx, Float:posy, Float:posz;
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        //radi = 2.0; //Trigger Radius
        GetVehiclePos(vehicleid, posx, posy, posz);
        tempposx = (oldposx -posx);
        tempposy = (oldposy -posy);
        tempposz = (oldposz -posz);
        //printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
        if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
        {
            return 1;
        }
    }
    return 0;
}

forward SaveVehicleID(vehicleid);
public SaveVehicleID(vehicleid)
{
    new query[1024];
    printf("Saving Vehicle....");
    format(query, sizeof(query), "UPDATE OwnerVehicles SET Insurances=%d,Model=%d WHERE VehicleID=%d",
    VehicleInfo[vehicleid][vInsurances],
    VehicleInfo[vehicleid][vModel],
    VehicleInfo[vehicleid][vMySQLID]);
    printf(" SQL: %s",query);
    mysql_query(query);
}

forward LoadCityCars();
public LoadCityCars()
{
    new arrCoords[11][64];
    new sql[80], row[512];
    format(sql, sizeof(sql), "SELECT COUNT(*) FROM vehicles");
    mysql_query(sql);
    mysql_store_result();
    mysql_fetch_row(row);
    mysql_free_result();
    for (new idx=1; idx<IBPCARS+1; idx++)
    {
        format(sql, sizeof(sql), "SELECT * FROM vehicles WHERE carid=%d", idx);
        mysql_query(sql);
        mysql_store_result();
        if (mysql_num_rows() > 0)
        {
            mysql_fetch_row(row);
            split(row, arrCoords, '|');
            mysql_free_result();
            new Carid = CreateVehicle(strval(arrCoords[1]), floatstr(arrCoords[2]), floatstr(arrCoords[3]), floatstr(arrCoords[4]), floatstr(arrCoords[5]), strval(arrCoords[6]), strval(arrCoords[7]), 60000);
            DynamicCars[Carid][FactionCar] = strval(arrCoords[8]);
            DynamicCars[Carid][CarType] = strval(arrCoords[9]);
            strmid(DynamicCars[Carid][cDescription], arrCoords[10], 0, strlen(arrCoords[10]), 255);
            if (DynamicCars[Carid][FactionCar] == 3)
            {
                SetVehicleNumberPlate(Carid,"{000000}LSPD");
            }
            else if (DynamicCars[Carid][FactionCar] == 1)
            {
                SetVehicleNumberPlate(Carid,"{000000}SASD");
            }
            else if (DynamicCars[Carid][FactionCar] == 2)
            {
                SetVehicleNumberPlate(Carid,"{000000}ASGH");
            }
            else if (DynamicCars[Carid][FactionCar] == 7)
            {
                SetVehicleNumberPlate(Carid,"{000000}LSAS");
            }
            else if (DynamicCars[Carid][FactionCar] == 4)
            {
                SetVehicleNumberPlate(Carid,"{000000}NEWS");
            }
            else if (DynamicCars[Carid][FactionCar] == 5)
            {
                SetVehicleNumberPlate(Carid,"{000000}LSFD");
            }
            else if (DynamicCars[Carid][FactionCar] == 6)
            {
                SetVehicleNumberPlate(Carid,"{000000}GOV");
            }
            else if (DynamicCars[Carid][CarType] == 69)
            {
                SetVehicleNumberPlate(Carid,"{000000}DMV");
            }
            else if (DynamicCars[Carid][CarType] == 2)
            {
                SetVehicleNumberPlate(Carid,"{000000}RENT");
            }
            else if (DynamicCars[Carid][CarType] == 10)
            {
                SetVehicleNumberPlate(Carid,"{000000}SWEEP");
            }
            else if (DynamicCars[Carid][CarType] == 9)
            {
                SetVehicleNumberPlate(Carid,"{000000}TRUCK");
            }
            else if (DynamicCars[Carid][CarType] == 14)
            {
                SetVehicleNumberPlate(Carid,"{000000}DELIVERY");
            }
            else if (DynamicCars[Carid][CarType] == 11)
            {
                SetVehicleNumberPlate(Carid,"{000000}PIZZA");
            }
            else if (DynamicCars[Carid][CarType] == 12)
            {
                SetVehicleNumberPlate(Carid,"{000000}HAY");
            }
            SetVehicleToRespawn(Carid);
        }
    }
    mysql_free_result();
    return 1;
}

stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]);

stock RemovePlayerWeaponA(playerid, weaponid);
public RemovePlayerWeaponA(playerid, weaponid)
{
    RemovePlayerWeaponEx(playerid, weaponid);
}
//==============================================================================
forward DrugReset(playerid);
public DrugReset(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(JustUsedDrug[playerid] == 1)
        {
            JustUsedDrug[playerid] = 0;
        }
    }
}

public KickPlayer(playerid,kickedby[MAX_PLAYER_NAME],reason[])
{
    new string[128];
    new year, month,day;
    getdate(year, month, day);
    format(string,sizeof(string),"[Info] %s has been kicked by %s - Reason: %s (%d-%d-%d)",GetPlayerNameEx(playerid),kickedby,reason,month,day,year);
    SendClientMessageToAll(COLOR_LIGHTRED,string);
    KickLog(string);
    return Kick(playerid);
}

public BanPlayer(playerid,bannedby[MAX_PLAYER_NAME],reason[])
{
    new string[128];
    new year, month,day;
    getdate(year, month, day);
    format(string,sizeof(string),"[Info] %s has been banned by %s - Reason: %s (%d-%d-%d)",GetPlayerNameEx(playerid),bannedby,reason,month,day,year);
    SendClientMessageToAll(COLOR_LIGHTRED,string);
    BanLog(string);
    return Ban(playerid);
}

public PayLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/pay.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public CommandLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/command.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}


public HackLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/hack.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public AbuseLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/abuse.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public LoginLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/login.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public KickLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/kick.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public ArrestLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/arrest.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public SuspectLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/suspect.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public AjailLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/ajail.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public WeaponLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/weaponlog.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public BanLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/ban.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public FactionChatLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/factionchat.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public PMLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/pm.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public ScrapLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/scrap.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public DonatorLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/donator.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public ReportLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/report.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}

public OOCLog(string[])
{
    new entry[256];
    format(entry, sizeof(entry), "%s\r\n",string);
    new File:hFile;
    hFile = fopen("IBP/Logs/ooc.log", io_append);
    fwrite(hFile, entry);
    fclose(hFile);
}
forward LoadDrugSystem();
forward SaveDrugSystem();
public LoadDrugSystem()
{
    new arrCoords[1][64];
    new strFromFile2[256];
    new File: file = fopen("IBP/Illegal/DrugFarm.ini", io_read);
    if (file)
    {
        fread(file, strFromFile2);
        split(strFromFile2, arrCoords, ',');
        DrugFarm[Ammount] = strval(arrCoords[0]);
        fclose(file);
    }
    return 1;
}

public SaveDrugSystem()
{
    new coordsstring[256];
    format(coordsstring, sizeof(coordsstring), "%d", DrugFarm[Ammount]);
    new File: file2 = fopen("IBP/Illegal/DrugFarm.ini", io_write);
    fwrite(file2, coordsstring);
    fclose(file2);
    return 1;
}

forward SaveFarmSystem();
public LoadFarmSystem()
{
    new arrCoords[1][64];
    new strFromFile2[256];
    new File: file = fopen("IBP/Illegal/FlintFarm.ini", io_read);
    if (file)
    {
        fread(file, strFromFile2);
        split(strFromFile2, arrCoords, ',');
        FlintFarm[Ammount] = strval(arrCoords[0]);
        fclose(file);//hai ma te rog eu
    }
    return 1;
}
forward LoadFarmSystem();
public SaveFarmSystem()
{
    new coordsstring[256];
    format(coordsstring, sizeof(coordsstring), "%d", FlintFarm[Ammount]);
    new File: file2 = fopen("IBP/Illegal/FlintFarm.ini", io_write);
    fwrite(file2, coordsstring);
    fclose(file2);
    return 1;
}

// WEAPON SYSTEM
forward SaveGunSmuggle();
forward LoadGunSmuggle();

public LoadGunSmuggle()
{
    new arrCoords[10][128];
    new strFromFile2[256];
    new File: file = fopen("IBP/Illegal/gunsmuggle.cfg", io_read);
    if (file)
    {
        fread(file, strFromFile2);
        split(strFromFile2, arrCoords, '|');
        Gunsystemer[SmuggleGun1] = strval(arrCoords[0]);
        Gunsystemer[SmuggleGun1a] = strval(arrCoords[1]);
        Gunsystemer[SmuggleGun2] = strval(arrCoords[2]);
        Gunsystemer[SmuggleGun2a] = strval(arrCoords[3]);
        Gunsystemer[SmuggleGun3] = strval(arrCoords[4]);
        Gunsystemer[SmuggleGun3a] = strval(arrCoords[5]);
        Gunsystemer[SmuggleGun4] = strval(arrCoords[6]);
        Gunsystemer[SmuggleGun4a] = strval(arrCoords[7]);
        Gunsystemer[SmuggleGun5] = strval(arrCoords[8]);
        Gunsystemer[SmuggleGun5a] = strval(arrCoords[9]);
        fclose(file);
    }
    return 1;
}

public SaveGunSmuggle()
{
    new File: file2;
    new coordsstring[512];
    format(coordsstring, sizeof(coordsstring), "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
    Gunsystemer[SmuggleGun1],
    Gunsystemer[SmuggleGun1a],
    Gunsystemer[SmuggleGun2],
    Gunsystemer[SmuggleGun2a],
    Gunsystemer[SmuggleGun3],
    Gunsystemer[SmuggleGun3a],
    Gunsystemer[SmuggleGun4],
    Gunsystemer[SmuggleGun4a],
    Gunsystemer[SmuggleGun5],
    Gunsystemer[SmuggleGun5a]);
    file2 = fopen("IBP/Illegal/gunsmuggle.cfg", io_write);
    fwrite(file2, coordsstring);
    fclose(file2);
    return 1;
}

//==============================================================================
public GameModeRestart()
{
    new string[128];
    format(string, sizeof(string), "Game Mode Restarting");
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            DisablePlayerCheckpoint(i);
            ActiveCP[i] = 0;
            GameTextForPlayer(i, string, 4000, 5);
            SetPlayerCameraPos(i,1460.0, -1324.0, 287.2);
            SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
            SavePlayerAccount(i);
            SavePlayerAccount(i);
            gPlayerLogged[i] = 0;
        }
    }
    SetTimer("GameModeRestartFunction", 4000, 0);
    return 1;
}

public GameModeRehash()
{
    new string[128];
    format(string, sizeof(string), "Game Mode Restarting");
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            Kick(i);
            DisablePlayerCheckpoint(i);
            ActiveCP[i] = 0;
            GameTextForPlayer(i, string, 4000, 5);
            SetPlayerCameraPos(i,1460.0, -1324.0, 287.2);
            SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
            SavePlayerAccount(i);
            gPlayerLogged[i] = 0;
        }
    }
    SetTimer("GameModeRestartFunction", 4000, 0);
    SaveStuff();
    return 1;
}

public GameModeRestartFunction()
{
    GameModeExit();
}

forward LoadStuff();
public LoadStuff()
{
    new arrCoords[2][64];
    new strFromFile2[128];
    new File: file = fopen("IBP/State/GovernmentStuff.ini", io_read);
    if (file)
    {
        fread(file, strFromFile2);
        split(strFromFile2, arrCoords, ',');
        Tax = strval(arrCoords[0]);
        EMSblood = strval(arrCoords[1]);
        fclose(file);
    }
    else
    {
    
        new File:example = fopen("IBP/State/GovernmentStuff.ini", io_write);
        fclose(example);
        print("[ERROR]: GovernmentStuff.ini wasn't found in scriptfiles/IBP/State/, Creating it NOW");
        SaveStuff();
    }
    return 1;
}

forward SaveStuff();
public SaveStuff()
{
    new coordsstring[128];
    format(coordsstring, sizeof(coordsstring), "%d,%d,",Tax,EMSblood);
    new File: file2 = fopen("IBP/State/GovernmentStuff.ini", io_write);
    fwrite(file2, coordsstring);
    fclose(file2);
    return 1;
}

stock InitPlayerConnection( playerid )
{
    new Query[ 128 ], Name[ MAX_PLAYER_NAME ], EscapedName[ MAX_PLAYER_NAME ];
    GetPlayerName( playerid, Name, sizeof( Name ) );
    mysql_real_escape_string( Name, EscapedName );
	#pragma unused Name
    format( Query, sizeof( Query ), "SELECT `UserID` FROM `Accounts` WHERE `Username` = '%s'", EscapedName );
    mysql_query( Query );
    printf(" SQL: %s",Query);
    mysql_store_result();
    if( mysql_num_rows() >= 1 )
	{
        if( mysql_num_rows() >= 2 )
		{
		    mysql_free_result();
            SendClientMessage( playerid, COLOR_WHITE, "There seems to be duplicates of your account, please contact a high-level admin." );
            SendClientMessage( playerid, COLOR_WHITE, "Best to screenshot this and forum PM a scripter with your ingame name, then they will check it asap." );
            Kick( playerid );
        }
        else
		{
            PlayerInfo[playerid][pDatabaseID] = mysql_fetch_int();
			new string[128];
			format( string, sizeof( string ), "{FFFFFF}Bine ai (re)venit {EC891D}%s{FFFFFF}!\nTe rugam sa introduci parola", GetPlayerNameEx(playerid) );
            ShowPlayerDialog( playerid, 1, DIALOG_STYLE_INPUT,"{EC891D}Logare{FFFFFF}",string, "Logare", "Iesire" );
            SetTimerEx("LogTimer", 60000, 0, "d", playerid);
		    TogglePlayerSpectating(playerid, 1);
			gPlayerLogged[playerid] = 0;
			mysql_free_result();
			
        }
    }
    else
	{
  		ShowPlayerDialog( playerid, 2, DIALOG_STYLE_PASSWORD, "{6EF83C}Inregistrare{FFFFFF}", "Bine ai venit!\n\nTe rugam sa introduci o parola pentru a te inregistra.", "Register", "Cancel" );
        mysql_free_result();
        gPlayerLogged[playerid] = 0;
		//SendClientMessage(playerid, COLOR_WHITE, "Nu ai un cont inregistrat, conecteazate pe {7F7FFF}www.Washington-ls.eu {FFFFFF}si inregistreazate.");
		//SetTimerEx("KickPublic", 50, false, "d", playerid);
	}
	return 1;
}



stock SavePlayerAccount( playerid )
{
    new String[ 1024 ];
    if( gPlayerLogged[playerid] == 1 )
    {
        // Load normal stats 1
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Password` = '%s', `Level` = '%d', `Admin` = '%d', `Banned` = '%d', `Sex` = '%d', `Tutorial` = '%d', `Bank` = '%d', `ForumName` = '%s' WHERE `UserID` = '%d'"
        , PlayerInfo[playerid][pKey], PlayerInfo[playerid][pLevel], PlayerInfo[playerid][pAdministrator], PlayerInfo[playerid][pBan], PlayerInfo[playerid][pSex], PlayerInfo[ playerid ][ pTut ], PlayerInfo[playerid][pBank],PlayerInfo[playerid][pForumName], PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // Load normal stats 2
        PlayerInfo[playerid][pCash] = GetPlayerCash(playerid);
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Experience` = '%d', `Money` = '%d', `Skin` = '%d', `SpawnPoint` = '%d', `HouseKey` = '%d', `BizKey` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pExp],PlayerInfo[playerid][pCash],PlayerInfo[playerid][pSkin],PlayerInfo[playerid][pSpawnPoint],PlayerInfo[playerid][pHouseKey],PlayerInfo[playerid][pBizKey],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // Position
        GetPlayerPos( playerid, PlayerInfo[playerid][pLoadPosX], PlayerInfo[playerid][pLoadPosY], PlayerInfo[playerid][pLoadPosZ] );
        format( String, sizeof( String ), "UPDATE `Accounts` SET `LoadPosX` = '%f', `LoadPosY` = '%f', `LoadPosZ` = '%f', `LoadPosInt` = '%d', `LoadPosW` = '%d',`Crashed` = '%d' WHERE `UserID` = '%d'"
        , PlayerInfo[playerid][pLoadPosX], PlayerInfo[playerid][pLoadPosY], PlayerInfo[playerid][pLoadPosZ], GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid),PlayerInfo[playerid][pCrashed], PlayerInfo[playerid][pDatabaseID] );
        mysql_query(String);

        // Vehicles here
        format( String, sizeof( String ), "UPDATE `Accounts` SET `V1` = '%s', `V2` = '%s', `V3` = '%s', `V4` = '%s', `V5` = '%s', `CarKey` = '%d', `Savings` = '%d' WHERE `UserID` = '%d'"
        , PlayerVehicle[playerid][pVeh1], PlayerVehicle[playerid][pVeh2], PlayerVehicle[playerid][pVeh3], PlayerVehicle[playerid][pVeh4], PlayerVehicle[playerid][pVeh5],PlayerInfo[playerid][pCarKey],PlayerInfo[playerid][pSavings], PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        format( String, sizeof( String ), "UPDATE `Accounts` SET `Wanted` = '%s', `Cell` = '%d' WHERE `UserID` = '%d'",PlayerInfo[playerid][pWanted],PlayerInfo[playerid][pCell],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // Weapon Saving
        new empty;
/*      for (new i = 0; i < 13; i++){
        GetPlayerWeaponData(playerid, i, PlayerInfo[playerid][pWeapons][i], empty);}*/
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Gun0` = '%i', `Gun1` = '%i', `Gun2` = '%i', `Gun3` = '%i', `Gun4` = '%i', `Gun5` = '%i', `Gun6` = '%i' WHERE `UserID` = '%d'"
        , WeaponInfo[playerid][pSlot][0],WeaponInfo[playerid][pSlot][1], WeaponInfo[playerid][pSlot][2], WeaponInfo[playerid][pSlot][3], WeaponInfo[playerid][pSlot][4], WeaponInfo[playerid][pSlot][5], WeaponInfo[playerid][pSlot][6], PlayerInfo[playerid][pDatabaseID] );
        mysql_query(String);

        format( String, sizeof( String ), "UPDATE `Accounts` SET `Gun7` = '%i', `Gun8` = '%i', `Gun9` = '%i', `Gun10` = '%i', `Gun11` = '%i', `Gun12` = '%i' WHERE `UserID` = '%d'"
        , WeaponInfo[playerid][pSlot][7],WeaponInfo[playerid][pSlot][8], WeaponInfo[playerid][pSlot][9], WeaponInfo[playerid][pSlot][10], WeaponInfo[playerid][pSlot][11], WeaponInfo[playerid][pSlot][12], PlayerInfo[playerid][pDatabaseID] );
        mysql_query(String);

        // AMMO SAVING
        for (new i = 0; i < 13; i++)
        {
            if(WeaponInfo[playerid][pSlot][i] != 0)
            {
                GetPlayerWeaponData(playerid, i, empty, PlayerInfo[playerid][pAmmo][i]);
            }
            else
            {
                PlayerInfo[playerid][pAmmo][i] = 0;
            }
        }
        format( String, sizeof( String ), "UPDATE `Accounts` SET `GunAmmo0` = '%i', `GunAmmo1` = '%i', `GunAmmo2` = '%i', `GunAmmo3` = '%i', `GunAmmo4` = '%i', `GunAmmo5` = '%i', `GunAmmo6` = '%i' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pAmmo][0],PlayerInfo[playerid][pAmmo][1], PlayerInfo[playerid][pAmmo][2], PlayerInfo[playerid][pAmmo][3], PlayerInfo[playerid][pAmmo][4], PlayerInfo[playerid][pAmmo][5],PlayerInfo[playerid][pAmmo][6], PlayerInfo[playerid][pDatabaseID] );
        mysql_query(String);

        format( String, sizeof( String ), "UPDATE `Accounts` SET `GunAmmo7` = '%i', `GunAmmo8` = '%i', `GunAmmo9` = '%i', `GunAmmo10` = '%i', `GunAmmo11` = '%i', `GunAmmo12` = '%i' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pAmmo][7], PlayerInfo[playerid][pAmmo][8], PlayerInfo[playerid][pAmmo][9], PlayerInfo[playerid][pAmmo][10], PlayerInfo[playerid][pAmmo][11],PlayerInfo[playerid][pAmmo][12], PlayerInfo[playerid][pDatabaseID] );
        mysql_query(String);

        SavePlayerOtherStats(playerid);
    }
    return 1;
}
stock SavePlayerOtherStats( playerid )
{
    new String[ 1024 ];
    if( gPlayerLogged[playerid] == 1 )
    {
        // Tester and such stupid stuff
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Tester` = '%d', `Demerits` = '%d', `CarDupe` = '%d', `Fight` = '%d', `Walk` = '%d', `Talk` = '%d', `Crimes` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pTester],PlayerInfo[playerid][pDemerits],PlayerInfo[playerid][pDupeKey],PlayerInfo[playerid][pFight],PlayerInfo[playerid][pWalk],PlayerInfo[playerid][pTalk],PlayerInfo[playerid][pCrimes],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // More stupid shit
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Deaths` = '%d', `Arrested` = '%d', `Frequence` = '%d', `Radio` = '%d', `MaskID` = '%d', `Race` = '%s' WHERE `UserID` = '%d'"
        ,PlayerInfo[ playerid ][ pDeaths ],PlayerInfo[ playerid ][ pArrested ],PlayerInfo[playerid][pRfreq],PlayerInfo[playerid][pRadio],PlayerInfo[playerid][pMaskID],PlayerInfo[playerid][pRace],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // More stupid shit
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Job` = '%d', `JobAllow` = '%d', `Mask` = '%d', `Faction` = '%d', `Rank` = '%d', `Credit` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[ playerid ][ pJob ],PlayerInfo[ playerid ][ pCanJob ],PlayerInfo[playerid][pMask],PlayerInfo[playerid][pFaction],PlayerInfo[playerid][pRank],PlayerInfo[playerid][pCarCredit],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // More stupid shit
        format( String, sizeof( String ), "UPDATE `Accounts` SET `PayCheck` = '%d', `PlayingHours` = '%d', `Jailed` = '%d', `JailTime` = '%d',`Garage` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[ playerid ][ pPayCheck ],PlayerInfo[playerid][pPlayingHours],PlayerInfo[playerid][pJailed],PlayerInfo[playerid][pJailTime],PlayerInfo[playerid][pGarageKey],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // More stupid shit
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Cigarettes` = '%d', `BadgeNumber` = '%d', `Lighter` = '%d', `CarLic` = '%d', `FlyLic` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pCigarettes],PlayerInfo[playerid][pBadgeNumber],PlayerInfo[playerid][pLighter],PlayerInfo[playerid][pCarLic],PlayerInfo[playerid][pFlyLic],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // More stupid shit
        format( String, sizeof( String ), "UPDATE `Accounts` SET `WepLic` = '%d', `LifeLic` = '%d', `PhoneNumber` = '%d', `ListNumber` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pWepLic],PlayerInfo[playerid][pLifeLic],PlayerInfo[playerid][pPhoneNumber],PlayerInfo[playerid][pListNumber],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // More stupid shit
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Materials` = '%d', `Products` = '%d', `ContractTime` = '%d', `WorkOn` = '%d', `HeadValue` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pMaterials],PlayerInfo[playerid][pProducts],PlayerInfo[playerid][pContractTime],PlayerInfo[playerid][pWorkOn],PlayerInfo[playerid][pHeadValue],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        format( String, sizeof( String ), "UPDATE `Accounts` SET `WeedX` = '%f', `WeedY` = '%f', `WeedZ` = '%f', `WeedTimer` = '%d', `WeedPlant` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pWeedX],PlayerInfo[playerid][pWeedY],PlayerInfo[playerid][pWeedZ],PlayerInfo[playerid][pWeedTimer],PlayerInfo[playerid][pPlant],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        if(PlayerInfo[playerid][pArmour] != 0)
        {
            new Float:AM;
            GetPlayerArmour(playerid,AM);
            PlayerInfo[playerid][pArmour] = AM;
            format( String, sizeof( String ), "UPDATE `Accounts` SET `Armour` = '%f' WHERE `UserID` = '%d'",PlayerInfo[playerid][pArmour],PlayerInfo[playerid][pDatabaseID]);
            mysql_query(String);
        }
        // Drugs
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Seeds` = '%d', `Weed` = '%d', `Ecstasy` = '%d', `Amphetamine` = '%d', `Cocaine` = '%d', `Heroin` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pSeeds],PlayerInfo[playerid][pWeed],PlayerInfo[playerid][pEcstasy],PlayerInfo[playerid][pAmphetamine],PlayerInfo[playerid][pCocaine],PlayerInfo[playerid][pHeroin],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // Note
        format( String, sizeof( String ), "UPDATE `Accounts` SET `note1` = '%s', `note1s` = '%d', `note2` = '%s', `note2s` = '%d', `note3` = '%s', `note3s` = '%d', `note4` = '%s' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pNote1],PlayerInfo[playerid][pNote1s],PlayerInfo[playerid][pNote2],PlayerInfo[playerid][pNote2s],PlayerInfo[playerid][pNote3],PlayerInfo[playerid][pNote3s],PlayerInfo[playerid][pNote4], PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        // Note
        format( String, sizeof( String ), "UPDATE `Accounts` SET `note4s` = '%d', `note5` = '%s', `note5s` = '%d', `Social` = '%d', `Age` = '%d', `BMX` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pNote4s],PlayerInfo[playerid][pNote5],PlayerInfo[playerid][pNote5s],PlayerInfo[playerid][pSocial],PlayerInfo[playerid][pAge],PlayerInfo[playerid][pBMX], PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        format( String, sizeof( String ), "UPDATE `Accounts` SET `ConName1` = '%s', `ConNum1` = '%d', `ApartKey` = '%d', `Location` = '%s', `Donator` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pConName1],PlayerInfo[playerid][pConNum1],PlayerInfo[playerid][pApartmentKey],PlayerInfo[playerid][pLocation],PlayerInfo[playerid][pDonator],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);

        format( String, sizeof( String ), "UPDATE `Accounts` SET `ConName2` = '%s', `ConNum2` = '%d', `MoneyConvert` = '%d', `PaydayTime` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pConName2],PlayerInfo[playerid][pConNum2],PlayerInfo[playerid][pMoneyconvert],PlayerInfo[playerid][pPaydayTime],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);
        
        format( String, sizeof( String ), "UPDATE `Accounts` SET `CarBill` = '%s', `HouseBill` = '%d', `BusinessBill` = '%d', `NormalMail` = '%d', `Developer` = '%d', `Coins` = '%d'  WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][CarBill],PlayerInfo[playerid][HouseBill],PlayerInfo[playerid][BusinessBill],PlayerInfo[playerid][NormalMail],PlayerInfo[playerid][pDeveloper],PlayerInfo[playerid][pCoins],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);
        
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Watch` = '%d', `Guitar` = '%d', `Helmet` = '%d', `Hat` = '%d' , `Maskobject` = '%d', `Glasses` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pWatch],PlayerInfo[playerid][pGuitar],PlayerInfo[playerid][pHelmet],PlayerInfo[playerid][pHat],PlayerInfo[playerid][pMaskobject],PlayerInfo[playerid][pGlasses],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);
        
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Headphone` = '%d',`Laser` = '%d',`Imprumut` = '%d',`Hair` = '%d' WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pHeadphone],PlayerInfo[playerid][pLaser],PlayerInfo[playerid][pImprumut],PlayerInfo[playerid][pHair],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);
        
        format( String, sizeof( String ), "UPDATE `Accounts` SET `BratDrept` = '%s',`BratStang` = '%s',`Piept` = '%s',`Spate` = '%s',`PiciorDrept` = '%s',`PiciorStang` = '%s' WHERE `UserID` = '%d'"
        ,Tattoo[playerid][tBratDrept],Tattoo[playerid][tBratStang],Tattoo[playerid][tPiept],Tattoo[playerid][tSpate],Tattoo[playerid][tPiciorDrept],Tattoo[playerid][tPiciorStang],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);
        
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Accent` = '%s',`CarKey2` = '%d',`CarSpawned1` = '%d',`CarSpawned2` = '%d', WHERE `UserID` = '%d'"
        ,PlayerInfo[playerid][pAccent],PlayerInfo[playerid][pCarKey2],SpawnedCar[playerid][0],SpawnedCar[playerid][1],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);
        
        SavePlayerBank(playerid);
    }
    return 1;
}

stock SavePlayerBank( playerid )
{
    new String[ 1024 ];
    if( gPlayerLogged[playerid] == 1 )
    {
        // Salvare cont bancar, pin, daca contul e 'inghetat', daca are cont creeat. Thanks to Valentin.
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Pin` = '%d', `Card` = '%d', `Creat` = '%d', `AccountNumber` = '%d', `Freezed` = '%d' WHERE `UserID` = '%d'"
        , BancaInfo[playerid][bPin], BancaInfo[playerid][bCard], BancaInfo[playerid][bCreat], BancaInfo[playerid][bAccount], BancaInfo[playerid][bFreezed], PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);
    }
    return 1;
}

stock SaveBadges(playerid)
{
    new String[ 1024 ];
    if( gPlayerLogged[playerid] == 1 )
    {
        // Badges
        format( String, sizeof( String ), "UPDATE `Accounts` SET `DieTwentyTimes` = '%d', `DieOneTime` = '%d', `DriveFast` = '%d' WHERE `UserID` = '%d'"
        ,PlayerBadges[ playerid ][ DieTwentyTimes ],PlayerBadges[ playerid ][ DieOneTime ],PlayerBadges[ playerid ][ DriveFast ],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);
        
        format( String, sizeof( String ), "UPDATE `Accounts` SET `FirstSmoke` = '%d', `FirstCar` = '%d', `FirstHouse` = '%d' WHERE `UserID` = '%d'"
        ,PlayerBadges[ playerid ][ FirstSmoke ],PlayerBadges[ playerid ][ FirstCar ], PlayerBadges[ playerid ][ FirstHouse ], PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);
        
        format( String, sizeof( String ), "UPDATE `Accounts` SET `GreetJohn` = '%d' WHERE `UserID` = '%d'"
        ,PlayerBadges[ playerid ][ GreetJohn ],PlayerInfo[playerid][pDatabaseID]);
        mysql_query(String);
    }
    return 1;
}


stock LoadAccountVariables( playerid )
{
    if( IsPlayerConnected( playerid ) )
    {
        new DataString[ 1536 ], Query[ 1536 ];

        format( Query, sizeof( Query ), "SELECT * FROM `Accounts` WHERE `UserID` = '%d'", PlayerInfo[playerid][pDatabaseID] );
        if(mysql_query( Query ))
        {
            mysql_store_result();
        } else {
            mysql_free_result();
            SendClientMessage( playerid, COLOR_WHITE, "MYSQL ERROR LAV, feel free to report this  by SS'ing it and send it to a dev." );
            printf("Could not call loadaccountvariables query %d %d",playerid,PlayerInfo[playerid][pDatabaseID]);
            Kick(playerid);
        }
        printf(" SQL: %s",Query);

        mysql_fetch_field( "Level", DataString );
        PlayerInfo[ playerid ][ pLevel ] = strval( DataString );

        mysql_fetch_field( "Admin", DataString );
        PlayerInfo[ playerid ][ pAdministrator ] = strval( DataString );

        mysql_fetch_field( "Banned", DataString );
        PlayerInfo[ playerid ][ pBan ] = strval( DataString );

        mysql_fetch_field( "Sex", DataString );
        PlayerInfo[ playerid ][ pSex ] = strval( DataString );

        mysql_fetch_field( "Tutorial", DataString );
        PlayerInfo[ playerid ][ pTut ] = strval( DataString );

        mysql_fetch_field( "Bank", DataString );
        PlayerInfo[ playerid ][ pBank ] = strval( DataString );

        mysql_fetch_field( "LoadPosX", DataString );
        PlayerInfo[ playerid ][ pLoadPosX ] = floatstr( DataString );

        mysql_fetch_field( "LoadPosY", DataString );
        PlayerInfo[ playerid ][ pLoadPosY ] = floatstr( DataString );

        mysql_fetch_field( "LoadPosZ", DataString );
        PlayerInfo[ playerid ][ pLoadPosZ ] = floatstr( DataString );

        mysql_fetch_field( "LoadPosInt", DataString );
        PlayerInfo[ playerid ][ pLoadPosInt ] = strval( DataString );

        mysql_fetch_field( "LoadPosW", DataString );
        PlayerInfo[ playerid ][ pLoadPosW ] = strval( DataString );
        
        mysql_fetch_field( "Developer", DataString );
        PlayerInfo[ playerid ][ pDeveloper ] = strval( DataString );
        
        mysql_fetch_field( "Coins", DataString );
        PlayerInfo[ playerid ][ pCoins ] = strval( DataString );

        mysql_fetch_field( "LoadPos", DataString );
        PlayerInfo[ playerid ][ pLoadPos ] = strval( DataString );

        mysql_fetch_field( "LoadPosInt", DataString );
        PlayerInfo[ playerid ][ pLoadPosInt ] = strval( DataString );

        mysql_fetch_field( "WeedX", DataString );
        PlayerInfo[ playerid ][ pWeedX ] = floatstr( DataString );

        mysql_fetch_field( "WeedY", DataString );
        PlayerInfo[ playerid ][ pWeedY ] = floatstr( DataString );

        mysql_fetch_field( "WeedZ", DataString );
        PlayerInfo[ playerid ][ pWeedZ ] = floatstr( DataString );

        mysql_fetch_field( "WeedTimer", DataString );
        PlayerInfo[ playerid ][ pWeedTimer ] = strval( DataString );

        mysql_fetch_field( "WeedPlant", DataString );
        PlayerInfo[ playerid ][ pPlant ] = strval( DataString );

        mysql_fetch_field( "Cell", DataString );
        PlayerInfo[ playerid ][ pCell ] = strval( DataString );

        mysql_fetch_field( "Donator", DataString );
        PlayerInfo[ playerid ][ pDonator ] = strval( DataString );

        mysql_fetch_field( "Experience", DataString );
        PlayerInfo[ playerid ][ pExp ] = strval( DataString );

        mysql_fetch_field( "Money", DataString );
        PlayerInfo[ playerid ][ pCash] = strval( DataString );

        mysql_fetch_field( "Savings", DataString );
        PlayerInfo[ playerid ][ pSavings ] = strval( DataString );

        mysql_fetch_field( "Skin", DataString );
        PlayerInfo[ playerid ][ pSkin ] = strval( DataString );

        mysql_fetch_field( "SpawnPoint", DataString );
        PlayerInfo[ playerid ][ pSpawnPoint ] = strval( DataString );

        mysql_fetch_field( "HouseKey", DataString );
        PlayerInfo[ playerid ][ pHouseKey ] = strval( DataString );

        mysql_fetch_field( "BizKey", DataString );
        PlayerInfo[ playerid ][ pBizKey ] = strval( DataString );

        mysql_fetch_field( "Gun1", DataString );
        PlayerInfo[ playerid ][ pWeapons ][1] = strval( DataString );

        mysql_fetch_field( "Gun2", DataString );
        PlayerInfo[ playerid ][ pWeapons ][2] = strval( DataString );

        mysql_fetch_field( "Gun3", DataString );
        PlayerInfo[ playerid ][ pWeapons ][3] = strval( DataString );

        mysql_fetch_field( "Gun4", DataString );
        PlayerInfo[ playerid ][ pWeapons ][4] = strval( DataString );

        mysql_fetch_field( "Gun5", DataString );
        PlayerInfo[ playerid ][ pWeapons ][5] = strval( DataString );

        mysql_fetch_field( "Gun6", DataString );
        PlayerInfo[ playerid ][ pWeapons ][6] = strval( DataString );

        mysql_fetch_field( "Gun7", DataString );
        PlayerInfo[ playerid ][ pWeapons ][7] = strval( DataString );

        mysql_fetch_field( "Gun8", DataString );
        PlayerInfo[ playerid ][ pWeapons ][8] = strval( DataString );

        mysql_fetch_field( "Gun9", DataString );
        PlayerInfo[ playerid ][ pWeapons ][9] = strval( DataString );

        mysql_fetch_field( "Gun10", DataString );
        PlayerInfo[ playerid ][ pWeapons ][10] = strval( DataString );

        mysql_fetch_field( "Gun11", DataString );
        PlayerInfo[ playerid ][ pWeapons ][11] = strval( DataString );

        mysql_fetch_field( "Gun12", DataString );
        PlayerInfo[ playerid ][ pWeapons ][12] = strval( DataString );

        mysql_fetch_field( "GunAmmo1", DataString );
        PlayerInfo[ playerid ][ pAmmo ][1] = strval( DataString );

        mysql_fetch_field( "GunAmmo2", DataString );
        PlayerInfo[ playerid ][ pAmmo ][2] = strval( DataString );

        mysql_fetch_field( "GunAmmo3", DataString );
        PlayerInfo[ playerid ][ pAmmo ][3] = strval( DataString );

        mysql_fetch_field( "GunAmmo4", DataString );
        PlayerInfo[ playerid ][ pAmmo ][4] = strval( DataString );

        mysql_fetch_field( "GunAmmo5", DataString );
        PlayerInfo[ playerid ][ pAmmo ][5] = strval( DataString );

        mysql_fetch_field( "GunAmmo6", DataString );
        PlayerInfo[ playerid ][ pAmmo ][6] = strval( DataString );

        mysql_fetch_field( "GunAmmo7", DataString );
        PlayerInfo[ playerid ][ pAmmo ][7] = strval( DataString );

        mysql_fetch_field( "GunAmmo8", DataString );
        PlayerInfo[ playerid ][ pAmmo ][8] = strval( DataString );

        mysql_fetch_field( "GunAmmo9", DataString );
        PlayerInfo[ playerid ][ pAmmo ][9] = strval( DataString );

        mysql_fetch_field( "GunAmmo10", DataString );
        PlayerInfo[ playerid ][ pAmmo ][10] = strval( DataString );

        mysql_fetch_field( "GunAmmo11", DataString );
        PlayerInfo[ playerid ][ pAmmo ][11] = strval( DataString );

        mysql_fetch_field( "GunAmmo12", DataString );
        PlayerInfo[ playerid ][ pAmmo ][12] = strval( DataString );

        mysql_fetch_field( "V1", DataString);
        strmid(PlayerVehicle[playerid][pVeh1], DataString, 0, strlen(DataString), 255);

        mysql_fetch_field( "V2", DataString);
        strmid(PlayerVehicle[playerid][pVeh2], DataString, 0, strlen(DataString), 255);

        mysql_fetch_field( "V3", DataString);
        strmid(PlayerVehicle[playerid][pVeh3], DataString, 0, strlen(DataString), 255);

        mysql_fetch_field( "V4", DataString);
        strmid(PlayerVehicle[playerid][pVeh4], DataString, 0, strlen(DataString), 255);

        mysql_fetch_field( "V5", DataString);
        strmid(PlayerVehicle[playerid][pVeh5], DataString, 0, strlen(DataString), 255);

        mysql_fetch_field( "Wanted", DataString);
        strmid(PlayerInfo[playerid][pWanted], DataString, 0, strlen(DataString), 255);

        mysql_fetch_field( "Armour", DataString );
        PlayerInfo[ playerid ][ pArmour ] = floatstr( DataString );
        SetPlayerArmour(playerid, PlayerInfo[ playerid ][ pArmour ]);
        if(PlayerInfo[ playerid ][ pArmour ] != 0)
        { PlayerInfo[playerid][pGotArmour] = 1; }

        mysql_fetch_field( "CarDupe", DataString );
        PlayerInfo[ playerid ][ pDupeKey ] = strval( DataString );

        mysql_fetch_field( "CarKey", DataString );
        PlayerInfo[ playerid ][ pCarKey ] = strval( DataString );

        mysql_fetch_field( "Credit", DataString );
        PlayerInfo[ playerid ][ pCarCredit ] = strval( DataString );
        
        mysql_fetch_field( "CarBill", DataString );
        PlayerInfo[ playerid ][ CarBill ] = strval( DataString );

        mysql_fetch_field( "HouseBill", DataString );
        PlayerInfo[ playerid ][ HouseBill ] = strval( DataString );

        mysql_fetch_field( "BusinessBill", DataString );
        PlayerInfo[ playerid ][ BusinessBill ] = strval( DataString );
        
        mysql_fetch_field( "NormalMail", DataString );
        PlayerInfo[ playerid ][ NormalMail ] = strval( DataString );

        mysql_fetch_field( "BMX", DataString );
        PlayerInfo[ playerid ][ pBMX ] = strval( DataString );

        mysql_fetch_field( "Crashed", DataString );
        PlayerInfo[ playerid ][ pCrashed ] = strval( DataString );

        mysql_fetch_field( "Tester", DataString );
        PlayerInfo[ playerid ][ pTester ] = strval( DataString );

        mysql_fetch_field( "Demerits", DataString );
        PlayerInfo[ playerid ][ pDemerits ] = strval( DataString );

        mysql_fetch_field( "Arrested", DataString );
        PlayerInfo[ playerid ][ pArrested ] = strval( DataString );

        mysql_fetch_field( "Age", DataString );
        PlayerInfo[ playerid ][ pAge ] = strval( DataString );

        mysql_fetch_field( "MoneyConvert", DataString );
        PlayerInfo[ playerid ][ pMoneyconvert ] = strval( DataString );

        mysql_fetch_field( "Deaths", DataString );
        PlayerInfo[ playerid ][ pDeaths ] = strval( DataString );

        mysql_fetch_field( "Crimes", DataString );
        PlayerInfo[ playerid ][ pCrimes ] = strval( DataString );

        mysql_fetch_field( "Fight", DataString );
        PlayerInfo[ playerid ][ pFight ] = strval( DataString );

        mysql_fetch_field( "Talk", DataString );
        PlayerInfo[ playerid ][ pTalk ] = strval( DataString );

        mysql_fetch_field( "Walk", DataString );
        PlayerInfo[ playerid ][ pWalk ] = strval( DataString );

        mysql_fetch_field( "Social", DataString );
        PlayerInfo[ playerid ][ pSocial ] = strval( DataString );

        mysql_fetch_field( "Radio", DataString );
        PlayerInfo[ playerid ][ pRadio ] = strval( DataString );

        mysql_fetch_field( "Frequence", DataString );
        PlayerInfo[playerid][pRfreq] = strval( DataString );

        mysql_fetch_field( "Mask", DataString );
        PlayerInfo[ playerid ][ pMask ] = strval( DataString );

        mysql_fetch_field( "MaskID", DataString );
        PlayerInfo[ playerid ][ pMaskID ] = strval( DataString );

        mysql_fetch_field( "Job", DataString );
        PlayerInfo[ playerid ][ pJob ] = strval( DataString );

        mysql_fetch_field( "JobAllow", DataString );
        PlayerInfo[ playerid ][ pCanJob ] = strval( DataString );

        mysql_fetch_field( "Faction", DataString );
        PlayerInfo[ playerid ][ pFaction ] = strval( DataString );

        mysql_fetch_field( "Rank", DataString );
        PlayerInfo[ playerid ][ pRank ] = strval( DataString );

        mysql_fetch_field( "PayCheck", DataString );
        PlayerInfo[ playerid ][ pPayCheck ] = strval( DataString );

        mysql_fetch_field( "PlayingHours", DataString );
        PlayerInfo[playerid][pPlayingHours] = strval( DataString );

        mysql_fetch_field( "Jailed", DataString );
        PlayerInfo[playerid][pJailed] = strval( DataString );

        mysql_fetch_field( "JailTime", DataString );
        PlayerInfo[playerid][pJailTime] = strval( DataString );

        mysql_fetch_field( "Cigarettes", DataString );
        PlayerInfo[playerid][pCigarettes] = strval( DataString );

        mysql_fetch_field( "BadgeNumber", DataString );
        PlayerInfo[playerid][pBadgeNumber] = strval( DataString );

        mysql_fetch_field( "Lighter", DataString );
        PlayerInfo[playerid][pLighter] = strval( DataString );

        mysql_fetch_field( "CarLic", DataString );
        PlayerInfo[playerid][pCarLic] = strval( DataString );

        mysql_fetch_field( "FlyLic", DataString );
        PlayerInfo[playerid][pFlyLic] = strval( DataString );

        mysql_fetch_field( "WepLic", DataString );
        PlayerInfo[playerid][pWepLic] = strval( DataString );

        mysql_fetch_field( "LifeLic", DataString );
        PlayerInfo[playerid][pLifeLic] = strval( DataString );

        mysql_fetch_field( "PhoneNumber", DataString );
        PlayerInfo[playerid][pPhoneNumber] = strval( DataString );

        mysql_fetch_field( "ListNumber", DataString );
        PlayerInfo[playerid][pListNumber] = strval( DataString );

        mysql_fetch_field( "Materials", DataString );
        PlayerInfo[playerid][pMaterials] = strval( DataString );

        mysql_fetch_field( "Products", DataString );
        PlayerInfo[playerid][pProducts] = strval( DataString );

        mysql_fetch_field( "ContractTime", DataString );
        PlayerInfo[playerid][pContractTime] = strval( DataString );

        mysql_fetch_field( "WorkOn", DataString );
        PlayerInfo[playerid][pWorkOn] = strval( DataString );

        mysql_fetch_field( "HeadValue", DataString );
        PlayerInfo[playerid][pHeadValue] = strval( DataString );

        mysql_fetch_field( "Seeds", DataString );
        PlayerInfo[playerid][pSeeds] = strval( DataString );

        mysql_fetch_field( "Weed", DataString );
        PlayerInfo[playerid][pWeed] = strval( DataString );

        mysql_fetch_field( "Ecstasy", DataString );
        PlayerInfo[playerid][pEcstasy] = strval( DataString );

        mysql_fetch_field( "Amphetamine", DataString );
        PlayerInfo[playerid][pAmphetamine] = strval( DataString );

        mysql_fetch_field( "Cocaine", DataString );
        PlayerInfo[playerid][pCocaine] = strval( DataString );

        mysql_fetch_field( "Heroin", DataString );
        PlayerInfo[playerid][pHeroin] = strval( DataString );

        mysql_fetch_field( "note1s", DataString );
        PlayerInfo[playerid][pNote1s] = strval( DataString );

        mysql_fetch_field( "note2s", DataString );
        PlayerInfo[playerid][pNote2s] = strval( DataString );

        mysql_fetch_field( "note3s", DataString );
        PlayerInfo[playerid][pNote3s] = strval( DataString );

        mysql_fetch_field( "note4s", DataString );
        PlayerInfo[playerid][pNote4s] = strval( DataString );

        mysql_fetch_field( "note5s", DataString );
        PlayerInfo[playerid][pNote5s] = strval( DataString );

        mysql_fetch_field( "ApartKey", DataString );
        PlayerInfo[playerid][pApartmentKey] = strval( DataString );

        mysql_fetch_field( "PaydayTime", DataString );
        PlayerInfo[playerid][pPaydayTime] = strval( DataString );

        mysql_fetch_field( "ConNum1", DataString );
        PlayerInfo[playerid][pConNum1] = strval( DataString );

        mysql_fetch_field( "ConName1", DataString);
        strmid(PlayerInfo[playerid][pConName1], DataString, 0, strlen(DataString), 255);

        mysql_fetch_field( "ConNum2", DataString );
        PlayerInfo[playerid][pConNum2] = strval( DataString );

        mysql_fetch_field( "ConName2", DataString);
        strmid(PlayerInfo[playerid][pConName2], DataString, 0, strlen(DataString), 255);
        
        mysql_fetch_field( "Race", DataString);
        strmid(PlayerInfo[playerid][pRace], DataString, 0, strlen(DataString), 255);

        mysql_fetch_field( "Location", DataString);
        strmid(PlayerInfo[playerid][pLocation], DataString, 0, strlen(DataString), 255);
        
        mysql_fetch_field( "FirstCar", DataString );
        PlayerBadges[ playerid ][ FirstCar ] = strval( DataString );
        
        mysql_fetch_field( "FirstSmoke", DataString );
        PlayerBadges[ playerid ][ FirstSmoke ] = strval( DataString );

        mysql_fetch_field( "DieTwentyTimes", DataString );
        PlayerBadges[ playerid ][ DieTwentyTimes ] = strval( DataString );

        mysql_fetch_field( "DieOneTime", DataString );
        PlayerBadges[ playerid ][ DieOneTime ] = strval( DataString );

        mysql_fetch_field( "DriveFast", DataString );
        PlayerBadges[ playerid ][ DriveFast ] = strval( DataString );

        mysql_fetch_field( "GreetJohn", DataString );
        PlayerBadges[ playerid ][ GreetJohn ] = strval( DataString );
        
        mysql_fetch_field( "FirstHouse", DataString );
        PlayerBadges[ playerid ][ FirstHouse ] = strval( DataString );
        
        mysql_fetch_field( "Garage", DataString );
        PlayerInfo[ playerid ][ pGarageKey ] = strval( DataString );
        
        mysql_fetch_field( "Namelocked", DataString );
        PlayerInfo[playerid][pNameLocked] = strval(DataString);
        
        mysql_fetch_field( "ForumName", DataString);
        strmid(PlayerInfo[playerid][pForumName], DataString, 0, strlen(DataString), 255);
        
        mysql_fetch_field( "Watch", DataString );
        PlayerInfo[ playerid ][ pWatch ] = strval( DataString );
        
        mysql_fetch_field( "Guitar", DataString );
        PlayerInfo[ playerid ][ pGuitar ] = strval( DataString );
        
        mysql_fetch_field( "Helmet", DataString );
        PlayerInfo[ playerid ][ pHelmet ] = strval( DataString );
        
        mysql_fetch_field( "Hat", DataString );
        PlayerInfo[ playerid ][ pHat ] = strval( DataString );
        
        mysql_fetch_field( "Maskobject", DataString );
        PlayerInfo[ playerid ][ pMaskobject ] = strval( DataString );
        
        mysql_fetch_field( "Glasses", DataString );
        PlayerInfo[ playerid ][ pGlasses ] = strval( DataString );
        
        mysql_fetch_field( "Headphone", DataString );
        PlayerInfo[ playerid ][ pHeadphone ] = strval( DataString );
        
        mysql_fetch_field( "Laser", DataString );
        PlayerInfo[ playerid ][ pLaser ] = strval( DataString );
        
        mysql_fetch_field( "Imprumut", DataString );
        PlayerInfo[ playerid ][ pImprumut ] = strval( DataString );
        
        mysql_fetch_field( "Hair", DataString );
        PlayerInfo[ playerid ][ pHair ] = strval( DataString );
        
        mysql_fetch_field( "BratDrept", DataString);
        strmid(Tattoo[playerid][tBratDrept], DataString, 0, strlen(DataString), 255);
        
        mysql_fetch_field( "BratStang", DataString);
        strmid(Tattoo[playerid][tBratStang], DataString, 0, strlen(DataString), 255);
        
        mysql_fetch_field( "Piept", DataString);
        strmid(Tattoo[playerid][tPiept], DataString, 0, strlen(DataString), 255);
        
        mysql_fetch_field( "Spate", DataString);
        strmid(Tattoo[playerid][tSpate], DataString, 0, strlen(DataString), 255);
        
        mysql_fetch_field( "PiciorDrept", DataString);
        strmid(Tattoo[playerid][tPiciorDrept], DataString, 0, strlen(DataString), 255);
        
        mysql_fetch_field( "PiciorStang", DataString);
        strmid(Tattoo[playerid][tPiciorStang], DataString, 0, strlen(DataString), 255);
        
        mysql_fetch_field( "Accent", DataString);
        strmid(PlayerInfo[playerid][pAccent], DataString, 0, strlen(DataString), 255);
        
        mysql_fetch_field( "CarKey2", DataString );
        PlayerInfo[ playerid ][ pCarKey2 ] = strval( DataString );
        
        mysql_fetch_field( "CarSpawned1", DataString );
        SpawnedCar[playerid][0] = strval( DataString );
        
        mysql_fetch_field( "CarSpawned2", DataString );
        SpawnedCar[playerid][1] = strval( DataString );

		mysql_fetch_field( "Pin", DataString );
        BancaInfo[playerid][bPin] = strval( DataString );
        
        mysql_fetch_field( "Card", DataString );
        BancaInfo[playerid][bCard] = strval( DataString );

		mysql_fetch_field( "Creat", DataString );
        BancaInfo[playerid][bCreat] = strval( DataString );
        
        mysql_fetch_field( "AccountNumber", DataString );
        BancaInfo[playerid][bAccount] = strval( DataString );
        
        mysql_fetch_field( "Freezed", DataString );
        BancaInfo[playerid][bFreezed] = strval( DataString );
        
        mysql_free_result();
        
        gPlayerLogged[playerid] = 1;

        if(PlayerInfo[playerid][pFight] == 1) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL); }
        else if(PlayerInfo[playerid][pFight] == 2) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING); }
        else if(PlayerInfo[playerid][pFight] == 3) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU); }
        else if(PlayerInfo[playerid][pFight] == 4) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD); }
        else if(PlayerInfo[playerid][pFight] == 5) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);}
        else if(PlayerInfo[playerid][pFight] == 6) { SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);}

        if(PlayerInfo[ playerid ][ pTut ] == 0)
        {
            TogglePlayerControllable(playerid, 0);
            ShowPlayerDialog(playerid, 10000, DIALOG_STYLE_LIST, "Ai voie sa folosesti /cad in scopuri personale ?","Nu, doar daca detin o companie si vreau s-o promovez.\nDaca vreau sa-mi vand masina, pot sa folosesc.\nDa, daca nu am alte alternative.", "Select", "Cancel");
            SetPlayerPos(playerid, 1715.1136, -1871.3253, 13.5665);
        }
        LoadInventoryMySQL(playerid);
        TogglePlayerControllable(playerid, 1);
        SpawnPlayer( playerid );
        SetPlayerSpawn(playerid);
        PlayerInfo[playerid][pCountryRifle] = 0;
        PlayerInfo[playerid][p9mm] = 0;
        PlayerInfo[playerid][pSpas12] = 0;
        PlayerInfo[playerid][pMolotov] = 0;
        PlayerInfo[playerid][pEagle] = 0;
        PlayerInfo[playerid][pStick] = 0;
        PlayerInfo[playerid][pSilenced] = 0;
        PlayerInfo[playerid][pShotgun] = 0;
        PlayerInfo[playerid][pAK] = 0;
        PlayerInfo[playerid][pGotArmour] = 0;
        PlayerInfo[playerid][pRPG] = 0;
        PlayerInfo[playerid][pHRPG] = 0;
        PlayerInfo[playerid][pMinigun] = 0;
        PlayerInfo[playerid][pRifle] = 0;
        PlayerInfo[playerid][pBaseball] = 0;
        PlayerInfo[playerid][pShovel] = 0;
        PlayerInfo[playerid][pCane] = 0;
        PlayerInfo[playerid][pKnife] = 0;
        PlayerInfo[playerid][pM4] = 0;
        PlayerInfo[playerid][pSniper] = 0;
        PlayerInfo[playerid][pSawn] = 0;
        PlayerInfo[playerid][pFlame] = 0;
        PlayerInfo[playerid][pSpray] = 0;
        PlayerInfo[playerid][pCamera] = 0;
        PlayerInfo[playerid][pMP5] = 0;
        PlayerInfo[playerid][pParachute] = 0;
        PlayerInfo[playerid][pJacking] = 0;
        armapusa[playerid][1] = 0;
        armapusa[playerid][2] = 0;
        armapusa[playerid][3] = 0;
        armapusa[playerid][4] = 0;
        armapusa[playerid][5] = 0;
        armapusa[playerid][9] = 0;
        
        gloanteshot[playerid][1][23] = 0;
        gloanteshot[playerid][1][24] = 0;
        gloanteshot[playerid][1][25] = 0;
        gloanteshot[playerid][1][28] = 0;
        gloanteshot[playerid][1][29] = 0;
        gloanteshot[playerid][1][30] = 0;
        gloanteshot[playerid][1][31] = 0;
        gloanteshot[playerid][1][32] = 0;
        gloanteshot[playerid][1][33] = 0;
        
        gloanteshot[playerid][2][23] = 0;
        gloanteshot[playerid][2][24] = 0;
        gloanteshot[playerid][2][25] = 0;
        gloanteshot[playerid][2][28] = 0;
        gloanteshot[playerid][2][29] = 0;
        gloanteshot[playerid][2][30] = 0;
        gloanteshot[playerid][2][31] = 0;
        gloanteshot[playerid][2][32] = 0;
        gloanteshot[playerid][2][33] = 0;
        
        gloanteshot[playerid][3][23] = 0;
        gloanteshot[playerid][3][24] = 0;
        gloanteshot[playerid][3][25] = 0;
        gloanteshot[playerid][3][28] = 0;
        gloanteshot[playerid][3][29] = 0;
        gloanteshot[playerid][3][30] = 0;
        gloanteshot[playerid][3][31] = 0;
        gloanteshot[playerid][3][32] = 0;
        gloanteshot[playerid][3][33] = 0;
        
        ReduceTime[playerid] = 0;
        if(PlayerInfo[playerid][pCarKey] != 0)
        {
            if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey]))
            {
                PlayerInfo[playerid][pCarKey] = 0;
                SpawnedCar[playerid][0] = 0;
            }
        }
        if (SpawnedCar[playerid][0] != 0)
        {
            if(PlayerInfo[playerid][pCarKey] == 0)
            {
                SpawnedCar[playerid][0] = 0;
            }
        }
        if(PlayerInfo[playerid][pCarKey2] != 0)
        {
            if(!IsVehicleSpawned(PlayerInfo[playerid][pCarKey2]))
            {
                PlayerInfo[playerid][pCarKey2] = 0;
                SpawnedCar[playerid][1] = 0;
            }
        }
        if (SpawnedCar[playerid][1] != 0)
        {
            if(PlayerInfo[playerid][pCarKey2] == 0)
            {
                SpawnedCar[playerid][1] = 0;
            }
        }
        SetPlayerColor(playerid,COLOR_CIVILIAN);
        if(PlayerInfo[playerid][pBan] == 1) { BanEx(playerid, "Nu te poti loga pe un cont banat..." ); }
        if(PlayerInfo[playerid][pSocial] == 0) { PlayerInfo[playerid][pSocial] = 11111111 + random (99999999); }
        if(PlayerInfo[playerid][pRfreq] == 911910 && PlayerInfo[playerid][pFaction] != 1) { PlayerInfo[playerid][pRfreq] = 0; }
        if(PlayerInfo[playerid][pWalk] == 0) { PlayerInfo[playerid][pWalk] = 1; }
        if(PlayerInfo[playerid][pDonator] != 0) { PlayerInfo[playerid][pBMX] = 1; }
        if(PlayerInfo[playerid][pMaskID] == 0) { PlayerInfo[playerid][pMaskID] = 112899 + random (998123); }
        new Float:armour;
        GetPlayerArmour(playerid,armour);
        if(armour > 2) { PlayerInfo[playerid][pGotArmour] = 1; }
        if(PlayerInfo[playerid][pCrashed] == 1)
        {
            GameTextForPlayer(playerid, "~r~Crash...~n~~w~Revenire la pozitie.", 7000, 1);
        } else {
            new string[256];
            format(string, sizeof(string), "~w~Bine ai (re)venit~n~~y~   %s",GetPlayerNameEx(playerid));
            GameTextForPlayer(playerid, string, 3500, 1);
            format(string, sizeof(string), "{FFA700}Express Roleplay: {FFFFFF}Bine ai (re)venit pe server, foloseste /motds pentru a vedea anunturile, {FFA700}%s.",GetPlayerNameEx(playerid));
            SendClientMessage(playerid, COLOR_WHITE, string);
            SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
        }
        SetPlayerCash(playerid,PlayerInfo[playerid][pCash]);
        gPlayerLogged[playerid] = 1;
        LoadPlayerNotes(playerid);
        SetTimerEx("UnsetCrash", 2000, false, "i", playerid);
        // Log his login
        new string[128];
        new playersip[32];
        new sendername[MAX_PLAYER_NAME];
        GetPlayerName(playerid, sendername, sizeof(sendername));
        GetPlayerIp(playerid,playersip,sizeof(playersip));
        new y, m, d,hh,mi,s;
        getdate(y,m,d);
        gettime(hh,mi,s);
        format(string,sizeof(string), "(%d/%d/%d)[%d:%d:%d] %s [LOGIN] -> IP # %s",d,m,y,hh,mi,s,sendername,playersip);
        LoginLog(string);
        TogglePlayerControllable(playerid, 1);
        SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
        TogglePlayerControllable(playerid, 1);
        SpawnPlayer( playerid );
        SetPlayerSpawn(playerid);
        // Log in
        new String[128];
        format( String, sizeof( String ), "UPDATE `Accounts` SET `Online` = '1' WHERE `UserID` = '%d'",PlayerInfo[playerid][pDatabaseID] );
        mysql_query(String);
    }
    else
    {
        printf( "[error] LoadAccountVariables() was called, but to a non-connected ID.", playerid );
    }
    return 1;
}
forward LoadPlayerNotes(playerid);
public LoadPlayerNotes(playerid)
{
    new resultline[256];
    new playernotes[6][128];
    new query[256];
    new escape[5][257];

    if(PlayerInfo[playerid][pDatabaseID] == INVALID_MYSQL_ID)
    {
        return 1;
    }

    format(query, sizeof(query), "SELECT UserID, note1, note2, note3, note4, note5 FROM Accounts WHERE UserID='%d'",PlayerInfo[playerid][pDatabaseID]);
    mysql_query(query);
    mysql_store_result();
    if(mysql_fetch_row(resultline)==1)
    {
        split(resultline, playernotes, '|');
        PlayerInfo[playerid][pDatabaseID] = strval(playernotes[0]);
        mysql_real_escape_string(PlayerInfo[playerid][pNote1],escape[0]);
        mysql_real_escape_string(PlayerInfo[playerid][pNote2],escape[1]);
        mysql_real_escape_string(PlayerInfo[playerid][pNote3],escape[2]);
        mysql_real_escape_string(PlayerInfo[playerid][pNote4],escape[3]);
        mysql_real_escape_string(PlayerInfo[playerid][pNote5],escape[4]);
        strmid(PlayerInfo[playerid][pNote1], playernotes[1], 0, strlen(playernotes[1]), 255);
        strmid(PlayerInfo[playerid][pNote2], playernotes[2], 0, strlen(playernotes[2]), 255);
        strmid(PlayerInfo[playerid][pNote3], playernotes[3], 0, strlen(playernotes[3]), 255);
        strmid(PlayerInfo[playerid][pNote4], playernotes[4], 0, strlen(playernotes[4]), 255);
        strmid(PlayerInfo[playerid][pNote5], playernotes[5], 0, strlen(playernotes[5]), 255);
        mysql_free_result();
    }
    else
    {
        mysql_free_result();
        printf("[Warning] Player %d notes was not available.",playerid);
    }
    return 1;
}

forward Ring(playerid,Float:x,Float:y,Float:z);
public Ring(playerid,Float:x,Float:y,Float:z)
{
    PlayerPlaySound(playerid, 1138, x, y, z);
}

stock GetFromAccount( dbid, obtaining[], holdingvar[] )
{
    new Query[ 128 ];
    format( Query, sizeof( Query ), "SELECT `%s` FROM `Accounts` WHERE `UserID` = '%d'", obtaining, dbid );
    mysql_query( Query );
    mysql_store_result();

    if( mysql_fetch_row( holdingvar ) == 1 ) { mysql_free_result(); }

    return 1;
}

stock GetFromName( dbid, obtaining[], holdingvar[] )
{
    new Query[ 128 ];
    format( Query, sizeof( Query ), "SELECT `%s` FROM `Accounts` WHERE `Username` = '%s'", obtaining, dbid );
    mysql_query( Query );
    mysql_store_result();

    if( mysql_fetch_row( holdingvar ) == 1 ) { mysql_free_result(); }

    return 1;
}

stock ResetPlayerVariables( playerid )
{
    PlayerInfo[ playerid ][ pDatabaseID ] = 0;
    PlayerInfo[ playerid ][ pApartmentKey ] = 255;
    PlayerInfo[ playerid ][ pBvision ] = 0;
    PlayerInfo[playerid][pInCall] = 0;
    PlayerInfo[playerid][TruckDelivZ] = 0;
    PlayerInfo[playerid][TruckDelivY] = 0;
    strmid(PlayerInfo[playerid][pLocation], "None", 0, strlen("None"), 255);
    PlayerInfo[playerid][TruckDelivX] = 0;
    PlayerInfo[playerid][pExp] = 0;
    PlayerInfo[playerid][pPaydayTime] = 0;
    PlayerInfo[ playerid ][ pBMX ] = 0;
    PlayerInfo[playerid][pDeath] = 0;
    TruckDelivering[playerid] = 0;
    PlayerInfo[playerid][StonedEffect] = 0;
    TutorialStage[playerid] = 0;
    PlayerInfo[playerid][pHackWarns] = 0;
    PlayerInfo[playerid][pWalk] = 1;
    PlayerInfo[playerid][pWeedTimer] = 0;
    PlayerInfo[playerid][pSunglass] = 0;
    PlayerInfo[playerid][pItem] = 0;
    pColor[playerid] = -1;
    PlayerInfo[playerid][pBandana] = 0;
    PlayerInfo[playerid][pMoneyconvert] = 0;
    PlayerInfo[playerid][PendingHandshake] = -1;
    PlayerInfo[playerid][PendingHandshakeStyle] = 0;
    PlayerInfo[playerid][pCell] = 999;
    PlayerInfo[playerid][pCanJob] = 0;
    Jackpot[playerid] = 0;
    WeedX[playerid] = 0;
    WeedY[playerid] = 0;
    WeedZ[playerid] = 0;
    PlayerInfo[playerid][p9mm] = 0;
    PlayerInfo[playerid][pEagle] = 0;
    PlayerInfo[playerid][pStick] = 0;
    PlayerInfo[playerid][pSilenced] = 0;
    PlayerInfo[playerid][pShotgun] = 0;
    PlayerInfo[playerid][pAK] = 0;
    PlayerInfo[playerid][pRPG] = 0;
    PlayerInfo[playerid][pHRPG] = 0;
    PlayerInfo[playerid][pMinigun] = 0;
    PlayerInfo[playerid][pRifle] = 0;
    PlayerInfo[playerid][pBaseball] = 0;
    PlayerInfo[playerid][pShovel] = 0;
    PlayerInfo[playerid][pKnife] = 0;
    PlayerInfo[playerid][pM4] = 0;
    PlayerInfo[playerid][pUzi] = 0;
    PlayerInfo[playerid][pGunPD] = 0;
    PlayerInfo[playerid][pSniper] = 0;
    PlayerInfo[playerid][pSawn] = 0;
    PlayerInfo[playerid][pFlame] = 0;
    PlayerInfo[playerid][pSpray] = 0;
    PlayerInfo[playerid][pCamera] = 0;
    PlayerInfo[playerid][pMP5] = 0;
    PlayerInfo[playerid][pParachute] = 0;
    WeedY[playerid] = 0;
    WeedZ[playerid] = 0;
    TesterActivated[playerid] = 0;
    NewsActivated[playerid] = 0;
    pToAccept[playerid] = 255;
    vToAccept[playerid] = 999;
    prToAccept[playerid] = 0;
    PlayerInfo[playerid][pFuel] = 0;
    JustUsedDrug[playerid] = 0;
    GreetOffer[playerid] = 999;
    GreetStyle[playerid] = 0;
    FarmerVar[playerid] = 0;
    FarmerPickup[playerid][0] = 0;
    TruckerPickup[playerid][0] = 0;
    JustStarted[playerid] = 0;
    PlayerInfo[playerid][pArmour] = 0;
    strmid(PlayerInfo[playerid][pWanted], "None", 0, strlen("None"), 255);
    ProductsOffer[playerid] = 999;
    ProductsCost[playerid] = 0;
    ProductsAmount[playerid] = 0;
    DrugsIntake[playerid] = 0;
    DrugsHolding[playerid] = 0;
    fChat[playerid] = 1;
    ResetPlayerWantedLevelEx(playerid);
    TicketOffer[playerid] = 999;
    TicketMoney[playerid] = 0;
    Hide[playerid] = 0;
    PlayerTazed[playerid] = 0;
    authorizeswat = 0;
    PlayerStoned[playerid] = 0;
    BlockingPM[playerid] = -1;
    IsReadyToPickup[playerid] = 0;
    PlayerCuffed[playerid] = 0;
    ShowHud[playerid] = 1;
    ShowJailTimer[playerid] = 1;
    gOoc[playerid] = 1;
    PlayerTied[playerid] = 0;
    HireCar[playerid] = 999;
    PlayerDrunk[playerid] = 0;
    PlayerDrunkTime[playerid] = 0;
    TransportValue[playerid] = 0;
    PlayerCuffed[playerid] = 0;
    PlayerTazed[playerid] = 0;
    PlayerTied[playerid] = 0;
    VehColor1[playerid] = 0;
    VehColor2[playerid] = 0;
    IsUsingAnim[playerid] = 0;
    UsingPayphone[playerid] = 0;
    UsingSmokeAnim[playerid] = 0;
    RadioStatus[playerid] = 1;
    TransportMoney[playerid] = 0;
    TransportTime[playerid] = 0;
    TransportCost[playerid] = 0;
    TransportDriver[playerid] = 999;
    Seatbelt[playerid] = 0;
    TransportDuty[playerid] = 0;
    JobDuty[playerid] = 0;
    PlayerInfo[playerid][pCrashed] = 0;
    TalkingLive[playerid] = 255;
    LiveOffer[playerid] = 999;
    BegOffer[playerid] = 999;
    BegPrice[playerid] = 0;
    RefillOffer[playerid] = 999;
    RefillPrice[playerid] = 0;
    gPlayerAnimLibsPreloaded[playerid] = 0;
    RepairOffer[playerid] = 999;
    RepairPrice[playerid] = 0;
    RepairCar[playerid] = 0;
    CarID[playerid] = 0;
    OwnableCarOffer[playerid] = 999;
    OwnableCarID[playerid] = 0;
    OwnableCarPrice[playerid] = 0;
    IsSmoking[playerid] = 0;
    gLOoc[playerid] = 1;
    gPlayerUsingLoopingAnim[playerid] = 0;
    gLastCar[playerid] = 0;
    CopOnDuty[playerid] = 0;
    LsfdOnDuty[playerid] = 0;
    LsvrOnDuty[playerid] = 0;
    LsasOnDuty[playerid] = 0;
    SwatOnDuty[playerid] = 0;
    MedicOnDuty[playerid] = 0;
    GuardOnDuty[playerid] = 0;
    JustFished[playerid] = 0;
    JustTazed[playerid] = 0;
    JustCasinoed[playerid] = 0;
    ImAabusingNoob[playerid] = 0;
    JustKnocked[playerid] = 0;
    ConnectedToPC[playerid] = 0;
    OrderReady[playerid] = 0;
    GotHit[playerid] = 0;
    GoChase[playerid] = 999;
    GetChased[playerid] = 999;
    PlacedNews[playerid] = 0;
    WantedLevel[playerid] = 0;
    WantedPoints[playerid] = 0;
    ReduceTime[playerid] = 0;
    PlayerInfo[playerid][pParkpass] = 0;
    PlayerInfo[playerid][pFish] = 0;
    PlayerInfo[playerid][pToolkit] = 0;
    InShamal[playerid] = 0;
    InAndrom[playerid] = 0;
    Bomb[playerid] = 0;
    FakeMask[playerid] = 0;
    PlayerInfo[playerid][pHospital] = 0;
    PlayerInfo[playerid][pGunPD] = 0;
    PMsEnabled[playerid] = 1;
    Benabled[playerid] = 1;
    AdminDuty[playerid] = 0;
    Spectating[playerid] = 0;
    TesterDuty[playerid] = 0;
    StartedCall[playerid] = 0;
    Muted[playerid] = 0;
//  MuteTime[playerid] = 0;
    PhoneOnline[playerid] = 0;
    ShowFuel[playerid] = 0;
    PlayerInfo[playerid][pSpeaker] = 0;
    TakingDrivingTest[playerid] = 0;
    DrugRunning[playerid] = 0;
    DrivingTestStep[playerid] = 0;
    DrugStep[playerid] = 0;
    MapIconsShown[playerid] = 0;
    PingCheck[playerid] = 0;
    SpawnAttempts[playerid] = 0;
    PlayerInfo[playerid][pFaction] = 0;
    FactionRequest[playerid] = 255;
    BizRequest[playerid] = 255;
    PlayerInfo[playerid][pRank] = 0;
    PlayerInfo[playerid][pBizKey] = 255;
    PlayerInfo[playerid][pWorkOn] = 255;
    PlayerInfo[playerid][pSpawnPoint] = 0;
    PlayerInfo[playerid][pHouseKey] = 0;
    gPlayerLogged[playerid] = 0;
    RegistrationStep[playerid] = 0;
    PlayerInfo[playerid][pLevel] = 0;
    PlayerInfo[playerid][pBan] = 0;
    PlayerInfo[playerid][pAdministrator] = 0;
    PlayerInfo[playerid][pDonator] = 0;
    PlayerInfo[playerid][pTut] = 0;
    PlayerInfo[playerid][pSex] = 0;
    PlayerInfo[playerid][pAge] = 0;
    PlayerInfo[playerid][pExp] = 0;
    PlayerInfo[playerid][pCash] = 0;
    PlayerInfo[playerid][pWeapons][0] = 0;
    PlayerInfo[playerid][pWeapons][1] = 0;
    PlayerInfo[playerid][pWeapons][2] = 0;
    PlayerInfo[playerid][pWeapons][3] = 0;
    PlayerInfo[playerid][pWeapons][4] = 0;
    PlayerInfo[playerid][pWeapons][5] = 0;
    PlayerInfo[playerid][pWeapons][6] = 0;
    PlayerInfo[playerid][pWeapons][7] = 0;
    PlayerInfo[playerid][pWeapons][8] = 0;
    PlayerInfo[playerid][pWeapons][9] = 0;
    PlayerInfo[playerid][pWeapons][10] = 0;
    PlayerInfo[playerid][pWeapons][11] = 0;
    PlayerInfo[playerid][pWeapons][12] = 0;
    PlayerInfo[playerid][pAmmo][0] = 0;
    PlayerInfo[playerid][pAmmo][1] = 0;
    PlayerInfo[playerid][pAmmo][2] = 0;
    PlayerInfo[playerid][pAmmo][3] = 0;
    PlayerInfo[playerid][pAmmo][4] = 0;
    PlayerInfo[playerid][pAmmo][5] = 0;
    PlayerInfo[playerid][pAmmo][6] = 0;
    PlayerInfo[playerid][pAmmo][7] = 0;
    PlayerInfo[playerid][pAmmo][8] = 0;
    PlayerInfo[playerid][pAmmo][9] = 0;
    PlayerInfo[playerid][pAmmo][10] = 0;
    PlayerInfo[playerid][pAmmo][11] = 0;
    PlayerInfo[playerid][pAmmo][12] = 0;
    PlayerInfo[playerid][pPack1] = 0;
    PlayerInfo[playerid][pPack1a] = 0;
    PlayerInfo[playerid][pPack2] = 0;
    PlayerInfo[playerid][pPack2a] = 0;
    PlayerInfo[playerid][pPack3] = 0;
    PlayerInfo[playerid][pPack3a] = 0;
    PlayerInfo[playerid][pPack4] = 0;
    PlayerInfo[playerid][pPack4a] = 0;
    PlayerInfo[playerid][pPack5] = 0;
    PlayerInfo[playerid][pPack5a] = 0;
    PlayerInfo[playerid][pBank] = 0;
    PlayerInfo[playerid][pSavings] = 0;
    PlayerInfo[playerid][pRfreq] = 0;
    PlayerInfo[playerid][pSocial] = 0;
    PlayerInfo[playerid][pSkin] = 0;
    PlayerInfo[playerid][pDupeKey] = 0;
    PlayerInfo[playerid][pRadio] = 0;
    PlayerInfo[playerid][pCrimes] = 0;
    PlayerInfo[playerid][pDeaths] = 0;
    PlayerInfo[playerid][pArrested] = 0;
    PlayerInfo[playerid][pSeeds] = 0;
    PlayerInfo[playerid][pWeed] = 0;
    PlayerInfo[playerid][pMaterials] = 0;
    PlayerInfo[playerid][pProducts] = 0;
    PlayerInfo[playerid][pJob] = 0;
    PlayerInfo[playerid][pLighter] = 0;
    PlayerInfo[playerid][pCigarettes] = 0;
    PlayerInfo[playerid][pConvertMats] = 0;
    KnockedDown[playerid] = 0;
    PlayerInfo[playerid][pBadgeNumber] = 0;
    PlayerInfo[playerid][pHeroin] = 0;
    PlayerInfo[playerid][pContractTime] = 0;
    PlayerInfo[playerid][pPlayingHours] = 0;
    PlayerInfo[playerid][pPayCheck] = 0;
    PlayerInfo[playerid][pCarLic] = 0;
    PlayerInfo[playerid][pWepLic] = 0;
    PlayerInfo[playerid][pFlyLic] = 0;
    PlayerInfo[playerid][pLifeLic] = 0;
    PlayerInfo[playerid][pPhoneNumber] = 0;
    PlayerInfo[playerid][pListNumber] = 1;
    Mobile[playerid] = 255;
    PlayerInfo[playerid][pNeedle] = 0;
    PlayerInfo[playerid][pAmphetamine] = 0;
    PlayerInfo[playerid][pCocaine] = 0;
    PlayerInfo[playerid][pEcstasy] = 0;
    PlayerInfo[playerid][pDonator] = 0;
    PlayerInfo[playerid][pTester] = 0;
    PlayerInfo[playerid][pJailed] = 0;
    PlayerInfo[playerid][pJailTime] = 0;
    PlayerInfo[playerid][pJacking] = 0;
    PlayerInfo[playerid][pJackingtrunk] = 0;
    PlayerInfo[playerid][pRefueling] = 0;
    PlayerInfo[playerid][pPainting] = 0;
    PlayerInfo[playerid][pJackingDoor] = 0;
    PlayerInfo[playerid][pJackingDoorID] = 0;
    JailPrice[playerid] = 0;
    PlayerInfo[playerid][pHeadValue] = 0;
    PlayerInfo[playerid][pRequestingBackup] = 0;
    PlayerInfo[playerid][pRoadblock] = 0;
    PlayerInfo[playerid][pRoadblock2] = 0;
    PlayerInfo[playerid][pRoadblock3] = 0;
    PlayerInfo[playerid][pRoadblock4] = 0;
    PlayerInfo[playerid][pRoadblock5] = 0;
    PlayerInfo[playerid][pRoadblock6] = 0;
    PlayerInfo[playerid][pRoadblock7] = 0;
    PlayerInfo[playerid][pRoadblock8] = 0;
    wplant[playerid] = 0;
    PlayerInfo[playerid][pMask] = 0;
    PlayerInfo[playerid][pSick] = 0;
    PlayerInfo[playerid][pMaskuse] = 0;
    PlayerInfo[playerid][pNote1s] = 0;
    strmid(PlayerInfo[playerid][pNote2], "None", 0, strlen("None"), 255);
    PlayerInfo[playerid][pNote2s] = 0;
    strmid(PlayerInfo[playerid][pNote3], "None", 0, strlen("None"), 255);
    PlayerInfo[playerid][pNote3s] = 0;
    strmid(PlayerInfo[playerid][pNote4], "None", 0, strlen("None"), 255);
    PlayerInfo[playerid][pNote4s] = 0;
    strmid(PlayerInfo[playerid][pNote5], "None", 0, strlen("None"), 255);
    PlayerInfo[playerid][pNote5s] = 0;
    PlayerInfo[playerid][pLoadPosX] = 0.0000;
    PlayerInfo[playerid][pLoadPosY] = 0.0000;
    PlayerInfo[playerid][pLoadPosZ] = 0.0000;
    PlayerInfo[playerid][pLoadPosInt] = 0;
    PlayerInfo[playerid][pLoadPosW] = 0;
    strmid(PlayerVehicle[playerid][pVeh1], "None", 0, strlen("None"), 255);
    strmid(PlayerVehicle[playerid][pVeh2], "None", 0, strlen("None"), 255);
    strmid(PlayerVehicle[playerid][pVeh3], "None", 0, strlen("None"), 255);
    strmid(PlayerVehicle[playerid][pVeh4], "None", 0, strlen("None"), 255);
    strmid(PlayerVehicle[playerid][pVeh5], "None", 0, strlen("None"), 255);
    PlayerInfo[playerid][pTalk] = 0;
    strmid(PlayerInfo[playerid][pRace], "None", 0, strlen("None"), 255);
    strmid(PlayerInfo[playerid][pLocation], "None", 0, strlen("None"), 255);
    ClearCrime(playerid);
    for(new item;item<MAX_ITEMS;item++)_SetItemAmountPVar(playerid,item,0);
    return 1;
}

stock PlayerFacePlayer( playerid, targetplayerid )
{
    new Float: Anglea;
    GetPlayerFacingAngle( playerid, Anglea );
    SetPlayerFacingAngle( targetplayerid, Anglea+180 );
    return true;
}

stock InfoForPlayer(playerid, text[])
{
    TextDrawHideForPlayer(playerid, InfoBoxer[playerid]);
    new string[800];
    format(string, sizeof(string), "%s~n~", text);
    TextDrawSetString(InfoBoxer[playerid], string);
    TextDrawShowForPlayer(playerid, InfoBoxer[playerid]);
    SetTimerEx("DeleteInfoer", 7000, 0, "d", playerid);
}

forward DeleteInfoer(playerid);
public DeleteInfoer(playerid) { TextDrawHideForPlayer(playerid, InfoBoxer[playerid]); }

stock InfoBoxForPlayer(playerid, text[])
{
    TextDrawHideForPlayer(playerid, InfoBox[playerid]);
    new string[800];
    format(string, sizeof(string), "%s~n~", text);
    TextDrawSetString(InfoBox[playerid], string);
    TextDrawShowForPlayer(playerid, InfoBox[playerid]);
    SetTimerEx("DeleteInfo", 7000, 0, "d", playerid);
}

forward DeleteInfo(playerid);
public DeleteInfo(playerid){ TextDrawHideForPlayer(playerid, InfoBox[playerid]); }

stock explode(aExplode[][], const sSource[], const sDelimiter[] = " ", iVertices = sizeof aExplode, iLength = sizeof aExplode[])
{
   new
      iNode,
      iPointer,
      iPrevious = -1,
      iDelimiter = strlen(sDelimiter);

   while(iNode < iVertices)
   {
      iPointer = strfind(sSource, sDelimiter, false, iPointer);

      if(iPointer == -1)
      {
         strmid(aExplode[iNode], sSource, iPrevious, strlen(sSource), iLength);
         break;
      }
      else
      {
         strmid(aExplode[iNode], sSource, iPrevious, iPointer, iLength);
      }

      iPrevious = (iPointer += iDelimiter);
      ++iNode;
   }

   return iPrevious;
}

forward SaveCityCar(playerid);
public SaveCityCar(playerid)
{
    new string[256];
    new Float:x,Float:y,Float:z,Float:a;
    GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    DynamicCars[GetPlayerVehicleID(playerid)][CarX] = x;
    DynamicCars[GetPlayerVehicleID(playerid)][CarY] = y;
    DynamicCars[GetPlayerVehicleID(playerid)][CarZ] = z;
    DynamicCars[GetPlayerVehicleID(playerid)][CarAngle] = a;

    format(string, sizeof(string), "UPDATE `Vehicles` SET `x`='%f', `y`='%f', `z`='%f', `a`='%f' WHERE `carid`='%d'",
    DynamicCars[GetPlayerVehicleID(playerid)][CarX],DynamicCars[GetPlayerVehicleID(playerid)][CarY],DynamicCars[GetPlayerVehicleID(playerid)][CarZ],DynamicCars[GetPlayerVehicleID(playerid)][CarAngle],GetPlayerVehicleID(playerid));
    mysql_query(string);
    return 1;
}

forward SetPlayerSpeedCap( playerid, Float:value );
public SetPlayerSpeedCap( playerid, Float:value )
{
    if ( 0 <= playerid < sizeof( g_fSpeedCap ) )
        g_fSpeedCap[ playerid ] = value;
}

forward DisablePlayerSpeedCap( playerid );
public DisablePlayerSpeedCap( playerid )
{
    if ( 0 <= playerid < sizeof( g_fSpeedCap ) )
        g_fSpeedCap[playerid ] = 0.0;
}

forward CasinoRolling(playerid);
public CasinoRolling(playerid)
{
    //PlayerInfo[playerid][pCasino] = 1; // Red
    //PlayerInfo[playerid][pCasino] = 2; // Black
    //PlayerInfo[playerid][pCasino] = 3; // Purple
    //PlayerInfo[playerid][pCasino] = 4; // White
    //PlayerInfo[playerid][pCasino] = 5; // Blue
    //PlayerInfo[playerid][pCasino] = 6; // Yellow

    // RED - BLACK - PURPLE - WHITE - BLUE - YELLOW
    new rancas = random(6);
    if(PlayerInfo[playerid][pCasino] != 0)
    {
        if(PlayerInfo[playerid][pTurn1] != 0 && PlayerInfo[playerid][pTurn2] != 0 && PlayerInfo[playerid][pTurn3] != 0)
        {
            new winstring1[68];
            new winstring2[68];
            new winstring3[68];
            if(PlayerInfo[playerid][pTurn1] == 1) { format(winstring1, sizeof(winstring1), "~g~~>~~r~ ] ~g~~<~ "); } // Red
            if(PlayerInfo[playerid][pTurn1] == 2) { format(winstring1, sizeof(winstring1), "~g~~>~~l~ ] ~g~~<~ "); } // Black
            if(PlayerInfo[playerid][pTurn1] == 3) { format(winstring1, sizeof(winstring1), "~g~~>~~p~ ] ~g~~<~ "); } // Purple
            if(PlayerInfo[playerid][pTurn1] == 4) { format(winstring1, sizeof(winstring1), "~g~~>~~w~ ] ~g~~<~ "); } // White
            if(PlayerInfo[playerid][pTurn1] == 5) { format(winstring1, sizeof(winstring1), "~g~~>~~b~ ] ~g~~<~ "); } // Blue
            if(PlayerInfo[playerid][pTurn1] == 6) { format(winstring1, sizeof(winstring1), "~g~~>~~y~ ] ~g~~<~ "); } // Yellow

            if(PlayerInfo[playerid][pTurn2] == 1) { format(winstring2, sizeof(winstring2), "~g~~>~~r~ ] ~g~~<~ "); } // Red
            if(PlayerInfo[playerid][pTurn2] == 2) { format(winstring2, sizeof(winstring2), "~g~~>~~l~ ] ~g~~<~ "); } // Black
            if(PlayerInfo[playerid][pTurn2] == 3) { format(winstring2, sizeof(winstring2), "~g~~>~~p~ ] ~g~~<~ "); } // Purple
            if(PlayerInfo[playerid][pTurn2] == 4) { format(winstring2, sizeof(winstring2), "~g~~>~~w~ ] ~g~~<~ "); } // White
            if(PlayerInfo[playerid][pTurn2] == 5) { format(winstring2, sizeof(winstring2), "~g~~>~~b~ ] ~g~~<~ "); } // Blue
            if(PlayerInfo[playerid][pTurn2] == 6) { format(winstring2, sizeof(winstring2), "~g~~>~~y~ ] ~g~~<~ "); } // Yellow

            if(PlayerInfo[playerid][pTurn3] == 1) { format(winstring3, sizeof(winstring3), "~g~~>~~r~ ] ~g~~<~ "); } // Red
            if(PlayerInfo[playerid][pTurn3] == 2) { format(winstring3, sizeof(winstring3), "~g~~>~~l~ ] ~g~~<~ "); } // Black
            if(PlayerInfo[playerid][pTurn3] == 3) { format(winstring3, sizeof(winstring3), "~g~~>~~p~ ] ~g~~<~ "); } // Purple
            if(PlayerInfo[playerid][pTurn3] == 4) { format(winstring3, sizeof(winstring3), "~g~~>~~w~ ] ~g~~<~ "); } // White
            if(PlayerInfo[playerid][pTurn3] == 5) { format(winstring3, sizeof(winstring3), "~g~~>~~b~ ] ~g~~<~ "); } // Blue
            if(PlayerInfo[playerid][pTurn3] == 6) { format(winstring3, sizeof(winstring3), "~g~~>~~y~ ] ~g~~<~ "); } // Yellow

            new string[128];
            if(PlayerInfo[playerid][pTurn1] == PlayerInfo[playerid][pTurn2] && PlayerInfo[playerid][pTurn2] == PlayerInfo[playerid][pTurn3])
            {
                format(string, sizeof(string), " %s %s %s~n~ ~y~JACKPOT ~g~$1000!",winstring1, winstring2, winstring3);
                GivePlayerCash(playerid, 1000);
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                Businesses[GetPlayerVirtualWorld(playerid)][Till]-=1000;
                Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
            }
            else
            {
                format(string, sizeof(string), " %s %s %s ~r~ Nothing",winstring1, winstring2, winstring3);
                Businesses[GetPlayerVirtualWorld(playerid)][Products]--;
            }
            GameTextForPlayer(playerid, string, 3500, 3);
            return 1;
        }
        new string[128];
        if(rancas == 1)
        {
            format(string, sizeof(string), "~g~~>~~p~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 3; // Purple
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 3; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 3; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 3; return 1; }
            CasinoRolling(playerid);
        }
        else if(rancas == 2)
        {
            format(string, sizeof(string), "~g~~>~~r~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 1; // Red
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 1; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 1; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 1; return 1; }
            CasinoRolling(playerid);
        }
        else if(rancas == 3)
        {
            format(string, sizeof(string), "~g~~>~~y~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 6; // Yellow
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 6; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 6; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 6; return 1; }
            CasinoRolling(playerid);
        }
        else if(rancas == 4)
        {
            format(string, sizeof(string), "~g~~>~~w~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 4; // White
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 4; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 4; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 4; return 1; }
            CasinoRolling(playerid);
        }
        else if(rancas == 5)
        {
            format(string, sizeof(string), "~g~~>~~b~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 5; // Blue
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 5; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 5; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 5; return 1; }
            CasinoRolling(playerid);
        }
        else if(rancas == 6)
        {
            format(string, sizeof(string), "~g~~>~~l~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 2; // Black
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 2; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 2; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 2; return 1; }
            CasinoRolling(playerid);
        }
    }
    return 1;
}

forward CasinoBetting(playerid);
public CasinoBetting(playerid)
{
    //PlayerInfo[playerid][pCasino] = 1; // Red
    //PlayerInfo[playerid][pCasino] = 2; // Black
    //PlayerInfo[playerid][pCasino] = 3; // Purple
    //PlayerInfo[playerid][pCasino] = 4; // White
    //PlayerInfo[playerid][pCasino] = 5; // Blue
    //PlayerInfo[playerid][pCasino] = 6; // Yellow

    // RED - BLACK - PURPLE - WHITE - BLUE - YELLOW
    new rancas = random(6);
    if(PlayerInfo[playerid][pCasino] != 0)
    {
        if(PlayerInfo[playerid][pTurn1] != 0 && PlayerInfo[playerid][pTurn2] != 0 && PlayerInfo[playerid][pTurn3] != 0)
        {
            new winstring1[68];
            new winstring2[68];
            new winstring3[68];
            if(PlayerInfo[playerid][pTurn1] == 1) { format(winstring1, sizeof(winstring1), "~g~~>~~r~ ] ~g~~<~ "); } // Red
            if(PlayerInfo[playerid][pTurn1] == 2) { format(winstring1, sizeof(winstring1), "~g~~>~~l~ ] ~g~~<~ "); } // Black
            if(PlayerInfo[playerid][pTurn1] == 3) { format(winstring1, sizeof(winstring1), "~g~~>~~p~ ] ~g~~<~ "); } // Purple
            if(PlayerInfo[playerid][pTurn1] == 4) { format(winstring1, sizeof(winstring1), "~g~~>~~w~ ] ~g~~<~ "); } // White
            if(PlayerInfo[playerid][pTurn1] == 5) { format(winstring1, sizeof(winstring1), "~g~~>~~b~ ] ~g~~<~ "); } // Blue
            if(PlayerInfo[playerid][pTurn1] == 6) { format(winstring1, sizeof(winstring1), "~g~~>~~y~ ] ~g~~<~ "); } // Yellow

            if(PlayerInfo[playerid][pTurn2] == 1) { format(winstring2, sizeof(winstring2), "~g~~>~~r~ ] ~g~~<~ "); } // Red
            if(PlayerInfo[playerid][pTurn2] == 2) { format(winstring2, sizeof(winstring2), "~g~~>~~l~ ] ~g~~<~ "); } // Black
            if(PlayerInfo[playerid][pTurn2] == 3) { format(winstring2, sizeof(winstring2), "~g~~>~~p~ ] ~g~~<~ "); } // Purple
            if(PlayerInfo[playerid][pTurn2] == 4) { format(winstring2, sizeof(winstring2), "~g~~>~~w~ ] ~g~~<~ "); } // White
            if(PlayerInfo[playerid][pTurn2] == 5) { format(winstring2, sizeof(winstring2), "~g~~>~~b~ ] ~g~~<~ "); } // Blue
            if(PlayerInfo[playerid][pTurn2] == 6) { format(winstring2, sizeof(winstring2), "~g~~>~~y~ ] ~g~~<~ "); } // Yellow

            if(PlayerInfo[playerid][pTurn3] == 1) { format(winstring3, sizeof(winstring3), "~g~~>~~r~ ] ~g~~<~ "); } // Red
            if(PlayerInfo[playerid][pTurn3] == 2) { format(winstring3, sizeof(winstring3), "~g~~>~~l~ ] ~g~~<~ "); } // Black
            if(PlayerInfo[playerid][pTurn3] == 3) { format(winstring3, sizeof(winstring3), "~g~~>~~p~ ] ~g~~<~ "); } // Purple
            if(PlayerInfo[playerid][pTurn3] == 4) { format(winstring3, sizeof(winstring3), "~g~~>~~w~ ] ~g~~<~ "); } // White
            if(PlayerInfo[playerid][pTurn3] == 5) { format(winstring3, sizeof(winstring3), "~g~~>~~b~ ] ~g~~<~ "); } // Blue
            if(PlayerInfo[playerid][pTurn3] == 6) { format(winstring3, sizeof(winstring3), "~g~~>~~y~ ] ~g~~<~ "); } // Yellow

            new string[128];
            if(PlayerInfo[playerid][pTurn1] == PlayerInfo[playerid][pTurn2] && PlayerInfo[playerid][pTurn2] == PlayerInfo[playerid][pTurn3] && PlayerInfo[playerid][pCasino] == PlayerInfo[playerid][pTurn3])
            {
                format(string, sizeof(string), " %s %s %s~n~ ~y~JACKPOT ~g~$1500!",winstring1, winstring2, winstring3);
                GivePlayerCash(playerid, 1500);
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            }
            else
            {
                format(string, sizeof(string), " %s %s %s ~r~ Nothing",winstring1, winstring2, winstring3);
            }
            GameTextForPlayer(playerid, string, 3500, 3);
            return 1;
        }
        new string[128];
        if(rancas == 1)
        {
            format(string, sizeof(string), "~g~~>~~p~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 3; // Purple
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 3; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 3; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 3; return 1; }
            CasinoBetting(playerid);
        }
        else if(rancas == 2)
        {
            format(string, sizeof(string), "~g~~>~~r~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 1; // Red
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 1; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 1; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 1; return 1; }
            CasinoBetting(playerid);
        }
        else if(rancas == 3)
        {
            format(string, sizeof(string), "~g~~>~~y~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 6; // Yellow
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 6; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 6; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 6; return 1; }
            CasinoBetting(playerid);
        }
        else if(rancas == 4)
        {
            format(string, sizeof(string), "~g~~>~~w~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 4; // White
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 4; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 4; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 4; return 1; }
            CasinoBetting(playerid);
        }
        else if(rancas == 5)
        {
            format(string, sizeof(string), "~g~~>~~b~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 5; // Blue
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 5; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 5; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 5; return 1; }
            CasinoBetting(playerid);
        }
        else if(rancas == 6)
        {
            format(string, sizeof(string), "~g~~>~~l~ ] ~g~~<~ ");
            GameTextForPlayer(playerid, string, 1600, 3);
            PlayerInfo[playerid][pTurn1] = 2; // Black
            if(PlayerInfo[playerid][pTurn1] == 0){ PlayerInfo[playerid][pTurn1] = 2; return 1; }
            if(PlayerInfo[playerid][pTurn2] == 0){ PlayerInfo[playerid][pTurn2] = 2; return 1; }
            if(PlayerInfo[playerid][pTurn3] == 0){ PlayerInfo[playerid][pTurn3] = 2; return 1; }
            CasinoBetting(playerid);
        }
    }
    return 1;
}

new gItemList2[(MAX_ITEMS+1)*(MAX_ITEM_NAME+3)];
InventoryOnDialogResponse(playerid, dialogid, response, inputtext[])
{
    if(dialogid!=INV_DIALOG_ID)return 1;
    if(!GetPVarInt(playerid,"PUSINGDIALOG"))return 1;
    if(!response)return 1;
    if(!strcmp(inputtext,"Amount",true,6))
    {ShowInventory(playerid); return 1; }
    format(gItemList2,MAX_ITEM_NAME,inputtext[strfind(inputtext,"\t")+2]);
    if(!CallLocalFunction("OnPlayerUseItem","is",playerid,gItemList2))SetPVarInt(playerid,"PUSINGDIALOG",0);
    return 1;
}
stock _GetItemNamePVar(playerid,item)
{
    new tmp[128];
    new tmp2[MAX_ITEM_NAME];
    format(tmp,128,"PITEMNAME%d",item);
    GetPVarString(playerid,tmp,tmp2,MAX_ITEM_NAME);
    return tmp2;
}
stock _SetItemNamePVar(playerid,item,ItemName[])
{
    new tmp[MAX_ITEM_NAME];
    format(tmp,MAX_ITEM_NAME,"PITEMNAME%d",item);
    SetPVarString(playerid,tmp,ItemName);
}
stock _GetItemAmountPVar(playerid,item)
{
    new tmp[128];
    format(tmp,128,"PITEMAMOUNT%d",item);
    return GetPVarInt(playerid,tmp);
}
stock _SetItemAmountPVar(playerid,item,Amount)
{
    new tmp[128];
    format(tmp,128,"PITEMAMOUNT%d",item);
    SetPVarInt(playerid,tmp,Amount);
}
stock AddItem(playerid,ItemName[],Amount)
{
    new slot=-1;
    for(new item;item<MAX_ITEMS;item++)
    {
        if(!_GetItemAmountPVar(playerid,item))
        {
            if(slot==-1)slot=item;
            continue;
        }
        if(!strcmp(_GetItemNamePVar(playerid,item),ItemName,true))
        {
            _SetItemAmountPVar(playerid,item,_GetItemAmountPVar(playerid,item)+Amount);
            if(_GetItemAmountPVar(playerid,item)<=0)_SetItemAmountPVar(playerid,item,0);
            if(_GetItemAmountPVar(playerid,item)>MAX_ITEM_STACK)
            {
                _SetItemAmountPVar(playerid,item,MAX_ITEM_STACK);
                return 2;
            }
            return 1;
        }
    }
    if(slot>-1)
    {
        _SetItemNamePVar(playerid,slot,ItemName);
        _SetItemAmountPVar(playerid,slot,Amount);
        if(_GetItemAmountPVar(playerid,slot)>MAX_ITEM_STACK)
        {
            _SetItemAmountPVar(playerid,slot,MAX_ITEM_STACK);
            return 2;
        }
        return 1;
    }
    return 0;
}

stock RemoveItem(playerid,ItemName[],Amount)
{
    for(new item;item<MAX_ITEMS;item++)
    {
        if(!_GetItemAmountPVar(playerid,item))continue;
        if(!strcmp(_GetItemNamePVar(playerid,item),ItemName,true))
        {
            _SetItemAmountPVar(playerid,item,_GetItemAmountPVar(playerid,item)-Amount);
            if(_GetItemAmountPVar(playerid,item)<=0)_SetItemAmountPVar(playerid,item,0);
            if(_GetItemAmountPVar(playerid,item)>MAX_ITEM_STACK)
            {
                _SetItemAmountPVar(playerid,item,MAX_ITEM_STACK);
                SaveInventoryMySQL(playerid);
                return 2;
            }
            return 1;
        }
    }
    return 0;
}

stock PlayerHasItem(playerid,ItemName[])
{
    for(new item;item<MAX_ITEMS;item++)
    {
        if(!_GetItemAmountPVar(playerid,item))continue;
        if(!strcmp(_GetItemNamePVar(playerid,item),ItemName,false))return _GetItemAmountPVar(playerid,item);
    }
    return 0;
}

stock GetPlayerItemInfo(playerid,&idx,ItemName[],len=sizeof(ItemName),&Amount)
{
    if(idx>=MAX_ITEMS)return 0;
    format(ItemName,len,_GetItemNamePVar(playerid,idx));
    Amount=_GetItemAmountPVar(playerid,idx);
    idx++;
    return 1;
}

stock ResetPlayerInventory(playerid)
{
    for(new item;item<MAX_ITEMS;item++)_SetItemAmountPVar(playerid,item,0);
    new String[1024];
    format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv1` = '%s', `Inv1a` = '%d', `Inv2` = '%s', `Inv2a` = '%d' WHERE `UserID` = '%d'"
        ,_GetItemNamePVar(playerid,0),_GetItemAmountPVar(playerid,0),_GetItemNamePVar(playerid,1),_GetItemAmountPVar(playerid,1),PlayerInfo[playerid][pDatabaseID]);
    mysql_query(String);

    format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv3` = '%s', `Inv3a` = '%d', `Inv4` = '%s', `Inv4a` = '%d' WHERE `UserID` = '%d'"
        ,_GetItemNamePVar(playerid,2),_GetItemAmountPVar(playerid,2),_GetItemNamePVar(playerid,3),_GetItemAmountPVar(playerid,3),PlayerInfo[playerid][pDatabaseID]);
    mysql_query(String);

    format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv5` = '%s', `Inv5a` = '%d', `Inv6` = '%s', `Inv6a` = '%d' WHERE `UserID` = '%d'"
        ,_GetItemNamePVar(playerid,4),_GetItemAmountPVar(playerid,4),_GetItemNamePVar(playerid,5),_GetItemAmountPVar(playerid,5),PlayerInfo[playerid][pDatabaseID]);
    mysql_query(String);

    format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv7` = '%s', `Inv7a` = '%d', `Inv8` = '%s', `Inv8a` = '%d' WHERE `UserID` = '%d'"
        ,_GetItemNamePVar(playerid,6),_GetItemAmountPVar(playerid,6),_GetItemNamePVar(playerid,7),_GetItemAmountPVar(playerid,7),PlayerInfo[playerid][pDatabaseID]);
    mysql_query(String);

    format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv9` = '%s', `Inv9a` = '%d', `Inv10` = '%s', `Inv10a` = '%d' WHERE `UserID` = '%d'"
        ,_GetItemNamePVar(playerid,8),_GetItemAmountPVar(playerid,8),_GetItemNamePVar(playerid,9),_GetItemAmountPVar(playerid,9),PlayerInfo[playerid][pDatabaseID]);
    mysql_query(String);

    format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv10` = '%s', `Inv10a` = '%d', `Inv11` = '%s', `Inv11a` = '%d' WHERE `UserID` = '%d'"
        ,_GetItemNamePVar(playerid,9),_GetItemAmountPVar(playerid,9),_GetItemNamePVar(playerid,10),_GetItemAmountPVar(playerid,10),PlayerInfo[playerid][pDatabaseID]);
    mysql_query(String);
}

stock ShowInventory(playerid)
{
    gItemList2="";
    for(new item;item<MAX_ITEMS;item++)
    {
        if(!strlen(_GetItemNamePVar(playerid,item))||!_GetItemAmountPVar(playerid,item))continue;
        format(gItemList2,sizeof(gItemList2),"%s\n%d\t\t%s",gItemList2,_GetItemAmountPVar(playerid,item),_GetItemNamePVar(playerid,item));
    }
    format(gItemList2,sizeof(gItemList2),"Cantitate\t\tNume obiect%s",gItemList2);
    ShowPlayerDialog(playerid,INV_DIALOG_ID,DIALOG_STYLE_LIST,"Inventar",gItemList2,"Use","Close");
    SetPVarInt(playerid,"PUSINGDIALOG",1);
    
    return 1;
}

forward LoadInventoryMySQL(playerid);
public LoadInventoryMySQL(playerid)
{
    new resultline[384];
    new playernotes[16][128];
    new query[256];

    if(PlayerInfo[playerid][pDatabaseID] == INVALID_MYSQL_ID) { return 1; }

    format(query, sizeof(query), "SELECT Inv1, Inv1a, Inv2, Inv2a, Inv3, Inv3a, Inv4, Inv4a, Inv5, Inv5a, Inv6, Inv6a, Inv7, Inv7a, Inv8, Inv8a, Inv9,  Inv9a, Inv10, Inv10a FROM Accounts WHERE UserID='%d'",PlayerInfo[playerid][pDatabaseID]);
    mysql_query(query);
    mysql_store_result();
    //Load Player Extras
    if(mysql_fetch_row(resultline)==1)
    {
        split(resultline, playernotes, '|');
        AddItem(playerid,playernotes[0],strval(playernotes[1]));
        AddItem(playerid,playernotes[2],strval(playernotes[3]));
        AddItem(playerid,playernotes[4],strval(playernotes[5]));
        AddItem(playerid,playernotes[6],strval(playernotes[7]));
        AddItem(playerid,playernotes[8],strval(playernotes[9]));
        AddItem(playerid,playernotes[10],strval(playernotes[11]));
        AddItem(playerid,playernotes[11],strval(playernotes[12]));
        AddItem(playerid,playernotes[12],strval(playernotes[13]));
        AddItem(playerid,playernotes[14],strval(playernotes[15]));
        mysql_free_result();
    }
    else
    {
        mysql_free_result();
        printf("[Warning] Player %d inventory was not available.",playerid);
    }
    return 1;
}

stock SaveInventoryMySQL(playerid)
{
    for(new item;item<MAX_ITEMS;item++)
    {
        if(_GetItemAmountPVar(playerid,item)<=0)_SetItemAmountPVar(playerid,item,0);
        if(_GetItemAmountPVar(playerid,item)>=1)
        {
            new String[ 1024 ];
            if(!strlen(_GetItemNamePVar(playerid,item))||!_GetItemAmountPVar(playerid,item))continue;
            format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv1` = '%s', `Inv1a` = '%d', `Inv2` = '%s', `Inv2a` = '%d' WHERE `UserID` = '%d'"
            ,_GetItemNamePVar(playerid,0),_GetItemAmountPVar(playerid,0),_GetItemNamePVar(playerid,1),_GetItemAmountPVar(playerid,1),PlayerInfo[playerid][pDatabaseID]);
            mysql_query(String);
            //printf("%s",String);
            format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv3` = '%s', `Inv3a` = '%d', `Inv4` = '%s', `Inv4a` = '%d' WHERE `UserID` = '%d'"
            ,_GetItemNamePVar(playerid,2),_GetItemAmountPVar(playerid,2),_GetItemNamePVar(playerid,3),_GetItemAmountPVar(playerid,3),PlayerInfo[playerid][pDatabaseID]);
            mysql_query(String);
            //printf("%s",String);
            format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv5` = '%s', `Inv5a` = '%d', `Inv6` = '%s', `Inv6a` = '%d' WHERE `UserID` = '%d'"
            ,_GetItemNamePVar(playerid,4),_GetItemAmountPVar(playerid,4),_GetItemNamePVar(playerid,5),_GetItemAmountPVar(playerid,5),PlayerInfo[playerid][pDatabaseID]);
            mysql_query(String);
            //printf("%s",String);
            format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv7` = '%s', `Inv7a` = '%d', `Inv8` = '%s', `Inv8a` = '%d' WHERE `UserID` = '%d'"
            ,_GetItemNamePVar(playerid,6),_GetItemAmountPVar(playerid,6),_GetItemNamePVar(playerid,7),_GetItemAmountPVar(playerid,7),PlayerInfo[playerid][pDatabaseID]);
            mysql_query(String);
            //printf("%s",String);
            format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv9` = '%s', `Inv9a` = '%d', `Inv10` = '%s', `Inv10a` = '%d' WHERE `UserID` = '%d'"
            ,_GetItemNamePVar(playerid,8),_GetItemAmountPVar(playerid,8),_GetItemNamePVar(playerid,9),_GetItemAmountPVar(playerid,9),PlayerInfo[playerid][pDatabaseID]);
            mysql_query(String);
            //printf("%s",String);
            format( String, sizeof( String ), "UPDATE `Accounts` SET `Inv10` = '%s', `Inv10a` = '%d', `Inv11` = '%s', `Inv11a` = '%d' WHERE `UserID` = '%d'"
            ,_GetItemNamePVar(playerid,9),_GetItemAmountPVar(playerid,9),_GetItemNamePVar(playerid,10),_GetItemAmountPVar(playerid,10),PlayerInfo[playerid][pDatabaseID]);
            mysql_query(String);
            //printf("%s",String);
        }
    }
    return 1;
}


ResetDamages(playerid)
{
	for(new i = 0; i < MAX_WEAPONS; i++)
	{
		for(new z = 0; z < MAX_BODY_PARTS; z++)
		{
			Damage[playerid][i][Damages][z] = 0;
		}
	}
}

CountDamages(playerid)
{
	new count = 0;
	for(new i = 0; i < MAX_WEAPONS; i++)
	{
		for(new z = 3; z <= 9; z++) // We start at 3 because 3 is the first body part id and the last one is 9, 1,2 and 10 are invalid.
		{
			if(Damage[playerid][i][Damages][z] > 0)
			{
				count += Damage[playerid][i][Damages][z];
			}
		}
	}
	return count;
}

GetBodyPartName(bodypart)
{
	new part[20];
	switch(bodypart)
	{
		case BODY_PART_TORSO:
		{
			Format:part("PIEPT");
		}
		case BODY_PART_GROIN:
		{
			Format:part("GAT");
		}
		case BODY_PART_LEFT_ARM:
		{
			Format:part("MANA STANGA");
		}
		case BODY_PART_RIGHT_ARM:
		{
			Format:part("MANA DREAPTA");
		}
		case BODY_PART_LEFT_LEG:
		{
			Format:part("PICIORUL STANG");
		}
		case BODY_PART_RIGHT_LEG:
		{
			Format:part("PICIORUL DREPT");
		}
		case BODY_PART_HEAD:
		{
			Format:part("CAP");
		}
		default:
		{
			Format:part("NIMIC");
		}
	}
	return part;
}

WeaponName(WeaponID)
{
	new name[20];
	GetWeaponName(WeaponID, name, 20);
	switch(WeaponID)
	{
		case 24:
			Format:name("Desert Eagle");
		case 0:
			Format:name("Pumn");
		case 5:
			Format:name("Bata de Baseball");
 		case 4:
			Format:name("Cutit");
		case 22:
			Format:name("Colt 45");
		case 23:
			Format:name("Silenced Pistol");
		case 25:
			Format:name("Shotgun");
		case 30:
			Format:name("AK47");
        case 31:
			Format:name("M4A1");
		case 29:
			Format:name("MP5");
		case 6:
			Format:name("Lopata");
	}
	return name;
}

DisplayDamages(toplayer, playerid)
{
	new title[50],
		damage[100],
		gText[1000],
		Name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, Name[playerid], MAX_PLAYER_NAME);
	Format:title("Ranile lui %s", Name[playerid]);
	if(CountDamages(playerid) == 0) {
		return ShowPlayerDialog(toplayer, D_DAMAGES, DIALOG_STYLE_LIST, title, "Nu este nici-o rana de afisat.", ">>>", "");
	}
	for(new i = 0; i < MAX_WEAPONS; i++)
	{
		for(new z = 3; z <= 9; z++)
		{
			if(Damage[playerid][i][Damages][z] > 0)
			{
				switch(i)
				{
					case 0..15:
						Format:damage("%d lovituri cu %s in %s\n", Damage[playerid][i][Damages][z], WeaponName(i), GetBodyPartName(z));
					default:
						Format:damage("%d gloante (%s) in %s\n", Damage[playerid][i][Damages][z], WeaponName(i), GetBodyPartName(z));
				}
				strins(gText, damage, 0);
			}
		}
	}
	ShowPlayerDialog(toplayer, D_DAMAGES, DIALOG_STYLE_LIST, title, gText, "Inchide", "");
	return 1;
}

stock DoDamage(playerid, targetid, bodypart, weaponid) // GuSo
{
    static
        bodyparttext[16],
        string[68],
        DamageType,
        Float:IncreasedDamage,
        Float:health,
        Float:armour;
    GetPlayerHealth(targetid, health);
    GetPlayerArmour(targetid, armour);
    GetWeaponNameEx(weaponid, string, sizeof(string));
    switch(bodypart) {
        case 1: bodyparttext = "Cap",DamageType = 1;
        case 2: bodyparttext = "Trunchi",DamageType = 2;
        case 3: bodyparttext = "Picioare",DamageType = 3; }
    switch(weaponid) {
        case 23:
        {
            IncreasedDamage = SDPistolDMG; // SD Pistol
        }
        case 24:
        {
            IncreasedDamage = DeagleDMG; // Desert Eagle
        }
        case 25:
        {
            IncreasedDamage = ShotgunDMG; // Shotgun
        }
        case 28:
        {
            IncreasedDamage = UziDMG; // UZI
        }
        case 30:
        {
            IncreasedDamage = AK47DMG; // AK47
        }
        case 31:
        {
            IncreasedDamage = M4A1DMG; // M4A1
        }
        case 32:
        {
            IncreasedDamage = Tec9DMG; // Tec9
        }
        case 33:
        {
            IncreasedDamage = CountryRifleDMG; // Country Rifle
        }
    }
    if(armour > 10) {
        if(DamageType == 1) { IncreasedDamage += 8.6; }
        else if(DamageType == 2) { IncreasedDamage += 6.6; }
        else if(DamageType == 3) { IncreasedDamage += 4.5; }
        SetPlayerArmour(targetid, armour-IncreasedDamage); }
    else if(health > 13) {
        if(DamageType == 1) { IncreasedDamage += 8.6; }
        else if(DamageType == 2) { IncreasedDamage += 6.6; }
        else if(DamageType == 3) { IncreasedDamage += 4.5; }
        SetPlayerHealth(targetid, health-IncreasedDamage); }
    if(health-IncreasedDamage == 0 || health-IncreasedDamage < 0) { Wounded[targetid] = 1; }
    printf("DAMAGE: %s l-a impuscat pe %s cu un %s (Body part: %s DMG: %.2f)",GetPlayerNameEx(playerid),GetPlayerNameEx(targetid),string,bodyparttext,IncreasedDamage);
    return 1;
}

ReportMSG(color,const string[])// made by sOuL aka Diogo & Kevin
{
    new string1[256], string2[256], string3[256];
    if(strlen(string) > 80)
    {
        format(string1, sizeof(string1), string);
        format(string2, sizeof(string2), string);
        strdel(string1, 90, 256);
        strdel(string2, 0, 90);
        format(string3, sizeof(string3), "%s ...", string1);
        AdministratorMessage(color, string3,1);
        format(string3, sizeof(string3), "... %s", string2);
        AdministratorMessage(color, string3,1);
        return true;
    }
    else
    {
        AdministratorMessage(color, string,1);
        return true;
    }
}

stock IsPlayerInZone(playerid, zone[])
{
    new TmpZone[MAX_ZONE_NAME];
    GetPlayer3DZone(playerid, TmpZone, sizeof(TmpZone));
    for(new i = 0; i != sizeof(gSAZones); i++)
    {
        if(strfind(TmpZone, zone, true) != -1)
            return 1;
    }
    return 0;
}

stock GetVehicleZone(vehicleid, zone[], len)
{
    new Float:x, Float:y, Float:z;
    GetVehiclePos(vehicleid, x, y, z);
    for(new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
        {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}

stock GetCoords2DZone(Float:x, Float:y, zone[], len)
{
    for(new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
        {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}


stock GetPlayer2DZone(playerid, zone[], len)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
        {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}

stock GetPlayer3DZone(playerid, zone[], len)
{
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    for(new i = 0; i != sizeof(gSAZones); i++ )
    {
        if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4] && z >= gSAZones[i][SAZONE_AREA][2] && z <= gSAZones[i][SAZONE_AREA][5])
        {
            return format(zone, len, gSAZones[i][SAZONE_NAME], 0);
        }
    }
    return 0;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    return 1;
}

public KiloSecTimers()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(gPlayerLogged[i])
        {
            if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
            {
                VehicleInfo[GetPlayerVehicleID(i)][vKilometri] = VehicleInfo[GetPlayerVehicleID(i)][vKilometri] + 1;
            }
        }
    }
}

public OnPlayerCommandText(playerid, cmdtext[])
{
    return 1;
}
COMMAND:changeunit(playerid, params[])
{
 if(PlayerInfo[playerid][pFaction] == 3)
 {
 ShowPlayerDialog(playerid, 575, DIALOG_STYLE_INPUT, "Introdu-ti unitatea", "Introdu unitatea cu care vrei sa patrulezi. (( Unitatile puse la troll se sanctioneaza! ))", "Anunta", "Renunta");
 }
  else
  {
  SendClientMessage(playerid, COLOR_GREY, "Factiune invalida.");
  }
}
